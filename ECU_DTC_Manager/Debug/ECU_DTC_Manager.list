
ECU_DTC_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800c4b4  0800c4b4  0000d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c688  0800c688  0000e010  2**0
                  CONTENTS
  4 .ARM          00000008  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c690  0800c690  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c690  0800c690  0000d690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c694  0800c694  0000d694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800c698  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  20000010  0800c6a8  0000e010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ec4  0800c6a8  0000eec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c488  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e83  00000000  00000000  0002a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123a  00000000  00000000  0002faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250ce  00000000  00000000  00030ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c786  00000000  00000000  00055db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e268d  00000000  00000000  00072536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061fc  00000000  00000000  00154c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c49c 	.word	0x0800c49c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800c49c 	.word	0x0800c49c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <EEPROM_CS_LOW>:
#include "eeprom_25lc256.h"

extern SPI_HandleTypeDef hspi1;
osSemaphoreId_t spi_dma_semaphore;

static void EEPROM_CS_LOW(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <EEPROM_CS_LOW+0x14>)
 8000556:	f003 f8f5 	bl	8003744 <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020400 	.word	0x40020400

08000564 <EEPROM_CS_HIGH>:

static void EEPROM_CS_HIGH(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	4802      	ldr	r0, [pc, #8]	@ (8000578 <EEPROM_CS_HIGH+0x14>)
 800056e:	f003 f8e9 	bl	8003744 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020400 	.word	0x40020400

0800057c <EEPROM_WriteEnable>:

/* EEPROM에 데이터를 쓰기 전에 
 * 쓰기 활성화 명령을 전송해야 한다. 
 */
static void EEPROM_WriteEnable(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 8000582:	2306      	movs	r3, #6
 8000584:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_LOW();
 8000586:	f7ff ffe1 	bl	800054c <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800058a:	1df9      	adds	r1, r7, #7
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	2201      	movs	r2, #1
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <EEPROM_WriteEnable+0x28>)
 8000592:	f006 f8be 	bl	8006712 <HAL_SPI_Transmit>
    EEPROM_CS_HIGH();
 8000596:	f7ff ffe5 	bl	8000564 <EEPROM_CS_HIGH>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200002c8 	.word	0x200002c8

080005a8 <EEPROM_WaitForWriteInProgress>:
/* 
 * EEPROM에 데이터 저장 시간을 고려하여
 * EEPROM의 상태 레지스터를 계속 확인하고
 * 내부 쓰기 작업이 끝나면 다음 명령을 보내기 위함
 */
static void EEPROM_WaitForWriteInProgress(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_RDSR;
 80005ae:	2305      	movs	r3, #5
 80005b0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    EEPROM_CS_LOW();
 80005b2:	f7ff ffcb 	bl	800054c <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80005b6:	1df9      	adds	r1, r7, #7
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <EEPROM_WaitForWriteInProgress+0x3c>)
 80005be:	f006 f8a8 	bl	8006712 <HAL_SPI_Transmit>
    do {
        HAL_SPI_Receive(&hspi1, &status, 1, 100);
 80005c2:	1db9      	adds	r1, r7, #6
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <EEPROM_WaitForWriteInProgress+0x3c>)
 80005ca:	f006 f9de 	bl	800698a <HAL_SPI_Receive>
    } while (status & 0x01); // 상태 레지스터의 WIP(Write-In-Progress) 비트가 0이 될 때까지 대기
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f4      	bne.n	80005c2 <EEPROM_WaitForWriteInProgress+0x1a>
    EEPROM_CS_HIGH();
 80005d8:	f7ff ffc4 	bl	8000564 <EEPROM_CS_HIGH>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200002c8 	.word	0x200002c8

080005e8 <EEPROM_Init>:

void EEPROM_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    // DMA 콜백 함수에서 Release
    spi_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2001      	movs	r0, #1
 80005f2:	f008 fb42 	bl	8008c7a <osSemaphoreNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <EEPROM_Init+0x24>)
 80005fa:	6013      	str	r3, [r2, #0]
    if (spi_dma_semaphore == NULL) {
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <EEPROM_Init+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <EEPROM_Init+0x20>
        Error_Handler();
 8000604:	f000 fc0e 	bl	8000e24 <Error_Handler>
    }
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000002c 	.word	0x2000002c

08000610 <EEPROM_Write_DTC>:

HAL_StatusTypeDef EEPROM_Write_DTC(uint16_t address, uint8_t* pData, uint16_t size) {
 8000610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4613      	mov	r3, r2
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	466b      	mov	r3, sp
 8000624:	461e      	mov	r6, r3
    EEPROM_WaitForWriteInProgress();
 8000626:	f7ff ffbf 	bl	80005a8 <EEPROM_WaitForWriteInProgress>
    EEPROM_WriteEnable();
 800062a:	f7ff ffa7 	bl	800057c <EEPROM_WriteEnable>

    uint8_t tx_buffer[size + 3];          // 명령어(1) + 데이터 저장할 주소(2) + 데이터(size) 저장
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	1cd9      	adds	r1, r3, #3
 8000632:	1e4b      	subs	r3, r1, #1
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	460a      	mov	r2, r1
 8000638:	2300      	movs	r3, #0
 800063a:	4690      	mov	r8, r2
 800063c:	4699      	mov	r9, r3
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800064a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800064e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000652:	460a      	mov	r2, r1
 8000654:	2300      	movs	r3, #0
 8000656:	4614      	mov	r4, r2
 8000658:	461d      	mov	r5, r3
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	00eb      	lsls	r3, r5, #3
 8000664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000668:	00e2      	lsls	r2, r4, #3
 800066a:	460b      	mov	r3, r1
 800066c:	3307      	adds	r3, #7
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	ebad 0d03 	sub.w	sp, sp, r3
 8000676:	466b      	mov	r3, sp
 8000678:	3300      	adds	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
    tx_buffer[0] = EEPROM_CMD_WRITE;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2202      	movs	r2, #2
 8000680:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = (address >> 8) & 0xFF; // 주소 상위 바이트
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2da      	uxtb	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = address & 0xFF;        // 주소 하위 바이트
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	709a      	strb	r2, [r3, #2]
    memcpy(&tx_buffer[3], pData, size);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3303      	adds	r3, #3
 800069a:	88ba      	ldrh	r2, [r7, #4]
 800069c:	6839      	ldr	r1, [r7, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f00b feee 	bl	800c480 <memcpy>

    EEPROM_CS_LOW();
 80006a4:	f7ff ff52 	bl	800054c <EEPROM_CS_LOW>
    if (HAL_SPI_Transmit_DMA(&hspi1, tx_buffer, size + 3) != HAL_OK) {
 80006a8:	88bb      	ldrh	r3, [r7, #4]
 80006aa:	3303      	adds	r3, #3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <EEPROM_Write_DTC+0xe4>)
 80006b4:	f006 fc1c 	bl	8006ef0 <HAL_SPI_Transmit_DMA>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <EEPROM_Write_DTC+0xb6>
        EEPROM_CS_HIGH();
 80006be:	f7ff ff51 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00f      	b.n	80006e6 <EEPROM_Write_DTC+0xd6>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <EEPROM_Write_DTC+0xe8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2164      	movs	r1, #100	@ 0x64
 80006cc:	4618      	mov	r0, r3
 80006ce:	f008 fb5d 	bl	8008d8c <osSemaphoreAcquire>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <EEPROM_Write_DTC+0xd0>
        EEPROM_CS_HIGH();
 80006d8:	f7ff ff44 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 80006dc:	2303      	movs	r3, #3
 80006de:	e002      	b.n	80006e6 <EEPROM_Write_DTC+0xd6>
    }

    EEPROM_CS_HIGH();
 80006e0:	f7ff ff40 	bl	8000564 <EEPROM_CS_HIGH>
    return HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	46b5      	mov	sp, r6
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006f2:	bf00      	nop
 80006f4:	200002c8 	.word	0x200002c8
 80006f8:	2000002c 	.word	0x2000002c

080006fc <EEPROM_Read_DTCs>:

HAL_StatusTypeDef EEPROM_Read_DTCs(uint16_t address, uint8_t* pData, uint16_t size) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	4613      	mov	r3, r2
 800070a:	80bb      	strh	r3, [r7, #4]
    EEPROM_WaitForWriteInProgress();
 800070c:	f7ff ff4c 	bl	80005a8 <EEPROM_WaitForWriteInProgress>

    uint8_t tx_buffer[3]; // 명령어(1) + 주소(2)
    tx_buffer[0] = EEPROM_CMD_READ;
 8000710:	2303      	movs	r3, #3
 8000712:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = (address >> 8) & 0xFF;
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = address & 0xFF;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_LOW();
 8000724:	f7ff ff12 	bl	800054c <EEPROM_CS_LOW>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, pData, size + 3) != HAL_OK) {
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3303      	adds	r3, #3
 800072c:	b29b      	uxth	r3, r3
 800072e:	f107 010c 	add.w	r1, r7, #12
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	480e      	ldr	r0, [pc, #56]	@ (8000770 <EEPROM_Read_DTCs+0x74>)
 8000736:	f006 fc91 	bl	800705c <HAL_SPI_TransmitReceive_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <EEPROM_Read_DTCs+0x4c>
        EEPROM_CS_HIGH();
 8000740:	f7ff ff10 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	e00f      	b.n	8000768 <EEPROM_Read_DTCs+0x6c>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <EEPROM_Read_DTCs+0x78>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2164      	movs	r1, #100	@ 0x64
 800074e:	4618      	mov	r0, r3
 8000750:	f008 fb1c 	bl	8008d8c <osSemaphoreAcquire>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <EEPROM_Read_DTCs+0x66>
        EEPROM_CS_HIGH();
 800075a:	f7ff ff03 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 800075e:	2303      	movs	r3, #3
 8000760:	e002      	b.n	8000768 <EEPROM_Read_DTCs+0x6c>
    }

    EEPROM_CS_HIGH();
 8000762:	f7ff feff 	bl	8000564 <EEPROM_CS_HIGH>
    return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200002c8 	.word	0x200002c8
 8000774:	2000002c 	.word	0x2000002c

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f001 fb08 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f89a 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fad4 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fa6c 	bl	8000c64 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 f8f2 	bl	8000974 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000790:	f000 f942 	bl	8000a18 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000794:	f000 f974 	bl	8000a80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000798:	f000 f9a0 	bl	8000adc <MX_I2C2_Init>
  MX_SPI1_Init();
 800079c:	f000 f9cc 	bl	8000b38 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007a0:	f000 fa00 	bl	8000ba4 <MX_SPI2_Init>
  MX_UART4_Init();
 80007a4:	f000 fa34 	bl	8000c10 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PMIC_Init();
 80007a8:	f000 fb42 	bl	8000e30 <PMIC_Init>
  EEPROM_Init();
 80007ac:	f7ff ff1c 	bl	80005e8 <EEPROM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b0:	f008 f85e 	bl	8008870 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 80007b4:	4827      	ldr	r0, [pc, #156]	@ (8000854 <main+0xdc>)
 80007b6:	f008 f952 	bl	8008a5e <osMutexNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a26      	ldr	r2, [pc, #152]	@ (8000858 <main+0xe0>)
 80007be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  EepromMutexHandle = osMutexNew(&EepromMutex_attributes);
 80007c0:	4826      	ldr	r0, [pc, #152]	@ (800085c <main+0xe4>)
 80007c2:	f008 f94c 	bl	8008a5e <osMutexNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <main+0xe8>)
 80007ca:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 80007cc:	4a25      	ldr	r2, [pc, #148]	@ (8000864 <main+0xec>)
 80007ce:	2108      	movs	r1, #8
 80007d0:	2008      	movs	r0, #8
 80007d2:	f008 fb71 	bl	8008eb8 <osMessageQueueNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a23      	ldr	r2, [pc, #140]	@ (8000868 <main+0xf0>)
 80007da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  DTC_RequestQueueHandle = osMessageQueueNew(16, sizeof(DTC_RequestMessage_t), &DTC_RequestQueue_attributes);
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <main+0xf4>)
 80007de:	2104      	movs	r1, #4
 80007e0:	2010      	movs	r0, #16
 80007e2:	f008 fb69 	bl	8008eb8 <osMessageQueueNew>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <main+0xf8>)
 80007ea:	6013      	str	r3, [r2, #0]
  DTC_ResponseQueueHandle = osMessageQueueNew(1, sizeof(DTC_ResponseMessage_t), &DTC_ResponseQueue_attributes);
 80007ec:	4a21      	ldr	r2, [pc, #132]	@ (8000874 <main+0xfc>)
 80007ee:	2122      	movs	r1, #34	@ 0x22
 80007f0:	2001      	movs	r0, #1
 80007f2:	f008 fb61 	bl	8008eb8 <osMessageQueueNew>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000878 <main+0x100>)
 80007fa:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fc:	4a1f      	ldr	r2, [pc, #124]	@ (800087c <main+0x104>)
 80007fe:	2100      	movs	r1, #0
 8000800:	481f      	ldr	r0, [pc, #124]	@ (8000880 <main+0x108>)
 8000802:	f008 f87f 	bl	8008904 <osThreadNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a1e      	ldr	r2, [pc, #120]	@ (8000884 <main+0x10c>)
 800080a:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 800080c:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <main+0x110>)
 800080e:	2100      	movs	r1, #0
 8000810:	481e      	ldr	r0, [pc, #120]	@ (800088c <main+0x114>)
 8000812:	f008 f877 	bl	8008904 <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <main+0x118>)
 800081a:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <main+0x11c>)
 800081e:	2100      	movs	r1, #0
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <main+0x120>)
 8000822:	f008 f86f 	bl	8008904 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <main+0x124>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 800082c:	4a1c      	ldr	r2, [pc, #112]	@ (80008a0 <main+0x128>)
 800082e:	2100      	movs	r1, #0
 8000830:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <main+0x12c>)
 8000832:	f008 f867 	bl	8008904 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <main+0x130>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <main+0x134>)
 800083e:	2100      	movs	r1, #0
 8000840:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <main+0x138>)
 8000842:	f008 f85f 	bl	8008904 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <main+0x13c>)
 800084a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800084c:	f008 f834 	bl	80088b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <main+0xd8>
 8000854:	0800c618 	.word	0x0800c618
 8000858:	20000554 	.word	0x20000554
 800085c:	0800c658 	.word	0x0800c658
 8000860:	20000560 	.word	0x20000560
 8000864:	0800c600 	.word	0x0800c600
 8000868:	20000550 	.word	0x20000550
 800086c:	0800c628 	.word	0x0800c628
 8000870:	20000558 	.word	0x20000558
 8000874:	0800c640 	.word	0x0800c640
 8000878:	2000055c 	.word	0x2000055c
 800087c:	0800c54c 	.word	0x0800c54c
 8000880:	08001d29 	.word	0x08001d29
 8000884:	2000053c 	.word	0x2000053c
 8000888:	0800c570 	.word	0x0800c570
 800088c:	080018ed 	.word	0x080018ed
 8000890:	20000540 	.word	0x20000540
 8000894:	0800c594 	.word	0x0800c594
 8000898:	08001b55 	.word	0x08001b55
 800089c:	20000544 	.word	0x20000544
 80008a0:	0800c5b8 	.word	0x0800c5b8
 80008a4:	08001d05 	.word	0x08001d05
 80008a8:	20000548 	.word	0x20000548
 80008ac:	0800c5dc 	.word	0x0800c5dc
 80008b0:	08001d17 	.word	0x08001d17
 80008b4:	2000054c 	.word	0x2000054c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2234      	movs	r2, #52	@ 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00b fdae 	bl	800c428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b22      	ldr	r3, [pc, #136]	@ (800096c <SystemClock_Config+0xb4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a21      	ldr	r2, [pc, #132]	@ (800096c <SystemClock_Config+0xb4>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <SystemClock_Config+0xb4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <SystemClock_Config+0xb8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <SystemClock_Config+0xb8>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <SystemClock_Config+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4618      	mov	r0, r3
 800092a:	f005 fbe5 	bl	80060f8 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000934:	f000 fa76 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f005 f9f0 	bl	8005d38 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800095e:	f000 fa61 	bl	8000e24 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	@ 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_ADC1_Init+0x98>)
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <MX_ADC1_Init+0x9c>)
 800098a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <MX_ADC1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_ADC1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <MX_ADC1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009b4:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <MX_ADC1_Init+0xa0>)
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009d4:	f001 fa4e 	bl	8001e74 <HAL_ADC_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fa21 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <MX_ADC1_Init+0x98>)
 80009f4:	f001 fa82 	bl	8001efc <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 fa11 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000030 	.word	0x20000030
 8000a10:	40012000 	.word	0x40012000
 8000a14:	0f000001 	.word	0x0f000001

08000a18 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_CAN1_Init+0x64>)
 8000a20:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_CAN1_Init+0x60>)
 8000a66:	f001 fc77 	bl	8002358 <HAL_CAN_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 f9d8 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000078 	.word	0x20000078
 8000a7c:	40006400 	.word	0x40006400

08000a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f002 fe5b 	bl	8003778 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 f9ac 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000a0 	.word	0x200000a0
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_I2C2_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_I2C2_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_I2C2_Init+0x50>)
 8000b1a:	f002 fe2d 	bl	8003778 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 f97e 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000f4 	.word	0x200000f4
 8000b30:	40005800 	.word	0x40005800
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <MX_SPI1_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_SPI1_Init+0x64>)
 8000b8a:	f005 fd39 	bl	8006600 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 f946 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200002c8 	.word	0x200002c8
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <MX_SPI2_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bf6:	f005 fd03 	bl	8006600 <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c00:	f000 f910 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000320 	.word	0x20000320
 8000c0c:	40003800 	.word	0x40003800

08000c10 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <MX_UART4_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_UART4_Init+0x4c>)
 8000c48:	f006 feba 	bl	80079c0 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f8e7 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200004f8 	.word	0x200004f8
 8000c60:	40004c00 	.word	0x40004c00

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a2e      	ldr	r2, [pc, #184]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <MX_DMA_Init+0xc8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f001 ff65 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cac:	200b      	movs	r0, #11
 8000cae:	f001 ff7e 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	200d      	movs	r0, #13
 8000cb8:	f001 ff5d 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cbc:	200d      	movs	r0, #13
 8000cbe:	f001 ff76 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	200e      	movs	r0, #14
 8000cc8:	f001 ff55 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ccc:	200e      	movs	r0, #14
 8000cce:	f001 ff6e 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f001 ff4d 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f001 ff66 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2011      	movs	r0, #17
 8000ce8:	f001 ff45 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cec:	2011      	movs	r0, #17
 8000cee:	f001 ff5e 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	202f      	movs	r0, #47	@ 0x2f
 8000cf8:	f001 ff3d 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cfc:	202f      	movs	r0, #47	@ 0x2f
 8000cfe:	f001 ff56 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2105      	movs	r1, #5
 8000d06:	2038      	movs	r0, #56	@ 0x38
 8000d08:	f001 ff35 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d0c:	2038      	movs	r0, #56	@ 0x38
 8000d0e:	f001 ff4e 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	203b      	movs	r0, #59	@ 0x3b
 8000d18:	f001 ff2d 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d1c:	203b      	movs	r0, #59	@ 0x3b
 8000d1e:	f001 ff46 	bl	8002bae <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_GPIO_Init+0xf0>)
 8000dd8:	f002 fcb4 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <MX_GPIO_Init+0xf0>)
 8000df4:	f002 fb12 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dfc:	2311      	movs	r3, #17
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_GPIO_Init+0xf0>)
 8000e10:	f002 fb04 	bl	800341c <HAL_GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	@ 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <PMIC_Init>:

/*
 * PMIC 드라이버 초기화
 * RTOS 세마포어 생성
 */
void PMIC_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    i2c_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f007 ff1e 	bl	8008c7a <osSemaphoreNew>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <PMIC_Init+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
    if (i2c_dma_semaphore == NULL) {
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <PMIC_Init+0x24>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <PMIC_Init+0x20>
        // 세마포어 생성 실패 처리
        Error_Handler();
 8000e4c:	f7ff ffea 	bl	8000e24 <Error_Handler>
    }
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000564 	.word	0x20000564

08000e58 <PMIC_Read_Faults>:

/**
 * DMA를 사용하여 PMIC의 Fault 관련 레지스터들을 연속으로 read
 */
HAL_StatusTypeDef PMIC_Read_Faults(uint8_t* pData, uint16_t Size) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
    // HAL_I2C_Mem_Read_DMA 함수를 호출하여 Non-Blocking I2C 읽기 시작
    // FSM_STATE_REG(0x05) 레지스터부터 Size 바이트만큼 read
    if (HAL_I2C_Mem_Read_DMA(&hi2c1, MP5475_I2C_SLAVE_ADDR, FSM_STATE_REG, I2C_MEMADD_SIZE_8BIT, pData, Size) != HAL_OK) {
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2205      	movs	r2, #5
 8000e70:	21c0      	movs	r1, #192	@ 0xc0
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <PMIC_Read_Faults+0x4c>)
 8000e74:	f002 fdc4 	bl	8003a00 <HAL_I2C_Mem_Read_DMA>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <PMIC_Read_Faults+0x2a>
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00b      	b.n	8000e9a <PMIC_Read_Faults+0x42>
    }

    // DMA 전송이 완료될 때까지 세마포어 대기 (Blocked)
    if (osSemaphoreAcquire(i2c_dma_semaphore, 100) == osOK) {
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <PMIC_Read_Faults+0x50>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2164      	movs	r1, #100	@ 0x64
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f007 ff7f 	bl	8008d8c <osSemaphoreAcquire>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <PMIC_Read_Faults+0x40>
        return HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e000      	b.n	8000e9a <PMIC_Read_Faults+0x42>
    } else {
        return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
    }
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	20000564 	.word	0x20000564

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_MspInit+0x54>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a11      	ldr	r2, [pc, #68]	@ (8000f00 <HAL_MspInit+0x54>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x54>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_MspInit+0x54>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_MspInit+0x54>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_MspInit+0x54>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f001 fe40 	bl	8002b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_ADC_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d127      	bne.n	8000f76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_ADC_MspInit+0x80>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <HAL_ADC_MspInit+0x84>)
 8000f72:	f002 fa53 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40012000 	.word	0x40012000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <HAL_CAN_MspInit+0xa4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d13b      	bne.n	8001026 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <HAL_CAN_MspInit+0xac>)
 8001002:	f002 fa0b 	bl	800341c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2105      	movs	r1, #5
 800100a:	2013      	movs	r0, #19
 800100c:	f001 fdb3 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001010:	2013      	movs	r0, #19
 8001012:	f001 fdcc 	bl	8002bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2014      	movs	r0, #20
 800101c:	f001 fdab 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001020:	2014      	movs	r0, #20
 8001022:	f001 fdc4 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	@ 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40006400 	.word	0x40006400
 8001034:	40023800 	.word	0x40023800
 8001038:	40021800 	.word	0x40021800

0800103c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a9c      	ldr	r2, [pc, #624]	@ (80012cc <HAL_I2C_MspInit+0x290>)
 800105a:	4293      	cmp	r3, r2
 800105c:	f040 809b 	bne.w	8001196 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	4b9a      	ldr	r3, [pc, #616]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4a99      	ldr	r2, [pc, #612]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001070:	4b97      	ldr	r3, [pc, #604]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107c:	23c0      	movs	r3, #192	@ 0xc0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001080:	2312      	movs	r3, #18
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108c:	2304      	movs	r3, #4
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	488f      	ldr	r0, [pc, #572]	@ (80012d4 <HAL_I2C_MspInit+0x298>)
 8001098:	f002 f9c0 	bl	800341c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	4b8b      	ldr	r3, [pc, #556]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	4a8a      	ldr	r2, [pc, #552]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80010a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ac:	4b88      	ldr	r3, [pc, #544]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010b8:	4b87      	ldr	r3, [pc, #540]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010ba:	4a88      	ldr	r2, [pc, #544]	@ (80012dc <HAL_I2C_MspInit+0x2a0>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010be:	4b86      	ldr	r3, [pc, #536]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c6:	4b84      	ldr	r3, [pc, #528]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b81      	ldr	r3, [pc, #516]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010da:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e0:	4b7d      	ldr	r3, [pc, #500]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010e6:	4b7c      	ldr	r3, [pc, #496]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010ec:	4b7a      	ldr	r3, [pc, #488]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f4:	4b78      	ldr	r3, [pc, #480]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010fa:	4877      	ldr	r0, [pc, #476]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 80010fc:	f001 fd72 	bl	8002be4 <HAL_DMA_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001106:	f7ff fe8d 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a72      	ldr	r2, [pc, #456]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 800110e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001110:	4a71      	ldr	r2, [pc, #452]	@ (80012d8 <HAL_I2C_MspInit+0x29c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001116:	4b72      	ldr	r3, [pc, #456]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001118:	4a72      	ldr	r2, [pc, #456]	@ (80012e4 <HAL_I2C_MspInit+0x2a8>)
 800111a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800111c:	4b70      	ldr	r3, [pc, #448]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800111e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001122:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001124:	4b6e      	ldr	r3, [pc, #440]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001126:	2240      	movs	r2, #64	@ 0x40
 8001128:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b6d      	ldr	r3, [pc, #436]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b6b      	ldr	r3, [pc, #428]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001136:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001138:	4b69      	ldr	r3, [pc, #420]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	4b68      	ldr	r3, [pc, #416]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800114a:	4b65      	ldr	r3, [pc, #404]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800114c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001150:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001152:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001158:	4861      	ldr	r0, [pc, #388]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800115a:	f001 fd43 	bl	8002be4 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001164:	f7ff fe5e 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a5d      	ldr	r2, [pc, #372]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34
 800116e:	4a5c      	ldr	r2, [pc, #368]	@ (80012e0 <HAL_I2C_MspInit+0x2a4>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2105      	movs	r1, #5
 8001178:	201f      	movs	r0, #31
 800117a:	f001 fcfc 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800117e:	201f      	movs	r0, #31
 8001180:	f001 fd15 	bl	8002bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2105      	movs	r1, #5
 8001188:	2020      	movs	r0, #32
 800118a:	f001 fcf4 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800118e:	2020      	movs	r0, #32
 8001190:	f001 fd0d 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001194:	e095      	b.n	80012c2 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a53      	ldr	r2, [pc, #332]	@ (80012e8 <HAL_I2C_MspInit+0x2ac>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f040 8090 	bne.w	80012c2 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b4a      	ldr	r3, [pc, #296]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a49      	ldr	r2, [pc, #292]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b47      	ldr	r3, [pc, #284]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011be:	2303      	movs	r3, #3
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ce:	2304      	movs	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4844      	ldr	r0, [pc, #272]	@ (80012ec <HAL_I2C_MspInit+0x2b0>)
 80011da:	f002 f91f 	bl	800341c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b3b      	ldr	r3, [pc, #236]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a3a      	ldr	r2, [pc, #232]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b38      	ldr	r3, [pc, #224]	@ (80012d0 <HAL_I2C_MspInit+0x294>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	@ (80012f4 <HAL_I2C_MspInit+0x2b8>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001202:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001206:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001208:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121c:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001228:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800123a:	482d      	ldr	r0, [pc, #180]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 800123c:	f001 fcd2 	bl	8002be4 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8001246:	f7ff fded 	bl	8000e24 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 800124e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <HAL_I2C_MspInit+0x2b4>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <HAL_I2C_MspInit+0x2c0>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 800125e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001262:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001266:	2240      	movs	r2, #64	@ 0x40
 8001268:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001296:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 8001298:	f001 fca4 	bl	8002be4 <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80012a2:	f7ff fdbf 	bl	8000e24 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <HAL_I2C_MspInit+0x2bc>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2021      	movs	r0, #33	@ 0x21
 80012b8:	f001 fc5d 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012bc:	2021      	movs	r0, #33	@ 0x21
 80012be:	f001 fc76 	bl	8002bae <HAL_NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	@ 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	20000148 	.word	0x20000148
 80012dc:	40026010 	.word	0x40026010
 80012e0:	200001a8 	.word	0x200001a8
 80012e4:	400260a0 	.word	0x400260a0
 80012e8:	40005800 	.word	0x40005800
 80012ec:	40021400 	.word	0x40021400
 80012f0:	20000208 	.word	0x20000208
 80012f4:	40026040 	.word	0x40026040
 80012f8:	20000268 	.word	0x20000268
 80012fc:	400260b8 	.word	0x400260b8

08001300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a4a      	ldr	r2, [pc, #296]	@ (8001448 <HAL_SPI_MspInit+0x148>)
 800131e:	4293      	cmp	r3, r2
 8001320:	f040 80a0 	bne.w	8001464 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	4b48      	ldr	r3, [pc, #288]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	4a47      	ldr	r2, [pc, #284]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 800132e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001332:	6453      	str	r3, [r2, #68]	@ 0x44
 8001334:	4b45      	ldr	r3, [pc, #276]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a40      	ldr	r2, [pc, #256]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <HAL_SPI_MspInit+0x14c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800135c:	23e0      	movs	r3, #224	@ 0xe0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136c:	2305      	movs	r3, #5
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4836      	ldr	r0, [pc, #216]	@ (8001450 <HAL_SPI_MspInit+0x150>)
 8001378:	f002 f850 	bl	800341c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800137c:	4b35      	ldr	r3, [pc, #212]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 800137e:	4a36      	ldr	r2, [pc, #216]	@ (8001458 <HAL_SPI_MspInit+0x158>)
 8001380:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 8001384:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001388:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 8001398:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800139c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139e:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013bc:	4825      	ldr	r0, [pc, #148]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013be:	f001 fc11 	bl	8002be4 <HAL_DMA_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013c8:	f7ff fd2c 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013d2:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <HAL_SPI_MspInit+0x154>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_SPI_MspInit+0x160>)
 80013dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013e8:	2240      	movs	r2, #64	@ 0x40
 80013ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 800141a:	f001 fbe3 	bl	8002be4 <HAL_DMA_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001424:	f7ff fcfe 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 800142c:	649a      	str	r2, [r3, #72]	@ 0x48
 800142e:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_SPI_MspInit+0x15c>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2105      	movs	r1, #5
 8001438:	2023      	movs	r0, #35	@ 0x23
 800143a:	f001 fb9c 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800143e:	2023      	movs	r0, #35	@ 0x23
 8001440:	f001 fbb5 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001444:	e0c1      	b.n	80015ca <HAL_SPI_MspInit+0x2ca>
 8001446:	bf00      	nop
 8001448:	40013000 	.word	0x40013000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	20000378 	.word	0x20000378
 8001458:	40026410 	.word	0x40026410
 800145c:	200003d8 	.word	0x200003d8
 8001460:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a5a      	ldr	r2, [pc, #360]	@ (80015d4 <HAL_SPI_MspInit+0x2d4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 80ad 	bne.w	80015ca <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	4b58      	ldr	r3, [pc, #352]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a57      	ldr	r2, [pc, #348]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b55      	ldr	r3, [pc, #340]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001494:	4a50      	ldr	r2, [pc, #320]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6313      	str	r3, [r2, #48]	@ 0x30
 800149c:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <HAL_SPI_MspInit+0x2d8>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c4:	230c      	movs	r3, #12
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d4:	2305      	movs	r3, #5
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	483f      	ldr	r0, [pc, #252]	@ (80015dc <HAL_SPI_MspInit+0x2dc>)
 80014e0:	f001 ff9c 	bl	800341c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f6:	2305      	movs	r3, #5
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4837      	ldr	r0, [pc, #220]	@ (80015e0 <HAL_SPI_MspInit+0x2e0>)
 8001502:	f001 ff8b 	bl	800341c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001508:	4a37      	ldr	r2, [pc, #220]	@ (80015e8 <HAL_SPI_MspInit+0x2e8>)
 800150a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001524:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001532:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001544:	4827      	ldr	r0, [pc, #156]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001546:	f001 fb4d 	bl	8002be4 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001550:	f7ff fc68 	bl	8000e24 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 8001558:	64da      	str	r2, [r3, #76]	@ 0x4c
 800155a:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <HAL_SPI_MspInit+0x2e4>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001562:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <HAL_SPI_MspInit+0x2f0>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 800156e:	2240      	movs	r2, #64	@ 0x40
 8001570:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 800157a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800157e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800159e:	4813      	ldr	r0, [pc, #76]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 80015a0:	f001 fb20 	bl	8002be4 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 80015aa:	f7ff fc3b 	bl	8000e24 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 80015b2:	649a      	str	r2, [r3, #72]	@ 0x48
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <HAL_SPI_MspInit+0x2ec>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2105      	movs	r1, #5
 80015be:	2024      	movs	r0, #36	@ 0x24
 80015c0:	f001 fad9 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015c4:	2024      	movs	r0, #36	@ 0x24
 80015c6:	f001 faf2 	bl	8002bae <HAL_NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	@ 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40003800 	.word	0x40003800
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	20000438 	.word	0x20000438
 80015e8:	40026058 	.word	0x40026058
 80015ec:	20000498 	.word	0x20000498
 80015f0:	40026070 	.word	0x40026070

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <HAL_UART_MspInit+0xb4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d144      	bne.n	80016a0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_UART_MspInit+0xb8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800164e:	2301      	movs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800165e:	2308      	movs	r3, #8
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <HAL_UART_MspInit+0xbc>)
 800166a:	f001 fed7 	bl	800341c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800166e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001680:	230b      	movs	r3, #11
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <HAL_UART_MspInit+0xbc>)
 800168c:	f001 fec6 	bl	800341c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2105      	movs	r1, #5
 8001694:	2034      	movs	r0, #52	@ 0x34
 8001696:	f001 fa6e 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800169a:	2034      	movs	r0, #52	@ 0x34
 800169c:	f001 fa87 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40004c00 	.word	0x40004c00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <NMI_Handler+0x4>

080016bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <MemManage_Handler+0x4>

080016cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <UsageFault_Handler+0x4>

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 fba1 	bl	8001e34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016f2:	f009 fd19 	bl	800b128 <xTaskGetSchedulerState>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d001      	beq.n	8001700 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016fc:	f00a fc14 	bl	800bf28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <DMA1_Stream0_IRQHandler+0x10>)
 800170a:	f001 fc03 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000148 	.word	0x20000148

08001718 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <DMA1_Stream2_IRQHandler+0x10>)
 800171e:	f001 fbf9 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000208 	.word	0x20000208

0800172c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <DMA1_Stream3_IRQHandler+0x10>)
 8001732:	f001 fbef 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000438 	.word	0x20000438

08001740 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <DMA1_Stream4_IRQHandler+0x10>)
 8001746:	f001 fbe5 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000498 	.word	0x20000498

08001754 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <DMA1_Stream6_IRQHandler+0x10>)
 800175a:	f001 fbdb 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001a8 	.word	0x200001a8

08001768 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <CAN1_TX_IRQHandler+0x10>)
 800176e:	f000 feee 	bl	800254e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000078 	.word	0x20000078

0800177c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <CAN1_RX0_IRQHandler+0x10>)
 8001782:	f000 fee4 	bl	800254e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000078 	.word	0x20000078

08001790 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <I2C1_EV_IRQHandler+0x10>)
 8001796:	f002 fac7 	bl	8003d28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000a0 	.word	0x200000a0

080017a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <I2C1_ER_IRQHandler+0x10>)
 80017aa:	f002 fc2e 	bl	800400a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000a0 	.word	0x200000a0

080017b8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <I2C2_EV_IRQHandler+0x10>)
 80017be:	f002 fab3 	bl	8003d28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000f4 	.word	0x200000f4

080017cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <SPI1_IRQHandler+0x10>)
 80017d2:	f005 fd45 	bl	8007260 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002c8 	.word	0x200002c8

080017e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <SPI2_IRQHandler+0x10>)
 80017e6:	f005 fd3b 	bl	8007260 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000320 	.word	0x20000320

080017f4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream7_IRQHandler+0x10>)
 80017fa:	f001 fb8b 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000268 	.word	0x20000268

08001808 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <UART4_IRQHandler+0x10>)
 800180e:	f006 f925 	bl	8007a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200004f8 	.word	0x200004f8

0800181c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <DMA2_Stream0_IRQHandler+0x10>)
 8001822:	f001 fb77 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000378 	.word	0x20000378

08001830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <DMA2_Stream3_IRQHandler+0x10>)
 8001836:	f001 fb6d 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200003d8 	.word	0x200003d8

08001844 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

/* PMIC Fault Read Callback */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d104      	bne.n	8001860 <HAL_I2C_MemRxCpltCallback+0x1c>
    // Blocked I2CTask를 깨우기 위해 세마포어 반납
    osSemaphoreRelease(i2c_dma_semaphore);
 8001856:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f007 fae8 	bl	8008e30 <osSemaphoreRelease>
  }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40005400 	.word	0x40005400
 800186c:	20000564 	.word	0x20000564

08001870 <HAL_SPI_TxCpltCallback>:

/* EEPROM Write Callback */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <HAL_SPI_TxCpltCallback+0x24>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d104      	bne.n	800188c <HAL_SPI_TxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_SPI_TxCpltCallback+0x28>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f007 fad2 	bl	8008e30 <osSemaphoreRelease>
  }
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40013000 	.word	0x40013000
 8001898:	2000002c 	.word	0x2000002c

0800189c <HAL_SPI_TxRxCpltCallback>:

/* EEPROM Read Callback */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d104      	bne.n	80018b8 <HAL_SPI_TxRxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_SPI_TxRxCpltCallback+0x28>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 fabc 	bl	8008e30 <osSemaphoreRelease>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013000 	.word	0x40013000
 80018c4:	2000002c 	.word	0x2000002c

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <StartI2CTask>:

/**
 * I2CTask는 1ms 주기로 PMIC의 Fault 상태를 확인하여,
 * 새롭게 발생한 Fault가 있으면 SPITask로 DTC 이벤트 큐를 전송한다.
 */
void StartI2CTask(void *argument) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  static uint8_t previous_faults[5] = {0};   // 이전 Fault 상태를 저장하기 위한 static 변수
  static bool is_i2c_com_failed = false;      // I2C 통신 실패 상태 추적 플래그

  for(;;)
  {
    osDelay(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f007 f897 	bl	8008a28 <osDelay>

    if (PMIC_Read_Faults(current_faults, 5) == HAL_OK) {
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	2105      	movs	r1, #5
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff faa9 	bl	8000e58 <PMIC_Read_Faults>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 80fe 	bne.w	8001b0a <StartI2CTask+0x21e>

      MP5475_Reg07_Status* pCurReg07 = (MP5475_Reg07_Status*)&current_faults[2];
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	3302      	adds	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      MP5475_Reg08_Status* pCurReg08 = (MP5475_Reg08_Status*)&current_faults[3];
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	3303      	adds	r3, #3
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
      MP5475_Reg09_Status* pCurReg09 = (MP5475_Reg09_Status*)&current_faults[4];
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	3304      	adds	r3, #4
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24

      MP5475_Reg07_Status* pPrevReg07 = (MP5475_Reg07_Status*)&previous_faults[2];
 8001926:	4b85      	ldr	r3, [pc, #532]	@ (8001b3c <StartI2CTask+0x250>)
 8001928:	623b      	str	r3, [r7, #32]
      MP5475_Reg08_Status* pPrevReg08 = (MP5475_Reg08_Status*)&previous_faults[3];
 800192a:	4b85      	ldr	r3, [pc, #532]	@ (8001b40 <StartI2CTask+0x254>)
 800192c:	61fb      	str	r3, [r7, #28]
      MP5475_Reg09_Status* pPrevReg09 = (MP5475_Reg09_Status*)&previous_faults[4];
 800192e:	4b85      	ldr	r3, [pc, #532]	@ (8001b44 <StartI2CTask+0x258>)
 8001930:	61bb      	str	r3, [r7, #24]

      DTC_RequestMessage_t msg;
      msg.type = SAVE_DTC_REQUEST;
 8001932:	2300      	movs	r3, #0
 8001934:	733b      	strb	r3, [r7, #12]

      /* 0x07 레지스터: UV Fault 상태 확인 */
      if (pCurReg07->bits.bucka_uv && !pPrevReg07->bits.bucka_uv) {
 8001936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d011      	beq.n	8001968 <StartI2CTask+0x7c>
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <StartI2CTask+0x7c>
        msg.dtc_code = DTC_C1221_BUCK_A_UV; 
 8001952:	f241 2321 	movw	r3, #4641	@ 0x1221
 8001956:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001958:	4b7b      	ldr	r3, [pc, #492]	@ (8001b48 <StartI2CTask+0x25c>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f107 010c 	add.w	r1, r7, #12
 8001960:	2300      	movs	r3, #0
 8001962:	2200      	movs	r2, #0
 8001964:	f007 fb1c 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckb_uv && !pPrevReg07->bits.buckb_uv) {
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d011      	beq.n	800199a <StartI2CTask+0xae>
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <StartI2CTask+0xae>
        msg.dtc_code = DTC_C1222_BUCK_B_UV; 
 8001984:	f241 2322 	movw	r3, #4642	@ 0x1222
 8001988:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 800198a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b48 <StartI2CTask+0x25c>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	f107 010c 	add.w	r1, r7, #12
 8001992:	2300      	movs	r3, #0
 8001994:	2200      	movs	r2, #0
 8001996:	f007 fb03 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckc_uv && !pPrevReg07->bits.buckc_uv) {
 800199a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d011      	beq.n	80019cc <StartI2CTask+0xe0>
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <StartI2CTask+0xe0>
        msg.dtc_code = DTC_C1242_BUCK_C_UV; 
 80019b6:	f241 2342 	movw	r3, #4674	@ 0x1242
 80019ba:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 80019bc:	4b62      	ldr	r3, [pc, #392]	@ (8001b48 <StartI2CTask+0x25c>)
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	f007 faea 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckd_uv && !pPrevReg07->bits.buckd_uv) {
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d011      	beq.n	80019fe <StartI2CTask+0x112>
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <StartI2CTask+0x112>
        msg.dtc_code = DTC_C0577_BUCK_D_UV; 
 80019e8:	f240 5377 	movw	r3, #1399	@ 0x577
 80019ec:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 80019ee:	4b56      	ldr	r3, [pc, #344]	@ (8001b48 <StartI2CTask+0x25c>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	f107 010c 	add.w	r1, r7, #12
 80019f6:	2300      	movs	r3, #0
 80019f8:	2200      	movs	r2, #0
 80019fa:	f007 fad1 	bl	8008fa0 <osMessageQueuePut>
      }

      /* 0x08 레지스터: OC Fault 상태 확인 */
      if (pCurReg08->bits.bucka_oc && !pPrevReg08->bits.bucka_oc) {
 80019fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d011      	beq.n	8001a30 <StartI2CTask+0x144>
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <StartI2CTask+0x144>
        msg.dtc_code = DTC_C1232_BUCK_A_OC; 
 8001a1a:	f241 2332 	movw	r3, #4658	@ 0x1232
 8001a1e:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a20:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <StartI2CTask+0x25c>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f107 010c 	add.w	r1, r7, #12
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f007 fab8 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckb_oc && !pPrevReg08->bits.buckb_oc) {
 8001a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d011      	beq.n	8001a62 <StartI2CTask+0x176>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <StartI2CTask+0x176>
        msg.dtc_code = DTC_C1233_BUCK_B_OC; 
 8001a4c:	f241 2333 	movw	r3, #4659	@ 0x1233
 8001a50:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a52:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <StartI2CTask+0x25c>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f107 010c 	add.w	r1, r7, #12
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f007 fa9f 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckc_oc && !pPrevReg08->bits.buckc_oc) {
 8001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d011      	beq.n	8001a94 <StartI2CTask+0x1a8>
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <StartI2CTask+0x1a8>
        msg.dtc_code = DTC_C1217_BUCK_C_OC; 
 8001a7e:	f241 2317 	movw	r3, #4631	@ 0x1217
 8001a82:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a84:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <StartI2CTask+0x25c>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f107 010c 	add.w	r1, r7, #12
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f007 fa86 	bl	8008fa0 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckd_oc && !pPrevReg08->bits.buckd_oc) {
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d011      	beq.n	8001ac6 <StartI2CTask+0x1da>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <StartI2CTask+0x1da>
        msg.dtc_code = DTC_C0121_BUCK_D_OC; 
 8001ab0:	f240 1321 	movw	r3, #289	@ 0x121
 8001ab4:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <StartI2CTask+0x25c>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	f107 010c 	add.w	r1, r7, #12
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f007 fa6d 	bl	8008fa0 <osMessageQueuePut>
      }

      /* 0x09 레지스터: 시스템 Fault 상태 확인 */
      if (pCurReg09->bits.pmic_high_temp_shutdown && !pPrevReg09->bits.pmic_high_temp_shutdown) {
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d011      	beq.n	8001af8 <StartI2CTask+0x20c>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <StartI2CTask+0x20c>
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL; 
 8001ae2:	f240 1321 	movw	r3, #289	@ 0x121
 8001ae6:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <StartI2CTask+0x25c>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f107 010c 	add.w	r1, r7, #12
 8001af0:	2300      	movs	r3, #0
 8001af2:	2200      	movs	r2, #0
 8001af4:	f007 fa54 	bl	8008fa0 <osMessageQueuePut>
      }

      memcpy(previous_faults, current_faults, 5);
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <StartI2CTask+0x260>)
 8001afa:	f107 0210 	add.w	r2, r7, #16
 8001afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b02:	6018      	str	r0, [r3, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	7019      	strb	r1, [r3, #0]
 8001b08:	e6f4      	b.n	80018f4 <StartI2CTask+0x8>

    } else {
      // 이전에 통신 실패 상태가 아니었을 때만 DTC를 한 번 전송하여 중복 방지
      if (!is_i2c_com_failed) {
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <StartI2CTask+0x264>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f43f aeed 	beq.w	80018f4 <StartI2CTask+0x8>
        is_i2c_com_failed = true; // 통신 실패 상태로 설정
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <StartI2CTask+0x264>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
        DTC_RequestMessage_t msg;
        msg.type = SAVE_DTC_REQUEST;
 8001b20:	2300      	movs	r3, #0
 8001b22:	723b      	strb	r3, [r7, #8]
        // PMIC와 통신이 두절된 것은 브레이크 시스템 전체와의 통신 두절로 간주
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL;
 8001b24:	f240 1321 	movw	r3, #289	@ 0x121
 8001b28:	817b      	strh	r3, [r7, #10]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <StartI2CTask+0x25c>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 0108 	add.w	r1, r7, #8
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	f007 fa33 	bl	8008fa0 <osMessageQueuePut>
    osDelay(1);
 8001b3a:	e6db      	b.n	80018f4 <StartI2CTask+0x8>
 8001b3c:	2000056a 	.word	0x2000056a
 8001b40:	2000056b 	.word	0x2000056b
 8001b44:	2000056c 	.word	0x2000056c
 8001b48:	20000558 	.word	0x20000558
 8001b4c:	20000568 	.word	0x20000568
 8001b50:	2000056d 	.word	0x2000056d

08001b54 <StartSPITask>:
#define DTC_ENTRY_SIZE            sizeof(DTC_Code_t) // DTC 하나는 2바이트

/*
 * SPITask는 DTC 관련 요청을 받아 EEPROM에 읽고 쓰는 역할을 전담한다.
 */
void StartSPITask(void *argument) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b092      	sub	sp, #72	@ 0x48
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  DTC_RequestMessage_t request_msg;
  osStatus_t status;

  for(;;) {
    // DTC_RequestQueueHandle에 메시지가 도착할 때까지 Blocked
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 8001b5c:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <StartSPITask+0x1a4>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f007 fa79 	bl	8009060 <osMessageQueueGet>
 8001b6e:	6378      	str	r0, [r7, #52]	@ 0x34

    if (status == osOK) {
 8001b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f2      	bne.n	8001b5c <StartSPITask+0x8>
      // EEPROM 접근을 위해 뮤텍스를 점유
      if (osMutexAcquire(EepromMutexHandle, 100) == osOK) {
 8001b76:	4b61      	ldr	r3, [pc, #388]	@ (8001cfc <StartSPITask+0x1a8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2164      	movs	r1, #100	@ 0x64
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 fff4 	bl	8008b6a <osMutexAcquire>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <StartSPITask+0x8>
        switch (request_msg.type) {
 8001b88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f000 809c 	beq.w	8001cca <StartSPITask+0x176>
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	f300 80aa 	bgt.w	8001cec <StartSPITask+0x198>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <StartSPITask+0x4e>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d05c      	beq.n	8001c5a <StartSPITask+0x106>
 8001ba0:	e0a4      	b.n	8001cec <StartSPITask+0x198>
          case SAVE_DTC_REQUEST:
          {
            // 1. 현재 저장된 DTC 목록을 EEPROM에서 읽어온다. 
            DTC_Code_t stored_dtcs[MAX_DTC_COUNT] = {0};
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00a fc3c 	bl	800c428 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)stored_dtcs, sizeof(stored_dtcs));
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001bbc:	f7fe fd9e 	bl	80006fc <EEPROM_Read_DTCs>

            // 2. 이미 저장된 DTC인지, 빈 공간이 있는지 확인한다.
            bool already_exists = false;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            int empty_slot = -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bd0:	e027      	b.n	8001c22 <StartSPITask+0xce>
              if (stored_dtcs[i] == request_msg.dtc_code) {
 8001bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	3348      	adds	r3, #72	@ 0x48
 8001bd8:	443b      	add	r3, r7
 8001bda:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 8001bde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d103      	bne.n	8001bec <StartSPITask+0x98>
                already_exists = true;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8001bea:	e01d      	b.n	8001c28 <StartSPITask+0xd4>
              }
              if ((stored_dtcs[i] == 0x0000 || stored_dtcs[i] == 0xFFFF) && empty_slot == -1) {
 8001bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	3348      	adds	r3, #72	@ 0x48
 8001bf2:	443b      	add	r3, r7
 8001bf4:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <StartSPITask+0xbc>
 8001bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	3348      	adds	r3, #72	@ 0x48
 8001c02:	443b      	add	r3, r7
 8001c04:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d105      	bne.n	8001c1c <StartSPITask+0xc8>
 8001c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d101      	bne.n	8001c1c <StartSPITask+0xc8>
                empty_slot = i;
 8001c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1a:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1e:	3301      	adds	r3, #1
 8001c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	ddd4      	ble.n	8001bd2 <StartSPITask+0x7e>
              }
            }

            // 3. 중복되지 않았고, 빈 공간이 있으면 새로운 DTC를 추가하고 EEPROM에 쓴다.
            if (!already_exists && empty_slot != -1) {
 8001c28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d059      	beq.n	8001cea <StartSPITask+0x196>
 8001c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d055      	beq.n	8001cea <StartSPITask+0x196>
              uint16_t write_address = DTC_STORAGE_START_ADDRESS + (empty_slot * DTC_ENTRY_SIZE);
 8001c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c40:	3380      	adds	r3, #128	@ 0x80
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	867b      	strh	r3, [r7, #50]	@ 0x32
              EEPROM_Write_DTC(write_address, (uint8_t*)&request_msg.dtc_code, DTC_ENTRY_SIZE);
 8001c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4c:	1c99      	adds	r1, r3, #2
 8001c4e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001c50:	2202      	movs	r2, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fcdc 	bl	8000610 <EEPROM_Write_DTC>
            }
            break;
 8001c58:	e047      	b.n	8001cea <StartSPITask+0x196>
          }

          case READ_ALL_DTCS_REQUEST:
          {
            DTC_ResponseMessage_t response_msg = {0};
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2222      	movs	r2, #34	@ 0x22
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00a fbe0 	bl	800c428 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)response_msg.dtc_list, sizeof(response_msg.dtc_list));
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c76:	f7fe fd41 	bl	80006fc <EEPROM_Read_DTCs>

            // 유효한 DTC 개수 카운트
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c7e:	e018      	b.n	8001cb2 <StartSPITask+0x15e>
              if (response_msg.dtc_list[i] != 0x0000 && response_msg.dtc_list[i] != 0xFFFF) {
 8001c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3348      	adds	r3, #72	@ 0x48
 8001c86:	443b      	add	r3, r7
 8001c88:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <StartSPITask+0x158>
 8001c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	3348      	adds	r3, #72	@ 0x48
 8001c96:	443b      	add	r3, r7
 8001c98:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8001c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <StartSPITask+0x158>
                response_msg.dtc_count++;
 8001ca4:	7a3b      	ldrb	r3, [r7, #8]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	723b      	strb	r3, [r7, #8]
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cae:	3301      	adds	r3, #1
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	dde3      	ble.n	8001c80 <StartSPITask+0x12c>
              }
            }
            // CANTask로 응답 전송
            osMessageQueuePut(DTC_ResponseQueueHandle, &response_msg, 0, 10);
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <StartSPITask+0x1ac>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	f107 0108 	add.w	r1, r7, #8
 8001cc0:	230a      	movs	r3, #10
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f007 f96c 	bl	8008fa0 <osMessageQueuePut>
            break;
 8001cc8:	e010      	b.n	8001cec <StartSPITask+0x198>
          }

          case CLEAR_ALL_DTCS_REQUEST:
          {
            uint8_t clear_buffer[MAX_DTC_COUNT * DTC_ENTRY_SIZE];
            memset(clear_buffer, 0xFF, sizeof(clear_buffer)); // EEPROM은 보통 0xFF로 지움
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	2220      	movs	r2, #32
 8001cd0:	21ff      	movs	r1, #255	@ 0xff
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00a fba8 	bl	800c428 <memset>
            EEPROM_Write_DTC(DTC_STORAGE_START_ADDRESS, clear_buffer, sizeof(clear_buffer));
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	2220      	movs	r2, #32
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ce4:	f7fe fc94 	bl	8000610 <EEPROM_Write_DTC>
            break;
 8001ce8:	e000      	b.n	8001cec <StartSPITask+0x198>
            break;
 8001cea:	bf00      	nop
          }
        }
        // 작업이 끝났으므로 뮤텍스를 반드시 해제한다.
        osMutexRelease(EepromMutexHandle);
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <StartSPITask+0x1a8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f006 ff85 	bl	8008c00 <osMutexRelease>
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 8001cf6:	e731      	b.n	8001b5c <StartSPITask+0x8>
 8001cf8:	20000558 	.word	0x20000558
 8001cfc:	20000560 	.word	0x20000560
 8001d00:	2000055c 	.word	0x2000055c

08001d04 <StartCANTask>:
    }
  }
}

void StartCANTask(void *argument)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 8001d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d10:	f006 fe8a 	bl	8008a28 <osDelay>
 8001d14:	e7fa      	b.n	8001d0c <StartCANTask+0x8>

08001d16 <StartUARTTask>:
  }
}

void StartUARTTask(void *argument)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 8001d1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d22:	f006 fe81 	bl	8008a28 <osDelay>
 8001d26:	e7fa      	b.n	8001d1e <StartUARTTask+0x8>

08001d28 <StartDefaultTask>:
        osDelay(1000);
    }
}

void StartDefaultTask(void *argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 8001d30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d34:	f006 fe78 	bl	8008a28 <osDelay>
 8001d38:	e7fa      	b.n	8001d30 <StartDefaultTask+0x8>
	...

08001d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d42:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d44:	4a0e      	ldr	r2, [pc, #56]	@ (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d58:	4c0b      	ldr	r4, [pc, #44]	@ (8001d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d66:	f7ff fdaf 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f00a fb65 	bl	800c438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6e:	f7fe fd03 	bl	8000778 <main>
  bx  lr    
 8001d72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d80:	0800c698 	.word	0x0800c698
  ldr r2, =_sbss
 8001d84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d88:	20004ec4 	.word	0x20004ec4

08001d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <HAL_Init+0x40>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_Init+0x40>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_Init+0x40>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 fed1 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff f872 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fee9 	bl	8002bca <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 feb1 	bl	8002b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000570 	.word	0x20000570

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000570 	.word	0x20000570

08001e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e033      	b.n	8001ef2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff f836 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eba:	f023 0302 	bic.w	r3, r3, #2
 8001ebe:	f043 0202 	orr.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f94a 	bl	8002160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ee2:	e001      	b.n	8001ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e113      	b.n	8002140 <HAL_ADC_ConfigChannel+0x244>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d925      	bls.n	8001f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	2207      	movs	r2, #7
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	4603      	mov	r3, r0
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4403      	add	r3, r0
 8001f66:	3b1e      	subs	r3, #30
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	e022      	b.n	8001fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	2207      	movs	r2, #7
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4403      	add	r3, r0
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d824      	bhi.n	800200c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b05      	subs	r3, #5
 8001fd4:	221f      	movs	r2, #31
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b05      	subs	r3, #5
 8001ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34
 800200a:	e04c      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d824      	bhi.n	800205e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b23      	subs	r3, #35	@ 0x23
 8002026:	221f      	movs	r2, #31
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	400a      	ands	r2, r1
 8002034:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b23      	subs	r3, #35	@ 0x23
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
 800205c:	e023      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b41      	subs	r3, #65	@ 0x41
 8002070:	221f      	movs	r2, #31
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b41      	subs	r3, #65	@ 0x41
 800209a:	fa00 f203 	lsl.w	r2, r0, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a6:	4b29      	ldr	r3, [pc, #164]	@ (800214c <HAL_ADC_ConfigChannel+0x250>)
 80020a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_ADC_ConfigChannel+0x254>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10f      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1d8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b12      	cmp	r3, #18
 80020ba:	d10b      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_ADC_ConfigChannel+0x254>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12b      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x23a>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002154 <HAL_ADC_ConfigChannel+0x258>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x1f4>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b11      	cmp	r3, #17
 80020ee:	d122      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <HAL_ADC_ConfigChannel+0x258>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d111      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_ADC_ConfigChannel+0x25c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a11      	ldr	r2, [pc, #68]	@ (800215c <HAL_ADC_ConfigChannel+0x260>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9a      	lsrs	r2, r3, #18
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002128:	e002      	b.n	8002130 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40012300 	.word	0x40012300
 8002150:	40012000 	.word	0x40012000
 8002154:	10000012 	.word	0x10000012
 8002158:	20000000 	.word	0x20000000
 800215c:	431bde83 	.word	0x431bde83

08002160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <ADC_Init+0x1f0>)
 800216a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6899      	ldr	r1, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <ADC_Init+0x1f4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6899      	ldr	r1, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	e00f      	b.n	800225e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800224c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800225c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0202 	bic.w	r2, r2, #2
 800226c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e1b      	ldrb	r3, [r3, #24]
 8002278:	005a      	lsls	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800229a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	3b01      	subs	r3, #1
 80022b8:	035a      	lsls	r2, r3, #13
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	e007      	b.n	80022d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	051a      	lsls	r2, r3, #20
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002316:	025a      	lsls	r2, r3, #9
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	029a      	lsls	r2, r3, #10
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40012300 	.word	0x40012300
 8002354:	0f000001 	.word	0x0f000001

08002358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ed      	b.n	8002546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fe08 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff fd66 	bl	8001e5c <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002392:	e012      	b.n	80023ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002394:	f7ff fd62 	bl	8001e5c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c5      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0e5      	beq.n	8002394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0202 	bic.w	r2, r2, #2
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff fd40 	bl	8001e5c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff fd3c 	bl	8001e5c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09f      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e5b      	ldrb	r3, [r3, #25]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0220 	bic.w	r2, r2, #32
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7edb      	ldrb	r3, [r3, #27]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f1b      	ldrb	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f5b      	ldrb	r3, [r3, #29]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0204 	orr.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08a      	sub	sp, #40	@ 0x28
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d07c      	beq.n	800268e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d023      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f983 	bl	80028bc <HAL_CAN_TxMailbox0CompleteCallback>
 80025b6:	e016      	b.n	80025e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ca:	e00c      	b.n	80025e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	e002      	b.n	80025e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f989 	bl	80028f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d024      	beq.n	800263a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f963 	bl	80028d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800260a:	e016      	b.n	800263a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
 800261e:	e00c      	b.n	800263a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
 8002632:	e002      	b.n	800263a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f969 	bl	800290c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d024      	beq.n	800268e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800264c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f943 	bl	80028e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800265e:	e016      	b.n	800268e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	e00c      	b.n	800268e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	e002      	b.n	800268e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f949 	bl	8002920 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2210      	movs	r2, #16
 80026b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2208      	movs	r2, #8
 80026cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f93a 	bl	8002948 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f921 	bl	8002934 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2210      	movs	r2, #16
 8002714:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2208      	movs	r2, #8
 8002730:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f91c 	bl	8002970 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f903 	bl	800295c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2210      	movs	r2, #16
 8002770:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f906 	bl	8002984 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f8ff 	bl	8002998 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d07b      	beq.n	800289c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d072      	beq.n	8002894 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002808:	2b00      	cmp	r3, #0
 800280a:	d043      	beq.n	8002894 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03e      	beq.n	8002894 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800281c:	2b60      	cmp	r3, #96	@ 0x60
 800281e:	d02b      	beq.n	8002878 <HAL_CAN_IRQHandler+0x32a>
 8002820:	2b60      	cmp	r3, #96	@ 0x60
 8002822:	d82e      	bhi.n	8002882 <HAL_CAN_IRQHandler+0x334>
 8002824:	2b50      	cmp	r3, #80	@ 0x50
 8002826:	d022      	beq.n	800286e <HAL_CAN_IRQHandler+0x320>
 8002828:	2b50      	cmp	r3, #80	@ 0x50
 800282a:	d82a      	bhi.n	8002882 <HAL_CAN_IRQHandler+0x334>
 800282c:	2b40      	cmp	r3, #64	@ 0x40
 800282e:	d019      	beq.n	8002864 <HAL_CAN_IRQHandler+0x316>
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d826      	bhi.n	8002882 <HAL_CAN_IRQHandler+0x334>
 8002834:	2b30      	cmp	r3, #48	@ 0x30
 8002836:	d010      	beq.n	800285a <HAL_CAN_IRQHandler+0x30c>
 8002838:	2b30      	cmp	r3, #48	@ 0x30
 800283a:	d822      	bhi.n	8002882 <HAL_CAN_IRQHandler+0x334>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d002      	beq.n	8002846 <HAL_CAN_IRQHandler+0x2f8>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d005      	beq.n	8002850 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002844:	e01d      	b.n	8002882 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800284e:	e019      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002858:	e014      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	f043 0320 	orr.w	r3, r3, #32
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002862:	e00f      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800286c:	e00a      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002876:	e005      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002880:	e000      	b.n	8002884 <HAL_CAN_IRQHandler+0x336>
            break;
 8002882:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002892:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f87c 	bl	80029ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028b4:	bf00      	nop
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	@ (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	@ (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff29 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff3e 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff31 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffa2 	bl	8002b1c <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff f934 	bl	8001e5c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e099      	b.n	8002d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c20:	e00f      	b.n	8002c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c22:	f7ff f91b 	bl	8001e5c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d908      	bls.n	8002c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e078      	b.n	8002d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e8      	bne.n	8002c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <HAL_DMA_Init+0x158>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d117      	bne.n	8002d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb1b 	bl	8003324 <DMA_CheckFifoParam>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d02:	2301      	movs	r3, #1
 8002d04:	e016      	b.n	8002d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fad2 	bl	80032b8 <DMA_CalcBaseAndBitshift>
 8002d14:	4603      	mov	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	223f      	movs	r2, #63	@ 0x3f
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	e010803f 	.word	0xe010803f

08002d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_DMA_Start_IT+0x26>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e040      	b.n	8002de8 <HAL_DMA_Start_IT+0xa8>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d12f      	bne.n	8002dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fa64 	bl	800325c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	223f      	movs	r2, #63	@ 0x3f
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0216 	orr.w	r2, r2, #22
 8002dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e005      	b.n	8002de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dfe:	f7ff f82d 	bl	8001e5c <HAL_GetTick>
 8002e02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d008      	beq.n	8002e22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e052      	b.n	8002ec8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0216 	bic.w	r2, r2, #22
 8002e30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <HAL_DMA_Abort+0x62>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0208 	bic.w	r2, r2, #8
 8002e60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e72:	e013      	b.n	8002e9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e74:	f7fe fff2 	bl	8001e5c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d90c      	bls.n	8002e9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e015      	b.n	8002ec8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e4      	bne.n	8002e74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	223f      	movs	r2, #63	@ 0x3f
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d004      	beq.n	8002eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2280      	movs	r2, #128	@ 0x80
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00c      	b.n	8002f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f20:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <HAL_DMA_IRQHandler+0x248>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a8e      	ldr	r2, [pc, #568]	@ (8003160 <HAL_DMA_IRQHandler+0x24c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2208      	movs	r2, #8
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	2204      	movs	r2, #4
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d043      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	2210      	movs	r2, #16
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d024      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e01f      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e016      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0208 	bic.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	2220      	movs	r2, #32
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808f 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8087 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2220      	movs	r2, #32
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d136      	bne.n	800312c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_IRQHandler+0x1da>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	223f      	movs	r2, #63	@ 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07e      	beq.n	8003220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
        }
        return;
 800312a:	e079      	b.n	8003220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e02c      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000
 8003160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
 8003174:	e01e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0210 	bic.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d032      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d307      	bcc.n	80031fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f2      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x2cc>
 80031fa:	e000      	b.n	80031fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e000      	b.n	8003222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003220:	bf00      	nop
    }
  }
}
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003236:	b2db      	uxtb	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d108      	bne.n	800329c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329a:	e007      	b.n	80032ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3b10      	subs	r3, #16
 80032c8:	4a14      	ldr	r2, [pc, #80]	@ (800331c <DMA_CalcBaseAndBitshift+0x64>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <DMA_CalcBaseAndBitshift+0x68>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d909      	bls.n	80032fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80032f8:	e007      	b.n	800330a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	0800c680 	.word	0x0800c680

08003324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d856      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <DMA_CheckFifoParam+0x28>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336f 	.word	0x0800336f
 8003354:	0800335d 	.word	0x0800335d
 8003358:	080033f3 	.word	0x080033f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e043      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003376:	d140      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e03d      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003386:	d121      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d837      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d903      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
      break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;   
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
    }
  } 
  
  return status; 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	@ 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e165      	b.n	8003704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8154 	bne.w	80036fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d130      	bne.n	80034d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 0201 	and.w	r2, r3, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d017      	beq.n	800350c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ae 	beq.w	80036fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <HAL_GPIO_Init+0x300>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	4a5c      	ldr	r2, [pc, #368]	@ (800371c <HAL_GPIO_Init+0x300>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b2:	4b5a      	ldr	r3, [pc, #360]	@ (800371c <HAL_GPIO_Init+0x300>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a58      	ldr	r2, [pc, #352]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003724 <HAL_GPIO_Init+0x308>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d025      	beq.n	8003636 <HAL_GPIO_Init+0x21a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003728 <HAL_GPIO_Init+0x30c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <HAL_GPIO_Init+0x216>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	@ (800372c <HAL_GPIO_Init+0x310>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d019      	beq.n	800362e <HAL_GPIO_Init+0x212>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003730 <HAL_GPIO_Init+0x314>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x20e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4b      	ldr	r2, [pc, #300]	@ (8003734 <HAL_GPIO_Init+0x318>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x20a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4a      	ldr	r2, [pc, #296]	@ (8003738 <HAL_GPIO_Init+0x31c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x206>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a49      	ldr	r2, [pc, #292]	@ (800373c <HAL_GPIO_Init+0x320>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x202>
 800361a:	2306      	movs	r3, #6
 800361c:	e00c      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800361e:	2307      	movs	r3, #7
 8003620:	e00a      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003622:	2305      	movs	r3, #5
 8003624:	e008      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003626:	2304      	movs	r3, #4
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800362a:	2303      	movs	r3, #3
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003636:	2300      	movs	r3, #0
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f002 0203 	and.w	r2, r2, #3
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	4093      	lsls	r3, r2
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003648:	4935      	ldr	r1, [pc, #212]	@ (8003720 <HAL_GPIO_Init+0x304>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003656:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_GPIO_Init+0x324>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367a:	4a31      	ldr	r2, [pc, #196]	@ (8003740 <HAL_GPIO_Init+0x324>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003680:	4b2f      	ldr	r3, [pc, #188]	@ (8003740 <HAL_GPIO_Init+0x324>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a4:	4a26      	ldr	r2, [pc, #152]	@ (8003740 <HAL_GPIO_Init+0x324>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036aa:	4b25      	ldr	r3, [pc, #148]	@ (8003740 <HAL_GPIO_Init+0x324>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_GPIO_Init+0x324>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_GPIO_Init+0x324>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f8:	4a11      	ldr	r2, [pc, #68]	@ (8003740 <HAL_GPIO_Init+0x324>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	f67f ae96 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	@ 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40013800 	.word	0x40013800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400
 800372c:	40020800 	.word	0x40020800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021000 	.word	0x40021000
 8003738:	40021400 	.word	0x40021400
 800373c:	40021800 	.word	0x40021800
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e12b      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fc4c 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037dc:	f002 fc64 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a81      	ldr	r2, [pc, #516]	@ (80039ec <HAL_I2C_Init+0x274>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d807      	bhi.n	80037fc <HAL_I2C_Init+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a80      	ldr	r2, [pc, #512]	@ (80039f0 <HAL_I2C_Init+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e006      	b.n	800380a <HAL_I2C_Init+0x92>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	@ (80039f4 <HAL_I2C_Init+0x27c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a78      	ldr	r2, [pc, #480]	@ (80039f8 <HAL_I2C_Init+0x280>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <HAL_I2C_Init+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <HAL_I2C_Init+0xd4>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	e009      	b.n	8003860 <HAL_I2C_Init+0xe8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_I2C_Init+0x284>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	3301      	adds	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003872:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	495c      	ldr	r1, [pc, #368]	@ (80039ec <HAL_I2C_Init+0x274>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d819      	bhi.n	80038b4 <HAL_I2C_Init+0x13c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fbb1 f3f3 	udiv	r3, r1, r3
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003894:	400b      	ands	r3, r1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_I2C_Init+0x138>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e59      	subs	r1, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	e051      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x168>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x18e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x196>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	@ 0x30
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a1a:	f7fe fa1f 	bl	8001e5c <HAL_GetTick>
 8003a1e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	f040 8176 	bne.w	8003d1e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a32:	4b95      	ldr	r3, [pc, #596]	@ (8003c88 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	08db      	lsrs	r3, r3, #3
 8003a38:	4a94      	ldr	r2, [pc, #592]	@ (8003c8c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0a1a      	lsrs	r2, r3, #8
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e14c      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d0db      	beq.n	8003a4c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Mem_Read_DMA+0xa2>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e13e      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d007      	beq.n	8003ac8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2222      	movs	r2, #34	@ 0x22
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2240      	movs	r2, #64	@ 0x40
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a62      	ldr	r2, [pc, #392]	@ (8003c90 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b0a:	897a      	ldrh	r2, [r7, #10]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003b10:	893a      	ldrh	r2, [r7, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80cc 	beq.w	8003cc4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02d      	beq.n	8003b90 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	4a56      	ldr	r2, [pc, #344]	@ (8003c94 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003b3a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	4a55      	ldr	r2, [pc, #340]	@ (8003c98 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003b42:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	2200      	movs	r2, #0
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	2200      	movs	r2, #0
 8003b5a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	2200      	movs	r2, #0
 8003b62:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	461a      	mov	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	f7ff f8e1 	bl	8002d40 <HAL_DMA_Start_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8087 	bne.w	8003c9c <HAL_I2C_Mem_Read_DMA+0x29c>
 8003b8e:	e013      	b.n	8003bb8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b3      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003bb8:	88f8      	ldrh	r0, [r7, #6]
 8003bba:	893a      	ldrh	r2, [r7, #8]
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	2323      	movs	r3, #35	@ 0x23
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f001 fc7f 	bl	80054cc <I2C_RequestMemoryRead>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f979 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	2200      	movs	r2, #0
 8003bea:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e081      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e007      	b.n	8003c46 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c72:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	e049      	b.n	8003d1a <HAL_I2C_Mem_Read_DMA+0x31a>
 8003c86:	bf00      	nop
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	14f8b589 	.word	0x14f8b589
 8003c90:	ffff0000 	.word	0xffff0000
 8003c94:	0800569d 	.word	0x0800569d
 8003c98:	08005847 	.word	0x08005847
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e02d      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003cc4:	88f8      	ldrh	r0, [r7, #6]
 8003cc6:	893a      	ldrh	r2, [r7, #8]
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2323      	movs	r3, #35	@ 0x23
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f001 fbf9 	bl	80054cc <I2C_RequestMemoryRead>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01d      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d08:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3728      	adds	r7, #40	@ 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d003      	beq.n	8003d60 <HAL_I2C_EV_IRQHandler+0x38>
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	f040 80c1 	bne.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d80:	d003      	beq.n	8003d8a <HAL_I2C_EV_IRQHandler+0x62>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_EV_IRQHandler+0x66>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_I2C_EV_IRQHandler+0x68>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f000 8132 	beq.w	8003ffa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x92>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	0a5b      	lsrs	r3, r3, #9
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f001 ffa8 	bl	8005d02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fd6f 	bl	8004896 <I2C_Master_SB>
 8003db8:	e092      	b.n	8003ee0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0xb2>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fde5 	bl	80049a2 <I2C_Master_ADD10>
 8003dd8:	e082      	b.n	8003ee0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0xd2>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fdff 	bl	80049f6 <I2C_Master_ADDR>
 8003df8:	e072      	b.n	8003ee0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03b      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e14:	f000 80f3 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	09db      	lsrs	r3, r3, #7
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00f      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	0a9b      	lsrs	r3, r3, #10
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f9e9 	bl	8004214 <I2C_MasterTransmit_TXE>
 8003e42:	e04d      	b.n	8003ee0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80d6 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	0a5b      	lsrs	r3, r3, #9
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80cf 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e60:	7bbb      	ldrb	r3, [r7, #14]
 8003e62:	2b21      	cmp	r3, #33	@ 0x21
 8003e64:	d103      	bne.n	8003e6e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa70 	bl	800434c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6c:	e0c7      	b.n	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	f040 80c4 	bne.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fade 	bl	8004438 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e7c:	e0bf      	b.n	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e8c:	f000 80b7 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00f      	beq.n	8003ebc <HAL_I2C_EV_IRQHandler+0x194>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	0a9b      	lsrs	r3, r3, #10
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <HAL_I2C_EV_IRQHandler+0x194>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fb53 	bl	8004560 <I2C_MasterReceive_RXNE>
 8003eba:	e011      	b.n	8003ee0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 809a 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8093 	beq.w	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fbf2 	bl	80046c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	e08e      	b.n	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ee0:	e08d      	b.n	8003ffe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e007      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_I2C_EV_IRQHandler+0x20e>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 ffb0 	bl	8004e94 <I2C_Slave_ADDR>
 8003f34:	e066      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0x22e>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ffea 	bl	8004f28 <I2C_Slave_STOPF>
 8003f54:	e056      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f56:	7bbb      	ldrb	r3, [r7, #14]
 8003f58:	2b21      	cmp	r3, #33	@ 0x21
 8003f5a:	d002      	beq.n	8003f62 <HAL_I2C_EV_IRQHandler+0x23a>
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	2b29      	cmp	r3, #41	@ 0x29
 8003f60:	d125      	bne.n	8003fae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	09db      	lsrs	r3, r3, #7
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00f      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x266>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	0a9b      	lsrs	r3, r3, #10
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x266>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fec6 	bl	8004d18 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f8c:	e039      	b.n	8004002 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d033      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0x2da>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	0a5b      	lsrs	r3, r3, #9
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02d      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fef3 	bl	8004d92 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fac:	e029      	b.n	8004002 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	0a9b      	lsrs	r3, r3, #10
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fefe 	bl	8004dd4 <I2C_SlaveReceive_RXNE>
 8003fd8:	e014      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00e      	beq.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	0a5b      	lsrs	r3, r3, #9
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 ff2c 	bl	8004e50 <I2C_SlaveReceive_BTF>
 8003ff8:	e004      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004002:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08a      	sub	sp, #40	@ 0x28
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800402c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0x4e>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004056:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	0a5b      	lsrs	r3, r3, #9
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00e      	beq.n	8004082 <HAL_I2C_ER_IRQHandler+0x78>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004080:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	0a9b      	lsrs	r3, r3, #10
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03f      	beq.n	800410e <HAL_I2C_ER_IRQHandler+0x104>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d039      	beq.n	800410e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800409a:	7efb      	ldrb	r3, [r7, #27]
 800409c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80040b4:	7ebb      	ldrb	r3, [r7, #26]
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d112      	bne.n	80040e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	2b21      	cmp	r3, #33	@ 0x21
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b29      	cmp	r3, #41	@ 0x29
 80040ca:	d005      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0xce>
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b28      	cmp	r3, #40	@ 0x28
 80040d0:	d106      	bne.n	80040e0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b21      	cmp	r3, #33	@ 0x21
 80040d6:	d103      	bne.n	80040e0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f001 f855 	bl	8005188 <I2C_Slave_AF>
 80040de:	e016      	b.n	800410e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040f2:	7efb      	ldrb	r3, [r7, #27]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d002      	beq.n	80040fe <HAL_I2C_ER_IRQHandler+0xf4>
 80040f8:	7efb      	ldrb	r3, [r7, #27]
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	d107      	bne.n	800410e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	0adb      	lsrs	r3, r3, #11
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x12e>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004136:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f001 f88c 	bl	8005268 <I2C_ITError>
  }
}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	@ 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
 80041b4:	4613      	mov	r3, r2
 80041b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800422a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d150      	bne.n	80042dc <I2C_MasterTransmit_TXE+0xc8>
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b21      	cmp	r3, #33	@ 0x21
 800423e:	d14d      	bne.n	80042dc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b08      	cmp	r3, #8
 8004244:	d01d      	beq.n	8004282 <I2C_MasterTransmit_TXE+0x6e>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b20      	cmp	r3, #32
 800424a:	d01a      	beq.n	8004282 <I2C_MasterTransmit_TXE+0x6e>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004252:	d016      	beq.n	8004282 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004262:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2211      	movs	r2, #17
 8004268:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff6c 	bl	8004158 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004280:	e060      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004290:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d107      	bne.n	80042cc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff87 	bl	80041d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042ca:	e03b      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff3f 	bl	8004158 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042da:	e033      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b21      	cmp	r3, #33	@ 0x21
 80042e0:	d005      	beq.n	80042ee <I2C_MasterTransmit_TXE+0xda>
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d12d      	bne.n	8004344 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b22      	cmp	r3, #34	@ 0x22
 80042ec:	d12a      	bne.n	8004344 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004308:	e01c      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b40      	cmp	r3, #64	@ 0x40
 8004314:	d103      	bne.n	800431e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f88e 	bl	8004438 <I2C_MemoryTransmit_TXE_BTF>
}
 800431c:	e012      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004342:	e7ff      	b.n	8004344 <I2C_MasterTransmit_TXE+0x130>
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b21      	cmp	r3, #33	@ 0x21
 8004364:	d164      	bne.n	8004430 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004394:	e04c      	b.n	8004430 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d01d      	beq.n	80043d8 <I2C_MasterTransmit_BTF+0x8c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d01a      	beq.n	80043d8 <I2C_MasterTransmit_BTF+0x8c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043a8:	d016      	beq.n	80043d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2211      	movs	r2, #17
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fec1 	bl	8004158 <HAL_I2C_MasterTxCpltCallback>
}
 80043d6:	e02b      	b.n	8004430 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	d107      	bne.n	8004422 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fedc 	bl	80041d8 <HAL_I2C_MemTxCpltCallback>
}
 8004420:	e006      	b.n	8004430 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fe94 	bl	8004158 <HAL_I2C_MasterTxCpltCallback>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004446:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11d      	bne.n	800448c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10b      	bne.n	8004470 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445c:	b2da      	uxtb	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800446e:	e073      	b.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004474:	b29b      	uxth	r3, r3
 8004476:	121b      	asrs	r3, r3, #8
 8004478:	b2da      	uxtb	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800448a:	e065      	b.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10b      	bne.n	80044ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	b2da      	uxtb	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044aa:	e055      	b.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d151      	bne.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b22      	cmp	r3, #34	@ 0x22
 80044b8:	d10d      	bne.n	80044d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044d4:	e040      	b.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b21      	cmp	r3, #33	@ 0x21
 80044e4:	d112      	bne.n	800450c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800450a:	e025      	b.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d120      	bne.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b21      	cmp	r3, #33	@ 0x21
 800451a:	d11d      	bne.n	8004558 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800452a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe40 	bl	80041d8 <HAL_I2C_MemTxCpltCallback>
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	@ 0x22
 8004572:	f040 80a2 	bne.w	80046ba <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d921      	bls.n	80045c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	f040 8082 	bne.w	80046ba <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80045c6:	e078      	b.n	80046ba <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d074      	beq.n	80046ba <I2C_MasterReceive_RXNE+0x15a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d002      	beq.n	80045dc <I2C_MasterReceive_RXNE+0x7c>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d16e      	bne.n	80046ba <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fb2f 	bl	8005c40 <I2C_WaitOnSTOPRequestThroughIT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d142      	bne.n	800466e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004606:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b40      	cmp	r3, #64	@ 0x40
 8004640:	d10a      	bne.n	8004658 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fd f8f7 	bl	8001844 <HAL_I2C_MemRxCpltCallback>
}
 8004656:	e030      	b.n	80046ba <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2212      	movs	r2, #18
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fd80 	bl	800416c <HAL_I2C_MasterRxCpltCallback>
}
 800466c:	e025      	b.n	80046ba <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fd99 	bl	80041ec <HAL_I2C_ErrorCallback>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d11b      	bne.n	8004712 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004710:	e0bd      	b.n	800488e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b03      	cmp	r3, #3
 800471a:	d129      	bne.n	8004770 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00a      	beq.n	8004748 <I2C_MasterReceive_BTF+0x86>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d007      	beq.n	8004748 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004746:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800476e:	e08e      	b.n	800488e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d176      	bne.n	8004868 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d002      	beq.n	8004786 <I2C_MasterReceive_BTF+0xc4>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d108      	bne.n	8004798 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e019      	b.n	80047cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d002      	beq.n	80047a4 <I2C_MasterReceive_BTF+0xe2>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d108      	bne.n	80047b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e00a      	b.n	80047cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d007      	beq.n	80047cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004826:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d10a      	bne.n	8004852 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fffa 	bl	8001844 <HAL_I2C_MemRxCpltCallback>
}
 8004850:	e01d      	b.n	800488e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2212      	movs	r2, #18
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff fc83 	bl	800416c <HAL_I2C_MasterRxCpltCallback>
}
 8004866:	e012      	b.n	800488e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b40      	cmp	r3, #64	@ 0x40
 80048a8:	d117      	bne.n	80048da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048c4:	e067      	b.n	8004996 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]
}
 80048d8:	e05d      	b.n	8004996 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e2:	d133      	bne.n	800494c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b21      	cmp	r3, #33	@ 0x21
 80048ee:	d109      	bne.n	8004904 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	e008      	b.n	8004916 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <I2C_Master_SB+0x92>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d032      	beq.n	8004996 <I2C_Master_SB+0x100>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02d      	beq.n	8004996 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004948:	605a      	str	r2, [r3, #4]
}
 800494a:	e024      	b.n	8004996 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	b29b      	uxth	r3, r3
 800495a:	11db      	asrs	r3, r3, #7
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f063 030f 	orn	r3, r3, #15
 8004968:	b2da      	uxtb	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]
}
 8004970:	e011      	b.n	8004996 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10d      	bne.n	8004996 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	b29b      	uxth	r3, r3
 8004980:	11db      	asrs	r3, r3, #7
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0306 	and.w	r3, r3, #6
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f063 030e 	orn	r3, r3, #14
 800498e:	b2da      	uxtb	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <I2C_Master_ADD10+0x26>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d108      	bne.n	80049da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <I2C_Master_ADD10+0x48>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e8:	605a      	str	r2, [r3, #4]
  }
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b091      	sub	sp, #68	@ 0x44
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b22      	cmp	r3, #34	@ 0x22
 8004a1e:	f040 8169 	bne.w	8004cf4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <I2C_Master_ADDR+0x54>
 8004a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d10b      	bne.n	8004a4a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	e160      	b.n	8004d0c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <I2C_Master_ADDR+0x98>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a5a:	d118      	bne.n	8004a8e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a80:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a8c:	e13e      	b.n	8004d0c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d113      	bne.n	8004ac0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e115      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	f040 808a 	bne.w	8004be0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ace:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ad2:	d137      	bne.n	8004b44 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af2:	d113      	bne.n	8004b1c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b02:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b04:	2300      	movs	r3, #0
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	e0e7      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e0d3      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d02e      	beq.n	8004ba8 <I2C_Master_ADDR+0x1b2>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d02b      	beq.n	8004ba8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b52:	2b12      	cmp	r3, #18
 8004b54:	d102      	bne.n	8004b5c <I2C_Master_ADDR+0x166>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d125      	bne.n	8004ba8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00e      	beq.n	8004b80 <I2C_Master_ADDR+0x18a>
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d00b      	beq.n	8004b80 <I2C_Master_ADDR+0x18a>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d008      	beq.n	8004b80 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e007      	b.n	8004b90 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b8e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	e0a1      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e085      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d14d      	bne.n	8004c86 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d016      	beq.n	8004c1e <I2C_Master_ADDR+0x228>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d013      	beq.n	8004c1e <I2C_Master_ADDR+0x228>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d010      	beq.n	8004c1e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e007      	b.n	8004c2e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c2c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3c:	d117      	bne.n	8004c6e <I2C_Master_ADDR+0x278>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c44:	d00b      	beq.n	8004c5e <I2C_Master_ADDR+0x268>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d008      	beq.n	8004c5e <I2C_Master_ADDR+0x268>
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d005      	beq.n	8004c5e <I2C_Master_ADDR+0x268>
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d002      	beq.n	8004c5e <I2C_Master_ADDR+0x268>
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d107      	bne.n	8004c6e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	e032      	b.n	8004cec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c94:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d117      	bne.n	8004cd6 <I2C_Master_ADDR+0x2e0>
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cac:	d00b      	beq.n	8004cc6 <I2C_Master_ADDR+0x2d0>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d008      	beq.n	8004cc6 <I2C_Master_ADDR+0x2d0>
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d005      	beq.n	8004cc6 <I2C_Master_ADDR+0x2d0>
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d002      	beq.n	8004cc6 <I2C_Master_ADDR+0x2d0>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d107      	bne.n	8004cd6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cd4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cf2:	e00b      	b.n	8004d0c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	e7ff      	b.n	8004d0c <I2C_Master_ADDR+0x316>
 8004d0c:	bf00      	nop
 8004d0e:	3744      	adds	r7, #68	@ 0x44
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02b      	beq.n	8004d8a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d114      	bne.n	8004d8a <I2C_SlaveTransmit_TXE+0x72>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b29      	cmp	r3, #41	@ 0x29
 8004d64:	d111      	bne.n	8004d8a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2221      	movs	r2, #33	@ 0x21
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2228      	movs	r2, #40	@ 0x28
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff f9fb 	bl	8004180 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02c      	beq.n	8004e48 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d114      	bne.n	8004e48 <I2C_SlaveReceive_RXNE+0x74>
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e22:	d111      	bne.n	8004e48 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2222      	movs	r2, #34	@ 0x22
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2228      	movs	r2, #40	@ 0x28
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff f9a6 	bl	8004194 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004eae:	2b28      	cmp	r3, #40	@ 0x28
 8004eb0:	d127      	bne.n	8004f02 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	09db      	lsrs	r3, r3, #7
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	81bb      	strh	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ef4:	89ba      	ldrh	r2, [r7, #12]
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff f954 	bl	80041a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f00:	e00e      	b.n	8004f20 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f84:	d172      	bne.n	800506c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b22      	cmp	r3, #34	@ 0x22
 8004f8a:	d002      	beq.n	8004f92 <I2C_Slave_STOPF+0x6a>
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f90:	d135      	bne.n	8004ffe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe f92c 	bl	8003228 <HAL_DMA_GetState>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d049      	beq.n	800506a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	4a69      	ldr	r2, [pc, #420]	@ (8005180 <I2C_Slave_STOPF+0x258>)
 8004fdc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd ff74 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d03d      	beq.n	800506a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ffc:	e035      	b.n	800506a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005030:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe f8f6 	bl	8003228 <HAL_DMA_GetState>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d014      	beq.n	800506c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	4a4e      	ldr	r2, [pc, #312]	@ (8005180 <I2C_Slave_STOPF+0x258>)
 8005048:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	4618      	mov	r0, r3
 8005050:	f7fd ff3e 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005064:	4610      	mov	r0, r2
 8005066:	4798      	blx	r3
 8005068:	e000      	b.n	800506c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800506a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03e      	beq.n	80050f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d112      	bne.n	80050aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d112      	bne.n	80050de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	f043 0204 	orr.w	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8b3 	bl	8005268 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005102:	e039      	b.n	8005178 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b2a      	cmp	r3, #42	@ 0x2a
 8005108:	d109      	bne.n	800511e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2228      	movs	r2, #40	@ 0x28
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff f83b 	bl	8004194 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b28      	cmp	r3, #40	@ 0x28
 8005128:	d111      	bne.n	800514e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <I2C_Slave_STOPF+0x25c>)
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff f83c 	bl	80041c4 <HAL_I2C_ListenCpltCallback>
}
 800514c:	e014      	b.n	8005178 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	2b22      	cmp	r3, #34	@ 0x22
 8005154:	d002      	beq.n	800515c <I2C_Slave_STOPF+0x234>
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b22      	cmp	r3, #34	@ 0x22
 800515a:	d10d      	bne.n	8005178 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f80e 	bl	8004194 <HAL_I2C_SlaveRxCpltCallback>
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	080058c1 	.word	0x080058c1
 8005184:	ffff0000 	.word	0xffff0000

08005188 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d002      	beq.n	80051aa <I2C_Slave_AF+0x22>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d129      	bne.n	80051fe <I2C_Slave_AF+0x76>
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b28      	cmp	r3, #40	@ 0x28
 80051ae:	d126      	bne.n	80051fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <I2C_Slave_AF+0xdc>)
 80051b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fe ffe4 	bl	80041c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80051fc:	e02e      	b.n	800525c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b21      	cmp	r3, #33	@ 0x21
 8005202:	d126      	bne.n	8005252 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a17      	ldr	r2, [pc, #92]	@ (8005264 <I2C_Slave_AF+0xdc>)
 8005208:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2221      	movs	r2, #33	@ 0x21
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800522e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005238:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fe ff98 	bl	8004180 <HAL_I2C_SlaveTxCpltCallback>
}
 8005250:	e004      	b.n	800525c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800525a:	615a      	str	r2, [r3, #20]
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	ffff0000 	.word	0xffff0000

08005268 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800527e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	2b10      	cmp	r3, #16
 8005284:	d002      	beq.n	800528c <I2C_ITError+0x24>
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b40      	cmp	r3, #64	@ 0x40
 800528a:	d10a      	bne.n	80052a2 <I2C_ITError+0x3a>
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b22      	cmp	r3, #34	@ 0x22
 8005290:	d107      	bne.n	80052a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052a8:	2b28      	cmp	r3, #40	@ 0x28
 80052aa:	d107      	bne.n	80052bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2228      	movs	r2, #40	@ 0x28
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052ba:	e015      	b.n	80052e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ca:	d00a      	beq.n	80052e2 <I2C_ITError+0x7a>
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b60      	cmp	r3, #96	@ 0x60
 80052d0:	d007      	beq.n	80052e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f6:	d162      	bne.n	80053be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005306:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d020      	beq.n	8005358 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	4a6a      	ldr	r2, [pc, #424]	@ (80054c4 <I2C_ITError+0x25c>)
 800531c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd fdd4 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8089 	beq.w	8005442 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005352:	4610      	mov	r0, r2
 8005354:	4798      	blx	r3
 8005356:	e074      	b.n	8005442 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	4a59      	ldr	r2, [pc, #356]	@ (80054c4 <I2C_ITError+0x25c>)
 800535e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	4618      	mov	r0, r3
 8005366:	f7fd fdb3 	bl	8002ed0 <HAL_DMA_Abort_IT>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d068      	beq.n	8005442 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537a:	2b40      	cmp	r3, #64	@ 0x40
 800537c:	d10b      	bne.n	8005396 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
 80053bc:	e041      	b.n	8005442 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b60      	cmp	r3, #96	@ 0x60
 80053c8:	d125      	bne.n	8005416 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d10b      	bne.n	80053fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fe fef6 	bl	8004200 <HAL_I2C_AbortCpltCallback>
 8005414:	e015      	b.n	8005442 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b40      	cmp	r3, #64	@ 0x40
 8005422:	d10b      	bne.n	800543c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fe fed5 	bl	80041ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10e      	bne.n	8005470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005486:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d113      	bne.n	80054bc <I2C_ITError+0x254>
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b28      	cmp	r3, #40	@ 0x28
 8005498:	d110      	bne.n	80054bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a0a      	ldr	r2, [pc, #40]	@ (80054c8 <I2C_ITError+0x260>)
 800549e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fe fe84 	bl	80041c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	080058c1 	.word	0x080058c1
 80054c8:	ffff0000 	.word	0xffff0000

080054cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	817b      	strh	r3, [r7, #10]
 80054de:	460b      	mov	r3, r1
 80054e0:	813b      	strh	r3, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	2200      	movs	r2, #0
 800550e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa7c 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552c:	d103      	bne.n	8005536 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0aa      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	4952      	ldr	r1, [pc, #328]	@ (8005698 <I2C_RequestMemoryRead+0x1cc>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fab4 	bl	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e097      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	6a39      	ldr	r1, [r7, #32]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fb1e 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2b04      	cmp	r3, #4
 800558c:	d107      	bne.n	800559e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e076      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055a8:	893b      	ldrh	r3, [r7, #8]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	611a      	str	r2, [r3, #16]
 80055b2:	e021      	b.n	80055f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 faf8 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e050      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fa:	6a39      	ldr	r1, [r7, #32]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fadd 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	2b04      	cmp	r3, #4
 800560e:	d107      	bne.n	8005620 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800561e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e035      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005632:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	2200      	movs	r2, #0
 800563c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f9e5 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565a:	d103      	bne.n	8005664 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005662:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e013      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005668:	897b      	ldrh	r3, [r7, #10]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	6a3a      	ldr	r2, [r7, #32]
 800567c:	4906      	ldr	r1, [pc, #24]	@ (8005698 <I2C_RequestMemoryRead+0x1cc>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fa1d 	bl	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	00010002 	.word	0x00010002

0800569c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056ce:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056dc:	2200      	movs	r2, #0
 80056de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	2200      	movs	r2, #0
 80056ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80056f6:	2b21      	cmp	r3, #33	@ 0x21
 80056f8:	d007      	beq.n	800570a <I2C_DMAXferCplt+0x6e>
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005700:	2b22      	cmp	r3, #34	@ 0x22
 8005702:	d131      	bne.n	8005768 <I2C_DMAXferCplt+0xcc>
 8005704:	7cbb      	ldrb	r3, [r7, #18]
 8005706:	2b20      	cmp	r3, #32
 8005708:	d12e      	bne.n	8005768 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005718:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b29      	cmp	r3, #41	@ 0x29
 8005724:	d10a      	bne.n	800573c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2228      	movs	r2, #40	@ 0x28
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005734:	6978      	ldr	r0, [r7, #20]
 8005736:	f7fe fd23 	bl	8004180 <HAL_I2C_SlaveTxCpltCallback>
 800573a:	e00c      	b.n	8005756 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005740:	d109      	bne.n	8005756 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2222      	movs	r2, #34	@ 0x22
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2228      	movs	r2, #40	@ 0x28
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005750:	6978      	ldr	r0, [r7, #20]
 8005752:	f7fe fd1f 	bl	8004194 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005764:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005766:	e06a      	b.n	800583e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d064      	beq.n	800583e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d107      	bne.n	800578e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800579c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057a4:	d009      	beq.n	80057ba <I2C_DMAXferCplt+0x11e>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d006      	beq.n	80057ba <I2C_DMAXferCplt+0x11e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80057b2:	d002      	beq.n	80057ba <I2C_DMAXferCplt+0x11e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d107      	bne.n	80057ca <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057d8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057e8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80057f8:	6978      	ldr	r0, [r7, #20]
 80057fa:	f7fe fcf7 	bl	80041ec <HAL_I2C_ErrorCallback>
}
 80057fe:	e01e      	b.n	800583e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d10a      	bne.n	800582a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005822:	6978      	ldr	r0, [r7, #20]
 8005824:	f7fc f80e 	bl	8001844 <HAL_I2C_MemRxCpltCallback>
}
 8005828:	e009      	b.n	800583e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2212      	movs	r2, #18
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005838:	6978      	ldr	r0, [r7, #20]
 800583a:	f7fe fc97 	bl	800416c <HAL_I2C_MasterRxCpltCallback>
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	2200      	movs	r2, #0
 8005872:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fd fce5 	bl	8003244 <HAL_DMA_GetError>
 800587a:	4603      	mov	r3, r0
 800587c:	2b02      	cmp	r3, #2
 800587e:	d01b      	beq.n	80058b8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f043 0210 	orr.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7fe fc9a 	bl	80041ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058da:	4b4b      	ldr	r3, [pc, #300]	@ (8005a08 <I2C_DMAAbort+0x148>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	08db      	lsrs	r3, r3, #3
 80058e0:	4a4a      	ldr	r2, [pc, #296]	@ (8005a0c <I2C_DMAAbort+0x14c>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0a1a      	lsrs	r2, r3, #8
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	00da      	lsls	r2, r3, #3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005906:	e00a      	b.n	800591e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800591c:	d0ea      	beq.n	80058f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	2200      	movs	r2, #0
 800592c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	2200      	movs	r2, #0
 800593c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	2200      	movs	r2, #0
 8005962:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	2200      	movs	r2, #0
 8005972:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b60      	cmp	r3, #96	@ 0x60
 800598e:	d10e      	bne.n	80059ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7fe fc2a 	bl	8004200 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059ac:	e027      	b.n	80059fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059b4:	2b28      	cmp	r3, #40	@ 0x28
 80059b6:	d117      	bne.n	80059e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2228      	movs	r2, #40	@ 0x28
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059e6:	e007      	b.n	80059f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059f8:	6978      	ldr	r0, [r7, #20]
 80059fa:	f7fe fbf7 	bl	80041ec <HAL_I2C_ErrorCallback>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	14f8b589 	.word	0x14f8b589

08005a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a20:	e025      	b.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fc fa17 	bl	8001e5c <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e023      	b.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d10d      	bne.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	e00c      	b.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	43da      	mvns	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d0b6      	beq.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005acc:	e051      	b.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005adc:	d123      	bne.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	f043 0204 	orr.w	r2, r3, #4
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e046      	b.n	8005bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d021      	beq.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fc f995 	bl	8001e5c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e020      	b.n	8005bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10c      	bne.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	43da      	mvns	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bf14      	ite	ne
 8005b8e:	2301      	movne	r3, #1
 8005b90:	2300      	moveq	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	e00b      	b.n	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d18d      	bne.n	8005ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc8:	e02d      	b.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f86a 	bl	8005ca4 <I2C_IsAcknowledgeFailed>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e02d      	b.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d021      	beq.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fc f93b 	bl	8001e5c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d116      	bne.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e007      	b.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c30:	2b80      	cmp	r3, #128	@ 0x80
 8005c32:	d1ca      	bne.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c4c:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	0a1a      	lsrs	r2, r3, #8
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e008      	b.n	8005c90 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8c:	d0e9      	beq.n	8005c62 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000000 	.word	0x20000000
 8005ca0:	14f8b589 	.word	0x14f8b589

08005ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cba:	d11b      	bne.n	8005cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f043 0204 	orr.w	r2, r3, #4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005d12:	d103      	bne.n	8005d1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d1a:	e007      	b.n	8005d2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005d24:	d102      	bne.n	8005d2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b68      	ldr	r3, [pc, #416]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90c      	bls.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b65      	ldr	r3, [pc, #404]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b63      	ldr	r3, [pc, #396]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0b8      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d8c:	4b59      	ldr	r3, [pc, #356]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a58      	ldr	r2, [pc, #352]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da4:	4b53      	ldr	r3, [pc, #332]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a52      	ldr	r2, [pc, #328]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db0:	4b50      	ldr	r3, [pc, #320]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	494d      	ldr	r1, [pc, #308]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d044      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	4b47      	ldr	r3, [pc, #284]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d119      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e07f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e06:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e067      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e16:	4b37      	ldr	r3, [pc, #220]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 0203 	bic.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4934      	ldr	r1, [pc, #208]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e28:	f7fc f818 	bl	8001e5c <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e30:	f7fc f814 	bl	8001e5c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e04f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 020c 	and.w	r2, r3, #12
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1eb      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d20c      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b20      	ldr	r3, [pc, #128]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e032      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8c:	4b19      	ldr	r3, [pc, #100]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4916      	ldr	r1, [pc, #88]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eaa:	4b12      	ldr	r3, [pc, #72]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	490e      	ldr	r1, [pc, #56]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ebe:	f000 f821 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	490a      	ldr	r1, [pc, #40]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	5ccb      	ldrb	r3, [r1, r3]
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	4a09      	ldr	r2, [pc, #36]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eda:	4b09      	ldr	r3, [pc, #36]	@ (8005f00 <HAL_RCC_ClockConfig+0x1c8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fb ff78 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023c00 	.word	0x40023c00
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	0800c668 	.word	0x0800c668
 8005efc:	20000000 	.word	0x20000000
 8005f00:	20000004 	.word	0x20000004

08005f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b090      	sub	sp, #64	@ 0x40
 8005f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f14:	2300      	movs	r3, #0
 8005f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1c:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d00d      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x40>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	f200 80a1 	bhi.w	8006070 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x34>
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f36:	e09b      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f38:	4b53      	ldr	r3, [pc, #332]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005f3c:	e09b      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f3e:	4b53      	ldr	r3, [pc, #332]	@ (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f42:	e098      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f44:	4b4f      	ldr	r3, [pc, #316]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d028      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	623b      	str	r3, [r7, #32]
 8005f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4b47      	ldr	r3, [pc, #284]	@ (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f70:	fb03 f201 	mul.w	r2, r3, r1
 8005f74:	2300      	movs	r3, #0
 8005f76:	fb00 f303 	mul.w	r3, r0, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4a43      	ldr	r2, [pc, #268]	@ (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f84:	460a      	mov	r2, r1
 8005f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	2200      	movs	r2, #0
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f9e:	f7fa f93f 	bl	8000220 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005faa:	e053      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fac:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	617a      	str	r2, [r7, #20]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fbe:	f04f 0b00 	mov.w	fp, #0
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	0159      	lsls	r1, r3, #5
 8005fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd4:	0150      	lsls	r0, r2, #5
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	ebb2 080a 	subs.w	r8, r2, sl
 8005fde:	eb63 090b 	sbc.w	r9, r3, fp
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8005ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	00eb      	lsls	r3, r5, #3
 8006008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600c:	00e2      	lsls	r2, r4, #3
 800600e:	4614      	mov	r4, r2
 8006010:	461d      	mov	r5, r3
 8006012:	eb14 030a 	adds.w	r3, r4, sl
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	eb45 030b 	adc.w	r3, r5, fp
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603e:	2200      	movs	r2, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006048:	f7fa f8ea 	bl	8000220 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006054:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800606e:	e002      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x184>)
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006078:	4618      	mov	r0, r3
 800607a:	3740      	adds	r7, #64	@ 0x40
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400
 800608c:	017d7840 	.word	0x017d7840

08006090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	@ (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000000 	.word	0x20000000

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	0800c678 	.word	0x0800c678

080060d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060d4:	f7ff ffdc 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0b5b      	lsrs	r3, r3, #13
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4903      	ldr	r1, [pc, #12]	@ (80060f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40023800 	.word	0x40023800
 80060f4:	0800c678 	.word	0x0800c678

080060f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e273      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d075      	beq.n	8006202 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006116:	4b88      	ldr	r3, [pc, #544]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00c      	beq.n	800613c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006122:	4b85      	ldr	r3, [pc, #532]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800612a:	2b08      	cmp	r3, #8
 800612c:	d112      	bne.n	8006154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800612e:	4b82      	ldr	r3, [pc, #520]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800613a:	d10b      	bne.n	8006154 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	4b7e      	ldr	r3, [pc, #504]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05b      	beq.n	8006200 <HAL_RCC_OscConfig+0x108>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d157      	bne.n	8006200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e24e      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800615c:	d106      	bne.n	800616c <HAL_RCC_OscConfig+0x74>
 800615e:	4b76      	ldr	r3, [pc, #472]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a75      	ldr	r2, [pc, #468]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e01d      	b.n	80061a8 <HAL_RCC_OscConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0x98>
 8006176:	4b70      	ldr	r3, [pc, #448]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a6f      	ldr	r2, [pc, #444]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800617c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4b6d      	ldr	r3, [pc, #436]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6c      	ldr	r2, [pc, #432]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e00b      	b.n	80061a8 <HAL_RCC_OscConfig+0xb0>
 8006190:	4b69      	ldr	r3, [pc, #420]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a68      	ldr	r2, [pc, #416]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4b66      	ldr	r3, [pc, #408]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a65      	ldr	r2, [pc, #404]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 80061a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb fe54 	bl	8001e5c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061b8:	f7fb fe50 	bl	8001e5c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	@ 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e213      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0xc0>
 80061d6:	e014      	b.n	8006202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fb fe40 	bl	8001e5c <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061e0:	f7fb fe3c 	bl	8001e5c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	@ 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e1ff      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061f2:	4b51      	ldr	r3, [pc, #324]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0xe8>
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d063      	beq.n	80062d6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800620e:	4b4a      	ldr	r3, [pc, #296]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800621a:	4b47      	ldr	r3, [pc, #284]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006222:	2b08      	cmp	r3, #8
 8006224:	d11c      	bne.n	8006260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006226:	4b44      	ldr	r3, [pc, #272]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d116      	bne.n	8006260 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006232:	4b41      	ldr	r3, [pc, #260]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_RCC_OscConfig+0x152>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d001      	beq.n	800624a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e1d3      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624a:	4b3b      	ldr	r3, [pc, #236]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4937      	ldr	r1, [pc, #220]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800625a:	4313      	orrs	r3, r2
 800625c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625e:	e03a      	b.n	80062d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d020      	beq.n	80062aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006268:	4b34      	ldr	r3, [pc, #208]	@ (800633c <HAL_RCC_OscConfig+0x244>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626e:	f7fb fdf5 	bl	8001e5c <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006276:	f7fb fdf1 	bl	8001e5c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e1b4      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006288:	4b2b      	ldr	r3, [pc, #172]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006294:	4b28      	ldr	r3, [pc, #160]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	4925      	ldr	r1, [pc, #148]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	600b      	str	r3, [r1, #0]
 80062a8:	e015      	b.n	80062d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062aa:	4b24      	ldr	r3, [pc, #144]	@ (800633c <HAL_RCC_OscConfig+0x244>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fb fdd4 	bl	8001e5c <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b8:	f7fb fdd0 	bl	8001e5c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e193      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d036      	beq.n	8006350 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d016      	beq.n	8006318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ea:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <HAL_RCC_OscConfig+0x248>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fb fdb4 	bl	8001e5c <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062f8:	f7fb fdb0 	bl	8001e5c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e173      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800630a:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <HAL_RCC_OscConfig+0x240>)
 800630c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x200>
 8006316:	e01b      	b.n	8006350 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006318:	4b09      	ldr	r3, [pc, #36]	@ (8006340 <HAL_RCC_OscConfig+0x248>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631e:	f7fb fd9d 	bl	8001e5c <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	e00e      	b.n	8006344 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006326:	f7fb fd99 	bl	8001e5c <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d907      	bls.n	8006344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e15c      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
 8006338:	40023800 	.word	0x40023800
 800633c:	42470000 	.word	0x42470000
 8006340:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006344:	4b8a      	ldr	r3, [pc, #552]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ea      	bne.n	8006326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8097 	beq.w	800648c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006362:	4b83      	ldr	r3, [pc, #524]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10f      	bne.n	800638e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	4a7e      	ldr	r2, [pc, #504]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6413      	str	r3, [r2, #64]	@ 0x40
 800637e:	4b7c      	ldr	r3, [pc, #496]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638e:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCC_OscConfig+0x47c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d118      	bne.n	80063cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800639a:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCC_OscConfig+0x47c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x47c>)
 80063a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a6:	f7fb fd59 	bl	8001e5c <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fb fd55 	bl	8001e5c <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e118      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006574 <HAL_RCC_OscConfig+0x47c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d106      	bne.n	80063e2 <HAL_RCC_OscConfig+0x2ea>
 80063d4:	4b66      	ldr	r3, [pc, #408]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d8:	4a65      	ldr	r2, [pc, #404]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e0:	e01c      	b.n	800641c <HAL_RCC_OscConfig+0x324>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d10c      	bne.n	8006404 <HAL_RCC_OscConfig+0x30c>
 80063ea:	4b61      	ldr	r3, [pc, #388]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ee:	4a60      	ldr	r2, [pc, #384]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063f0:	f043 0304 	orr.w	r3, r3, #4
 80063f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fa:	4a5d      	ldr	r2, [pc, #372]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6713      	str	r3, [r2, #112]	@ 0x70
 8006402:	e00b      	b.n	800641c <HAL_RCC_OscConfig+0x324>
 8006404:	4b5a      	ldr	r3, [pc, #360]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006408:	4a59      	ldr	r2, [pc, #356]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006416:	f023 0304 	bic.w	r3, r3, #4
 800641a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d015      	beq.n	8006450 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006424:	f7fb fd1a 	bl	8001e5c <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642a:	e00a      	b.n	8006442 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800642c:	f7fb fd16 	bl	8001e5c <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e0d7      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006442:	4b4b      	ldr	r3, [pc, #300]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0ee      	beq.n	800642c <HAL_RCC_OscConfig+0x334>
 800644e:	e014      	b.n	800647a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fb fd04 	bl	8001e5c <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006456:	e00a      	b.n	800646e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006458:	f7fb fd00 	bl	8001e5c <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e0c1      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800646e:	4b40      	ldr	r3, [pc, #256]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1ee      	bne.n	8006458 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d105      	bne.n	800648c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006480:	4b3b      	ldr	r3, [pc, #236]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006484:	4a3a      	ldr	r2, [pc, #232]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800648a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80ad 	beq.w	80065f0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006496:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d060      	beq.n	8006564 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d145      	bne.n	8006536 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064aa:	4b33      	ldr	r3, [pc, #204]	@ (8006578 <HAL_RCC_OscConfig+0x480>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b0:	f7fb fcd4 	bl	8001e5c <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b8:	f7fb fcd0 	bl	8001e5c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e093      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ca:	4b29      	ldr	r3, [pc, #164]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e4:	019b      	lsls	r3, r3, #6
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	3b01      	subs	r3, #1
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006500:	071b      	lsls	r3, r3, #28
 8006502:	491b      	ldr	r1, [pc, #108]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006504:	4313      	orrs	r3, r2
 8006506:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006508:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <HAL_RCC_OscConfig+0x480>)
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650e:	f7fb fca5 	bl	8001e5c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006516:	f7fb fca1 	bl	8001e5c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e064      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006528:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f0      	beq.n	8006516 <HAL_RCC_OscConfig+0x41e>
 8006534:	e05c      	b.n	80065f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <HAL_RCC_OscConfig+0x480>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fb fc8e 	bl	8001e5c <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006544:	f7fb fc8a 	bl	8001e5c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e04d      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006556:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <HAL_RCC_OscConfig+0x478>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x44c>
 8006562:	e045      	b.n	80065f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d107      	bne.n	800657c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e040      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
 8006570:	40023800 	.word	0x40023800
 8006574:	40007000 	.word	0x40007000
 8006578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800657c:	4b1f      	ldr	r3, [pc, #124]	@ (80065fc <HAL_RCC_OscConfig+0x504>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d030      	beq.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006594:	429a      	cmp	r2, r3
 8006596:	d129      	bne.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d122      	bne.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d119      	bne.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	3b01      	subs	r3, #1
 80065c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d10f      	bne.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065d8:	429a      	cmp	r2, r3
 80065da:	d107      	bne.n	80065ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40023800 	.word	0x40023800

08006600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e07b      	b.n	800670a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006622:	d009      	beq.n	8006638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	61da      	str	r2, [r3, #28]
 800662a:	e005      	b.n	8006638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fa fe54 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800666e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066bc:	ea42 0103 	orr.w	r1, r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	f003 0104 	and.w	r1, r3, #4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	f003 0210 	and.w	r2, r3, #16
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_Transmit+0x22>
 8006730:	2302      	movs	r3, #2
 8006732:	e126      	b.n	8006982 <HAL_SPI_Transmit+0x270>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673c:	f7fb fb8e 	bl	8001e5c <HAL_GetTick>
 8006740:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d002      	beq.n	8006758 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006752:	2302      	movs	r3, #2
 8006754:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006756:	e10b      	b.n	8006970 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_SPI_Transmit+0x52>
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006768:	e102      	b.n	8006970 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2203      	movs	r2, #3
 800676e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b0:	d10f      	bne.n	80067d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d007      	beq.n	80067f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f8:	d14b      	bne.n	8006892 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_SPI_Transmit+0xf6>
 8006802:	8afb      	ldrh	r3, [r7, #22]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d13e      	bne.n	8006886 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800682c:	e02b      	b.n	8006886 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d112      	bne.n	8006862 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	881a      	ldrh	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	1c9a      	adds	r2, r3, #2
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006860:	e011      	b.n	8006886 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006862:	f7fb fafb 	bl	8001e5c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d803      	bhi.n	800687a <HAL_SPI_Transmit+0x168>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x16e>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006884:	e074      	b.n	8006970 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ce      	bne.n	800682e <HAL_SPI_Transmit+0x11c>
 8006890:	e04c      	b.n	800692c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_Transmit+0x18e>
 800689a:	8afb      	ldrh	r3, [r7, #22]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d140      	bne.n	8006922 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	7812      	ldrb	r2, [r2, #0]
 80068ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068c6:	e02c      	b.n	8006922 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d113      	bne.n	80068fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068fc:	e011      	b.n	8006922 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fe:	f7fb faad 	bl	8001e5c <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d803      	bhi.n	8006916 <HAL_SPI_Transmit+0x204>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d102      	bne.n	800691c <HAL_SPI_Transmit+0x20a>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006920:	e026      	b.n	8006970 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1cd      	bne.n	80068c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 f803 	bl	800793c <SPI_EndRxTxTransaction>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e000      	b.n	8006970 <HAL_SPI_Transmit+0x25e>
  }

error:
 800696e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006980:	7ffb      	ldrb	r3, [r7, #31]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b088      	sub	sp, #32
 800698e:	af02      	add	r7, sp, #8
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4613      	mov	r3, r2
 8006998:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a6:	d112      	bne.n	80069ce <HAL_SPI_Receive+0x44>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10e      	bne.n	80069ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2204      	movs	r2, #4
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f8f1 	bl	8006bac <HAL_SPI_TransmitReceive>
 80069ca:	4603      	mov	r3, r0
 80069cc:	e0ea      	b.n	8006ba4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_SPI_Receive+0x52>
 80069d8:	2302      	movs	r3, #2
 80069da:	e0e3      	b.n	8006ba4 <HAL_SPI_Receive+0x21a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e4:	f7fb fa3a 	bl	8001e5c <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
 80069f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069fa:	e0ca      	b.n	8006b92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_SPI_Receive+0x7e>
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d102      	bne.n	8006a0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a0c:	e0c1      	b.n	8006b92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2204      	movs	r2, #4
 8006a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	88fa      	ldrh	r2, [r7, #6]
 8006a26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a54:	d10f      	bne.n	8006a76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b40      	cmp	r3, #64	@ 0x40
 8006a82:	d007      	beq.n	8006a94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d162      	bne.n	8006b62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a9c:	e02e      	b.n	8006afc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d115      	bne.n	8006ad8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f103 020c 	add.w	r2, r3, #12
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ad6:	e011      	b.n	8006afc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad8:	f7fb f9c0 	bl	8001e5c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d803      	bhi.n	8006af0 <HAL_SPI_Receive+0x166>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d102      	bne.n	8006af6 <HAL_SPI_Receive+0x16c>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006afa:	e04a      	b.n	8006b92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1cb      	bne.n	8006a9e <HAL_SPI_Receive+0x114>
 8006b06:	e031      	b.n	8006b6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d113      	bne.n	8006b3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	b292      	uxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b3c:	e011      	b.n	8006b62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3e:	f7fb f98d 	bl	8001e5c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d803      	bhi.n	8006b56 <HAL_SPI_Receive+0x1cc>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d102      	bne.n	8006b5c <HAL_SPI_Receive+0x1d2>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b60:	e017      	b.n	8006b92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1cd      	bne.n	8006b08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fe7d 	bl	8007870 <SPI_EndRxTransaction>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	75fb      	strb	r3, [r7, #23]
 8006b8e:	e000      	b.n	8006b92 <HAL_SPI_Receive+0x208>
  }

error :
 8006b90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08c      	sub	sp, #48	@ 0x30
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x26>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e18a      	b.n	8006ee8 <HAL_SPI_TransmitReceive+0x33c>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bda:	f7fb f93f 	bl	8001e5c <HAL_GetTick>
 8006bde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d00f      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x70>
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c02:	d107      	bne.n	8006c14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <HAL_SPI_TransmitReceive+0x68>
 8006c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d003      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006c1a:	e15b      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_SPI_TransmitReceive+0x82>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_SPI_TransmitReceive+0x82>
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006c34:	e14e      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d003      	beq.n	8006c4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2205      	movs	r2, #5
 8006c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	887a      	ldrh	r2, [r7, #2]
 8006c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	887a      	ldrh	r2, [r7, #2]
 8006c60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	887a      	ldrh	r2, [r7, #2]
 8006c6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	887a      	ldrh	r2, [r7, #2]
 8006c72:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8a:	2b40      	cmp	r3, #64	@ 0x40
 8006c8c:	d007      	beq.n	8006c9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca6:	d178      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x10a>
 8006cb0:	8b7b      	ldrh	r3, [r7, #26]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d166      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cda:	e053      	b.n	8006d84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d11b      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x176>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <HAL_SPI_TransmitReceive+0x176>
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d113      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	881a      	ldrh	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	1c9a      	adds	r2, r3, #2
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d119      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x1b8>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d014      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	b292      	uxth	r2, r2
 8006d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d60:	2301      	movs	r3, #1
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d64:	f7fb f87a 	bl	8001e5c <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d807      	bhi.n	8006d84 <HAL_SPI_TransmitReceive+0x1d8>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d003      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006d82:	e0a7      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1a6      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x130>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1a1      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x130>
 8006d98:	e07c      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x1fc>
 8006da2:	8b7b      	ldrh	r3, [r7, #26]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d16b      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dce:	e057      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d11c      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x26c>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d017      	beq.n	8006e18 <HAL_SPI_TransmitReceive+0x26c>
 8006de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d114      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	7812      	ldrb	r2, [r2, #0]
 8006dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d119      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x2ae>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d014      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e5a:	f7fa ffff 	bl	8001e5c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <HAL_SPI_TransmitReceive+0x2c6>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x2cc>
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d103      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006e7e:	e029      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1a2      	bne.n	8006dd0 <HAL_SPI_TransmitReceive+0x224>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d19d      	bne.n	8006dd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fd4f 	bl	800793c <SPI_EndRxTxTransaction>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d006      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006eb0:	e010      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	e000      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3730      	adds	r7, #48	@ 0x30
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_SPI_Transmit_DMA+0x20>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e09b      	b.n	8007048 <HAL_SPI_Transmit_DMA+0x158>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
 8006f26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f28:	e089      	b.n	800703e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_SPI_Transmit_DMA+0x46>
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f3a:	e080      	b.n	800703e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2203      	movs	r2, #3
 8006f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f82:	d10f      	bne.n	8006fa4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fa8:	4a29      	ldr	r2, [pc, #164]	@ (8007050 <HAL_SPI_Transmit_DMA+0x160>)
 8006faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb0:	4a28      	ldr	r2, [pc, #160]	@ (8007054 <HAL_SPI_Transmit_DMA+0x164>)
 8006fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb8:	4a27      	ldr	r2, [pc, #156]	@ (8007058 <HAL_SPI_Transmit_DMA+0x168>)
 8006fba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fda:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006fdc:	f7fb feb0 	bl	8002d40 <HAL_DMA_Start_IT>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fea:	f043 0210 	orr.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8006ffe:	e01e      	b.n	800703e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700a:	2b40      	cmp	r3, #64	@ 0x40
 800700c:	d007      	beq.n	800701e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800701c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0220 	orr.w	r2, r2, #32
 800702c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0202 	orr.w	r2, r2, #2
 800703c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	080076a5 	.word	0x080076a5
 8007054:	080074c5 	.word	0x080074c5
 8007058:	080076f9 	.word	0x080076f9

0800705c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007078:	2302      	movs	r3, #2
 800707a:	e0e3      	b.n	8007244 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800708a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007092:	7dbb      	ldrb	r3, [r7, #22]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d00d      	beq.n	80070b4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800709e:	d106      	bne.n	80070ae <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <HAL_SPI_TransmitReceive_DMA+0x52>
 80070a8:	7dbb      	ldrb	r3, [r7, #22]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d002      	beq.n	80070b4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
 80070b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070b2:	e0c2      	b.n	800723a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070ca:	e0b6      	b.n	800723a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d003      	beq.n	80070e0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2205      	movs	r2, #5
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	887a      	ldrh	r2, [r7, #2]
 80070f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	887a      	ldrh	r2, [r7, #2]
 80070f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	887a      	ldrh	r2, [r7, #2]
 8007102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	887a      	ldrh	r2, [r7, #2]
 8007108:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b04      	cmp	r3, #4
 8007120:	d108      	bne.n	8007134 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007126:	4a49      	ldr	r2, [pc, #292]	@ (800724c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007128:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712e:	4a48      	ldr	r2, [pc, #288]	@ (8007250 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007130:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007132:	e007      	b.n	8007144 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007138:	4a46      	ldr	r2, [pc, #280]	@ (8007254 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800713a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007140:	4a45      	ldr	r2, [pc, #276]	@ (8007258 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007142:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007148:	4a44      	ldr	r2, [pc, #272]	@ (800725c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800714a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007150:	2200      	movs	r2, #0
 8007152:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	4619      	mov	r1, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800716c:	f7fb fde8 	bl	8002d40 <HAL_DMA_Start_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717a:	f043 0210 	orr.w	r2, r3, #16
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800718e:	e054      	b.n	800723a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071a4:	2200      	movs	r2, #0
 80071a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ac:	2200      	movs	r2, #0
 80071ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b4:	2200      	movs	r2, #0
 80071b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071bc:	2200      	movs	r2, #0
 80071be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	4619      	mov	r1, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071d8:	f7fb fdb2 	bl	8002d40 <HAL_DMA_Start_IT>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80071fa:	e01e      	b.n	800723a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b40      	cmp	r3, #64	@ 0x40
 8007208:	d007      	beq.n	800721a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007218:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0220 	orr.w	r2, r2, #32
 8007228:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0202 	orr.w	r2, r2, #2
 8007238:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	080076c1 	.word	0x080076c1
 8007250:	0800756d 	.word	0x0800756d
 8007254:	080076dd 	.word	0x080076dd
 8007258:	08007615 	.word	0x08007615
 800725c:	080076f9 	.word	0x080076f9

08007260 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	099b      	lsrs	r3, r3, #6
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	099b      	lsrs	r3, r3, #6
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    return;
 80072a2:	e0d7      	b.n	8007454 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_SPI_IRQHandler+0x66>
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	09db      	lsrs	r3, r3, #7
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
    return;
 80072c4:	e0c6      	b.n	8007454 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <HAL_SPI_IRQHandler+0x8c>
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	099b      	lsrs	r3, r3, #6
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80b4 	beq.w	8007454 <HAL_SPI_IRQHandler+0x1f4>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80ad 	beq.w	8007454 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	099b      	lsrs	r3, r3, #6
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d023      	beq.n	800734e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d011      	beq.n	8007336 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007316:	f043 0204 	orr.w	r2, r3, #4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	e00b      	b.n	800734e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	693b      	ldr	r3, [r7, #16]
        return;
 800734c:	e082      	b.n	8007454 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735e:	f043 0201 	orr.w	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00c      	beq.n	80073aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007394:	f043 0208 	orr.w	r2, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800739c:	2300      	movs	r3, #0
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04f      	beq.n	8007452 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <HAL_SPI_IRQHandler+0x17e>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d034      	beq.n	8007448 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0203 	bic.w	r2, r2, #3
 80073ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fa:	4a18      	ldr	r2, [pc, #96]	@ (800745c <HAL_SPI_IRQHandler+0x1fc>)
 80073fc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007402:	4618      	mov	r0, r3
 8007404:	f7fb fd64 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007426:	4a0d      	ldr	r2, [pc, #52]	@ (800745c <HAL_SPI_IRQHandler+0x1fc>)
 8007428:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742e:	4618      	mov	r0, r3
 8007430:	f7fb fd4e 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800743e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007446:	e003      	b.n	8007450 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f831 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800744e:	e000      	b.n	8007452 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007450:	bf00      	nop
    return;
 8007452:	bf00      	nop
  }
}
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	08007739 	.word	0x08007739

08007460 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d2:	f7fa fcc3 	bl	8001e5c <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e6:	d03b      	beq.n	8007560 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0220 	bic.w	r2, r2, #32
 80074f6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0202 	bic.w	r2, r2, #2
 8007506:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	2164      	movs	r1, #100	@ 0x64
 800750c:	6978      	ldr	r0, [r7, #20]
 800750e:	f000 fa15 	bl	800793c <SPI_EndRxTxTransaction>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2200      	movs	r2, #0
 8007546:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f7ff ffa9 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800755e:	e002      	b.n	8007566 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007560:	6978      	ldr	r0, [r7, #20]
 8007562:	f7fa f985 	bl	8001870 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757a:	f7fa fc6f 	bl	8001e5c <HAL_GetTick>
 800757e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758e:	d03b      	beq.n	8007608 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0220 	bic.w	r2, r2, #32
 800759e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <SPI_DMAReceiveCplt+0x58>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075b0:	d108      	bne.n	80075c4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0203 	bic.w	r2, r2, #3
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	e007      	b.n	80075d4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	2164      	movs	r1, #100	@ 0x64
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f949 	bl	8007870 <SPI_EndRxTransaction>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff ff55 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007606:	e002      	b.n	800760e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff ff29 	bl	8007460 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007622:	f7fa fc1b 	bl	8001e5c <HAL_GetTick>
 8007626:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007636:	d02f      	beq.n	8007698 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0220 	bic.w	r2, r2, #32
 8007646:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	2164      	movs	r1, #100	@ 0x64
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f975 	bl	800793c <SPI_EndRxTxTransaction>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0203 	bic.w	r2, r2, #3
 8007672:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff ff0d 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007696:	e002      	b.n	800769e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7fa f8ff 	bl	800189c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff fede 	bl	8007474 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff feda 	bl	8007488 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fed6 	bl	800749c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0203 	bic.w	r2, r2, #3
 8007714:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771a:	f043 0210 	orr.w	r2, r3, #16
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fec0 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff feac 	bl	80074b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007770:	f7fa fb74 	bl	8001e5c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007780:	f7fa fb6c 	bl	8001e5c <HAL_GetTick>
 8007784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007786:	4b39      	ldr	r3, [pc, #228]	@ (800786c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	015b      	lsls	r3, r3, #5
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	e054      	b.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d050      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a0:	f7fa fb5c 	bl	8001e5c <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d902      	bls.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d13d      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077ce:	d111      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d8:	d004      	beq.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e2:	d107      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077fc:	d10f      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800781c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e017      	b.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b01      	subs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d19b      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000000 	.word	0x20000000

08007870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007884:	d111      	bne.n	80078aa <SPI_EndRxTransaction+0x3a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800788e:	d004      	beq.n	800789a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007898:	d107      	bne.n	80078aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078b2:	d12a      	bne.n	800790a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078bc:	d012      	beq.n	80078e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2180      	movs	r1, #128	@ 0x80
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff ff49 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02d      	beq.n	8007930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d8:	f043 0220 	orr.w	r2, r3, #32
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e026      	b.n	8007932 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	2101      	movs	r1, #1
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7ff ff36 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01a      	beq.n	8007930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fe:	f043 0220 	orr.w	r2, r3, #32
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e013      	b.n	8007932 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2200      	movs	r2, #0
 8007912:	2101      	movs	r1, #1
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f7ff ff23 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007924:	f043 0220 	orr.w	r2, r3, #32
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e000      	b.n	8007932 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af02      	add	r7, sp, #8
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <SPI_EndRxTxTransaction+0x7c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1b      	ldr	r2, [pc, #108]	@ (80079bc <SPI_EndRxTxTransaction+0x80>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	0d5b      	lsrs	r3, r3, #21
 8007954:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007966:	d112      	bne.n	800798e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	2180      	movs	r1, #128	@ 0x80
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff fef4 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	f043 0220 	orr.w	r2, r3, #32
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e00f      	b.n	80079ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3b01      	subs	r3, #1
 8007998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a4:	2b80      	cmp	r3, #128	@ 0x80
 80079a6:	d0f2      	beq.n	800798e <SPI_EndRxTxTransaction+0x52>
 80079a8:	e000      	b.n	80079ac <SPI_EndRxTxTransaction+0x70>
        break;
 80079aa:	bf00      	nop
  }

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000000 	.word	0x20000000
 80079bc:	165e9f81 	.word	0x165e9f81

080079c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e03f      	b.n	8007a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7f9 fe04 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2224      	movs	r2, #36	@ 0x24
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc7b 	bl	8008300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695a      	ldr	r2, [r3, #20]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10f      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x66>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fb65 	bl	800818a <UART_Receive_IT>
      return;
 8007ac0:	e256      	b.n	8007f70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 80de 	beq.w	8007c88 <HAL_UART_IRQHandler+0x22c>
 8007acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007adc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80d1 	beq.w	8007c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <HAL_UART_IRQHandler+0xae>
 8007af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	f043 0201 	orr.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <HAL_UART_IRQHandler+0xd2>
 8007b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	f043 0202 	orr.w	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <HAL_UART_IRQHandler+0xf6>
 8007b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	f043 0204 	orr.w	r2, r3, #4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d011      	beq.n	8007b82 <HAL_UART_IRQHandler+0x126>
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	f043 0208 	orr.w	r2, r3, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 81ed 	beq.w	8007f66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_UART_IRQHandler+0x14e>
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 faf0 	bl	800818a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb4:	2b40      	cmp	r3, #64	@ 0x40
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x17a>
 8007bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d04f      	beq.n	8007c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f9f8 	bl	8007fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	d141      	bne.n	8007c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3314      	adds	r3, #20
 8007c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1d9      	bne.n	8007bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d013      	beq.n	8007c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	4a7d      	ldr	r2, [pc, #500]	@ (8007e38 <HAL_UART_IRQHandler+0x3dc>)
 8007c44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fb f940 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d016      	beq.n	8007c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c64:	e00e      	b.n	8007c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f99a 	bl	8007fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6c:	e00a      	b.n	8007c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f996 	bl	8007fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c74:	e006      	b.n	8007c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f992 	bl	8007fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007c82:	e170      	b.n	8007f66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	bf00      	nop
    return;
 8007c86:	e16e      	b.n	8007f66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	f040 814a 	bne.w	8007f26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8143 	beq.w	8007f26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 813c 	beq.w	8007f26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	f040 80b4 	bne.w	8007e3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8140 	beq.w	8007f6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f080 8139 	bcs.w	8007f6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0a:	f000 8088 	beq.w	8007e1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	330c      	adds	r3, #12
 8007d36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1d9      	bne.n	8007d0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3314      	adds	r3, #20
 8007d60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d6c:	f023 0301 	bic.w	r3, r3, #1
 8007d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3314      	adds	r3, #20
 8007d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e1      	bne.n	8007d5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3314      	adds	r3, #20
 8007d9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3314      	adds	r3, #20
 8007db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007dc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e3      	bne.n	8007d96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dee:	f023 0310 	bic.w	r3, r3, #16
 8007df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e3      	bne.n	8007ddc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fa ffe9 	bl	8002df0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8c0 	bl	8007fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e34:	e099      	b.n	8007f6a <HAL_UART_IRQHandler+0x50e>
 8007e36:	bf00      	nop
 8007e38:	08008093 	.word	0x08008093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 808b 	beq.w	8007f6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8086 	beq.w	8007f6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	330c      	adds	r3, #12
 8007e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e86:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e3      	bne.n	8007e62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3314      	adds	r3, #20
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3314      	adds	r3, #20
 8007eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e3      	bne.n	8007e9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0310 	bic.w	r3, r3, #16
 8007ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f04:	61fa      	str	r2, [r7, #28]
 8007f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	69b9      	ldr	r1, [r7, #24]
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	617b      	str	r3, [r7, #20]
   return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e3      	bne.n	8007ee0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f848 	bl	8007fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f24:	e023      	b.n	8007f6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <HAL_UART_IRQHandler+0x4ea>
 8007f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8bb 	bl	80080ba <UART_Transmit_IT>
    return;
 8007f44:	e014      	b.n	8007f70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00e      	beq.n	8007f70 <HAL_UART_IRQHandler+0x514>
 8007f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8fb 	bl	800815a <UART_EndTransmit_IT>
    return;
 8007f64:	e004      	b.n	8007f70 <HAL_UART_IRQHandler+0x514>
    return;
 8007f66:	bf00      	nop
 8007f68:	e002      	b.n	8007f70 <HAL_UART_IRQHandler+0x514>
      return;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <HAL_UART_IRQHandler+0x514>
      return;
 8007f6e:	bf00      	nop
  }
}
 8007f70:	37e8      	adds	r7, #232	@ 0xe8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop

08007f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b095      	sub	sp, #84	@ 0x54
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e5      	bne.n	8007fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3314      	adds	r3, #20
 800800e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	61fb      	str	r3, [r7, #28]
   return(result);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f023 0301 	bic.w	r3, r3, #1
 800801e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800802a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800802e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	d119      	bne.n	8008078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60bb      	str	r3, [r7, #8]
   return(result);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	647b      	str	r3, [r7, #68]	@ 0x44
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	330c      	adds	r3, #12
 8008062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008064:	61ba      	str	r2, [r7, #24]
 8008066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6979      	ldr	r1, [r7, #20]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	613b      	str	r3, [r7, #16]
   return(result);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008086:	bf00      	nop
 8008088:	3754      	adds	r7, #84	@ 0x54
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff ff77 	bl	8007fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b21      	cmp	r3, #33	@ 0x21
 80080cc:	d13e      	bne.n	800814c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d6:	d114      	bne.n	8008102 <UART_Transmit_IT+0x48>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d110      	bne.n	8008102 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	1c9a      	adds	r2, r3, #2
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	621a      	str	r2, [r3, #32]
 8008100:	e008      	b.n	8008114 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6211      	str	r1, [r2, #32]
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29b      	uxth	r3, r3
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4619      	mov	r1, r3
 8008122:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10f      	bne.n	8008148 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	e000      	b.n	800814e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800814c:	2302      	movs	r3, #2
  }
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fefc 	bl	8007f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08c      	sub	sp, #48	@ 0x30
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b22      	cmp	r3, #34	@ 0x22
 800819c:	f040 80ab 	bne.w	80082f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081a8:	d117      	bne.n	80081da <UART_Receive_IT+0x50>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d113      	bne.n	80081da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80081d8:	e026      	b.n	8008228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ec:	d007      	beq.n	80081fe <UART_Receive_IT+0x74>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <UART_Receive_IT+0x82>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e008      	b.n	800821e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29b      	uxth	r3, r3
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	4619      	mov	r1, r3
 8008236:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008238:	2b00      	cmp	r3, #0
 800823a:	d15a      	bne.n	80082f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0220 	bic.w	r2, r2, #32
 800824a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800825a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695a      	ldr	r2, [r3, #20]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008278:	2b01      	cmp	r3, #1
 800827a:	d135      	bne.n	80082e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	613b      	str	r3, [r7, #16]
   return(result);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f023 0310 	bic.w	r3, r3, #16
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a2:	623a      	str	r2, [r7, #32]
 80082a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	69f9      	ldr	r1, [r7, #28]
 80082a8:	6a3a      	ldr	r2, [r7, #32]
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d10a      	bne.n	80082da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fe67 	bl	8007fb4 <HAL_UARTEx_RxEventCallback>
 80082e6:	e002      	b.n	80082ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fe4f 	bl	8007f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e002      	b.n	80082f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e000      	b.n	80082f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3730      	adds	r7, #48	@ 0x30
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008304:	b0c0      	sub	sp, #256	@ 0x100
 8008306:	af00      	add	r7, sp, #0
 8008308:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	68d9      	ldr	r1, [r3, #12]
 800831e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	ea40 0301 	orr.w	r3, r0, r1
 8008328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	431a      	orrs	r2, r3
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	431a      	orrs	r2, r3
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008358:	f021 010c 	bic.w	r1, r1, #12
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008366:	430b      	orrs	r3, r1
 8008368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837a:	6999      	ldr	r1, [r3, #24]
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	ea40 0301 	orr.w	r3, r0, r1
 8008386:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4b95      	ldr	r3, [pc, #596]	@ (80085e4 <UART_SetConfig+0x2e4>)
 8008390:	429a      	cmp	r2, r3
 8008392:	d011      	beq.n	80083b8 <UART_SetConfig+0xb8>
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b93      	ldr	r3, [pc, #588]	@ (80085e8 <UART_SetConfig+0x2e8>)
 800839c:	429a      	cmp	r2, r3
 800839e:	d00b      	beq.n	80083b8 <UART_SetConfig+0xb8>
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b91      	ldr	r3, [pc, #580]	@ (80085ec <UART_SetConfig+0x2ec>)
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d005      	beq.n	80083b8 <UART_SetConfig+0xb8>
 80083ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b8f      	ldr	r3, [pc, #572]	@ (80085f0 <UART_SetConfig+0x2f0>)
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d104      	bne.n	80083c2 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083b8:	f7fd fe8a 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 80083bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083c0:	e003      	b.n	80083ca <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083c2:	f7fd fe71 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80083c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d4:	f040 8110 	bne.w	80085f8 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083ea:	4622      	mov	r2, r4
 80083ec:	462b      	mov	r3, r5
 80083ee:	1891      	adds	r1, r2, r2
 80083f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083f2:	415b      	adcs	r3, r3
 80083f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083fa:	4621      	mov	r1, r4
 80083fc:	eb12 0801 	adds.w	r8, r2, r1
 8008400:	4629      	mov	r1, r5
 8008402:	eb43 0901 	adc.w	r9, r3, r1
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800841a:	4690      	mov	r8, r2
 800841c:	4699      	mov	r9, r3
 800841e:	4623      	mov	r3, r4
 8008420:	eb18 0303 	adds.w	r3, r8, r3
 8008424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008428:	462b      	mov	r3, r5
 800842a:	eb49 0303 	adc.w	r3, r9, r3
 800842e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800843e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008446:	460b      	mov	r3, r1
 8008448:	18db      	adds	r3, r3, r3
 800844a:	653b      	str	r3, [r7, #80]	@ 0x50
 800844c:	4613      	mov	r3, r2
 800844e:	eb42 0303 	adc.w	r3, r2, r3
 8008452:	657b      	str	r3, [r7, #84]	@ 0x54
 8008454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800845c:	f7f7 fee0 	bl	8000220 <__aeabi_uldivmod>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4b63      	ldr	r3, [pc, #396]	@ (80085f4 <UART_SetConfig+0x2f4>)
 8008466:	fba3 2302 	umull	r2, r3, r3, r2
 800846a:	095b      	lsrs	r3, r3, #5
 800846c:	011c      	lsls	r4, r3, #4
 800846e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008472:	2200      	movs	r2, #0
 8008474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008478:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800847c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008480:	4642      	mov	r2, r8
 8008482:	464b      	mov	r3, r9
 8008484:	1891      	adds	r1, r2, r2
 8008486:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008488:	415b      	adcs	r3, r3
 800848a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800848c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008490:	4641      	mov	r1, r8
 8008492:	eb12 0a01 	adds.w	sl, r2, r1
 8008496:	4649      	mov	r1, r9
 8008498:	eb43 0b01 	adc.w	fp, r3, r1
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b0:	4692      	mov	sl, r2
 80084b2:	469b      	mov	fp, r3
 80084b4:	4643      	mov	r3, r8
 80084b6:	eb1a 0303 	adds.w	r3, sl, r3
 80084ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084be:	464b      	mov	r3, r9
 80084c0:	eb4b 0303 	adc.w	r3, fp, r3
 80084c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084dc:	460b      	mov	r3, r1
 80084de:	18db      	adds	r3, r3, r3
 80084e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80084e2:	4613      	mov	r3, r2
 80084e4:	eb42 0303 	adc.w	r3, r2, r3
 80084e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084f2:	f7f7 fe95 	bl	8000220 <__aeabi_uldivmod>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	4b3d      	ldr	r3, [pc, #244]	@ (80085f4 <UART_SetConfig+0x2f4>)
 80084fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	2264      	movs	r2, #100	@ 0x64
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	1acb      	subs	r3, r1, r3
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008512:	4b38      	ldr	r3, [pc, #224]	@ (80085f4 <UART_SetConfig+0x2f4>)
 8008514:	fba3 2302 	umull	r2, r3, r3, r2
 8008518:	095b      	lsrs	r3, r3, #5
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008520:	441c      	add	r4, r3
 8008522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008526:	2200      	movs	r2, #0
 8008528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800852c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008534:	4642      	mov	r2, r8
 8008536:	464b      	mov	r3, r9
 8008538:	1891      	adds	r1, r2, r2
 800853a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800853c:	415b      	adcs	r3, r3
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008544:	4641      	mov	r1, r8
 8008546:	1851      	adds	r1, r2, r1
 8008548:	6339      	str	r1, [r7, #48]	@ 0x30
 800854a:	4649      	mov	r1, r9
 800854c:	414b      	adcs	r3, r1
 800854e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008550:	f04f 0200 	mov.w	r2, #0
 8008554:	f04f 0300 	mov.w	r3, #0
 8008558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800855c:	4659      	mov	r1, fp
 800855e:	00cb      	lsls	r3, r1, #3
 8008560:	4651      	mov	r1, sl
 8008562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008566:	4651      	mov	r1, sl
 8008568:	00ca      	lsls	r2, r1, #3
 800856a:	4610      	mov	r0, r2
 800856c:	4619      	mov	r1, r3
 800856e:	4603      	mov	r3, r0
 8008570:	4642      	mov	r2, r8
 8008572:	189b      	adds	r3, r3, r2
 8008574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008578:	464b      	mov	r3, r9
 800857a:	460a      	mov	r2, r1
 800857c:	eb42 0303 	adc.w	r3, r2, r3
 8008580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008590:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008598:	460b      	mov	r3, r1
 800859a:	18db      	adds	r3, r3, r3
 800859c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800859e:	4613      	mov	r3, r2
 80085a0:	eb42 0303 	adc.w	r3, r2, r3
 80085a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085ae:	f7f7 fe37 	bl	8000220 <__aeabi_uldivmod>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <UART_SetConfig+0x2f4>)
 80085b8:	fba3 1302 	umull	r1, r3, r3, r2
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	2164      	movs	r1, #100	@ 0x64
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	3332      	adds	r3, #50	@ 0x32
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <UART_SetConfig+0x2f4>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	f003 0207 	and.w	r2, r3, #7
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4422      	add	r2, r4
 80085de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085e0:	e10a      	b.n	80087f8 <UART_SetConfig+0x4f8>
 80085e2:	bf00      	nop
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40011400 	.word	0x40011400
 80085ec:	40011800 	.word	0x40011800
 80085f0:	40011c00 	.word	0x40011c00
 80085f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008602:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800860a:	4642      	mov	r2, r8
 800860c:	464b      	mov	r3, r9
 800860e:	1891      	adds	r1, r2, r2
 8008610:	6239      	str	r1, [r7, #32]
 8008612:	415b      	adcs	r3, r3
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
 8008616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800861a:	4641      	mov	r1, r8
 800861c:	1854      	adds	r4, r2, r1
 800861e:	4649      	mov	r1, r9
 8008620:	eb43 0501 	adc.w	r5, r3, r1
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	00eb      	lsls	r3, r5, #3
 800862e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008632:	00e2      	lsls	r2, r4, #3
 8008634:	4614      	mov	r4, r2
 8008636:	461d      	mov	r5, r3
 8008638:	4643      	mov	r3, r8
 800863a:	18e3      	adds	r3, r4, r3
 800863c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008640:	464b      	mov	r3, r9
 8008642:	eb45 0303 	adc.w	r3, r5, r3
 8008646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800864a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008656:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008666:	4629      	mov	r1, r5
 8008668:	008b      	lsls	r3, r1, #2
 800866a:	4621      	mov	r1, r4
 800866c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008670:	4621      	mov	r1, r4
 8008672:	008a      	lsls	r2, r1, #2
 8008674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008678:	f7f7 fdd2 	bl	8000220 <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4b60      	ldr	r3, [pc, #384]	@ (8008804 <UART_SetConfig+0x504>)
 8008682:	fba3 2302 	umull	r2, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	011c      	lsls	r4, r3, #4
 800868a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008694:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800869c:	4642      	mov	r2, r8
 800869e:	464b      	mov	r3, r9
 80086a0:	1891      	adds	r1, r2, r2
 80086a2:	61b9      	str	r1, [r7, #24]
 80086a4:	415b      	adcs	r3, r3
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ac:	4641      	mov	r1, r8
 80086ae:	1851      	adds	r1, r2, r1
 80086b0:	6139      	str	r1, [r7, #16]
 80086b2:	4649      	mov	r1, r9
 80086b4:	414b      	adcs	r3, r1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086c4:	4659      	mov	r1, fp
 80086c6:	00cb      	lsls	r3, r1, #3
 80086c8:	4651      	mov	r1, sl
 80086ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ce:	4651      	mov	r1, sl
 80086d0:	00ca      	lsls	r2, r1, #3
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	4642      	mov	r2, r8
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086e0:	464b      	mov	r3, r9
 80086e2:	460a      	mov	r2, r1
 80086e4:	eb42 0303 	adc.w	r3, r2, r3
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008704:	4649      	mov	r1, r9
 8008706:	008b      	lsls	r3, r1, #2
 8008708:	4641      	mov	r1, r8
 800870a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800870e:	4641      	mov	r1, r8
 8008710:	008a      	lsls	r2, r1, #2
 8008712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008716:	f7f7 fd83 	bl	8000220 <__aeabi_uldivmod>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4611      	mov	r1, r2
 8008720:	4b38      	ldr	r3, [pc, #224]	@ (8008804 <UART_SetConfig+0x504>)
 8008722:	fba3 2301 	umull	r2, r3, r3, r1
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	2264      	movs	r2, #100	@ 0x64
 800872a:	fb02 f303 	mul.w	r3, r2, r3
 800872e:	1acb      	subs	r3, r1, r3
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	3332      	adds	r3, #50	@ 0x32
 8008734:	4a33      	ldr	r2, [pc, #204]	@ (8008804 <UART_SetConfig+0x504>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008740:	441c      	add	r4, r3
 8008742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008746:	2200      	movs	r2, #0
 8008748:	673b      	str	r3, [r7, #112]	@ 0x70
 800874a:	677a      	str	r2, [r7, #116]	@ 0x74
 800874c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008750:	4642      	mov	r2, r8
 8008752:	464b      	mov	r3, r9
 8008754:	1891      	adds	r1, r2, r2
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	415b      	adcs	r3, r3
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008760:	4641      	mov	r1, r8
 8008762:	1851      	adds	r1, r2, r1
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	4649      	mov	r1, r9
 8008768:	414b      	adcs	r3, r1
 800876a:	607b      	str	r3, [r7, #4]
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008778:	4659      	mov	r1, fp
 800877a:	00cb      	lsls	r3, r1, #3
 800877c:	4651      	mov	r1, sl
 800877e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008782:	4651      	mov	r1, sl
 8008784:	00ca      	lsls	r2, r1, #3
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	4603      	mov	r3, r0
 800878c:	4642      	mov	r2, r8
 800878e:	189b      	adds	r3, r3, r2
 8008790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008792:	464b      	mov	r3, r9
 8008794:	460a      	mov	r2, r1
 8008796:	eb42 0303 	adc.w	r3, r2, r3
 800879a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80087a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087b4:	4649      	mov	r1, r9
 80087b6:	008b      	lsls	r3, r1, #2
 80087b8:	4641      	mov	r1, r8
 80087ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087be:	4641      	mov	r1, r8
 80087c0:	008a      	lsls	r2, r1, #2
 80087c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087c6:	f7f7 fd2b 	bl	8000220 <__aeabi_uldivmod>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <UART_SetConfig+0x504>)
 80087d0:	fba3 1302 	umull	r1, r3, r3, r2
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	2164      	movs	r1, #100	@ 0x64
 80087d8:	fb01 f303 	mul.w	r3, r1, r3
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	3332      	adds	r3, #50	@ 0x32
 80087e2:	4a08      	ldr	r2, [pc, #32]	@ (8008804 <UART_SetConfig+0x504>)
 80087e4:	fba2 2303 	umull	r2, r3, r2, r3
 80087e8:	095b      	lsrs	r3, r3, #5
 80087ea:	f003 020f 	and.w	r2, r3, #15
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4422      	add	r2, r4
 80087f6:	609a      	str	r2, [r3, #8]
}
 80087f8:	bf00      	nop
 80087fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087fe:	46bd      	mov	sp, r7
 8008800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008804:	51eb851f 	.word	0x51eb851f

08008808 <__NVIC_SetPriority>:
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	6039      	str	r1, [r7, #0]
 8008812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008818:	2b00      	cmp	r3, #0
 800881a:	db0a      	blt.n	8008832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	b2da      	uxtb	r2, r3
 8008820:	490c      	ldr	r1, [pc, #48]	@ (8008854 <__NVIC_SetPriority+0x4c>)
 8008822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008826:	0112      	lsls	r2, r2, #4
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	440b      	add	r3, r1
 800882c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008830:	e00a      	b.n	8008848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	b2da      	uxtb	r2, r3
 8008836:	4908      	ldr	r1, [pc, #32]	@ (8008858 <__NVIC_SetPriority+0x50>)
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	3b04      	subs	r3, #4
 8008840:	0112      	lsls	r2, r2, #4
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	440b      	add	r3, r1
 8008846:	761a      	strb	r2, [r3, #24]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	e000e100 	.word	0xe000e100
 8008858:	e000ed00 	.word	0xe000ed00

0800885c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008860:	2100      	movs	r1, #0
 8008862:	f06f 0004 	mvn.w	r0, #4
 8008866:	f7ff ffcf 	bl	8008808 <__NVIC_SetPriority>
#endif
}
 800886a:	bf00      	nop
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008876:	f3ef 8305 	mrs	r3, IPSR
 800887a:	603b      	str	r3, [r7, #0]
  return(result);
 800887c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008882:	f06f 0305 	mvn.w	r3, #5
 8008886:	607b      	str	r3, [r7, #4]
 8008888:	e00c      	b.n	80088a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800888a:	4b0a      	ldr	r3, [pc, #40]	@ (80088b4 <osKernelInitialize+0x44>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008892:	4b08      	ldr	r3, [pc, #32]	@ (80088b4 <osKernelInitialize+0x44>)
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008898:	2300      	movs	r3, #0
 800889a:	607b      	str	r3, [r7, #4]
 800889c:	e002      	b.n	80088a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000574 	.word	0x20000574

080088b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	603b      	str	r3, [r7, #0]
  return(result);
 80088c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80088ca:	f06f 0305 	mvn.w	r3, #5
 80088ce:	607b      	str	r3, [r7, #4]
 80088d0:	e010      	b.n	80088f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008900 <osKernelStart+0x48>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d109      	bne.n	80088ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088da:	f7ff ffbf 	bl	800885c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088de:	4b08      	ldr	r3, [pc, #32]	@ (8008900 <osKernelStart+0x48>)
 80088e0:	2202      	movs	r2, #2
 80088e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088e4:	f001 ffc2 	bl	800a86c <vTaskStartScheduler>
      stat = osOK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	607b      	str	r3, [r7, #4]
 80088ec:	e002      	b.n	80088f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088f4:	687b      	ldr	r3, [r7, #4]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000574 	.word	0x20000574

08008904 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b08e      	sub	sp, #56	@ 0x38
 8008908:	af04      	add	r7, sp, #16
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008914:	f3ef 8305 	mrs	r3, IPSR
 8008918:	617b      	str	r3, [r7, #20]
  return(result);
 800891a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800891c:	2b00      	cmp	r3, #0
 800891e:	d17e      	bne.n	8008a1e <osThreadNew+0x11a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d07b      	beq.n	8008a1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008926:	2380      	movs	r3, #128	@ 0x80
 8008928:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800892a:	2318      	movs	r3, #24
 800892c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008932:	f04f 33ff 	mov.w	r3, #4294967295
 8008936:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d045      	beq.n	80089ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <osThreadNew+0x48>
        name = attr->name;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <osThreadNew+0x6e>
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b38      	cmp	r3, #56	@ 0x38
 8008964:	d805      	bhi.n	8008972 <osThreadNew+0x6e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <osThreadNew+0x72>
        return (NULL);
 8008972:	2300      	movs	r3, #0
 8008974:	e054      	b.n	8008a20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	089b      	lsrs	r3, r3, #2
 8008984:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00e      	beq.n	80089ac <osThreadNew+0xa8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b5b      	cmp	r3, #91	@ 0x5b
 8008994:	d90a      	bls.n	80089ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800899a:	2b00      	cmp	r3, #0
 800899c:	d006      	beq.n	80089ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <osThreadNew+0xa8>
        mem = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	61bb      	str	r3, [r7, #24]
 80089aa:	e010      	b.n	80089ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10c      	bne.n	80089ce <osThreadNew+0xca>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <osThreadNew+0xca>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <osThreadNew+0xca>
          mem = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	e001      	b.n	80089ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d110      	bne.n	80089f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089dc:	9202      	str	r2, [sp, #8]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f001 fd62 	bl	800a4b4 <xTaskCreateStatic>
 80089f0:	4603      	mov	r3, r0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	e013      	b.n	8008a1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d110      	bne.n	8008a1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	f107 0310 	add.w	r3, r7, #16
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f001 fdb0 	bl	800a574 <xTaskCreate>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d001      	beq.n	8008a1e <osThreadNew+0x11a>
            hTask = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a1e:	693b      	ldr	r3, [r7, #16]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3728      	adds	r7, #40	@ 0x28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a30:	f3ef 8305 	mrs	r3, IPSR
 8008a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <osDelay+0x1c>
    stat = osErrorISR;
 8008a3c:	f06f 0305 	mvn.w	r3, #5
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e007      	b.n	8008a54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fed6 	bl	800a800 <vTaskDelay>
    }
  }

  return (stat);
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b088      	sub	sp, #32
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6a:	f3ef 8305 	mrs	r3, IPSR
 8008a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a70:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d174      	bne.n	8008b60 <osMutexNew+0x102>
    if (attr != NULL) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e001      	b.n	8008a88 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <osMutexNew+0x3a>
      rmtx = 1U;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e001      	b.n	8008a9c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d15c      	bne.n	8008b60 <osMutexNew+0x102>
      mem = -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d015      	beq.n	8008ade <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <osMutexNew+0x6a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ac0:	d902      	bls.n	8008ac8 <osMutexNew+0x6a>
          mem = 1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	e00c      	b.n	8008ae2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d108      	bne.n	8008ae2 <osMutexNew+0x84>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <osMutexNew+0x84>
            mem = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	e001      	b.n	8008ae2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d112      	bne.n	8008b0e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	4619      	mov	r1, r3
 8008af4:	2004      	movs	r0, #4
 8008af6:	f000 fd70 	bl	80095da <xQueueCreateMutexStatic>
 8008afa:	61f8      	str	r0, [r7, #28]
 8008afc:	e016      	b.n	8008b2c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4619      	mov	r1, r3
 8008b04:	2001      	movs	r0, #1
 8008b06:	f000 fd68 	bl	80095da <xQueueCreateMutexStatic>
 8008b0a:	61f8      	str	r0, [r7, #28]
 8008b0c:	e00e      	b.n	8008b2c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b1a:	2004      	movs	r0, #4
 8008b1c:	f000 fd45 	bl	80095aa <xQueueCreateMutex>
 8008b20:	61f8      	str	r0, [r7, #28]
 8008b22:	e003      	b.n	8008b2c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008b24:	2001      	movs	r0, #1
 8008b26:	f000 fd40 	bl	80095aa <xQueueCreateMutex>
 8008b2a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <osMutexNew+0xee>
        if (attr != NULL) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <osMutexNew+0xe2>
          name = attr->name;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e001      	b.n	8008b44 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	69f8      	ldr	r0, [r7, #28]
 8008b48:	f001 fc2c 	bl	800a3a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <osMutexNew+0x102>
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008b60:	69fb      	ldr	r3, [r7, #28]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b88:	f3ef 8305 	mrs	r3, IPSR
 8008b8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008b94:	f06f 0305 	mvn.w	r3, #5
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e02c      	b.n	8008bf6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ba2:	f06f 0303 	mvn.w	r3, #3
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e025      	b.n	8008bf6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d011      	beq.n	8008bd4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6938      	ldr	r0, [r7, #16]
 8008bb4:	f000 fd61 	bl	800967a <xQueueTakeMutexRecursive>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d01b      	beq.n	8008bf6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008bc4:	f06f 0301 	mvn.w	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e014      	b.n	8008bf6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008bcc:	f06f 0302 	mvn.w	r3, #2
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e010      	b.n	8008bf6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f001 f906 	bl	8009de8 <xQueueSemaphoreTake>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d009      	beq.n	8008bf6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008be8:	f06f 0301 	mvn.w	r3, #1
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	e002      	b.n	8008bf6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008bf0:	f06f 0302 	mvn.w	r3, #2
 8008bf4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f023 0301 	bic.w	r3, r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1c:	f3ef 8305 	mrs	r3, IPSR
 8008c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c22:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008c28:	f06f 0305 	mvn.w	r3, #5
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e01f      	b.n	8008c70 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d103      	bne.n	8008c3e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008c36:	f06f 0303 	mvn.w	r3, #3
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e018      	b.n	8008c70 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c44:	6938      	ldr	r0, [r7, #16]
 8008c46:	f000 fce3 	bl	8009610 <xQueueGiveMutexRecursive>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d00f      	beq.n	8008c70 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c50:	f06f 0302 	mvn.w	r3, #2
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e00b      	b.n	8008c70 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6938      	ldr	r0, [r7, #16]
 8008c60:	f000 fdb0 	bl	80097c4 <xQueueGenericSend>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d002      	beq.n	8008c70 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c6a:	f06f 0302 	mvn.w	r3, #2
 8008c6e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c70:	697b      	ldr	r3, [r7, #20]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b08a      	sub	sp, #40	@ 0x28
 8008c7e:	af02      	add	r7, sp, #8
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c8a:	f3ef 8305 	mrs	r3, IPSR
 8008c8e:	613b      	str	r3, [r7, #16]
  return(result);
 8008c90:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d175      	bne.n	8008d82 <osSemaphoreNew+0x108>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d072      	beq.n	8008d82 <osSemaphoreNew+0x108>
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d86e      	bhi.n	8008d82 <osSemaphoreNew+0x108>
    mem = -1;
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d015      	beq.n	8008cdc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <osSemaphoreNew+0x4c>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	2b4f      	cmp	r3, #79	@ 0x4f
 8008cbe:	d902      	bls.n	8008cc6 <osSemaphoreNew+0x4c>
        mem = 1;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e00c      	b.n	8008ce0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d108      	bne.n	8008ce0 <osSemaphoreNew+0x66>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <osSemaphoreNew+0x66>
          mem = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	e001      	b.n	8008ce0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d04c      	beq.n	8008d82 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d128      	bne.n	8008d40 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d10a      	bne.n	8008d0a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	9200      	str	r2, [sp, #0]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2100      	movs	r1, #0
 8008d00:	2001      	movs	r0, #1
 8008d02:	f000 fb5d 	bl	80093c0 <xQueueGenericCreateStatic>
 8008d06:	61f8      	str	r0, [r7, #28]
 8008d08:	e005      	b.n	8008d16 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	2001      	movs	r0, #1
 8008d10:	f000 fbd3 	bl	80094ba <xQueueGenericCreate>
 8008d14:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d022      	beq.n	8008d62 <osSemaphoreNew+0xe8>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01f      	beq.n	8008d62 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d22:	2300      	movs	r3, #0
 8008d24:	2200      	movs	r2, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	69f8      	ldr	r0, [r7, #28]
 8008d2a:	f000 fd4b 	bl	80097c4 <xQueueGenericSend>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d016      	beq.n	8008d62 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008d34:	69f8      	ldr	r0, [r7, #28]
 8008d36:	f001 f9e9 	bl	800a10c <vQueueDelete>
            hSemaphore = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	e010      	b.n	8008d62 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d108      	bne.n	8008d58 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fcca 	bl	80096e8 <xQueueCreateCountingSemaphoreStatic>
 8008d54:	61f8      	str	r0, [r7, #28]
 8008d56:	e004      	b.n	8008d62 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fcfd 	bl	800975a <xQueueCreateCountingSemaphore>
 8008d60:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	e001      	b.n	8008d7a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d7a:	6979      	ldr	r1, [r7, #20]
 8008d7c:	69f8      	ldr	r0, [r7, #28]
 8008d7e:	f001 fb11 	bl	800a3a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d82:	69fb      	ldr	r3, [r7, #28]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008da4:	f06f 0303 	mvn.w	r3, #3
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	e039      	b.n	8008e20 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dac:	f3ef 8305 	mrs	r3, IPSR
 8008db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008db2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d022      	beq.n	8008dfe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008dbe:	f06f 0303 	mvn.w	r3, #3
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e02c      	b.n	8008e20 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008dca:	f107 0308 	add.w	r3, r7, #8
 8008dce:	461a      	mov	r2, r3
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6938      	ldr	r0, [r7, #16]
 8008dd4:	f001 f918 	bl	800a008 <xQueueReceiveFromISR>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d003      	beq.n	8008de6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008dde:	f06f 0302 	mvn.w	r3, #2
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e01c      	b.n	8008e20 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d019      	beq.n	8008e20 <osSemaphoreAcquire+0x94>
 8008dec:	4b0f      	ldr	r3, [pc, #60]	@ (8008e2c <osSemaphoreAcquire+0xa0>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	e010      	b.n	8008e20 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6938      	ldr	r0, [r7, #16]
 8008e02:	f000 fff1 	bl	8009de8 <xQueueSemaphoreTake>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d009      	beq.n	8008e20 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008e12:	f06f 0301 	mvn.w	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e002      	b.n	8008e20 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008e1a:	f06f 0302 	mvn.w	r3, #2
 8008e1e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e20:	697b      	ldr	r3, [r7, #20]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e46:	f06f 0303 	mvn.w	r3, #3
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e02c      	b.n	8008ea8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e4e:	f3ef 8305 	mrs	r3, IPSR
 8008e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e54:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01a      	beq.n	8008e90 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4619      	mov	r1, r3
 8008e64:	6938      	ldr	r0, [r7, #16]
 8008e66:	f000 fe4d 	bl	8009b04 <xQueueGiveFromISR>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d003      	beq.n	8008e78 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008e70:	f06f 0302 	mvn.w	r3, #2
 8008e74:	617b      	str	r3, [r7, #20]
 8008e76:	e017      	b.n	8008ea8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d014      	beq.n	8008ea8 <osSemaphoreRelease+0x78>
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb4 <osSemaphoreRelease+0x84>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	e00b      	b.n	8008ea8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e90:	2300      	movs	r3, #0
 8008e92:	2200      	movs	r2, #0
 8008e94:	2100      	movs	r1, #0
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f000 fc94 	bl	80097c4 <xQueueGenericSend>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d002      	beq.n	8008ea8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008ea2:	f06f 0302 	mvn.w	r3, #2
 8008ea6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008ea8:	697b      	ldr	r3, [r7, #20]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	@ 0x28
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec8:	f3ef 8305 	mrs	r3, IPSR
 8008ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d15f      	bne.n	8008f94 <osMessageQueueNew+0xdc>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d05c      	beq.n	8008f94 <osMessageQueueNew+0xdc>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d059      	beq.n	8008f94 <osMessageQueueNew+0xdc>
    mem = -1;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d029      	beq.n	8008f40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d012      	beq.n	8008f1a <osMessageQueueNew+0x62>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	2b4f      	cmp	r3, #79	@ 0x4f
 8008efa:	d90e      	bls.n	8008f1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	695a      	ldr	r2, [r3, #20]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d302      	bcc.n	8008f1a <osMessageQueueNew+0x62>
        mem = 1;
 8008f14:	2301      	movs	r3, #1
 8008f16:	61bb      	str	r3, [r7, #24]
 8008f18:	e014      	b.n	8008f44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d110      	bne.n	8008f44 <osMessageQueueNew+0x8c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10c      	bne.n	8008f44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d108      	bne.n	8008f44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <osMessageQueueNew+0x8c>
          mem = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	e001      	b.n	8008f44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d10b      	bne.n	8008f62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2100      	movs	r1, #0
 8008f54:	9100      	str	r1, [sp, #0]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fa31 	bl	80093c0 <xQueueGenericCreateStatic>
 8008f5e:	61f8      	str	r0, [r7, #28]
 8008f60:	e008      	b.n	8008f74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008f68:	2200      	movs	r2, #0
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 faa4 	bl	80094ba <xQueueGenericCreate>
 8008f72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00c      	beq.n	8008f94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e001      	b.n	8008f8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	69f8      	ldr	r0, [r7, #28]
 8008f90:	f001 fa08 	bl	800a3a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008f94:	69fb      	ldr	r3, [r7, #28]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb8:	f3ef 8305 	mrs	r3, IPSR
 8008fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8008fbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d028      	beq.n	8009016 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <osMessageQueuePut+0x36>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <osMessageQueuePut+0x36>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008fd6:	f06f 0303 	mvn.w	r3, #3
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e038      	b.n	8009050 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008fe2:	f107 0210 	add.w	r2, r7, #16
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	69b8      	ldr	r0, [r7, #24]
 8008fec:	f000 fcec 	bl	80099c8 <xQueueGenericSendFromISR>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d003      	beq.n	8008ffe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008ff6:	f06f 0302 	mvn.w	r3, #2
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	e028      	b.n	8009050 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d025      	beq.n	8009050 <osMessageQueuePut+0xb0>
 8009004:	4b15      	ldr	r3, [pc, #84]	@ (800905c <osMessageQueuePut+0xbc>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	e01c      	b.n	8009050 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <osMessageQueuePut+0x82>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009022:	f06f 0303 	mvn.w	r3, #3
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e012      	b.n	8009050 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800902a:	2300      	movs	r3, #0
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	69b8      	ldr	r0, [r7, #24]
 8009032:	f000 fbc7 	bl	80097c4 <xQueueGenericSend>
 8009036:	4603      	mov	r3, r0
 8009038:	2b01      	cmp	r3, #1
 800903a:	d009      	beq.n	8009050 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009042:	f06f 0301 	mvn.w	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	e002      	b.n	8009050 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800904a:	f06f 0302 	mvn.w	r3, #2
 800904e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009050:	69fb      	ldr	r3, [r7, #28]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3720      	adds	r7, #32
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	e000ed04 	.word	0xe000ed04

08009060 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009072:	2300      	movs	r3, #0
 8009074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009076:	f3ef 8305 	mrs	r3, IPSR
 800907a:	617b      	str	r3, [r7, #20]
  return(result);
 800907c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800907e:	2b00      	cmp	r3, #0
 8009080:	d028      	beq.n	80090d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <osMessageQueueGet+0x34>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <osMessageQueueGet+0x34>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009094:	f06f 0303 	mvn.w	r3, #3
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	e037      	b.n	800910c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090a0:	f107 0310 	add.w	r3, r7, #16
 80090a4:	461a      	mov	r2, r3
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	69b8      	ldr	r0, [r7, #24]
 80090aa:	f000 ffad 	bl	800a008 <xQueueReceiveFromISR>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d003      	beq.n	80090bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80090b4:	f06f 0302 	mvn.w	r3, #2
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	e027      	b.n	800910c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d024      	beq.n	800910c <osMessageQueueGet+0xac>
 80090c2:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <osMessageQueueGet+0xb8>)
 80090c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	e01b      	b.n	800910c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <osMessageQueueGet+0x80>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d103      	bne.n	80090e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80090e0:	f06f 0303 	mvn.w	r3, #3
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	e011      	b.n	800910c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	69b8      	ldr	r0, [r7, #24]
 80090ee:	f000 fd99 	bl	8009c24 <xQueueReceive>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d009      	beq.n	800910c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80090fe:	f06f 0301 	mvn.w	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	e002      	b.n	800910c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009106:	f06f 0302 	mvn.w	r3, #2
 800910a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800910c:	69fb      	ldr	r3, [r7, #28]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4a07      	ldr	r2, [pc, #28]	@ (8009148 <vApplicationGetIdleTaskMemory+0x2c>)
 800912c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4a06      	ldr	r2, [pc, #24]	@ (800914c <vApplicationGetIdleTaskMemory+0x30>)
 8009132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2280      	movs	r2, #128	@ 0x80
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20000578 	.word	0x20000578
 800914c:	200005d4 	.word	0x200005d4

08009150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a07      	ldr	r2, [pc, #28]	@ (800917c <vApplicationGetTimerTaskMemory+0x2c>)
 8009160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4a06      	ldr	r2, [pc, #24]	@ (8009180 <vApplicationGetTimerTaskMemory+0x30>)
 8009166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	200007d4 	.word	0x200007d4
 8009180:	20000830 	.word	0x20000830

08009184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f103 0208 	add.w	r2, r3, #8
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f04f 32ff 	mov.w	r2, #4294967295
 800919c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f103 0208 	add.w	r2, r3, #8
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f103 0208 	add.w	r2, r3, #8
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d103      	bne.n	8009246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e00c      	b.n	8009260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3308      	adds	r3, #8
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e002      	b.n	8009254 <vListInsert+0x2e>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	429a      	cmp	r2, r3
 800925e:	d2f6      	bcs.n	800924e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	601a      	str	r2, [r3, #0]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6892      	ldr	r2, [r2, #8]
 80092ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6852      	ldr	r2, [r2, #4]
 80092b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d103      	bne.n	80092cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10b      	bne.n	8009318 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009318:	f002 fd76 	bl	800be08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009324:	68f9      	ldr	r1, [r7, #12]
 8009326:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	441a      	add	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	3b01      	subs	r3, #1
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	441a      	add	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	22ff      	movs	r2, #255	@ 0xff
 800935c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	22ff      	movs	r2, #255	@ 0xff
 8009364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d114      	bne.n	8009398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01a      	beq.n	80093ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f001 fd04 	bl	800ad88 <xTaskRemoveFromEventList>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d012      	beq.n	80093ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <xQueueGenericReset+0xd0>)
 8009388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	e009      	b.n	80093ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3310      	adds	r3, #16
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fef1 	bl	8009184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3324      	adds	r3, #36	@ 0x24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff feec 	bl	8009184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093ac:	f002 fd5e 	bl	800be6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b0:	2301      	movs	r3, #1
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	@ 0x38
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10b      	bne.n	80093ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueGenericCreateStatic+0x56>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <xQueueGenericCreateStatic+0x5a>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericCreateStatic+0x5c>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10b      	bne.n	8009438 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	623b      	str	r3, [r7, #32]
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	e7fd      	b.n	8009434 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <xQueueGenericCreateStatic+0x84>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueGenericCreateStatic+0x88>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueGenericCreateStatic+0x8a>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10b      	bne.n	8009466 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61fb      	str	r3, [r7, #28]
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	e7fd      	b.n	8009462 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009466:	2350      	movs	r3, #80	@ 0x50
 8009468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b50      	cmp	r3, #80	@ 0x50
 800946e:	d00b      	beq.n	8009488 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	61bb      	str	r3, [r7, #24]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00d      	beq.n	80094b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800949c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f840 	bl	8009530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3730      	adds	r7, #48	@ 0x30
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b08a      	sub	sp, #40	@ 0x28
 80094be:	af02      	add	r7, sp, #8
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	4613      	mov	r3, r2
 80094c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10b      	bne.n	80094e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	613b      	str	r3, [r7, #16]
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	e7fd      	b.n	80094e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	3350      	adds	r3, #80	@ 0x50
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 fda9 	bl	800c04c <pvPortMalloc>
 80094fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d011      	beq.n	8009526 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	3350      	adds	r3, #80	@ 0x50
 800950a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009514:	79fa      	ldrb	r2, [r7, #7]
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f805 	bl	8009530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009526:	69bb      	ldr	r3, [r7, #24]
	}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e002      	b.n	8009552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800955e:	2101      	movs	r1, #1
 8009560:	69b8      	ldr	r0, [r7, #24]
 8009562:	f7ff fec3 	bl	80092ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800956e:	bf00      	nop
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00e      	beq.n	80095a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009596:	2300      	movs	r3, #0
 8009598:	2200      	movs	r2, #0
 800959a:	2100      	movs	r1, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f911 	bl	80097c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b086      	sub	sp, #24
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	4603      	mov	r3, r0
 80095b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095b4:	2301      	movs	r3, #1
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	2300      	movs	r3, #0
 80095ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	461a      	mov	r2, r3
 80095c0:	6939      	ldr	r1, [r7, #16]
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff ff79 	bl	80094ba <xQueueGenericCreate>
 80095c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff ffd3 	bl	8009576 <prvInitialiseMutex>

		return xNewQueue;
 80095d0:	68fb      	ldr	r3, [r7, #12]
	}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b088      	sub	sp, #32
 80095de:	af02      	add	r7, sp, #8
 80095e0:	4603      	mov	r3, r0
 80095e2:	6039      	str	r1, [r7, #0]
 80095e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095e6:	2301      	movs	r3, #1
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	2300      	movs	r3, #0
 80095ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2200      	movs	r2, #0
 80095f6:	6939      	ldr	r1, [r7, #16]
 80095f8:	6978      	ldr	r0, [r7, #20]
 80095fa:	f7ff fee1 	bl	80093c0 <xQueueGenericCreateStatic>
 80095fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff ffb8 	bl	8009576 <prvInitialiseMutex>

		return xNewQueue;
 8009606:	68fb      	ldr	r3, [r7, #12]
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10b      	bne.n	800963a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	60fb      	str	r3, [r7, #12]
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	e7fd      	b.n	8009636 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	689c      	ldr	r4, [r3, #8]
 800963e:	f001 fd63 	bl	800b108 <xTaskGetCurrentTaskHandle>
 8009642:	4603      	mov	r3, r0
 8009644:	429c      	cmp	r4, r3
 8009646:	d111      	bne.n	800966c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d105      	bne.n	8009666 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6938      	ldr	r0, [r7, #16]
 8009662:	f000 f8af 	bl	80097c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009666:	2301      	movs	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e001      	b.n	8009670 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009670:	697b      	ldr	r3, [r7, #20]
	}
 8009672:	4618      	mov	r0, r3
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	bd90      	pop	{r4, r7, pc}

0800967a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800967a:	b590      	push	{r4, r7, lr}
 800967c:	b087      	sub	sp, #28
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	60fb      	str	r3, [r7, #12]
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	689c      	ldr	r4, [r3, #8]
 80096aa:	f001 fd2d 	bl	800b108 <xTaskGetCurrentTaskHandle>
 80096ae:	4603      	mov	r3, r0
 80096b0:	429c      	cmp	r4, r3
 80096b2:	d107      	bne.n	80096c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80096be:	2301      	movs	r3, #1
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e00c      	b.n	80096de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6938      	ldr	r0, [r7, #16]
 80096c8:	f000 fb8e 	bl	8009de8 <xQueueSemaphoreTake>
 80096cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80096de:	697b      	ldr	r3, [r7, #20]
	}
 80096e0:	4618      	mov	r0, r3
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}

080096e8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	@ 0x28
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	61bb      	str	r3, [r7, #24]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	429a      	cmp	r2, r3
 8009718:	d90b      	bls.n	8009732 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	617b      	str	r3, [r7, #20]
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	e7fd      	b.n	800972e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009732:	2302      	movs	r3, #2
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff fe3f 	bl	80093c0 <xQueueGenericCreateStatic>
 8009742:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009750:	69fb      	ldr	r3, [r7, #28]
	}
 8009752:	4618      	mov	r0, r3
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	613b      	str	r3, [r7, #16]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d90b      	bls.n	80097a2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	60fb      	str	r3, [r7, #12]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80097a2:	2202      	movs	r2, #2
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fe87 	bl	80094ba <xQueueGenericCreate>
 80097ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80097ba:	697b      	ldr	r3, [r7, #20]
	}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08e      	sub	sp, #56	@ 0x38
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10b      	bne.n	80097f8 <xQueueGenericSend+0x34>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <xQueueGenericSend+0x42>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <xQueueGenericSend+0x46>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <xQueueGenericSend+0x48>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <xQueueGenericSend+0x64>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x72>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <xQueueGenericSend+0x76>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSend+0x78>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <xQueueGenericSend+0x94>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009858:	f001 fc66 	bl	800b128 <xTaskGetSchedulerState>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <xQueueGenericSend+0xa4>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <xQueueGenericSend+0xa8>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <xQueueGenericSend+0xaa>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <xQueueGenericSend+0xc6>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	61fb      	str	r3, [r7, #28]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988a:	f002 fabd 	bl	800be08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009896:	429a      	cmp	r2, r3
 8009898:	d302      	bcc.n	80098a0 <xQueueGenericSend+0xdc>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d129      	bne.n	80098f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	68b9      	ldr	r1, [r7, #8]
 80098a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098a6:	f000 fc6d 	bl	800a184 <prvCopyDataToQueue>
 80098aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	3324      	adds	r3, #36	@ 0x24
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 fa65 	bl	800ad88 <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d013      	beq.n	80098ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098c4:	4b3f      	ldr	r3, [pc, #252]	@ (80099c4 <xQueueGenericSend+0x200>)
 80098c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	e00a      	b.n	80098ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098dc:	4b39      	ldr	r3, [pc, #228]	@ (80099c4 <xQueueGenericSend+0x200>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098ec:	f002 fabe 	bl	800be6c <vPortExitCritical>
				return pdPASS;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e063      	b.n	80099bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d103      	bne.n	8009902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098fa:	f002 fab7 	bl	800be6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	e05c      	b.n	80099bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009908:	f107 0314 	add.w	r3, r7, #20
 800990c:	4618      	mov	r0, r3
 800990e:	f001 fa9f 	bl	800ae50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009916:	f002 faa9 	bl	800be6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800991a:	f001 f80f 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800991e:	f002 fa73 	bl	800be08 <vPortEnterCritical>
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009928:	b25b      	sxtb	r3, r3
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d103      	bne.n	8009938 <xQueueGenericSend+0x174>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800993e:	b25b      	sxtb	r3, r3
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d103      	bne.n	800994e <xQueueGenericSend+0x18a>
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800994e:	f002 fa8d 	bl	800be6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009952:	1d3a      	adds	r2, r7, #4
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f001 fa8e 	bl	800ae7c <xTaskCheckForTimeOut>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d124      	bne.n	80099b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009968:	f000 fd04 	bl	800a374 <prvIsQueueFull>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d018      	beq.n	80099a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	3310      	adds	r3, #16
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f001 f9b2 	bl	800ace4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009982:	f000 fc8f 	bl	800a2a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009986:	f000 ffe7 	bl	800a958 <xTaskResumeAll>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af7c 	bne.w	800988a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009992:	4b0c      	ldr	r3, [pc, #48]	@ (80099c4 <xQueueGenericSend+0x200>)
 8009994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e772      	b.n	800988a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099a6:	f000 fc7d 	bl	800a2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099aa:	f000 ffd5 	bl	800a958 <xTaskResumeAll>
 80099ae:	e76c      	b.n	800988a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099b2:	f000 fc77 	bl	800a2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b6:	f000 ffcf 	bl	800a958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3738      	adds	r7, #56	@ 0x38
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b090      	sub	sp, #64	@ 0x40
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <xQueueGenericSendFromISR+0x3e>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <xQueueGenericSendFromISR+0x42>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <xQueueGenericSendFromISR+0x44>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d103      	bne.n	8009a36 <xQueueGenericSendFromISR+0x6e>
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <xQueueGenericSendFromISR+0x72>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <xQueueGenericSendFromISR+0x74>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	623b      	str	r3, [r7, #32]
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a58:	f002 fab6 	bl	800bfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	61fa      	str	r2, [r7, #28]
 8009a72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d302      	bcc.n	8009a8a <xQueueGenericSendFromISR+0xc2>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d12f      	bne.n	8009aea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009aa0:	f000 fb70 	bl	800a184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d112      	bne.n	8009ad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d016      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	3324      	adds	r3, #36	@ 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 f964 	bl	800ad88 <xTaskRemoveFromEventList>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e007      	b.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	b25a      	sxtb	r2, r3
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ae8:	e001      	b.n	8009aee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3740      	adds	r7, #64	@ 0x40
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08e      	sub	sp, #56	@ 0x38
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10b      	bne.n	8009b30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	623b      	str	r3, [r7, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	e7fd      	b.n	8009b2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	61fb      	str	r3, [r7, #28]
}
 8009b4a:	bf00      	nop
 8009b4c:	bf00      	nop
 8009b4e:	e7fd      	b.n	8009b4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <xQueueGiveFromISR+0x5c>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <xQueueGiveFromISR+0x60>
 8009b60:	2301      	movs	r3, #1
 8009b62:	e000      	b.n	8009b66 <xQueueGiveFromISR+0x62>
 8009b64:	2300      	movs	r3, #0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	61bb      	str	r3, [r7, #24]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b82:	f002 fa21 	bl	800bfc8 <vPortValidateInterruptPriority>
	__asm volatile
 8009b86:	f3ef 8211 	mrs	r2, BASEPRI
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	617a      	str	r2, [r7, #20]
 8009b9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009b9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d22b      	bcs.n	8009c0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d112      	bne.n	8009bf4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	3324      	adds	r3, #36	@ 0x24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 f8d4 	bl	800ad88 <xTaskRemoveFromEventList>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00e      	beq.n	8009c04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e007      	b.n	8009c04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	b25a      	sxtb	r2, r3
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c04:	2301      	movs	r3, #1
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c08:	e001      	b.n	8009c0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f383 8811 	msr	BASEPRI, r3
}
 8009c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3738      	adds	r7, #56	@ 0x38
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08c      	sub	sp, #48	@ 0x30
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10b      	bne.n	8009c56 <xQueueReceive+0x32>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	623b      	str	r3, [r7, #32]
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	e7fd      	b.n	8009c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d103      	bne.n	8009c64 <xQueueReceive+0x40>
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <xQueueReceive+0x44>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e000      	b.n	8009c6a <xQueueReceive+0x46>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <xQueueReceive+0x62>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	61fb      	str	r3, [r7, #28]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c86:	f001 fa4f 	bl	800b128 <xTaskGetSchedulerState>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <xQueueReceive+0x72>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <xQueueReceive+0x76>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <xQueueReceive+0x78>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <xQueueReceive+0x94>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	61bb      	str	r3, [r7, #24]
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cb8:	f002 f8a6 	bl	800be08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01f      	beq.n	8009d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ccc:	f000 fac4 	bl	800a258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00f      	beq.n	8009d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	3310      	adds	r3, #16
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 f84f 	bl	800ad88 <xTaskRemoveFromEventList>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8009de4 <xQueueReceive+0x1c0>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d00:	f002 f8b4 	bl	800be6c <vPortExitCritical>
				return pdPASS;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e069      	b.n	8009ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d103      	bne.n	8009d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d0e:	f002 f8ad 	bl	800be6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e062      	b.n	8009ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d1c:	f107 0310 	add.w	r3, r7, #16
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 f895 	bl	800ae50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d26:	2301      	movs	r3, #1
 8009d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d2a:	f002 f89f 	bl	800be6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d2e:	f000 fe05 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d32:	f002 f869 	bl	800be08 <vPortEnterCritical>
 8009d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d3c:	b25b      	sxtb	r3, r3
 8009d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d42:	d103      	bne.n	8009d4c <xQueueReceive+0x128>
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d103      	bne.n	8009d62 <xQueueReceive+0x13e>
 8009d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d62:	f002 f883 	bl	800be6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d66:	1d3a      	adds	r2, r7, #4
 8009d68:	f107 0310 	add.w	r3, r7, #16
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 f884 	bl	800ae7c <xTaskCheckForTimeOut>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d123      	bne.n	8009dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d7c:	f000 fae4 	bl	800a348 <prvIsQueueEmpty>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d017      	beq.n	8009db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	3324      	adds	r3, #36	@ 0x24
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 ffa8 	bl	800ace4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d96:	f000 fa85 	bl	800a2a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d9a:	f000 fddd 	bl	800a958 <xTaskResumeAll>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d189      	bne.n	8009cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009da4:	4b0f      	ldr	r3, [pc, #60]	@ (8009de4 <xQueueReceive+0x1c0>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	e780      	b.n	8009cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009db8:	f000 fa74 	bl	800a2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dbc:	f000 fdcc 	bl	800a958 <xTaskResumeAll>
 8009dc0:	e77a      	b.n	8009cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dc4:	f000 fa6e 	bl	800a2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dc8:	f000 fdc6 	bl	800a958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dce:	f000 fabb 	bl	800a348 <prvIsQueueEmpty>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f43f af6f 	beq.w	8009cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3730      	adds	r7, #48	@ 0x30
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	@ 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10b      	bne.n	8009e1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	623b      	str	r3, [r7, #32]
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	61fb      	str	r3, [r7, #28]
}
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
 8009e3a:	e7fd      	b.n	8009e38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e3c:	f001 f974 	bl	800b128 <xTaskGetSchedulerState>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <xQueueSemaphoreTake+0x64>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <xQueueSemaphoreTake+0x68>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <xQueueSemaphoreTake+0x6a>
 8009e50:	2300      	movs	r3, #0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	61bb      	str	r3, [r7, #24]
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	e7fd      	b.n	8009e6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e6e:	f001 ffcb 	bl	800be08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d024      	beq.n	8009ec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e80:	1e5a      	subs	r2, r3, #1
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e8e:	f001 fac5 	bl	800b41c <pvTaskIncrementMutexHeldCount>
 8009e92:	4602      	mov	r2, r0
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00f      	beq.n	8009ec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea2:	3310      	adds	r3, #16
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 ff6f 	bl	800ad88 <xTaskRemoveFromEventList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eb0:	4b54      	ldr	r3, [pc, #336]	@ (800a004 <xQueueSemaphoreTake+0x21c>)
 8009eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ec0:	f001 ffd4 	bl	800be6c <vPortExitCritical>
				return pdPASS;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e098      	b.n	8009ffa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d112      	bne.n	8009ef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	617b      	str	r3, [r7, #20]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009eec:	f001 ffbe 	bl	800be6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	e082      	b.n	8009ffa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efa:	f107 030c 	add.w	r3, r7, #12
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 ffa6 	bl	800ae50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f08:	f001 ffb0 	bl	800be6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f0c:	f000 fd16 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f10:	f001 ff7a 	bl	800be08 <vPortEnterCritical>
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d103      	bne.n	8009f2a <xQueueSemaphoreTake+0x142>
 8009f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d103      	bne.n	8009f40 <xQueueSemaphoreTake+0x158>
 8009f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f40:	f001 ff94 	bl	800be6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f44:	463a      	mov	r2, r7
 8009f46:	f107 030c 	add.w	r3, r7, #12
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 ff95 	bl	800ae7c <xTaskCheckForTimeOut>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d132      	bne.n	8009fbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f5a:	f000 f9f5 	bl	800a348 <prvIsQueueEmpty>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d026      	beq.n	8009fb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009f6c:	f001 ff4c 	bl	800be08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f8f5 	bl	800b164 <xTaskPriorityInherit>
 8009f7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009f7c:	f001 ff76 	bl	800be6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f82:	3324      	adds	r3, #36	@ 0x24
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 feab 	bl	800ace4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f90:	f000 f988 	bl	800a2a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f94:	f000 fce0 	bl	800a958 <xTaskResumeAll>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f af67 	bne.w	8009e6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009fa0:	4b18      	ldr	r3, [pc, #96]	@ (800a004 <xQueueSemaphoreTake+0x21c>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	e75d      	b.n	8009e6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fb4:	f000 f976 	bl	800a2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb8:	f000 fcce 	bl	800a958 <xTaskResumeAll>
 8009fbc:	e757      	b.n	8009e6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fc0:	f000 f970 	bl	800a2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fc4:	f000 fcc8 	bl	800a958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fca:	f000 f9bd 	bl	800a348 <prvIsQueueEmpty>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f43f af4c 	beq.w	8009e6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009fdc:	f001 ff14 	bl	800be08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fe2:	f000 f8b7 	bl	800a154 <prvGetDisinheritPriorityAfterTimeout>
 8009fe6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f990 	bl	800b314 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ff4:	f001 ff3a 	bl	800be6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3738      	adds	r7, #56	@ 0x38
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08e      	sub	sp, #56	@ 0x38
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10b      	bne.n	800a036 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	623b      	str	r3, [r7, #32]
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <xQueueReceiveFromISR+0x3c>
 800a03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <xQueueReceiveFromISR+0x40>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <xQueueReceiveFromISR+0x42>
 800a048:	2300      	movs	r3, #0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10b      	bne.n	800a066 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	61fb      	str	r3, [r7, #28]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a066:	f001 ffaf 	bl	800bfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800a06a:	f3ef 8211 	mrs	r2, BASEPRI
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	61ba      	str	r2, [r7, #24]
 800a080:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a082:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d02f      	beq.n	800a0f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0a0:	f000 f8da 	bl	800a258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	1e5a      	subs	r2, r3, #1
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d112      	bne.n	800a0dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d016      	beq.n	800a0ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fe60 	bl	800ad88 <xTaskRemoveFromEventList>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00e      	beq.n	800a0ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e007      	b.n	800a0ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	b25a      	sxtb	r2, r3
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f0:	e001      	b.n	800a0f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f383 8811 	msr	BASEPRI, r3
}
 800a100:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a104:	4618      	mov	r0, r3
 800a106:	3738      	adds	r7, #56	@ 0x38
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10b      	bne.n	800a136 <vQueueDelete+0x2a>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60bb      	str	r3, [r7, #8]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 f95e 	bl	800a3f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f002 f84e 	bl	800c1e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a14c:	bf00      	nop
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d006      	beq.n	800a172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	e001      	b.n	800a176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a176:	68fb      	ldr	r3, [r7, #12]
	}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10d      	bne.n	800a1be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d14d      	bne.n	800a246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 f840 	bl	800b234 <xTaskPriorityDisinherit>
 800a1b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	e043      	b.n	800a246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d119      	bne.n	800a1f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6858      	ldr	r0, [r3, #4]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	f002 f956 	bl	800c480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d32b      	bcc.n	800a246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	e026      	b.n	800a246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68d8      	ldr	r0, [r3, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	461a      	mov	r2, r3
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	f002 f93c 	bl	800c480 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	68da      	ldr	r2, [r3, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a210:	425b      	negs	r3, r3
 800a212:	441a      	add	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d207      	bcs.n	800a234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22c:	425b      	negs	r3, r3
 800a22e:	441a      	add	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d105      	bne.n	800a246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3b01      	subs	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a24e:	697b      	ldr	r3, [r7, #20]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d018      	beq.n	800a29c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a272:	441a      	add	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	429a      	cmp	r2, r3
 800a282:	d303      	bcc.n	800a28c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68d9      	ldr	r1, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	461a      	mov	r2, r3
 800a296:	6838      	ldr	r0, [r7, #0]
 800a298:	f002 f8f2 	bl	800c480 <memcpy>
	}
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2ac:	f001 fdac 	bl	800be08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2b8:	e011      	b.n	800a2de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d012      	beq.n	800a2e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3324      	adds	r3, #36	@ 0x24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fd5e 	bl	800ad88 <xTaskRemoveFromEventList>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2d2:	f000 fe37 	bl	800af44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dce9      	bgt.n	800a2ba <prvUnlockQueue+0x16>
 800a2e6:	e000      	b.n	800a2ea <prvUnlockQueue+0x46>
					break;
 800a2e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	22ff      	movs	r2, #255	@ 0xff
 800a2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a2f2:	f001 fdbb 	bl	800be6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2f6:	f001 fd87 	bl	800be08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a302:	e011      	b.n	800a328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d012      	beq.n	800a332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3310      	adds	r3, #16
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fd39 	bl	800ad88 <xTaskRemoveFromEventList>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a31c:	f000 fe12 	bl	800af44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	3b01      	subs	r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dce9      	bgt.n	800a304 <prvUnlockQueue+0x60>
 800a330:	e000      	b.n	800a334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	22ff      	movs	r2, #255	@ 0xff
 800a338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a33c:	f001 fd96 	bl	800be6c <vPortExitCritical>
}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a350:	f001 fd5a 	bl	800be08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e001      	b.n	800a366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a366:	f001 fd81 	bl	800be6c <vPortExitCritical>

	return xReturn;
 800a36a:	68fb      	ldr	r3, [r7, #12]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a37c:	f001 fd44 	bl	800be08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a388:	429a      	cmp	r2, r3
 800a38a:	d102      	bne.n	800a392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a38c:	2301      	movs	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e001      	b.n	800a396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a396:	f001 fd69 	bl	800be6c <vPortExitCritical>

	return xReturn;
 800a39a:	68fb      	ldr	r3, [r7, #12]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e014      	b.n	800a3de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10b      	bne.n	800a3d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3c0:	490c      	ldr	r1, [pc, #48]	@ (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3ca:	4a0a      	ldr	r2, [pc, #40]	@ (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3d6:	e006      	b.n	800a3e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d9e7      	bls.n	800a3b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000c30 	.word	0x20000c30

0800a3f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e016      	b.n	800a434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a406:	4a10      	ldr	r2, [pc, #64]	@ (800a448 <vQueueUnregisterQueue+0x50>)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	4413      	add	r3, r2
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	429a      	cmp	r2, r3
 800a414:	d10b      	bne.n	800a42e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a416:	4a0c      	ldr	r2, [pc, #48]	@ (800a448 <vQueueUnregisterQueue+0x50>)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2100      	movs	r1, #0
 800a41c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a420:	4a09      	ldr	r2, [pc, #36]	@ (800a448 <vQueueUnregisterQueue+0x50>)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	4413      	add	r3, r2
 800a428:	2200      	movs	r2, #0
 800a42a:	605a      	str	r2, [r3, #4]
				break;
 800a42c:	e006      	b.n	800a43c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b07      	cmp	r3, #7
 800a438:	d9e5      	bls.n	800a406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	20000c30 	.word	0x20000c30

0800a44c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a45c:	f001 fcd4 	bl	800be08 <vPortEnterCritical>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a466:	b25b      	sxtb	r3, r3
 800a468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46c:	d103      	bne.n	800a476 <vQueueWaitForMessageRestricted+0x2a>
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d103      	bne.n	800a48c <vQueueWaitForMessageRestricted+0x40>
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a48c:	f001 fcee 	bl	800be6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3324      	adds	r3, #36	@ 0x24
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fc45 	bl	800ad30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4a6:	6978      	ldr	r0, [r7, #20]
 800a4a8:	f7ff fefc 	bl	800a2a4 <prvUnlockQueue>
	}
 800a4ac:	bf00      	nop
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af04      	add	r7, sp, #16
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	623b      	str	r3, [r7, #32]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	61fb      	str	r3, [r7, #28]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4fe:	235c      	movs	r3, #92	@ 0x5c
 800a500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b5c      	cmp	r3, #92	@ 0x5c
 800a506:	d00b      	beq.n	800a520 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	61bb      	str	r3, [r7, #24]
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	e7fd      	b.n	800a51c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <xTaskCreateStatic+0xb2>
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01b      	beq.n	800a566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a540:	2300      	movs	r3, #0
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 f850 	bl	800a5fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a55e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a560:	f000 f8de 	bl	800a720 <prvAddNewTaskToReadyList>
 800a564:	e001      	b.n	800a56a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a56a:	697b      	ldr	r3, [r7, #20]
	}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3728      	adds	r7, #40	@ 0x28
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08c      	sub	sp, #48	@ 0x30
 800a578:	af04      	add	r7, sp, #16
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a584:	88fb      	ldrh	r3, [r7, #6]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 fd5f 	bl	800c04c <pvPortMalloc>
 800a58e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00e      	beq.n	800a5b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a596:	205c      	movs	r0, #92	@ 0x5c
 800a598:	f001 fd58 	bl	800c04c <pvPortMalloc>
 800a59c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a5aa:	e005      	b.n	800a5b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5ac:	6978      	ldr	r0, [r7, #20]
 800a5ae:	f001 fe1b 	bl	800c1e8 <vPortFree>
 800a5b2:	e001      	b.n	800a5b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d017      	beq.n	800a5ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5c6:	88fa      	ldrh	r2, [r7, #6]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 f80e 	bl	800a5fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5e2:	69f8      	ldr	r0, [r7, #28]
 800a5e4:	f000 f89c 	bl	800a720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	e002      	b.n	800a5f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
	}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b088      	sub	sp, #32
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	607a      	str	r2, [r7, #4]
 800a60a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	461a      	mov	r2, r3
 800a616:	21a5      	movs	r1, #165	@ 0xa5
 800a618:	f001 ff06 	bl	800c428 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a626:	3b01      	subs	r3, #1
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f023 0307 	bic.w	r3, r3, #7
 800a634:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	617b      	str	r3, [r7, #20]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01f      	beq.n	800a69e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a65e:	2300      	movs	r3, #0
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	e012      	b.n	800a68a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	4413      	add	r3, r2
 800a66a:	7819      	ldrb	r1, [r3, #0]
 800a66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	4413      	add	r3, r2
 800a672:	3334      	adds	r3, #52	@ 0x34
 800a674:	460a      	mov	r2, r1
 800a676:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	4413      	add	r3, r2
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	3301      	adds	r3, #1
 800a688:	61fb      	str	r3, [r7, #28]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	2b0f      	cmp	r3, #15
 800a68e:	d9e9      	bls.n	800a664 <prvInitialiseNewTask+0x66>
 800a690:	e000      	b.n	800a694 <prvInitialiseNewTask+0x96>
			{
				break;
 800a692:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a69c:	e003      	b.n	800a6a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	2b37      	cmp	r3, #55	@ 0x37
 800a6aa:	d901      	bls.n	800a6b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6ac:	2337      	movs	r3, #55	@ 0x37
 800a6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fd7c 	bl	80091c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	3318      	adds	r3, #24
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fd77 	bl	80091c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68f9      	ldr	r1, [r7, #12]
 800a6fe:	69b8      	ldr	r0, [r7, #24]
 800a700:	f001 fa4e 	bl	800bba0 <pxPortInitialiseStack>
 800a704:	4602      	mov	r2, r0
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a716:	bf00      	nop
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a728:	f001 fb6e 	bl	800be08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a72c:	4b2d      	ldr	r3, [pc, #180]	@ (800a7e4 <prvAddNewTaskToReadyList+0xc4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3301      	adds	r3, #1
 800a732:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e4 <prvAddNewTaskToReadyList+0xc4>)
 800a734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a736:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a73e:	4a2a      	ldr	r2, [pc, #168]	@ (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a744:	4b27      	ldr	r3, [pc, #156]	@ (800a7e4 <prvAddNewTaskToReadyList+0xc4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d110      	bne.n	800a76e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a74c:	f000 fc1e 	bl	800af8c <prvInitialiseTaskLists>
 800a750:	e00d      	b.n	800a76e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a752:	4b26      	ldr	r3, [pc, #152]	@ (800a7ec <prvAddNewTaskToReadyList+0xcc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d109      	bne.n	800a76e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a75a:	4b23      	ldr	r3, [pc, #140]	@ (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a764:	429a      	cmp	r2, r3
 800a766:	d802      	bhi.n	800a76e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a768:	4a1f      	ldr	r2, [pc, #124]	@ (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a76e:	4b20      	ldr	r3, [pc, #128]	@ (800a7f0 <prvAddNewTaskToReadyList+0xd0>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a1e      	ldr	r2, [pc, #120]	@ (800a7f0 <prvAddNewTaskToReadyList+0xd0>)
 800a776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a778:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f0 <prvAddNewTaskToReadyList+0xd0>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a784:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f4 <prvAddNewTaskToReadyList+0xd4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d903      	bls.n	800a794 <prvAddNewTaskToReadyList+0x74>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a790:	4a18      	ldr	r2, [pc, #96]	@ (800a7f4 <prvAddNewTaskToReadyList+0xd4>)
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4a15      	ldr	r2, [pc, #84]	@ (800a7f8 <prvAddNewTaskToReadyList+0xd8>)
 800a7a2:	441a      	add	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7fe fd17 	bl	80091de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7b0:	f001 fb5c 	bl	800be6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ec <prvAddNewTaskToReadyList+0xcc>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00e      	beq.n	800a7da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d207      	bcs.n	800a7da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a7fc <prvAddNewTaskToReadyList+0xdc>)
 800a7cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001144 	.word	0x20001144
 800a7e8:	20000c70 	.word	0x20000c70
 800a7ec:	20001150 	.word	0x20001150
 800a7f0:	20001160 	.word	0x20001160
 800a7f4:	2000114c 	.word	0x2000114c
 800a7f8:	20000c74 	.word	0x20000c74
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d018      	beq.n	800a844 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a812:	4b14      	ldr	r3, [pc, #80]	@ (800a864 <vTaskDelay+0x64>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00b      	beq.n	800a832 <vTaskDelay+0x32>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	60bb      	str	r3, [r7, #8]
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	e7fd      	b.n	800a82e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a832:	f000 f883 	bl	800a93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fe03 	bl	800b444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a83e:	f000 f88b 	bl	800a958 <xTaskResumeAll>
 800a842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d107      	bne.n	800a85a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a84a:	4b07      	ldr	r3, [pc, #28]	@ (800a868 <vTaskDelay+0x68>)
 800a84c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2000116c 	.word	0x2000116c
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08a      	sub	sp, #40	@ 0x28
 800a870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a87a:	463a      	mov	r2, r7
 800a87c:	1d39      	adds	r1, r7, #4
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fc4a 	bl	800911c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	9202      	str	r2, [sp, #8]
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	2300      	movs	r3, #0
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	2300      	movs	r3, #0
 800a898:	460a      	mov	r2, r1
 800a89a:	4922      	ldr	r1, [pc, #136]	@ (800a924 <vTaskStartScheduler+0xb8>)
 800a89c:	4822      	ldr	r0, [pc, #136]	@ (800a928 <vTaskStartScheduler+0xbc>)
 800a89e:	f7ff fe09 	bl	800a4b4 <xTaskCreateStatic>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	4a21      	ldr	r2, [pc, #132]	@ (800a92c <vTaskStartScheduler+0xc0>)
 800a8a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8a8:	4b20      	ldr	r3, [pc, #128]	@ (800a92c <vTaskStartScheduler+0xc0>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	e001      	b.n	800a8ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d102      	bne.n	800a8c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8c0:	f000 fe14 	bl	800b4ec <xTimerCreateTimerTask>
 800a8c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d116      	bne.n	800a8fa <vTaskStartScheduler+0x8e>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	613b      	str	r3, [r7, #16]
}
 800a8de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e0:	4b13      	ldr	r3, [pc, #76]	@ (800a930 <vTaskStartScheduler+0xc4>)
 800a8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8e8:	4b12      	ldr	r3, [pc, #72]	@ (800a934 <vTaskStartScheduler+0xc8>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8ee:	4b12      	ldr	r3, [pc, #72]	@ (800a938 <vTaskStartScheduler+0xcc>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8f4:	f001 f9e4 	bl	800bcc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8f8:	e00f      	b.n	800a91a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d10b      	bne.n	800a91a <vTaskStartScheduler+0xae>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	60fb      	str	r3, [r7, #12]
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <vTaskStartScheduler+0xaa>
}
 800a91a:	bf00      	nop
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	0800c534 	.word	0x0800c534
 800a928:	0800af5d 	.word	0x0800af5d
 800a92c:	20001168 	.word	0x20001168
 800a930:	20001164 	.word	0x20001164
 800a934:	20001150 	.word	0x20001150
 800a938:	20001148 	.word	0x20001148

0800a93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a940:	4b04      	ldr	r3, [pc, #16]	@ (800a954 <vTaskSuspendAll+0x18>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a03      	ldr	r2, [pc, #12]	@ (800a954 <vTaskSuspendAll+0x18>)
 800a948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a94a:	bf00      	nop
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	2000116c 	.word	0x2000116c

0800a958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a966:	4b42      	ldr	r3, [pc, #264]	@ (800aa70 <xTaskResumeAll+0x118>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10b      	bne.n	800a986 <xTaskResumeAll+0x2e>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	603b      	str	r3, [r7, #0]
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	e7fd      	b.n	800a982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a986:	f001 fa3f 	bl	800be08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a98a:	4b39      	ldr	r3, [pc, #228]	@ (800aa70 <xTaskResumeAll+0x118>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3b01      	subs	r3, #1
 800a990:	4a37      	ldr	r2, [pc, #220]	@ (800aa70 <xTaskResumeAll+0x118>)
 800a992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a994:	4b36      	ldr	r3, [pc, #216]	@ (800aa70 <xTaskResumeAll+0x118>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d162      	bne.n	800aa62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a99c:	4b35      	ldr	r3, [pc, #212]	@ (800aa74 <xTaskResumeAll+0x11c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d05e      	beq.n	800aa62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a4:	e02f      	b.n	800aa06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a6:	4b34      	ldr	r3, [pc, #208]	@ (800aa78 <xTaskResumeAll+0x120>)
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3318      	adds	r3, #24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fc70 	bl	8009298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fc6b 	bl	8009298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa7c <xTaskResumeAll+0x124>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d903      	bls.n	800a9d6 <xTaskResumeAll+0x7e>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	4a2a      	ldr	r2, [pc, #168]	@ (800aa7c <xTaskResumeAll+0x124>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a27      	ldr	r2, [pc, #156]	@ (800aa80 <xTaskResumeAll+0x128>)
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fe fbf6 	bl	80091de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f6:	4b23      	ldr	r3, [pc, #140]	@ (800aa84 <xTaskResumeAll+0x12c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d302      	bcc.n	800aa06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aa00:	4b21      	ldr	r3, [pc, #132]	@ (800aa88 <xTaskResumeAll+0x130>)
 800aa02:	2201      	movs	r2, #1
 800aa04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa06:	4b1c      	ldr	r3, [pc, #112]	@ (800aa78 <xTaskResumeAll+0x120>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1cb      	bne.n	800a9a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa14:	f000 fb58 	bl	800b0c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa18:	4b1c      	ldr	r3, [pc, #112]	@ (800aa8c <xTaskResumeAll+0x134>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa24:	f000 f846 	bl	800aab4 <xTaskIncrementTick>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aa2e:	4b16      	ldr	r3, [pc, #88]	@ (800aa88 <xTaskResumeAll+0x130>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f1      	bne.n	800aa24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aa40:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <xTaskResumeAll+0x134>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa46:	4b10      	ldr	r3, [pc, #64]	@ (800aa88 <xTaskResumeAll+0x130>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d009      	beq.n	800aa62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa52:	4b0f      	ldr	r3, [pc, #60]	@ (800aa90 <xTaskResumeAll+0x138>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa62:	f001 fa03 	bl	800be6c <vPortExitCritical>

	return xAlreadyYielded;
 800aa66:	68bb      	ldr	r3, [r7, #8]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	2000116c 	.word	0x2000116c
 800aa74:	20001144 	.word	0x20001144
 800aa78:	20001104 	.word	0x20001104
 800aa7c:	2000114c 	.word	0x2000114c
 800aa80:	20000c74 	.word	0x20000c74
 800aa84:	20000c70 	.word	0x20000c70
 800aa88:	20001158 	.word	0x20001158
 800aa8c:	20001154 	.word	0x20001154
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	@ (800aab0 <xTaskGetTickCount+0x1c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaa0:	687b      	ldr	r3, [r7, #4]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20001148 	.word	0x20001148

0800aab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabe:	4b4f      	ldr	r3, [pc, #316]	@ (800abfc <xTaskIncrementTick+0x148>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f040 8090 	bne.w	800abe8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aac8:	4b4d      	ldr	r3, [pc, #308]	@ (800ac00 <xTaskIncrementTick+0x14c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aad0:	4a4b      	ldr	r2, [pc, #300]	@ (800ac00 <xTaskIncrementTick+0x14c>)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d121      	bne.n	800ab20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aadc:	4b49      	ldr	r3, [pc, #292]	@ (800ac04 <xTaskIncrementTick+0x150>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00b      	beq.n	800aafe <xTaskIncrementTick+0x4a>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <xTaskIncrementTick+0x46>
 800aafe:	4b41      	ldr	r3, [pc, #260]	@ (800ac04 <xTaskIncrementTick+0x150>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	4b40      	ldr	r3, [pc, #256]	@ (800ac08 <xTaskIncrementTick+0x154>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a3e      	ldr	r2, [pc, #248]	@ (800ac04 <xTaskIncrementTick+0x150>)
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac08 <xTaskIncrementTick+0x154>)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	4b3e      	ldr	r3, [pc, #248]	@ (800ac0c <xTaskIncrementTick+0x158>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3301      	adds	r3, #1
 800ab18:	4a3c      	ldr	r2, [pc, #240]	@ (800ac0c <xTaskIncrementTick+0x158>)
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	f000 fad4 	bl	800b0c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab20:	4b3b      	ldr	r3, [pc, #236]	@ (800ac10 <xTaskIncrementTick+0x15c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d349      	bcc.n	800abbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab2a:	4b36      	ldr	r3, [pc, #216]	@ (800ac04 <xTaskIncrementTick+0x150>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab34:	4b36      	ldr	r3, [pc, #216]	@ (800ac10 <xTaskIncrementTick+0x15c>)
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	601a      	str	r2, [r3, #0]
					break;
 800ab3c:	e03f      	b.n	800abbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3e:	4b31      	ldr	r3, [pc, #196]	@ (800ac04 <xTaskIncrementTick+0x150>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d203      	bcs.n	800ab5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab56:	4a2e      	ldr	r2, [pc, #184]	@ (800ac10 <xTaskIncrementTick+0x15c>)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab5c:	e02f      	b.n	800abbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fb98 	bl	8009298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	3318      	adds	r3, #24
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fb8f 	bl	8009298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7e:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <xTaskIncrementTick+0x160>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d903      	bls.n	800ab8e <xTaskIncrementTick+0xda>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8a:	4a22      	ldr	r2, [pc, #136]	@ (800ac14 <xTaskIncrementTick+0x160>)
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ac18 <xTaskIncrementTick+0x164>)
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fe fb1a 	bl	80091de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abae:	4b1b      	ldr	r3, [pc, #108]	@ (800ac1c <xTaskIncrementTick+0x168>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d3b8      	bcc.n	800ab2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800abb8:	2301      	movs	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abbc:	e7b5      	b.n	800ab2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abbe:	4b17      	ldr	r3, [pc, #92]	@ (800ac1c <xTaskIncrementTick+0x168>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc4:	4914      	ldr	r1, [pc, #80]	@ (800ac18 <xTaskIncrementTick+0x164>)
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d901      	bls.n	800abda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abda:	4b11      	ldr	r3, [pc, #68]	@ (800ac20 <xTaskIncrementTick+0x16c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d007      	beq.n	800abf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800abe2:	2301      	movs	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	e004      	b.n	800abf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abe8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac24 <xTaskIncrementTick+0x170>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a0d      	ldr	r2, [pc, #52]	@ (800ac24 <xTaskIncrementTick+0x170>)
 800abf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abf2:	697b      	ldr	r3, [r7, #20]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000116c 	.word	0x2000116c
 800ac00:	20001148 	.word	0x20001148
 800ac04:	200010fc 	.word	0x200010fc
 800ac08:	20001100 	.word	0x20001100
 800ac0c:	2000115c 	.word	0x2000115c
 800ac10:	20001164 	.word	0x20001164
 800ac14:	2000114c 	.word	0x2000114c
 800ac18:	20000c74 	.word	0x20000c74
 800ac1c:	20000c70 	.word	0x20000c70
 800ac20:	20001158 	.word	0x20001158
 800ac24:	20001154 	.word	0x20001154

0800ac28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac2e:	4b28      	ldr	r3, [pc, #160]	@ (800acd0 <vTaskSwitchContext+0xa8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac36:	4b27      	ldr	r3, [pc, #156]	@ (800acd4 <vTaskSwitchContext+0xac>)
 800ac38:	2201      	movs	r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac3c:	e042      	b.n	800acc4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ac3e:	4b25      	ldr	r3, [pc, #148]	@ (800acd4 <vTaskSwitchContext+0xac>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac44:	4b24      	ldr	r3, [pc, #144]	@ (800acd8 <vTaskSwitchContext+0xb0>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	e011      	b.n	800ac70 <vTaskSwitchContext+0x48>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10b      	bne.n	800ac6a <vTaskSwitchContext+0x42>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	607b      	str	r3, [r7, #4]
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop
 800ac68:	e7fd      	b.n	800ac66 <vTaskSwitchContext+0x3e>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	491a      	ldr	r1, [pc, #104]	@ (800acdc <vTaskSwitchContext+0xb4>)
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0e3      	beq.n	800ac4c <vTaskSwitchContext+0x24>
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4a13      	ldr	r2, [pc, #76]	@ (800acdc <vTaskSwitchContext+0xb4>)
 800ac90:	4413      	add	r3, r2
 800ac92:	60bb      	str	r3, [r7, #8]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3308      	adds	r3, #8
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d104      	bne.n	800acb4 <vTaskSwitchContext+0x8c>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	605a      	str	r2, [r3, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	4a09      	ldr	r2, [pc, #36]	@ (800ace0 <vTaskSwitchContext+0xb8>)
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	4a06      	ldr	r2, [pc, #24]	@ (800acd8 <vTaskSwitchContext+0xb0>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6013      	str	r3, [r2, #0]
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	2000116c 	.word	0x2000116c
 800acd4:	20001158 	.word	0x20001158
 800acd8:	2000114c 	.word	0x2000114c
 800acdc:	20000c74 	.word	0x20000c74
 800ace0:	20000c70 	.word	0x20000c70

0800ace4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10b      	bne.n	800ad0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60fb      	str	r3, [r7, #12]
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad0c:	4b07      	ldr	r3, [pc, #28]	@ (800ad2c <vTaskPlaceOnEventList+0x48>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3318      	adds	r3, #24
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fe fa86 	bl	8009226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	6838      	ldr	r0, [r7, #0]
 800ad1e:	f000 fb91 	bl	800b444 <prvAddCurrentTaskToDelayedList>
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000c70 	.word	0x20000c70

0800ad30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10b      	bne.n	800ad5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	617b      	str	r3, [r7, #20]
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	e7fd      	b.n	800ad56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad84 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3318      	adds	r3, #24
 800ad60:	4619      	mov	r1, r3
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7fe fa3b 	bl	80091de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	68b8      	ldr	r0, [r7, #8]
 800ad78:	f000 fb64 	bl	800b444 <prvAddCurrentTaskToDelayedList>
	}
 800ad7c:	bf00      	nop
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000c70 	.word	0x20000c70

0800ad88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10b      	bne.n	800adb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	3318      	adds	r3, #24
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fa6c 	bl	8009298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae38 <xTaskRemoveFromEventList+0xb0>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11d      	bne.n	800ae04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	3304      	adds	r3, #4
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fa63 	bl	8009298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add6:	4b19      	ldr	r3, [pc, #100]	@ (800ae3c <xTaskRemoveFromEventList+0xb4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d903      	bls.n	800ade6 <xTaskRemoveFromEventList+0x5e>
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade2:	4a16      	ldr	r2, [pc, #88]	@ (800ae3c <xTaskRemoveFromEventList+0xb4>)
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a13      	ldr	r2, [pc, #76]	@ (800ae40 <xTaskRemoveFromEventList+0xb8>)
 800adf4:	441a      	add	r2, r3
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7fe f9ee 	bl	80091de <vListInsertEnd>
 800ae02:	e005      	b.n	800ae10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	3318      	adds	r3, #24
 800ae08:	4619      	mov	r1, r3
 800ae0a:	480e      	ldr	r0, [pc, #56]	@ (800ae44 <xTaskRemoveFromEventList+0xbc>)
 800ae0c:	f7fe f9e7 	bl	80091de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae14:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <xTaskRemoveFromEventList+0xc0>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d905      	bls.n	800ae2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae22:	4b0a      	ldr	r3, [pc, #40]	@ (800ae4c <xTaskRemoveFromEventList+0xc4>)
 800ae24:	2201      	movs	r2, #1
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	e001      	b.n	800ae2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae2e:	697b      	ldr	r3, [r7, #20]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	2000116c 	.word	0x2000116c
 800ae3c:	2000114c 	.word	0x2000114c
 800ae40:	20000c74 	.word	0x20000c74
 800ae44:	20001104 	.word	0x20001104
 800ae48:	20000c70 	.word	0x20000c70
 800ae4c:	20001158 	.word	0x20001158

0800ae50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae58:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <vTaskInternalSetTimeOutState+0x24>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae60:	4b05      	ldr	r3, [pc, #20]	@ (800ae78 <vTaskInternalSetTimeOutState+0x28>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	2000115c 	.word	0x2000115c
 800ae78:	20001148 	.word	0x20001148

0800ae7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	613b      	str	r3, [r7, #16]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10b      	bne.n	800aec2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60fb      	str	r3, [r7, #12]
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	e7fd      	b.n	800aebe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aec2:	f000 ffa1 	bl	800be08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aec6:	4b1d      	ldr	r3, [pc, #116]	@ (800af3c <xTaskCheckForTimeOut+0xc0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aede:	d102      	bne.n	800aee6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	e023      	b.n	800af2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b15      	ldr	r3, [pc, #84]	@ (800af40 <xTaskCheckForTimeOut+0xc4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d007      	beq.n	800af02 <xTaskCheckForTimeOut+0x86>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d302      	bcc.n	800af02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aefc:	2301      	movs	r3, #1
 800aefe:	61fb      	str	r3, [r7, #28]
 800af00:	e015      	b.n	800af2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d20b      	bcs.n	800af24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	1ad2      	subs	r2, r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff ff99 	bl	800ae50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	61fb      	str	r3, [r7, #28]
 800af22:	e004      	b.n	800af2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af2a:	2301      	movs	r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af2e:	f000 ff9d 	bl	800be6c <vPortExitCritical>

	return xReturn;
 800af32:	69fb      	ldr	r3, [r7, #28]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3720      	adds	r7, #32
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20001148 	.word	0x20001148
 800af40:	2000115c 	.word	0x2000115c

0800af44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af48:	4b03      	ldr	r3, [pc, #12]	@ (800af58 <vTaskMissedYield+0x14>)
 800af4a:	2201      	movs	r2, #1
 800af4c:	601a      	str	r2, [r3, #0]
}
 800af4e:	bf00      	nop
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	20001158 	.word	0x20001158

0800af5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af64:	f000 f852 	bl	800b00c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af68:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <prvIdleTask+0x28>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d9f9      	bls.n	800af64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af70:	4b05      	ldr	r3, [pc, #20]	@ (800af88 <prvIdleTask+0x2c>)
 800af72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af80:	e7f0      	b.n	800af64 <prvIdleTask+0x8>
 800af82:	bf00      	nop
 800af84:	20000c74 	.word	0x20000c74
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	e00c      	b.n	800afb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	4613      	mov	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4a12      	ldr	r2, [pc, #72]	@ (800afec <prvInitialiseTaskLists+0x60>)
 800afa4:	4413      	add	r3, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe f8ec 	bl	8009184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3301      	adds	r3, #1
 800afb0:	607b      	str	r3, [r7, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b37      	cmp	r3, #55	@ 0x37
 800afb6:	d9ef      	bls.n	800af98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afb8:	480d      	ldr	r0, [pc, #52]	@ (800aff0 <prvInitialiseTaskLists+0x64>)
 800afba:	f7fe f8e3 	bl	8009184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afbe:	480d      	ldr	r0, [pc, #52]	@ (800aff4 <prvInitialiseTaskLists+0x68>)
 800afc0:	f7fe f8e0 	bl	8009184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afc4:	480c      	ldr	r0, [pc, #48]	@ (800aff8 <prvInitialiseTaskLists+0x6c>)
 800afc6:	f7fe f8dd 	bl	8009184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afca:	480c      	ldr	r0, [pc, #48]	@ (800affc <prvInitialiseTaskLists+0x70>)
 800afcc:	f7fe f8da 	bl	8009184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afd0:	480b      	ldr	r0, [pc, #44]	@ (800b000 <prvInitialiseTaskLists+0x74>)
 800afd2:	f7fe f8d7 	bl	8009184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afd6:	4b0b      	ldr	r3, [pc, #44]	@ (800b004 <prvInitialiseTaskLists+0x78>)
 800afd8:	4a05      	ldr	r2, [pc, #20]	@ (800aff0 <prvInitialiseTaskLists+0x64>)
 800afda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afdc:	4b0a      	ldr	r3, [pc, #40]	@ (800b008 <prvInitialiseTaskLists+0x7c>)
 800afde:	4a05      	ldr	r2, [pc, #20]	@ (800aff4 <prvInitialiseTaskLists+0x68>)
 800afe0:	601a      	str	r2, [r3, #0]
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000c74 	.word	0x20000c74
 800aff0:	200010d4 	.word	0x200010d4
 800aff4:	200010e8 	.word	0x200010e8
 800aff8:	20001104 	.word	0x20001104
 800affc:	20001118 	.word	0x20001118
 800b000:	20001130 	.word	0x20001130
 800b004:	200010fc 	.word	0x200010fc
 800b008:	20001100 	.word	0x20001100

0800b00c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b012:	e019      	b.n	800b048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b014:	f000 fef8 	bl	800be08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b018:	4b10      	ldr	r3, [pc, #64]	@ (800b05c <prvCheckTasksWaitingTermination+0x50>)
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3304      	adds	r3, #4
 800b024:	4618      	mov	r0, r3
 800b026:	f7fe f937 	bl	8009298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b02a:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <prvCheckTasksWaitingTermination+0x54>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3b01      	subs	r3, #1
 800b030:	4a0b      	ldr	r2, [pc, #44]	@ (800b060 <prvCheckTasksWaitingTermination+0x54>)
 800b032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b034:	4b0b      	ldr	r3, [pc, #44]	@ (800b064 <prvCheckTasksWaitingTermination+0x58>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	3b01      	subs	r3, #1
 800b03a:	4a0a      	ldr	r2, [pc, #40]	@ (800b064 <prvCheckTasksWaitingTermination+0x58>)
 800b03c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b03e:	f000 ff15 	bl	800be6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f810 	bl	800b068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b048:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <prvCheckTasksWaitingTermination+0x58>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e1      	bne.n	800b014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20001118 	.word	0x20001118
 800b060:	20001144 	.word	0x20001144
 800b064:	2000112c 	.word	0x2000112c

0800b068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b076:	2b00      	cmp	r3, #0
 800b078:	d108      	bne.n	800b08c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07e:	4618      	mov	r0, r3
 800b080:	f001 f8b2 	bl	800c1e8 <vPortFree>
				vPortFree( pxTCB );
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f001 f8af 	bl	800c1e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b08a:	e019      	b.n	800b0c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b092:	2b01      	cmp	r3, #1
 800b094:	d103      	bne.n	800b09e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f001 f8a6 	bl	800c1e8 <vPortFree>
	}
 800b09c:	e010      	b.n	800b0c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d00b      	beq.n	800b0c0 <prvDeleteTCB+0x58>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	60fb      	str	r3, [r7, #12]
}
 800b0ba:	bf00      	nop
 800b0bc:	bf00      	nop
 800b0be:	e7fd      	b.n	800b0bc <prvDeleteTCB+0x54>
	}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b100 <prvResetNextTaskUnblockTime+0x38>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b104 <prvResetNextTaskUnblockTime+0x3c>)
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0e0:	e008      	b.n	800b0f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e2:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <prvResetNextTaskUnblockTime+0x38>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a04      	ldr	r2, [pc, #16]	@ (800b104 <prvResetNextTaskUnblockTime+0x3c>)
 800b0f2:	6013      	str	r3, [r2, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	200010fc 	.word	0x200010fc
 800b104:	20001164 	.word	0x20001164

0800b108 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b10e:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <xTaskGetCurrentTaskHandle+0x1c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b114:	687b      	ldr	r3, [r7, #4]
	}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20000c70 	.word	0x20000c70

0800b128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b12e:	4b0b      	ldr	r3, [pc, #44]	@ (800b15c <xTaskGetSchedulerState+0x34>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b136:	2301      	movs	r3, #1
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	e008      	b.n	800b14e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13c:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <xTaskGetSchedulerState+0x38>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d102      	bne.n	800b14a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b144:	2302      	movs	r3, #2
 800b146:	607b      	str	r3, [r7, #4]
 800b148:	e001      	b.n	800b14e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b14e:	687b      	ldr	r3, [r7, #4]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	20001150 	.word	0x20001150
 800b160:	2000116c 	.word	0x2000116c

0800b164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d051      	beq.n	800b21e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	4b2a      	ldr	r3, [pc, #168]	@ (800b228 <xTaskPriorityInherit+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d241      	bcs.n	800b20c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	db06      	blt.n	800b19e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b190:	4b25      	ldr	r3, [pc, #148]	@ (800b228 <xTaskPriorityInherit+0xc4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b196:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6959      	ldr	r1, [r3, #20]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b22c <xTaskPriorityInherit+0xc8>)
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	d122      	bne.n	800b1fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe f86c 	bl	8009298 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1c0:	4b19      	ldr	r3, [pc, #100]	@ (800b228 <xTaskPriorityInherit+0xc4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ce:	4b18      	ldr	r3, [pc, #96]	@ (800b230 <xTaskPriorityInherit+0xcc>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d903      	bls.n	800b1de <xTaskPriorityInherit+0x7a>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1da:	4a15      	ldr	r2, [pc, #84]	@ (800b230 <xTaskPriorityInherit+0xcc>)
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4a10      	ldr	r2, [pc, #64]	@ (800b22c <xTaskPriorityInherit+0xc8>)
 800b1ec:	441a      	add	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7fd fff2 	bl	80091de <vListInsertEnd>
 800b1fa:	e004      	b.n	800b206 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b228 <xTaskPriorityInherit+0xc4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	e008      	b.n	800b21e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b210:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <xTaskPriorityInherit+0xc4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	429a      	cmp	r2, r3
 800b218:	d201      	bcs.n	800b21e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b21e:	68fb      	ldr	r3, [r7, #12]
	}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20000c70 	.word	0x20000c70
 800b22c:	20000c74 	.word	0x20000c74
 800b230:	2000114c 	.word	0x2000114c

0800b234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d058      	beq.n	800b2fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b24a:	4b2f      	ldr	r3, [pc, #188]	@ (800b308 <xTaskPriorityDisinherit+0xd4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	429a      	cmp	r2, r3
 800b252:	d00b      	beq.n	800b26c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	60fb      	str	r3, [r7, #12]
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	e7fd      	b.n	800b268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10b      	bne.n	800b28c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	60bb      	str	r3, [r7, #8]
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b290:	1e5a      	subs	r2, r3, #1
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d02c      	beq.n	800b2fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d128      	bne.n	800b2fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd fff2 	bl	8009298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b30c <xTaskPriorityDisinherit+0xd8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d903      	bls.n	800b2dc <xTaskPriorityDisinherit+0xa8>
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d8:	4a0c      	ldr	r2, [pc, #48]	@ (800b30c <xTaskPriorityDisinherit+0xd8>)
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4a09      	ldr	r2, [pc, #36]	@ (800b310 <xTaskPriorityDisinherit+0xdc>)
 800b2ea:	441a      	add	r2, r3
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	f7fd ff73 	bl	80091de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2fc:	697b      	ldr	r3, [r7, #20]
	}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20000c70 	.word	0x20000c70
 800b30c:	2000114c 	.word	0x2000114c
 800b310:	20000c74 	.word	0x20000c74

0800b314 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b322:	2301      	movs	r3, #1
 800b324:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d06c      	beq.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10b      	bne.n	800b34c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	60fb      	str	r3, [r7, #12]
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	e7fd      	b.n	800b348 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d902      	bls.n	800b35c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	e002      	b.n	800b362 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b360:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d04c      	beq.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	429a      	cmp	r2, r3
 800b374:	d147      	bne.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b376:	4b26      	ldr	r3, [pc, #152]	@ (800b410 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d10b      	bne.n	800b398 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60bb      	str	r3, [r7, #8]
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	e7fd      	b.n	800b394 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db04      	blt.n	800b3b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	6959      	ldr	r1, [r3, #20]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4a13      	ldr	r2, [pc, #76]	@ (800b414 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3c6:	4413      	add	r3, r2
 800b3c8:	4299      	cmp	r1, r3
 800b3ca:	d11c      	bne.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fd ff61 	bl	8009298 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3da:	4b0f      	ldr	r3, [pc, #60]	@ (800b418 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d903      	bls.n	800b3ea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e6:	4a0c      	ldr	r2, [pc, #48]	@ (800b418 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4a07      	ldr	r2, [pc, #28]	@ (800b414 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3f8:	441a      	add	r2, r3
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f7fd feec 	bl	80091de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b406:	bf00      	nop
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000c70 	.word	0x20000c70
 800b414:	20000c74 	.word	0x20000c74
 800b418:	2000114c 	.word	0x2000114c

0800b41c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b420:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <pvTaskIncrementMutexHeldCount+0x24>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b428:	4b05      	ldr	r3, [pc, #20]	@ (800b440 <pvTaskIncrementMutexHeldCount+0x24>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b42e:	3201      	adds	r2, #1
 800b430:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b432:	4b03      	ldr	r3, [pc, #12]	@ (800b440 <pvTaskIncrementMutexHeldCount+0x24>)
 800b434:	681b      	ldr	r3, [r3, #0]
	}
 800b436:	4618      	mov	r0, r3
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	20000c70 	.word	0x20000c70

0800b444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b44e:	4b21      	ldr	r3, [pc, #132]	@ (800b4d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b454:	4b20      	ldr	r3, [pc, #128]	@ (800b4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3304      	adds	r3, #4
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fd ff1c 	bl	8009298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b466:	d10a      	bne.n	800b47e <prvAddCurrentTaskToDelayedList+0x3a>
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d007      	beq.n	800b47e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b46e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3304      	adds	r3, #4
 800b474:	4619      	mov	r1, r3
 800b476:	4819      	ldr	r0, [pc, #100]	@ (800b4dc <prvAddCurrentTaskToDelayedList+0x98>)
 800b478:	f7fd feb1 	bl	80091de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b47c:	e026      	b.n	800b4cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4413      	add	r3, r2
 800b484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b486:	4b14      	ldr	r3, [pc, #80]	@ (800b4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	429a      	cmp	r2, r3
 800b494:	d209      	bcs.n	800b4aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b496:	4b12      	ldr	r3, [pc, #72]	@ (800b4e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f7fd febf 	bl	8009226 <vListInsert>
}
 800b4a8:	e010      	b.n	800b4cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f7fd feb5 	bl	8009226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d202      	bcs.n	800b4cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4c6:	4a08      	ldr	r2, [pc, #32]	@ (800b4e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	6013      	str	r3, [r2, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20001148 	.word	0x20001148
 800b4d8:	20000c70 	.word	0x20000c70
 800b4dc:	20001130 	.word	0x20001130
 800b4e0:	20001100 	.word	0x20001100
 800b4e4:	200010fc 	.word	0x200010fc
 800b4e8:	20001164 	.word	0x20001164

0800b4ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08a      	sub	sp, #40	@ 0x28
 800b4f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4f6:	f000 fb13 	bl	800bb20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b570 <xTimerCreateTimerTask+0x84>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d021      	beq.n	800b546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b506:	2300      	movs	r3, #0
 800b508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b50a:	1d3a      	adds	r2, r7, #4
 800b50c:	f107 0108 	add.w	r1, r7, #8
 800b510:	f107 030c 	add.w	r3, r7, #12
 800b514:	4618      	mov	r0, r3
 800b516:	f7fd fe1b 	bl	8009150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	9202      	str	r2, [sp, #8]
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	2302      	movs	r3, #2
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	2300      	movs	r3, #0
 800b52a:	460a      	mov	r2, r1
 800b52c:	4911      	ldr	r1, [pc, #68]	@ (800b574 <xTimerCreateTimerTask+0x88>)
 800b52e:	4812      	ldr	r0, [pc, #72]	@ (800b578 <xTimerCreateTimerTask+0x8c>)
 800b530:	f7fe ffc0 	bl	800a4b4 <xTaskCreateStatic>
 800b534:	4603      	mov	r3, r0
 800b536:	4a11      	ldr	r2, [pc, #68]	@ (800b57c <xTimerCreateTimerTask+0x90>)
 800b538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b53a:	4b10      	ldr	r3, [pc, #64]	@ (800b57c <xTimerCreateTimerTask+0x90>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b542:	2301      	movs	r3, #1
 800b544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	613b      	str	r3, [r7, #16]
}
 800b55e:	bf00      	nop
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b564:	697b      	ldr	r3, [r7, #20]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	200011a0 	.word	0x200011a0
 800b574:	0800c53c 	.word	0x0800c53c
 800b578:	0800b6b9 	.word	0x0800b6b9
 800b57c:	200011a4 	.word	0x200011a4

0800b580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	@ 0x28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
 800b58c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b58e:	2300      	movs	r3, #0
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10b      	bne.n	800b5b0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	623b      	str	r3, [r7, #32]
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5b0:	4b19      	ldr	r3, [pc, #100]	@ (800b618 <xTimerGenericCommand+0x98>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d02a      	beq.n	800b60e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	dc18      	bgt.n	800b5fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5ca:	f7ff fdad 	bl	800b128 <xTaskGetSchedulerState>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d109      	bne.n	800b5e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5d4:	4b10      	ldr	r3, [pc, #64]	@ (800b618 <xTimerGenericCommand+0x98>)
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	f107 0110 	add.w	r1, r7, #16
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5e0:	f7fe f8f0 	bl	80097c4 <xQueueGenericSend>
 800b5e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5e6:	e012      	b.n	800b60e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b618 <xTimerGenericCommand+0x98>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	f107 0110 	add.w	r1, r7, #16
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f7fe f8e6 	bl	80097c4 <xQueueGenericSend>
 800b5f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5fa:	e008      	b.n	800b60e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5fc:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <xTimerGenericCommand+0x98>)
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	f107 0110 	add.w	r1, r7, #16
 800b604:	2300      	movs	r3, #0
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	f7fe f9de 	bl	80099c8 <xQueueGenericSendFromISR>
 800b60c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b610:	4618      	mov	r0, r3
 800b612:	3728      	adds	r7, #40	@ 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	200011a0 	.word	0x200011a0

0800b61c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b626:	4b23      	ldr	r3, [pc, #140]	@ (800b6b4 <prvProcessExpiredTimer+0x98>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	3304      	adds	r3, #4
 800b634:	4618      	mov	r0, r3
 800b636:	f7fd fe2f 	bl	8009298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b00      	cmp	r3, #0
 800b646:	d023      	beq.n	800b690 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	18d1      	adds	r1, r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	6978      	ldr	r0, [r7, #20]
 800b656:	f000 f8d5 	bl	800b804 <prvInsertTimerInActiveList>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d020      	beq.n	800b6a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b660:	2300      	movs	r3, #0
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	2300      	movs	r3, #0
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	2100      	movs	r1, #0
 800b66a:	6978      	ldr	r0, [r7, #20]
 800b66c:	f7ff ff88 	bl	800b580 <xTimerGenericCommand>
 800b670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d114      	bne.n	800b6a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	60fb      	str	r3, [r7, #12]
}
 800b68a:	bf00      	nop
 800b68c:	bf00      	nop
 800b68e:	e7fd      	b.n	800b68c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b696:	f023 0301 	bic.w	r3, r3, #1
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	4798      	blx	r3
}
 800b6aa:	bf00      	nop
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001198 	.word	0x20001198

0800b6b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6c0:	f107 0308 	add.w	r3, r7, #8
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f000 f859 	bl	800b77c <prvGetNextExpireTime>
 800b6ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f000 f805 	bl	800b6e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6d6:	f000 f8d7 	bl	800b888 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6da:	bf00      	nop
 800b6dc:	e7f0      	b.n	800b6c0 <prvTimerTask+0x8>
	...

0800b6e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6ea:	f7ff f927 	bl	800a93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6ee:	f107 0308 	add.w	r3, r7, #8
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 f866 	bl	800b7c4 <prvSampleTimeNow>
 800b6f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d130      	bne.n	800b762 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <prvProcessTimerOrBlockTask+0x3c>
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d806      	bhi.n	800b71c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b70e:	f7ff f923 	bl	800a958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff81 	bl	800b61c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b71a:	e024      	b.n	800b766 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d008      	beq.n	800b734 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b722:	4b13      	ldr	r3, [pc, #76]	@ (800b770 <prvProcessTimerOrBlockTask+0x90>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <prvProcessTimerOrBlockTask+0x50>
 800b72c:	2301      	movs	r3, #1
 800b72e:	e000      	b.n	800b732 <prvProcessTimerOrBlockTask+0x52>
 800b730:	2300      	movs	r3, #0
 800b732:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b734:	4b0f      	ldr	r3, [pc, #60]	@ (800b774 <prvProcessTimerOrBlockTask+0x94>)
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4619      	mov	r1, r3
 800b742:	f7fe fe83 	bl	800a44c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b746:	f7ff f907 	bl	800a958 <xTaskResumeAll>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b750:	4b09      	ldr	r3, [pc, #36]	@ (800b778 <prvProcessTimerOrBlockTask+0x98>)
 800b752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	f3bf 8f6f 	isb	sy
}
 800b760:	e001      	b.n	800b766 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b762:	f7ff f8f9 	bl	800a958 <xTaskResumeAll>
}
 800b766:	bf00      	nop
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	2000119c 	.word	0x2000119c
 800b774:	200011a0 	.word	0x200011a0
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b784:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <prvGetNextExpireTime+0x44>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <prvGetNextExpireTime+0x16>
 800b78e:	2201      	movs	r2, #1
 800b790:	e000      	b.n	800b794 <prvGetNextExpireTime+0x18>
 800b792:	2200      	movs	r2, #0
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d105      	bne.n	800b7ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7a0:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <prvGetNextExpireTime+0x44>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	e001      	b.n	800b7b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20001198 	.word	0x20001198

0800b7c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7cc:	f7ff f962 	bl	800aa94 <xTaskGetTickCount>
 800b7d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <prvSampleTimeNow+0x3c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d205      	bcs.n	800b7e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7dc:	f000 f93a 	bl	800ba54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e002      	b.n	800b7ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7ee:	4a04      	ldr	r2, [pc, #16]	@ (800b800 <prvSampleTimeNow+0x3c>)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	200011a8 	.word	0x200011a8

0800b804 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d812      	bhi.n	800b850 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	429a      	cmp	r2, r3
 800b836:	d302      	bcc.n	800b83e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e01b      	b.n	800b876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b83e:	4b10      	ldr	r3, [pc, #64]	@ (800b880 <prvInsertTimerInActiveList+0x7c>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fd fcec 	bl	8009226 <vListInsert>
 800b84e:	e012      	b.n	800b876 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	d206      	bcs.n	800b866 <prvInsertTimerInActiveList+0x62>
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d302      	bcc.n	800b866 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e007      	b.n	800b876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b866:	4b07      	ldr	r3, [pc, #28]	@ (800b884 <prvInsertTimerInActiveList+0x80>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fd fcd8 	bl	8009226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b876:	697b      	ldr	r3, [r7, #20]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2000119c 	.word	0x2000119c
 800b884:	20001198 	.word	0x20001198

0800b888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	@ 0x38
 800b88c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b88e:	e0ce      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	da19      	bge.n	800b8ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b896:	1d3b      	adds	r3, r7, #4
 800b898:	3304      	adds	r3, #4
 800b89a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10b      	bne.n	800b8ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	61fb      	str	r3, [r7, #28]
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop
 800b8b8:	e7fd      	b.n	800b8b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c0:	6850      	ldr	r0, [r2, #4]
 800b8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c4:	6892      	ldr	r2, [r2, #8]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f2c0 80ae 	blt.w	800ba2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d004      	beq.n	800b8e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fcd8 	bl	8009298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff ff6a 	bl	800b7c4 <prvSampleTimeNow>
 800b8f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b09      	cmp	r3, #9
 800b8f6:	f200 8097 	bhi.w	800ba28 <prvProcessReceivedCommands+0x1a0>
 800b8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b900 <prvProcessReceivedCommands+0x78>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b929 	.word	0x0800b929
 800b904:	0800b929 	.word	0x0800b929
 800b908:	0800b929 	.word	0x0800b929
 800b90c:	0800b99f 	.word	0x0800b99f
 800b910:	0800b9b3 	.word	0x0800b9b3
 800b914:	0800b9ff 	.word	0x0800b9ff
 800b918:	0800b929 	.word	0x0800b929
 800b91c:	0800b929 	.word	0x0800b929
 800b920:	0800b99f 	.word	0x0800b99f
 800b924:	0800b9b3 	.word	0x0800b9b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b92e:	f043 0301 	orr.w	r3, r3, #1
 800b932:	b2da      	uxtb	r2, r3
 800b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	18d1      	adds	r1, r2, r3
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b948:	f7ff ff5c 	bl	800b804 <prvInsertTimerInActiveList>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d06c      	beq.n	800ba2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b958:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d061      	beq.n	800ba2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	441a      	add	r2, r3
 800b970:	2300      	movs	r3, #0
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	2300      	movs	r3, #0
 800b976:	2100      	movs	r1, #0
 800b978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b97a:	f7ff fe01 	bl	800b580 <xTimerGenericCommand>
 800b97e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d152      	bne.n	800ba2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	61bb      	str	r3, [r7, #24]
}
 800b998:	bf00      	nop
 800b99a:	bf00      	nop
 800b99c:	e7fd      	b.n	800b99a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9a4:	f023 0301 	bic.w	r3, r3, #1
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b9b0:	e03d      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9b8:	f043 0301 	orr.w	r3, r3, #1
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10b      	bne.n	800b9ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	617b      	str	r3, [r7, #20]
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	e7fd      	b.n	800b9e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ec:	699a      	ldr	r2, [r3, #24]
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	18d1      	adds	r1, r2, r3
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9f8:	f7ff ff04 	bl	800b804 <prvInsertTimerInActiveList>
					break;
 800b9fc:	e017      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ba0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba0e:	f000 fbeb 	bl	800c1e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba12:	e00c      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba1a:	f023 0301 	bic.w	r3, r3, #1
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba26:	e002      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ba28:	bf00      	nop
 800ba2a:	e000      	b.n	800ba2e <prvProcessReceivedCommands+0x1a6>
					break;
 800ba2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba2e:	4b08      	ldr	r3, [pc, #32]	@ (800ba50 <prvProcessReceivedCommands+0x1c8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	1d39      	adds	r1, r7, #4
 800ba34:	2200      	movs	r2, #0
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe f8f4 	bl	8009c24 <xQueueReceive>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f47f af26 	bne.w	800b890 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	3730      	adds	r7, #48	@ 0x30
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200011a0 	.word	0x200011a0

0800ba54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba5a:	e049      	b.n	800baf0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba5c:	4b2e      	ldr	r3, [pc, #184]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba66:	4b2c      	ldr	r3, [pc, #176]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fd fc0f 	bl	8009298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d02f      	beq.n	800baf0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	4413      	add	r3, r2
 800ba98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d90e      	bls.n	800bac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baae:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fd fbb4 	bl	8009226 <vListInsert>
 800babe:	e017      	b.n	800baf0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bac0:	2300      	movs	r3, #0
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	2300      	movs	r3, #0
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	2100      	movs	r1, #0
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fd58 	bl	800b580 <xTimerGenericCommand>
 800bad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10b      	bne.n	800baf0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	603b      	str	r3, [r7, #0]
}
 800baea:	bf00      	nop
 800baec:	bf00      	nop
 800baee:	e7fd      	b.n	800baec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baf0:	4b09      	ldr	r3, [pc, #36]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1b0      	bne.n	800ba5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bafa:	4b07      	ldr	r3, [pc, #28]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb00:	4b06      	ldr	r3, [pc, #24]	@ (800bb1c <prvSwitchTimerLists+0xc8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a04      	ldr	r2, [pc, #16]	@ (800bb18 <prvSwitchTimerLists+0xc4>)
 800bb06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb08:	4a04      	ldr	r2, [pc, #16]	@ (800bb1c <prvSwitchTimerLists+0xc8>)
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	6013      	str	r3, [r2, #0]
}
 800bb0e:	bf00      	nop
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20001198 	.word	0x20001198
 800bb1c:	2000119c 	.word	0x2000119c

0800bb20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb26:	f000 f96f 	bl	800be08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb2a:	4b15      	ldr	r3, [pc, #84]	@ (800bb80 <prvCheckForValidListAndQueue+0x60>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d120      	bne.n	800bb74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb32:	4814      	ldr	r0, [pc, #80]	@ (800bb84 <prvCheckForValidListAndQueue+0x64>)
 800bb34:	f7fd fb26 	bl	8009184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb38:	4813      	ldr	r0, [pc, #76]	@ (800bb88 <prvCheckForValidListAndQueue+0x68>)
 800bb3a:	f7fd fb23 	bl	8009184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb3e:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <prvCheckForValidListAndQueue+0x6c>)
 800bb40:	4a10      	ldr	r2, [pc, #64]	@ (800bb84 <prvCheckForValidListAndQueue+0x64>)
 800bb42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb44:	4b12      	ldr	r3, [pc, #72]	@ (800bb90 <prvCheckForValidListAndQueue+0x70>)
 800bb46:	4a10      	ldr	r2, [pc, #64]	@ (800bb88 <prvCheckForValidListAndQueue+0x68>)
 800bb48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	4b11      	ldr	r3, [pc, #68]	@ (800bb94 <prvCheckForValidListAndQueue+0x74>)
 800bb50:	4a11      	ldr	r2, [pc, #68]	@ (800bb98 <prvCheckForValidListAndQueue+0x78>)
 800bb52:	2110      	movs	r1, #16
 800bb54:	200a      	movs	r0, #10
 800bb56:	f7fd fc33 	bl	80093c0 <xQueueGenericCreateStatic>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4a08      	ldr	r2, [pc, #32]	@ (800bb80 <prvCheckForValidListAndQueue+0x60>)
 800bb5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb60:	4b07      	ldr	r3, [pc, #28]	@ (800bb80 <prvCheckForValidListAndQueue+0x60>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb68:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <prvCheckForValidListAndQueue+0x60>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	490b      	ldr	r1, [pc, #44]	@ (800bb9c <prvCheckForValidListAndQueue+0x7c>)
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fe fc18 	bl	800a3a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb74:	f000 f97a 	bl	800be6c <vPortExitCritical>
}
 800bb78:	bf00      	nop
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	200011a0 	.word	0x200011a0
 800bb84:	20001170 	.word	0x20001170
 800bb88:	20001184 	.word	0x20001184
 800bb8c:	20001198 	.word	0x20001198
 800bb90:	2000119c 	.word	0x2000119c
 800bb94:	2000124c 	.word	0x2000124c
 800bb98:	200011ac 	.word	0x200011ac
 800bb9c:	0800c544 	.word	0x0800c544

0800bba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3b04      	subs	r3, #4
 800bbb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bbb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f023 0201 	bic.w	r2, r3, #1
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3b04      	subs	r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbd0:	4a0c      	ldr	r2, [pc, #48]	@ (800bc04 <pxPortInitialiseStack+0x64>)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3b14      	subs	r3, #20
 800bbda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3b04      	subs	r3, #4
 800bbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f06f 0202 	mvn.w	r2, #2
 800bbee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3b20      	subs	r3, #32
 800bbf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	0800bc09 	.word	0x0800bc09

0800bc08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc12:	4b13      	ldr	r3, [pc, #76]	@ (800bc60 <prvTaskExitError+0x58>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1a:	d00b      	beq.n	800bc34 <prvTaskExitError+0x2c>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60fb      	str	r3, [r7, #12]
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <prvTaskExitError+0x28>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60bb      	str	r3, [r7, #8]
}
 800bc46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc48:	bf00      	nop
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0fc      	beq.n	800bc4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2000000c 	.word	0x2000000c
	...

0800bc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc70:	4b07      	ldr	r3, [pc, #28]	@ (800bc90 <pxCurrentTCBConst2>)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	f380 8809 	msr	PSP, r0
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f04f 0000 	mov.w	r0, #0
 800bc86:	f380 8811 	msr	BASEPRI, r0
 800bc8a:	4770      	bx	lr
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst2>:
 800bc90:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc98:	4808      	ldr	r0, [pc, #32]	@ (800bcbc <prvPortStartFirstTask+0x24>)
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	f380 8808 	msr	MSP, r0
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8814 	msr	CONTROL, r0
 800bcaa:	b662      	cpsie	i
 800bcac:	b661      	cpsie	f
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	df00      	svc	0
 800bcb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcba:	bf00      	nop
 800bcbc:	e000ed08 	.word	0xe000ed08

0800bcc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcc6:	4b47      	ldr	r3, [pc, #284]	@ (800bde4 <xPortStartScheduler+0x124>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a47      	ldr	r2, [pc, #284]	@ (800bde8 <xPortStartScheduler+0x128>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d10b      	bne.n	800bce8 <xPortStartScheduler+0x28>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bce8:	4b3e      	ldr	r3, [pc, #248]	@ (800bde4 <xPortStartScheduler+0x124>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a3f      	ldr	r2, [pc, #252]	@ (800bdec <xPortStartScheduler+0x12c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d10b      	bne.n	800bd0a <xPortStartScheduler+0x4a>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	613b      	str	r3, [r7, #16]
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	e7fd      	b.n	800bd06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd0a:	4b39      	ldr	r3, [pc, #228]	@ (800bdf0 <xPortStartScheduler+0x130>)
 800bd0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	22ff      	movs	r2, #255	@ 0xff
 800bd1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	4b31      	ldr	r3, [pc, #196]	@ (800bdf4 <xPortStartScheduler+0x134>)
 800bd30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd32:	4b31      	ldr	r3, [pc, #196]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd34:	2207      	movs	r2, #7
 800bd36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd38:	e009      	b.n	800bd4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4a2d      	ldr	r2, [pc, #180]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd4e:	78fb      	ldrb	r3, [r7, #3]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd56:	2b80      	cmp	r3, #128	@ 0x80
 800bd58:	d0ef      	beq.n	800bd3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd5a:	4b27      	ldr	r3, [pc, #156]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f1c3 0307 	rsb	r3, r3, #7
 800bd62:	2b04      	cmp	r3, #4
 800bd64:	d00b      	beq.n	800bd7e <xPortStartScheduler+0xbe>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	60bb      	str	r3, [r7, #8]
}
 800bd78:	bf00      	nop
 800bd7a:	bf00      	nop
 800bd7c:	e7fd      	b.n	800bd7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd88:	4b1b      	ldr	r3, [pc, #108]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd90:	4a19      	ldr	r2, [pc, #100]	@ (800bdf8 <xPortStartScheduler+0x138>)
 800bd92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd9c:	4b17      	ldr	r3, [pc, #92]	@ (800bdfc <xPortStartScheduler+0x13c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a16      	ldr	r2, [pc, #88]	@ (800bdfc <xPortStartScheduler+0x13c>)
 800bda2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bda6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bda8:	4b14      	ldr	r3, [pc, #80]	@ (800bdfc <xPortStartScheduler+0x13c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a13      	ldr	r2, [pc, #76]	@ (800bdfc <xPortStartScheduler+0x13c>)
 800bdae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bdb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdb4:	f000 f8da 	bl	800bf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdb8:	4b11      	ldr	r3, [pc, #68]	@ (800be00 <xPortStartScheduler+0x140>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdbe:	f000 f8f9 	bl	800bfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdc2:	4b10      	ldr	r3, [pc, #64]	@ (800be04 <xPortStartScheduler+0x144>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a0f      	ldr	r2, [pc, #60]	@ (800be04 <xPortStartScheduler+0x144>)
 800bdc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bdcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdce:	f7ff ff63 	bl	800bc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdd2:	f7fe ff29 	bl	800ac28 <vTaskSwitchContext>
	prvTaskExitError();
 800bdd6:	f7ff ff17 	bl	800bc08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	e000ed00 	.word	0xe000ed00
 800bde8:	410fc271 	.word	0x410fc271
 800bdec:	410fc270 	.word	0x410fc270
 800bdf0:	e000e400 	.word	0xe000e400
 800bdf4:	2000129c 	.word	0x2000129c
 800bdf8:	200012a0 	.word	0x200012a0
 800bdfc:	e000ed20 	.word	0xe000ed20
 800be00:	2000000c 	.word	0x2000000c
 800be04:	e000ef34 	.word	0xe000ef34

0800be08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be22:	4b10      	ldr	r3, [pc, #64]	@ (800be64 <vPortEnterCritical+0x5c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	4a0e      	ldr	r2, [pc, #56]	@ (800be64 <vPortEnterCritical+0x5c>)
 800be2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be2c:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <vPortEnterCritical+0x5c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d110      	bne.n	800be56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be34:	4b0c      	ldr	r3, [pc, #48]	@ (800be68 <vPortEnterCritical+0x60>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <vPortEnterCritical+0x4e>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	603b      	str	r3, [r7, #0]
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	e7fd      	b.n	800be52 <vPortEnterCritical+0x4a>
	}
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	2000000c 	.word	0x2000000c
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be72:	4b12      	ldr	r3, [pc, #72]	@ (800bebc <vPortExitCritical+0x50>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10b      	bne.n	800be92 <vPortExitCritical+0x26>
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	607b      	str	r3, [r7, #4]
}
 800be8c:	bf00      	nop
 800be8e:	bf00      	nop
 800be90:	e7fd      	b.n	800be8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be92:	4b0a      	ldr	r3, [pc, #40]	@ (800bebc <vPortExitCritical+0x50>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3b01      	subs	r3, #1
 800be98:	4a08      	ldr	r2, [pc, #32]	@ (800bebc <vPortExitCritical+0x50>)
 800be9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be9c:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <vPortExitCritical+0x50>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d105      	bne.n	800beb0 <vPortExitCritical+0x44>
 800bea4:	2300      	movs	r3, #0
 800bea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	f383 8811 	msr	BASEPRI, r3
}
 800beae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	2000000c 	.word	0x2000000c

0800bec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bec0:	f3ef 8009 	mrs	r0, PSP
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	4b15      	ldr	r3, [pc, #84]	@ (800bf20 <pxCurrentTCBConst>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	f01e 0f10 	tst.w	lr, #16
 800bed0:	bf08      	it	eq
 800bed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bee4:	f380 8811 	msr	BASEPRI, r0
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f7fe fe9a 	bl	800ac28 <vTaskSwitchContext>
 800bef4:	f04f 0000 	mov.w	r0, #0
 800bef8:	f380 8811 	msr	BASEPRI, r0
 800befc:	bc09      	pop	{r0, r3}
 800befe:	6819      	ldr	r1, [r3, #0]
 800bf00:	6808      	ldr	r0, [r1, #0]
 800bf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf06:	f01e 0f10 	tst.w	lr, #16
 800bf0a:	bf08      	it	eq
 800bf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf10:	f380 8809 	msr	PSP, r0
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w

0800bf20 <pxCurrentTCBConst>:
 800bf20:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop

0800bf28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf42:	f7fe fdb7 	bl	800aab4 <xTaskIncrementTick>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf4c:	4b06      	ldr	r3, [pc, #24]	@ (800bf68 <xPortSysTickHandler+0x40>)
 800bf4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	2300      	movs	r3, #0
 800bf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f383 8811 	msr	BASEPRI, r3
}
 800bf5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf70:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf76:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <vPortSetupTimerInterrupt+0x38>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <vPortSetupTimerInterrupt+0x3c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a0a      	ldr	r2, [pc, #40]	@ (800bfac <vPortSetupTimerInterrupt+0x40>)
 800bf82:	fba2 2303 	umull	r2, r3, r2, r3
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	4a09      	ldr	r2, [pc, #36]	@ (800bfb0 <vPortSetupTimerInterrupt+0x44>)
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf8e:	4b04      	ldr	r3, [pc, #16]	@ (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf90:	2207      	movs	r2, #7
 800bf92:	601a      	str	r2, [r3, #0]
}
 800bf94:	bf00      	nop
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	e000e010 	.word	0xe000e010
 800bfa4:	e000e018 	.word	0xe000e018
 800bfa8:	20000000 	.word	0x20000000
 800bfac:	10624dd3 	.word	0x10624dd3
 800bfb0:	e000e014 	.word	0xe000e014

0800bfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bfc4 <vPortEnableVFP+0x10>
 800bfb8:	6801      	ldr	r1, [r0, #0]
 800bfba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bfbe:	6001      	str	r1, [r0, #0]
 800bfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfc2:	bf00      	nop
 800bfc4:	e000ed88 	.word	0xe000ed88

0800bfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfce:	f3ef 8305 	mrs	r3, IPSR
 800bfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b0f      	cmp	r3, #15
 800bfd8:	d915      	bls.n	800c006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfda:	4a18      	ldr	r2, [pc, #96]	@ (800c03c <vPortValidateInterruptPriority+0x74>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfe4:	4b16      	ldr	r3, [pc, #88]	@ (800c040 <vPortValidateInterruptPriority+0x78>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	7afa      	ldrb	r2, [r7, #11]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d20b      	bcs.n	800c006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	e7fd      	b.n	800c002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c006:	4b0f      	ldr	r3, [pc, #60]	@ (800c044 <vPortValidateInterruptPriority+0x7c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c00e:	4b0e      	ldr	r3, [pc, #56]	@ (800c048 <vPortValidateInterruptPriority+0x80>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d90b      	bls.n	800c02e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	603b      	str	r3, [r7, #0]
}
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	e7fd      	b.n	800c02a <vPortValidateInterruptPriority+0x62>
	}
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	e000e3f0 	.word	0xe000e3f0
 800c040:	2000129c 	.word	0x2000129c
 800c044:	e000ed0c 	.word	0xe000ed0c
 800c048:	200012a0 	.word	0x200012a0

0800c04c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	@ 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c054:	2300      	movs	r3, #0
 800c056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c058:	f7fe fc70 	bl	800a93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c05c:	4b5c      	ldr	r3, [pc, #368]	@ (800c1d0 <pvPortMalloc+0x184>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c064:	f000 f924 	bl	800c2b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c068:	4b5a      	ldr	r3, [pc, #360]	@ (800c1d4 <pvPortMalloc+0x188>)
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4013      	ands	r3, r2
 800c070:	2b00      	cmp	r3, #0
 800c072:	f040 8095 	bne.w	800c1a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d01e      	beq.n	800c0ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c07c:	2208      	movs	r2, #8
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4413      	add	r3, r2
 800c082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f003 0307 	and.w	r3, r3, #7
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d015      	beq.n	800c0ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f023 0307 	bic.w	r3, r3, #7
 800c094:	3308      	adds	r3, #8
 800c096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f003 0307 	and.w	r3, r3, #7
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <pvPortMalloc+0x6e>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	617b      	str	r3, [r7, #20]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d06f      	beq.n	800c1a0 <pvPortMalloc+0x154>
 800c0c0:	4b45      	ldr	r3, [pc, #276]	@ (800c1d8 <pvPortMalloc+0x18c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d86a      	bhi.n	800c1a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0ca:	4b44      	ldr	r3, [pc, #272]	@ (800c1dc <pvPortMalloc+0x190>)
 800c0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0ce:	4b43      	ldr	r3, [pc, #268]	@ (800c1dc <pvPortMalloc+0x190>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0d4:	e004      	b.n	800c0e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d903      	bls.n	800c0f2 <pvPortMalloc+0xa6>
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f1      	bne.n	800c0d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0f2:	4b37      	ldr	r3, [pc, #220]	@ (800c1d0 <pvPortMalloc+0x184>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d051      	beq.n	800c1a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2208      	movs	r2, #8
 800c102:	4413      	add	r3, r2
 800c104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	1ad2      	subs	r2, r2, r3
 800c116:	2308      	movs	r3, #8
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d920      	bls.n	800c160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	f003 0307 	and.w	r3, r3, #7
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <pvPortMalloc+0xfc>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	613b      	str	r3, [r7, #16]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c15a:	69b8      	ldr	r0, [r7, #24]
 800c15c:	f000 f90a 	bl	800c374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c160:	4b1d      	ldr	r3, [pc, #116]	@ (800c1d8 <pvPortMalloc+0x18c>)
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d8 <pvPortMalloc+0x18c>)
 800c16c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c16e:	4b1a      	ldr	r3, [pc, #104]	@ (800c1d8 <pvPortMalloc+0x18c>)
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e0 <pvPortMalloc+0x194>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d203      	bcs.n	800c182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c17a:	4b17      	ldr	r3, [pc, #92]	@ (800c1d8 <pvPortMalloc+0x18c>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a18      	ldr	r2, [pc, #96]	@ (800c1e0 <pvPortMalloc+0x194>)
 800c180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	4b13      	ldr	r3, [pc, #76]	@ (800c1d4 <pvPortMalloc+0x188>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	431a      	orrs	r2, r3
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c196:	4b13      	ldr	r3, [pc, #76]	@ (800c1e4 <pvPortMalloc+0x198>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3301      	adds	r3, #1
 800c19c:	4a11      	ldr	r2, [pc, #68]	@ (800c1e4 <pvPortMalloc+0x198>)
 800c19e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1a0:	f7fe fbda 	bl	800a958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	f003 0307 	and.w	r3, r3, #7
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00b      	beq.n	800c1c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	60fb      	str	r3, [r7, #12]
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	e7fd      	b.n	800c1c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3728      	adds	r7, #40	@ 0x28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20004eac 	.word	0x20004eac
 800c1d4:	20004ec0 	.word	0x20004ec0
 800c1d8:	20004eb0 	.word	0x20004eb0
 800c1dc:	20004ea4 	.word	0x20004ea4
 800c1e0:	20004eb4 	.word	0x20004eb4
 800c1e4:	20004eb8 	.word	0x20004eb8

0800c1e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d04f      	beq.n	800c29a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1fa:	2308      	movs	r3, #8
 800c1fc:	425b      	negs	r3, r3
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4413      	add	r3, r2
 800c202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	4b25      	ldr	r3, [pc, #148]	@ (800c2a4 <vPortFree+0xbc>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4013      	ands	r3, r2
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10b      	bne.n	800c22e <vPortFree+0x46>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	60fb      	str	r3, [r7, #12]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <vPortFree+0x66>
	__asm volatile
 800c236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	60bb      	str	r3, [r7, #8]
}
 800c248:	bf00      	nop
 800c24a:	bf00      	nop
 800c24c:	e7fd      	b.n	800c24a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	4b14      	ldr	r3, [pc, #80]	@ (800c2a4 <vPortFree+0xbc>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4013      	ands	r3, r2
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01e      	beq.n	800c29a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d11a      	bne.n	800c29a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	4b0e      	ldr	r3, [pc, #56]	@ (800c2a4 <vPortFree+0xbc>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	43db      	mvns	r3, r3
 800c26e:	401a      	ands	r2, r3
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c274:	f7fe fb62 	bl	800a93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2a8 <vPortFree+0xc0>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4413      	add	r3, r2
 800c282:	4a09      	ldr	r2, [pc, #36]	@ (800c2a8 <vPortFree+0xc0>)
 800c284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c286:	6938      	ldr	r0, [r7, #16]
 800c288:	f000 f874 	bl	800c374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c28c:	4b07      	ldr	r3, [pc, #28]	@ (800c2ac <vPortFree+0xc4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3301      	adds	r3, #1
 800c292:	4a06      	ldr	r2, [pc, #24]	@ (800c2ac <vPortFree+0xc4>)
 800c294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c296:	f7fe fb5f 	bl	800a958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c29a:	bf00      	nop
 800c29c:	3718      	adds	r7, #24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20004ec0 	.word	0x20004ec0
 800c2a8:	20004eb0 	.word	0x20004eb0
 800c2ac:	20004ebc 	.word	0x20004ebc

0800c2b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c2ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2bc:	4b27      	ldr	r3, [pc, #156]	@ (800c35c <prvHeapInit+0xac>)
 800c2be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00c      	beq.n	800c2e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3307      	adds	r3, #7
 800c2ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 0307 	bic.w	r3, r3, #7
 800c2d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	4a1f      	ldr	r2, [pc, #124]	@ (800c35c <prvHeapInit+0xac>)
 800c2e0:	4413      	add	r3, r2
 800c2e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c360 <prvHeapInit+0xb0>)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c360 <prvHeapInit+0xb0>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2fc:	2208      	movs	r2, #8
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f023 0307 	bic.w	r3, r3, #7
 800c30a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4a15      	ldr	r2, [pc, #84]	@ (800c364 <prvHeapInit+0xb4>)
 800c310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c312:	4b14      	ldr	r3, [pc, #80]	@ (800c364 <prvHeapInit+0xb4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c31a:	4b12      	ldr	r3, [pc, #72]	@ (800c364 <prvHeapInit+0xb4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c330:	4b0c      	ldr	r3, [pc, #48]	@ (800c364 <prvHeapInit+0xb4>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	4a0a      	ldr	r2, [pc, #40]	@ (800c368 <prvHeapInit+0xb8>)
 800c33e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	4a09      	ldr	r2, [pc, #36]	@ (800c36c <prvHeapInit+0xbc>)
 800c346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c348:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <prvHeapInit+0xc0>)
 800c34a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c34e:	601a      	str	r2, [r3, #0]
}
 800c350:	bf00      	nop
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	200012a4 	.word	0x200012a4
 800c360:	20004ea4 	.word	0x20004ea4
 800c364:	20004eac 	.word	0x20004eac
 800c368:	20004eb4 	.word	0x20004eb4
 800c36c:	20004eb0 	.word	0x20004eb0
 800c370:	20004ec0 	.word	0x20004ec0

0800c374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c37c:	4b28      	ldr	r3, [pc, #160]	@ (800c420 <prvInsertBlockIntoFreeList+0xac>)
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e002      	b.n	800c388 <prvInsertBlockIntoFreeList+0x14>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d8f7      	bhi.n	800c382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	4413      	add	r3, r2
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d108      	bne.n	800c3b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	441a      	add	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	441a      	add	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d118      	bne.n	800c3fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b15      	ldr	r3, [pc, #84]	@ (800c424 <prvInsertBlockIntoFreeList+0xb0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d00d      	beq.n	800c3f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	441a      	add	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	e008      	b.n	800c404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c424 <prvInsertBlockIntoFreeList+0xb0>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	e003      	b.n	800c404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d002      	beq.n	800c412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c412:	bf00      	nop
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20004ea4 	.word	0x20004ea4
 800c424:	20004eac 	.word	0x20004eac

0800c428 <memset>:
 800c428:	4402      	add	r2, r0
 800c42a:	4603      	mov	r3, r0
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d100      	bne.n	800c432 <memset+0xa>
 800c430:	4770      	bx	lr
 800c432:	f803 1b01 	strb.w	r1, [r3], #1
 800c436:	e7f9      	b.n	800c42c <memset+0x4>

0800c438 <__libc_init_array>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	4d0d      	ldr	r5, [pc, #52]	@ (800c470 <__libc_init_array+0x38>)
 800c43c:	4c0d      	ldr	r4, [pc, #52]	@ (800c474 <__libc_init_array+0x3c>)
 800c43e:	1b64      	subs	r4, r4, r5
 800c440:	10a4      	asrs	r4, r4, #2
 800c442:	2600      	movs	r6, #0
 800c444:	42a6      	cmp	r6, r4
 800c446:	d109      	bne.n	800c45c <__libc_init_array+0x24>
 800c448:	4d0b      	ldr	r5, [pc, #44]	@ (800c478 <__libc_init_array+0x40>)
 800c44a:	4c0c      	ldr	r4, [pc, #48]	@ (800c47c <__libc_init_array+0x44>)
 800c44c:	f000 f826 	bl	800c49c <_init>
 800c450:	1b64      	subs	r4, r4, r5
 800c452:	10a4      	asrs	r4, r4, #2
 800c454:	2600      	movs	r6, #0
 800c456:	42a6      	cmp	r6, r4
 800c458:	d105      	bne.n	800c466 <__libc_init_array+0x2e>
 800c45a:	bd70      	pop	{r4, r5, r6, pc}
 800c45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c460:	4798      	blx	r3
 800c462:	3601      	adds	r6, #1
 800c464:	e7ee      	b.n	800c444 <__libc_init_array+0xc>
 800c466:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46a:	4798      	blx	r3
 800c46c:	3601      	adds	r6, #1
 800c46e:	e7f2      	b.n	800c456 <__libc_init_array+0x1e>
 800c470:	0800c690 	.word	0x0800c690
 800c474:	0800c690 	.word	0x0800c690
 800c478:	0800c690 	.word	0x0800c690
 800c47c:	0800c694 	.word	0x0800c694

0800c480 <memcpy>:
 800c480:	440a      	add	r2, r1
 800c482:	4291      	cmp	r1, r2
 800c484:	f100 33ff 	add.w	r3, r0, #4294967295
 800c488:	d100      	bne.n	800c48c <memcpy+0xc>
 800c48a:	4770      	bx	lr
 800c48c:	b510      	push	{r4, lr}
 800c48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c496:	4291      	cmp	r1, r2
 800c498:	d1f9      	bne.n	800c48e <memcpy+0xe>
 800c49a:	bd10      	pop	{r4, pc}

0800c49c <_init>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_fini>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr

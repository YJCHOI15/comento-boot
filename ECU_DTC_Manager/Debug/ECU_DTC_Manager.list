
ECU_DTC_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800adf4  0800adf4  0000bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  0000c010  2**0
                  CONTENTS
  4 .ARM          00000008  0800af7c  0800af7c  0000bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af84  0800af84  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af84  0800af84  0000bf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af88  0800af88  0000bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800af8c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea8  20000010  0800af9c  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004eb8  0800af9c  0000ceb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7d4  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c04  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e6  00000000  00000000  0002cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047da  00000000  00000000  0002dcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba8a  00000000  00000000  000324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e23ca  00000000  00000000  0004df5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b4  00000000  00000000  00130368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800addc 	.word	0x0800addc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800addc 	.word	0x0800addc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f001 f9fa 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f882 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 fabc 	bl	8000ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 fa54 	bl	8000a08 <MX_DMA_Init>
  MX_ADC1_Init();
 8000560:	f000 f8da 	bl	8000718 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000564:	f000 f92a 	bl	80007bc <MX_CAN1_Init>
  MX_I2C1_Init();
 8000568:	f000 f95c 	bl	8000824 <MX_I2C1_Init>
  MX_I2C2_Init();
 800056c:	f000 f988 	bl	8000880 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000570:	f000 f9b4 	bl	80008dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000574:	f000 f9e8 	bl	8000948 <MX_SPI2_Init>
  MX_UART4_Init();
 8000578:	f000 fa1c 	bl	80009b4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PMIC_Init();
 800057c:	f000 fb2a 	bl	8000bd4 <PMIC_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f006 ff1a 	bl	80073b8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000584:	4820      	ldr	r0, [pc, #128]	@ (8000608 <main+0xbc>)
 8000586:	f007 f80e 	bl	80075a6 <osMutexNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a1f      	ldr	r2, [pc, #124]	@ (800060c <main+0xc0>)
 800058e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 8000590:	4a1f      	ldr	r2, [pc, #124]	@ (8000610 <main+0xc4>)
 8000592:	2108      	movs	r1, #8
 8000594:	2008      	movs	r0, #8
 8000596:	f007 f9ab 	bl	80078f0 <osMessageQueueNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a1d      	ldr	r2, [pc, #116]	@ (8000614 <main+0xc8>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  DTCEventQueueHandle = osMessageQueueNew(16, sizeof(DTC_Message_t), &DTCEventQueue_attributes);
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <main+0xcc>)
 80005a2:	2102      	movs	r1, #2
 80005a4:	2010      	movs	r0, #16
 80005a6:	f007 f9a3 	bl	80078f0 <osMessageQueueNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <main+0xd0>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <main+0xd4>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	481b      	ldr	r0, [pc, #108]	@ (8000624 <main+0xd8>)
 80005b6:	f006 ff49 	bl	800744c <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000628 <main+0xdc>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 80005c0:	4a1a      	ldr	r2, [pc, #104]	@ (800062c <main+0xe0>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	481a      	ldr	r0, [pc, #104]	@ (8000630 <main+0xe4>)
 80005c6:	f006 ff41 	bl	800744c <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a19      	ldr	r2, [pc, #100]	@ (8000634 <main+0xe8>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 80005d0:	4a19      	ldr	r2, [pc, #100]	@ (8000638 <main+0xec>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4819      	ldr	r0, [pc, #100]	@ (800063c <main+0xf0>)
 80005d6:	f006 ff39 	bl	800744c <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a18      	ldr	r2, [pc, #96]	@ (8000640 <main+0xf4>)
 80005de:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 80005e0:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <main+0xf8>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4818      	ldr	r0, [pc, #96]	@ (8000648 <main+0xfc>)
 80005e6:	f006 ff31 	bl	800744c <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a17      	ldr	r2, [pc, #92]	@ (800064c <main+0x100>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <main+0x104>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4817      	ldr	r0, [pc, #92]	@ (8000654 <main+0x108>)
 80005f6:	f006 ff29 	bl	800744c <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a16      	ldr	r2, [pc, #88]	@ (8000658 <main+0x10c>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f006 fefe 	bl	8007400 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0xb8>
 8000608:	0800af34 	.word	0x0800af34
 800060c:	20000550 	.word	0x20000550
 8000610:	0800af1c 	.word	0x0800af1c
 8000614:	2000054c 	.word	0x2000054c
 8000618:	0800af44 	.word	0x0800af44
 800061c:	20000554 	.word	0x20000554
 8000620:	0800ae68 	.word	0x0800ae68
 8000624:	080018e1 	.word	0x080018e1
 8000628:	20000538 	.word	0x20000538
 800062c:	0800ae8c 	.word	0x0800ae8c
 8000630:	08001639 	.word	0x08001639
 8000634:	2000053c 	.word	0x2000053c
 8000638:	0800aeb0 	.word	0x0800aeb0
 800063c:	08001899 	.word	0x08001899
 8000640:	20000540 	.word	0x20000540
 8000644:	0800aed4 	.word	0x0800aed4
 8000648:	080018bd 	.word	0x080018bd
 800064c:	20000544 	.word	0x20000544
 8000650:	0800aef8 	.word	0x0800aef8
 8000654:	080018cf 	.word	0x080018cf
 8000658:	20000548 	.word	0x20000548

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	@ 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00a fb7c 	bl	800ad68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xb4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xb4>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xb4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <SystemClock_Config+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <SystemClock_Config+0xb8>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <SystemClock_Config+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 faef 	bl	8005cb0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d8:	f000 fa76 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f8fa 	bl	80058f0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000702:	f000 fa61 	bl	8000bc8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_ADC1_Init+0x98>)
 800072c:	4a21      	ldr	r2, [pc, #132]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <MX_ADC1_Init+0xa0>)
 800075a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000772:	2201      	movs	r2, #1
 8000774:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000778:	f001 f958 	bl	8001a2c <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fa21 	bl	8000bc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000786:	2302      	movs	r3, #2
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_ADC1_Init+0x98>)
 8000798:	f001 f98c 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007a2:	f000 fa11 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_CAN1_Init+0x60>)
 80007c2:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <MX_CAN1_Init+0x64>)
 80007c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_CAN1_Init+0x60>)
 80007c8:	2210      	movs	r2, #16
 80007ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_CAN1_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_CAN1_Init+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_CAN1_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_CAN1_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_CAN1_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_CAN1_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_CAN1_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_CAN1_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <MX_CAN1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_CAN1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_CAN1_Init+0x60>)
 800080a:	f001 fb81 	bl	8001f10 <HAL_CAN_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 f9d8 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000074 	.word	0x20000074
 8000820:	40006400 	.word	0x40006400

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f002 fd65 	bl	8003330 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f9ac 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000009c 	.word	0x2000009c
 8000878:	40005400 	.word	0x40005400
 800087c:	000186a0 	.word	0x000186a0

08000880 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_I2C2_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <MX_I2C2_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_I2C2_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <MX_I2C2_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_I2C2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_I2C2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_I2C2_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_I2C2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_I2C2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_I2C2_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_I2C2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_I2C2_Init+0x50>)
 80008be:	f002 fd37 	bl	8003330 <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 f97e 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000f0 	.word	0x200000f0
 80008d4:	40005800 	.word	0x40005800
 80008d8:	000186a0 	.word	0x000186a0

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_SPI1_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <MX_SPI1_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_SPI1_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_SPI1_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_SPI1_Init+0x64>)
 800092e:	f005 fc43 	bl	80061b8 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f946 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200002c4 	.word	0x200002c4
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_SPI2_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <MX_SPI2_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_SPI2_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_SPI2_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_SPI2_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <MX_SPI2_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_SPI2_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_SPI2_Init+0x64>)
 800099a:	f005 fc0d 	bl	80061b8 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 f910 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000031c 	.word	0x2000031c
 80009b0:	40003800 	.word	0x40003800

080009b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_UART4_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_UART4_Init+0x4c>)
 80009ec:	f005 fd8c 	bl	8006508 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f8e7 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200004f4 	.word	0x200004f4
 8000a04:	40004c00 	.word	0x40004c00

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a27      	ldr	r2, [pc, #156]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_DMA_Init+0xc8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f001 fe6f 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f001 fe88 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	200d      	movs	r0, #13
 8000a5c:	f001 fe67 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a60:	200d      	movs	r0, #13
 8000a62:	f001 fe80 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	200e      	movs	r0, #14
 8000a6c:	f001 fe5f 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a70:	200e      	movs	r0, #14
 8000a72:	f001 fe78 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f001 fe57 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 fe70 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2011      	movs	r0, #17
 8000a8c:	f001 fe4f 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a90:	2011      	movs	r0, #17
 8000a92:	f001 fe68 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	202f      	movs	r0, #47	@ 0x2f
 8000a9c:	f001 fe47 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000aa0:	202f      	movs	r0, #47	@ 0x2f
 8000aa2:	f001 fe60 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	2038      	movs	r0, #56	@ 0x38
 8000aac:	f001 fe3f 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab0:	2038      	movs	r0, #56	@ 0x38
 8000ab2:	f001 fe58 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	203b      	movs	r0, #59	@ 0x3b
 8000abc:	f001 fe37 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ac0:	203b      	movs	r0, #59	@ 0x3b
 8000ac2:	f001 fe50 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a33      	ldr	r2, [pc, #204]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_GPIO_Init+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2107      	movs	r1, #7
 8000b7a:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <MX_GPIO_Init+0xf0>)
 8000b7c:	f002 fbbe 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b80:	2303      	movs	r3, #3
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0xf0>)
 8000b98:	f002 fa1c 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ba0:	2311      	movs	r3, #17
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_GPIO_Init+0xf0>)
 8000bb4:	f002 fa0e 	bl	8002fd4 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <PMIC_Init>:

/*
 * PMIC 드라이버 초기화
 * RTOS 세마포어 생성
 */
void PMIC_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    i2c_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f006 fd68 	bl	80076b2 <osSemaphoreNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <PMIC_Init+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
    if (i2c_dma_semaphore == NULL) {
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <PMIC_Init+0x24>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <PMIC_Init+0x20>
        // 세마포어 생성 실패 처리
        Error_Handler();
 8000bf0:	f7ff ffea 	bl	8000bc8 <Error_Handler>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000558 	.word	0x20000558

08000bfc <PMIC_Read_Faults_DMA>:

/**
 * DMA를 사용하여 PMIC의 Fault 관련 레지스터들을 연속으로 read
 */
HAL_StatusTypeDef PMIC_Read_Faults_DMA(uint8_t* pData, uint16_t Size) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
    // HAL_I2C_Mem_Read_DMA 함수를 호출하여 Non-Blocking I2C 읽기 시작
    // FSM_STATE_REG(0x05) 레지스터부터 Size 바이트만큼 read
    if (HAL_I2C_Mem_Read_DMA(&hi2c1, MP5475_I2C_SLAVE_ADDR, FSM_STATE_REG, I2C_MEMADD_SIZE_8BIT, pData, Size) != HAL_OK) {
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	2205      	movs	r2, #5
 8000c14:	21c0      	movs	r1, #192	@ 0xc0
 8000c16:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <PMIC_Read_Faults_DMA+0x4c>)
 8000c18:	f002 fcce 	bl	80035b8 <HAL_I2C_Mem_Read_DMA>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <PMIC_Read_Faults_DMA+0x2a>
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00b      	b.n	8000c3e <PMIC_Read_Faults_DMA+0x42>
    }

    // DMA 전송이 완료될 때까지 세마포어 대기 (Blocked)
    if (osSemaphoreAcquire(i2c_dma_semaphore, 100) == osOK) {
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <PMIC_Read_Faults_DMA+0x50>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2164      	movs	r1, #100	@ 0x64
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fdc9 	bl	80077c4 <osSemaphoreAcquire>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <PMIC_Read_Faults_DMA+0x40>
        return HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e000      	b.n	8000c3e <PMIC_Read_Faults_DMA+0x42>
    } else {
        return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
    }
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000009c 	.word	0x2000009c
 8000c4c:	20000558 	.word	0x20000558

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	f001 fd4a 	bl	800272e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_ADC_MspInit+0x7c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d127      	bne.n	8000d1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a15      	ldr	r2, [pc, #84]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_ADC_MspInit+0x84>)
 8000d16:	f002 f95d 	bl	8002fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012000 	.word	0x40012000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13b      	bne.n	8000dca <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a18      	ldr	r2, [pc, #96]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <HAL_CAN_MspInit+0xac>)
 8000da6:	f002 f915 	bl	8002fd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	2013      	movs	r0, #19
 8000db0:	f001 fcbd 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000db4:	2013      	movs	r0, #19
 8000db6:	f001 fcd6 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f001 fcb5 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dc4:	2014      	movs	r0, #20
 8000dc6:	f001 fcce 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40006400 	.word	0x40006400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40021800 	.word	0x40021800

08000de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a9c      	ldr	r2, [pc, #624]	@ (8001070 <HAL_I2C_MspInit+0x290>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	f040 809b 	bne.w	8000f3a <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	4b9a      	ldr	r3, [pc, #616]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0c:	4a99      	ldr	r2, [pc, #612]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e14:	4b97      	ldr	r3, [pc, #604]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e24:	2312      	movs	r3, #18
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e30:	2304      	movs	r3, #4
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	488f      	ldr	r0, [pc, #572]	@ (8001078 <HAL_I2C_MspInit+0x298>)
 8000e3c:	f002 f8ca 	bl	8002fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	4b8b      	ldr	r3, [pc, #556]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a8a      	ldr	r2, [pc, #552]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e50:	4b88      	ldr	r3, [pc, #544]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000e5c:	4b87      	ldr	r3, [pc, #540]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e5e:	4a88      	ldr	r2, [pc, #544]	@ (8001080 <HAL_I2C_MspInit+0x2a0>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e62:	4b86      	ldr	r3, [pc, #536]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6a:	4b84      	ldr	r3, [pc, #528]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e70:	4b82      	ldr	r3, [pc, #520]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e76:	4b81      	ldr	r3, [pc, #516]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e84:	4b7d      	ldr	r3, [pc, #500]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e90:	4b7a      	ldr	r3, [pc, #488]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e96:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e98:	4b78      	ldr	r3, [pc, #480]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e9e:	4877      	ldr	r0, [pc, #476]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000ea0:	f001 fc7c 	bl	800279c <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000eaa:	f7ff fe8d 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a72      	ldr	r2, [pc, #456]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000eb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eb4:	4a71      	ldr	r2, [pc, #452]	@ (800107c <HAL_I2C_MspInit+0x29c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000eba:	4b72      	ldr	r3, [pc, #456]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ebc:	4a72      	ldr	r2, [pc, #456]	@ (8001088 <HAL_I2C_MspInit+0x2a8>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ec0:	4b70      	ldr	r3, [pc, #448]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ec2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000eca:	2240      	movs	r2, #64	@ 0x40
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ece:	4b6d      	ldr	r3, [pc, #436]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000edc:	4b69      	ldr	r3, [pc, #420]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee2:	4b68      	ldr	r3, [pc, #416]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ee8:	4b66      	ldr	r3, [pc, #408]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000eee:	4b65      	ldr	r3, [pc, #404]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ef0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef6:	4b63      	ldr	r3, [pc, #396]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000efc:	4861      	ldr	r0, [pc, #388]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000efe:	f001 fc4d 	bl	800279c <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8000f08:	f7ff fe5e 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f12:	4a5c      	ldr	r2, [pc, #368]	@ (8001084 <HAL_I2C_MspInit+0x2a4>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	201f      	movs	r0, #31
 8000f1e:	f001 fc06 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f22:	201f      	movs	r0, #31
 8000f24:	f001 fc1f 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	2020      	movs	r0, #32
 8000f2e:	f001 fbfe 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f32:	2020      	movs	r0, #32
 8000f34:	f001 fc17 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f38:	e095      	b.n	8001066 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a53      	ldr	r2, [pc, #332]	@ (800108c <HAL_I2C_MspInit+0x2ac>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f040 8090 	bne.w	8001066 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a49      	ldr	r2, [pc, #292]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b47      	ldr	r3, [pc, #284]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f72:	2304      	movs	r3, #4
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4844      	ldr	r0, [pc, #272]	@ (8001090 <HAL_I2C_MspInit+0x2b0>)
 8000f7e:	f002 f829 	bl	8002fd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <HAL_I2C_MspInit+0x294>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8001098 <HAL_I2C_MspInit+0x2b8>)
 8000fa2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fa6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b39      	ldr	r3, [pc, #228]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc0:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fcc:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fde:	482d      	ldr	r0, [pc, #180]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000fe0:	f001 fbdc 	bl	800279c <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8000fea:	f7ff fded 	bl	8000bc8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_I2C_MspInit+0x2b4>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8000ffc:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <HAL_I2C_MspInit+0x2c0>)
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001002:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001006:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 800100a:	2240      	movs	r2, #64	@ 0x40
 800100c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001028:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800103a:	4818      	ldr	r0, [pc, #96]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 800103c:	f001 fbae 	bl	800279c <HAL_DMA_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8001046:	f7ff fdbf 	bl	8000bc8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <HAL_I2C_MspInit+0x2bc>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2105      	movs	r1, #5
 800105a:	2021      	movs	r0, #33	@ 0x21
 800105c:	f001 fb67 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001060:	2021      	movs	r0, #33	@ 0x21
 8001062:	f001 fb80 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005400 	.word	0x40005400
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400
 800107c:	20000144 	.word	0x20000144
 8001080:	40026010 	.word	0x40026010
 8001084:	200001a4 	.word	0x200001a4
 8001088:	400260a0 	.word	0x400260a0
 800108c:	40005800 	.word	0x40005800
 8001090:	40021400 	.word	0x40021400
 8001094:	20000204 	.word	0x20000204
 8001098:	40026040 	.word	0x40026040
 800109c:	20000264 	.word	0x20000264
 80010a0:	400260b8 	.word	0x400260b8

080010a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	@ 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a4a      	ldr	r2, [pc, #296]	@ (80011ec <HAL_SPI_MspInit+0x148>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f040 80a0 	bne.w	8001208 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	4b48      	ldr	r3, [pc, #288]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d0:	4a47      	ldr	r2, [pc, #284]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d8:	4b45      	ldr	r3, [pc, #276]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	4b41      	ldr	r3, [pc, #260]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	4a40      	ldr	r2, [pc, #256]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f4:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <HAL_SPI_MspInit+0x14c>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001100:	23e0      	movs	r3, #224	@ 0xe0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001110:	2305      	movs	r3, #5
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4836      	ldr	r0, [pc, #216]	@ (80011f4 <HAL_SPI_MspInit+0x150>)
 800111c:	f001 ff5a 	bl	8002fd4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001122:	4a36      	ldr	r2, [pc, #216]	@ (80011fc <HAL_SPI_MspInit+0x158>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001128:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800112c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 800113c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001160:	4825      	ldr	r0, [pc, #148]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001162:	f001 fb1b 	bl	800279c <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800116c:	f7ff fd2c 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001174:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <HAL_SPI_MspInit+0x154>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 800117e:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <HAL_SPI_MspInit+0x160>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 8001184:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001188:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 800118c:	2240      	movs	r2, #64	@ 0x40
 800118e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 8001198:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011bc:	4810      	ldr	r0, [pc, #64]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011be:	f001 faed 	bl	800279c <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80011c8:	f7ff fcfe 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011d0:	649a      	str	r2, [r3, #72]	@ 0x48
 80011d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_SPI_MspInit+0x15c>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	2023      	movs	r0, #35	@ 0x23
 80011de:	f001 faa6 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011e2:	2023      	movs	r0, #35	@ 0x23
 80011e4:	f001 fabf 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e8:	e0c1      	b.n	800136e <HAL_SPI_MspInit+0x2ca>
 80011ea:	bf00      	nop
 80011ec:	40013000 	.word	0x40013000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	20000374 	.word	0x20000374
 80011fc:	40026410 	.word	0x40026410
 8001200:	200003d4 	.word	0x200003d4
 8001204:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <HAL_SPI_MspInit+0x2d4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f040 80ad 	bne.w	800136e <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	4b58      	ldr	r3, [pc, #352]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	4a57      	ldr	r2, [pc, #348]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001222:	6413      	str	r3, [r2, #64]	@ 0x40
 8001224:	4b55      	ldr	r3, [pc, #340]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b51      	ldr	r3, [pc, #324]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	4a50      	ldr	r2, [pc, #320]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001240:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b4a      	ldr	r3, [pc, #296]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	4a49      	ldr	r2, [pc, #292]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	6313      	str	r3, [r2, #48]	@ 0x30
 800125c:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_SPI_MspInit+0x2d8>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001268:	230c      	movs	r3, #12
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001278:	2305      	movs	r3, #5
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	483f      	ldr	r0, [pc, #252]	@ (8001380 <HAL_SPI_MspInit+0x2dc>)
 8001284:	f001 fea6 	bl	8002fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129a:	2305      	movs	r3, #5
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4837      	ldr	r0, [pc, #220]	@ (8001384 <HAL_SPI_MspInit+0x2e0>)
 80012a6:	f001 fe95 	bl	8002fd4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012ac:	4a37      	ldr	r2, [pc, #220]	@ (800138c <HAL_SPI_MspInit+0x2e8>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e2:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012e8:	4827      	ldr	r0, [pc, #156]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012ea:	f001 fa57 	bl	800279c <HAL_DMA_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 80012f4:	f7ff fc68 	bl	8000bc8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 80012fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012fe:	4a22      	ldr	r2, [pc, #136]	@ (8001388 <HAL_SPI_MspInit+0x2e4>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001306:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <HAL_SPI_MspInit+0x2f0>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001312:	2240      	movs	r2, #64	@ 0x40
 8001314:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 800131e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001322:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001342:	4813      	ldr	r0, [pc, #76]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001344:	f001 fa2a 	bl	800279c <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 800134e:	f7ff fc3b 	bl	8000bc8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 8001356:	649a      	str	r2, [r3, #72]	@ 0x48
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <HAL_SPI_MspInit+0x2ec>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2024      	movs	r0, #36	@ 0x24
 8001364:	f001 f9e3 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001368:	2024      	movs	r0, #36	@ 0x24
 800136a:	f001 f9fc 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	@ 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40003800 	.word	0x40003800
 800137c:	40023800 	.word	0x40023800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020400 	.word	0x40020400
 8001388:	20000434 	.word	0x20000434
 800138c:	40026058 	.word	0x40026058
 8001390:	20000494 	.word	0x20000494
 8001394:	40026070 	.word	0x40026070

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a25      	ldr	r2, [pc, #148]	@ (800144c <HAL_UART_MspInit+0xb4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d144      	bne.n	8001444 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_UART_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001402:	2308      	movs	r3, #8
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <HAL_UART_MspInit+0xbc>)
 800140e:	f001 fde1 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001424:	230b      	movs	r3, #11
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	@ (8001454 <HAL_UART_MspInit+0xbc>)
 8001430:	f001 fdd0 	bl	8002fd4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2105      	movs	r1, #5
 8001438:	2034      	movs	r0, #52	@ 0x34
 800143a:	f001 f978 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800143e:	2034      	movs	r0, #52	@ 0x34
 8001440:	f001 f991 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40004c00 	.word	0x40004c00
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 faab 	bl	80019ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001496:	f008 fae7 	bl	8009a68 <xTaskGetSchedulerState>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d001      	beq.n	80014a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014a0:	f009 f9e2 	bl	800a868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <DMA1_Stream0_IRQHandler+0x10>)
 80014ae:	f001 fb0d 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000144 	.word	0x20000144

080014bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <DMA1_Stream2_IRQHandler+0x10>)
 80014c2:	f001 fb03 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000204 	.word	0x20000204

080014d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <DMA1_Stream3_IRQHandler+0x10>)
 80014d6:	f001 faf9 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000434 	.word	0x20000434

080014e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA1_Stream4_IRQHandler+0x10>)
 80014ea:	f001 faef 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000494 	.word	0x20000494

080014f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <DMA1_Stream6_IRQHandler+0x10>)
 80014fe:	f001 fae5 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001a4 	.word	0x200001a4

0800150c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <CAN1_TX_IRQHandler+0x10>)
 8001512:	f000 fdf8 	bl	8002106 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000074 	.word	0x20000074

08001520 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <CAN1_RX0_IRQHandler+0x10>)
 8001526:	f000 fdee 	bl	8002106 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000074 	.word	0x20000074

08001534 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <I2C1_EV_IRQHandler+0x10>)
 800153a:	f002 f9d1 	bl	80038e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000009c 	.word	0x2000009c

08001548 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <I2C1_ER_IRQHandler+0x10>)
 800154e:	f002 fb38 	bl	8003bc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000009c 	.word	0x2000009c

0800155c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <I2C2_EV_IRQHandler+0x10>)
 8001562:	f002 f9bd 	bl	80038e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200000f0 	.word	0x200000f0

08001570 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <SPI1_IRQHandler+0x10>)
 8001576:	f004 fea9 	bl	80062cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200002c4 	.word	0x200002c4

08001584 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <SPI2_IRQHandler+0x10>)
 800158a:	f004 fe9f 	bl	80062cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000031c 	.word	0x2000031c

08001598 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <DMA1_Stream7_IRQHandler+0x10>)
 800159e:	f001 fa95 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000264 	.word	0x20000264

080015ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <UART4_IRQHandler+0x10>)
 80015b2:	f004 fff7 	bl	80065a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200004f4 	.word	0x200004f4

080015c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <DMA2_Stream0_IRQHandler+0x10>)
 80015c6:	f001 fa81 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000374 	.word	0x20000374

080015d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA2_Stream3_IRQHandler+0x10>)
 80015da:	f001 fa77 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003d4 	.word	0x200003d4

080015e8 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <HAL_I2C_MemRxCpltCallback+0x24>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d104      	bne.n	8001604 <HAL_I2C_MemRxCpltCallback+0x1c>
    //Blocked I2CTask를 깨우기 위해 세마포어 반납
    osSemaphoreRelease(i2c_dma_semaphore);
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_I2C_MemRxCpltCallback+0x28>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 f932 	bl	8007868 <osSemaphoreRelease>
  }
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40005400 	.word	0x40005400
 8001610:	20000558 	.word	0x20000558

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <StartI2CTask>:

/**
 * I2CTask는 1ms 주기로 PMIC의 Fault 상태를 확인하여,
 * 새롭게 발생한 Fault가 있으면 SPITask로 DTC 이벤트 큐를 전송한다.
 */
void StartI2CTask(void *argument) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  static uint8_t previous_faults[5] = {0};   // 이전 Fault 상태를 저장하기 위한 static 변수
  static bool is_i2c_com_failed = false;      // I2C 통신 실패 상태 추적 플래그

  for(;;)
  {
    osDelay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f005 ff95 	bl	8007570 <osDelay>

    if (PMIC_Read_Faults_DMA(current_faults, 5) == HAL_OK) {
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2105      	movs	r1, #5
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fad5 	bl	8000bfc <PMIC_Read_Faults_DMA>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 80fc 	bne.w	8001852 <StartI2CTask+0x21a>

      MP5475_Reg07_Status* pCurReg07 = (MP5475_Reg07_Status*)&current_faults[2];
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	3302      	adds	r3, #2
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
      MP5475_Reg08_Status* pCurReg08 = (MP5475_Reg08_Status*)&current_faults[3];
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	3303      	adds	r3, #3
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
      MP5475_Reg09_Status* pCurReg09 = (MP5475_Reg09_Status*)&current_faults[4];
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	3304      	adds	r3, #4
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24

      MP5475_Reg07_Status* pPrevReg07 = (MP5475_Reg07_Status*)&previous_faults[2];
 8001672:	4b83      	ldr	r3, [pc, #524]	@ (8001880 <StartI2CTask+0x248>)
 8001674:	623b      	str	r3, [r7, #32]
      MP5475_Reg08_Status* pPrevReg08 = (MP5475_Reg08_Status*)&previous_faults[3];
 8001676:	4b83      	ldr	r3, [pc, #524]	@ (8001884 <StartI2CTask+0x24c>)
 8001678:	61fb      	str	r3, [r7, #28]
      MP5475_Reg09_Status* pPrevReg09 = (MP5475_Reg09_Status*)&previous_faults[4];
 800167a:	4b83      	ldr	r3, [pc, #524]	@ (8001888 <StartI2CTask+0x250>)
 800167c:	61bb      	str	r3, [r7, #24]

      DTC_Message_t msg;

      /* 0x07 레지스터: UV Fault 상태 확인 */
      if (pCurReg07->bits.bucka_uv && !pPrevReg07->bits.bucka_uv) {
 800167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d011      	beq.n	80016b0 <StartI2CTask+0x78>
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10a      	bne.n	80016b0 <StartI2CTask+0x78>
        msg.dtc_code = DTC_C1221_BUCK_A_UV; 
 800169a:	f241 2321 	movw	r3, #4641	@ 0x1221
 800169e:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 80016a0:	4b7a      	ldr	r3, [pc, #488]	@ (800188c <StartI2CTask+0x254>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	f107 010c 	add.w	r1, r7, #12
 80016a8:	2300      	movs	r3, #0
 80016aa:	2200      	movs	r2, #0
 80016ac:	f006 f994 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckb_uv && !pPrevReg07->bits.buckb_uv) {
 80016b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d011      	beq.n	80016e2 <StartI2CTask+0xaa>
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10a      	bne.n	80016e2 <StartI2CTask+0xaa>
        msg.dtc_code = DTC_C1222_BUCK_B_UV; 
 80016cc:	f241 2322 	movw	r3, #4642	@ 0x1222
 80016d0:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 80016d2:	4b6e      	ldr	r3, [pc, #440]	@ (800188c <StartI2CTask+0x254>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f107 010c 	add.w	r1, r7, #12
 80016da:	2300      	movs	r3, #0
 80016dc:	2200      	movs	r2, #0
 80016de:	f006 f97b 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckc_uv && !pPrevReg07->bits.buckc_uv) {
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d011      	beq.n	8001714 <StartI2CTask+0xdc>
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <StartI2CTask+0xdc>
        msg.dtc_code = DTC_C1242_BUCK_C_UV; 
 80016fe:	f241 2342 	movw	r3, #4674	@ 0x1242
 8001702:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 8001704:	4b61      	ldr	r3, [pc, #388]	@ (800188c <StartI2CTask+0x254>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 010c 	add.w	r1, r7, #12
 800170c:	2300      	movs	r3, #0
 800170e:	2200      	movs	r2, #0
 8001710:	f006 f962 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckd_uv && !pPrevReg07->bits.buckd_uv) {
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d011      	beq.n	8001746 <StartI2CTask+0x10e>
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <StartI2CTask+0x10e>
        msg.dtc_code = DTC_C0577_BUCK_D_UV; 
 8001730:	f240 5377 	movw	r3, #1399	@ 0x577
 8001734:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 8001736:	4b55      	ldr	r3, [pc, #340]	@ (800188c <StartI2CTask+0x254>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f107 010c 	add.w	r1, r7, #12
 800173e:	2300      	movs	r3, #0
 8001740:	2200      	movs	r2, #0
 8001742:	f006 f949 	bl	80079d8 <osMessageQueuePut>
      }

      /* 0x08 레지스터: OC Fault 상태 확인 */
      if (pCurReg08->bits.bucka_oc && !pPrevReg08->bits.bucka_oc) {
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <StartI2CTask+0x140>
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10a      	bne.n	8001778 <StartI2CTask+0x140>
        msg.dtc_code = DTC_C1232_BUCK_A_OC; 
 8001762:	f241 2332 	movw	r3, #4658	@ 0x1232
 8001766:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <StartI2CTask+0x254>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	f107 010c 	add.w	r1, r7, #12
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	f006 f930 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckb_oc && !pPrevReg08->bits.buckb_oc) {
 8001778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d011      	beq.n	80017aa <StartI2CTask+0x172>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <StartI2CTask+0x172>
        msg.dtc_code = DTC_C1233_BUCK_B_OC; 
 8001794:	f241 2333 	movw	r3, #4659	@ 0x1233
 8001798:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 800179a:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <StartI2CTask+0x254>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 010c 	add.w	r1, r7, #12
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	f006 f917 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckc_oc && !pPrevReg08->bits.buckc_oc) {
 80017aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d011      	beq.n	80017dc <StartI2CTask+0x1a4>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10a      	bne.n	80017dc <StartI2CTask+0x1a4>
        msg.dtc_code = DTC_C1217_BUCK_C_OC; 
 80017c6:	f241 2317 	movw	r3, #4631	@ 0x1217
 80017ca:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <StartI2CTask+0x254>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f107 010c 	add.w	r1, r7, #12
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	f006 f8fe 	bl	80079d8 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckd_oc && !pPrevReg08->bits.buckd_oc) {
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d011      	beq.n	800180e <StartI2CTask+0x1d6>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <StartI2CTask+0x1d6>
        msg.dtc_code = DTC_C0121_BUCK_D_OC; 
 80017f8:	f240 1321 	movw	r3, #289	@ 0x121
 80017fc:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <StartI2CTask+0x254>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f107 010c 	add.w	r1, r7, #12
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	f006 f8e5 	bl	80079d8 <osMessageQueuePut>
      }

      /* 0x09 레지스터: 시스템 Fault 상태 확인 */
      if (pCurReg09->bits.pmic_high_temp_shutdown && !pPrevReg09->bits.pmic_high_temp_shutdown) {
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d011      	beq.n	8001840 <StartI2CTask+0x208>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <StartI2CTask+0x208>
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL; 
 800182a:	f240 1321 	movw	r3, #289	@ 0x121
 800182e:	81bb      	strh	r3, [r7, #12]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 8001830:	4b16      	ldr	r3, [pc, #88]	@ (800188c <StartI2CTask+0x254>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f107 010c 	add.w	r1, r7, #12
 8001838:	2300      	movs	r3, #0
 800183a:	2200      	movs	r2, #0
 800183c:	f006 f8cc 	bl	80079d8 <osMessageQueuePut>
      }

      memcpy(previous_faults, current_faults, 5);
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <StartI2CTask+0x258>)
 8001842:	f107 0210 	add.w	r2, r7, #16
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	7019      	strb	r1, [r3, #0]
 8001850:	e6f6      	b.n	8001640 <StartI2CTask+0x8>

    } else {
      // 이전에 통신 실패 상태가 아니었을 때만 DTC를 한 번 전송하여 중복 방지
      if (!is_i2c_com_failed) {
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <StartI2CTask+0x25c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f43f aeef 	beq.w	8001640 <StartI2CTask+0x8>
        is_i2c_com_failed = true; // 통신 실패 상태로 설정
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <StartI2CTask+0x25c>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
        DTC_Message_t msg;
        // PMIC와 통신이 두절된 것은 브레이크 시스템 전체와의 통신 두절로 간주
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL;
 8001868:	f240 1321 	movw	r3, #289	@ 0x121
 800186c:	813b      	strh	r3, [r7, #8]
        osMessageQueuePut(DTCEventQueueHandle, &msg, 0, 0);
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <StartI2CTask+0x254>)
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f107 0108 	add.w	r1, r7, #8
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	f006 f8ad 	bl	80079d8 <osMessageQueuePut>
    osDelay(1);
 800187e:	e6df      	b.n	8001640 <StartI2CTask+0x8>
 8001880:	2000055e 	.word	0x2000055e
 8001884:	2000055f 	.word	0x2000055f
 8001888:	20000560 	.word	0x20000560
 800188c:	20000554 	.word	0x20000554
 8001890:	2000055c 	.word	0x2000055c
 8001894:	20000561 	.word	0x20000561

08001898 <StartSPITask>:
    }
  }
}

void StartSPITask(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for(;;)
  {
    // DTCEventQueueHandle에 메시지가 도착할 때까지 무한정 대기 (휴면 상태)
    status = osMessageQueueGet(DTCEventQueueHandle, &received_msg, NULL, osWaitForever);
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <StartSPITask+0x20>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	2200      	movs	r2, #0
 80018ae:	f006 f8f3 	bl	8007a98 <osMessageQueueGet>
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	e7f4      	b.n	80018a0 <StartSPITask+0x8>
 80018b6:	bf00      	nop
 80018b8:	20000554 	.word	0x20000554

080018bc <StartCANTask>:
    }
  }
}

void StartCANTask(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 80018c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c8:	f005 fe52 	bl	8007570 <osDelay>
 80018cc:	e7fa      	b.n	80018c4 <StartCANTask+0x8>

080018ce <StartUARTTask>:
  }
}

void StartUARTTask(void *argument)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 80018d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018da:	f005 fe49 	bl	8007570 <osDelay>
 80018de:	e7fa      	b.n	80018d6 <StartUARTTask+0x8>

080018e0 <StartDefaultTask>:
        osDelay(1000);
    }
}

void StartDefaultTask(void *argument)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 80018e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ec:	f005 fe40 	bl	8007570 <osDelay>
 80018f0:	e7fa      	b.n	80018e8 <StartDefaultTask+0x8>
	...

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800192c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480d      	ldr	r0, [pc, #52]	@ (8001930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fa:	490e      	ldr	r1, [pc, #56]	@ (8001934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001910:	4c0b      	ldr	r4, [pc, #44]	@ (8001940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800191e:	f7ff fe79 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f009 fa29 	bl	800ad78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7fe fe11 	bl	800054c <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800192c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001938:	0800af8c 	.word	0x0800af8c
  ldr r2, =_sbss
 800193c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001940:	20004eb8 	.word	0x20004eb8

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_Init+0x40>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_Init+0x40>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_Init+0x40>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 fed1 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff f968 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fee9 	bl	8002782 <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 feb1 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000008 	.word	0x20000008
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000564 	.word	0x20000564

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000564 	.word	0x20000564

08001a2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e033      	b.n	8001aaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff f92c 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a72:	f023 0302 	bic.w	r3, r3, #2
 8001a76:	f043 0202 	orr.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f94a 	bl	8001d18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a9a:	e001      	b.n	8001aa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e113      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x244>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d925      	bls.n	8001b2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	3b1e      	subs	r3, #30
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4403      	add	r3, r0
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	e022      	b.n	8001b72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	2207      	movs	r2, #7
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4403      	add	r3, r0
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d824      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b05      	subs	r3, #5
 8001b8c:	221f      	movs	r2, #31
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b05      	subs	r3, #5
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc2:	e04c      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d824      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b23      	subs	r3, #35	@ 0x23
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43da      	mvns	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	400a      	ands	r2, r1
 8001bec:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b23      	subs	r3, #35	@ 0x23
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c14:	e023      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b41      	subs	r3, #65	@ 0x41
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b41      	subs	r3, #65	@ 0x41
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_ADC_ConfigChannel+0x250>)
 8001c60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <HAL_ADC_ConfigChannel+0x254>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10f      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d8>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <HAL_ADC_ConfigChannel+0x254>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d12b      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_ADC_ConfigChannel+0x258>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b11      	cmp	r3, #17
 8001ca6:	d122      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_ADC_ConfigChannel+0x258>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d111      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_ADC_ConfigChannel+0x25c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <HAL_ADC_ConfigChannel+0x260>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9a      	lsrs	r2, r3, #18
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40012300 	.word	0x40012300
 8001d08:	40012000 	.word	0x40012000
 8001d0c:	10000012 	.word	0x10000012
 8001d10:	20000000 	.word	0x20000000
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	4b79      	ldr	r3, [pc, #484]	@ (8001f08 <ADC_Init+0x1f0>)
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	021a      	lsls	r2, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	4a58      	ldr	r2, [pc, #352]	@ (8001f0c <ADC_Init+0x1f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6899      	ldr	r1, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e00f      	b.n	8001e16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0202 	bic.w	r2, r2, #2
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
 8001e30:	005a      	lsls	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	035a      	lsls	r2, r3, #13
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e007      	b.n	8001e8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	051a      	lsls	r2, r3, #20
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ece:	025a      	lsls	r2, r3, #9
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	029a      	lsls	r2, r3, #10
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	0f000001 	.word	0x0f000001

08001f10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0ed      	b.n	80020fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fefe 	bl	8000d30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f44:	f7ff fd66 	bl	8001a14 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f4a:	e012      	b.n	8001f72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f4c:	f7ff fd62 	bl	8001a14 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b0a      	cmp	r3, #10
 8001f58:	d90b      	bls.n	8001f72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2205      	movs	r2, #5
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0c5      	b.n	80020fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0e5      	beq.n	8001f4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0202 	bic.w	r2, r2, #2
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f90:	f7ff fd40 	bl	8001a14 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f96:	e012      	b.n	8001fbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f98:	f7ff fd3c 	bl	8001a14 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b0a      	cmp	r3, #10
 8001fa4:	d90b      	bls.n	8001fbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09f      	b.n	80020fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e5      	bne.n	8001f98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e007      	b.n	8001ff6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7e5b      	ldrb	r3, [r3, #25]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d108      	bne.n	8002010 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e007      	b.n	8002020 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800201e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e9b      	ldrb	r3, [r3, #26]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d108      	bne.n	800203a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e007      	b.n	800204a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0220 	bic.w	r2, r2, #32
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7edb      	ldrb	r3, [r3, #27]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0210 	bic.w	r2, r2, #16
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e007      	b.n	8002074 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0210 	orr.w	r2, r2, #16
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7f1b      	ldrb	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d108      	bne.n	800208e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0208 	orr.w	r2, r2, #8
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e007      	b.n	800209e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f5b      	ldrb	r3, [r3, #29]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d108      	bne.n	80020b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0204 	orr.w	r2, r2, #4
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e007      	b.n	80020c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0204 	bic.w	r2, r2, #4
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08a      	sub	sp, #40	@ 0x28
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d07c      	beq.n	8002246 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d023      	beq.n	800219e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f983 	bl	8002474 <HAL_CAN_TxMailbox0CompleteCallback>
 800216e:	e016      	b.n	800219e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
 8002182:	e00c      	b.n	800219e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
 8002196:	e002      	b.n	800219e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f989 	bl	80024b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d024      	beq.n	80021f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f963 	bl	8002488 <HAL_CAN_TxMailbox1CompleteCallback>
 80021c2:	e016      	b.n	80021f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d6:	e00c      	b.n	80021f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	e002      	b.n	80021f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f969 	bl	80024c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d024      	beq.n	8002246 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002204:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f943 	bl	800249c <HAL_CAN_TxMailbox2CompleteCallback>
 8002216:	e016      	b.n	8002246 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
 800222a:	e00c      	b.n	8002246 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
 800223e:	e002      	b.n	8002246 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f949 	bl	80024d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00c      	beq.n	800226a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2208      	movs	r2, #8
 8002284:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f93a 	bl	8002500 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f921 	bl	80024ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00c      	beq.n	80022ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2210      	movs	r2, #16
 80022cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2208      	movs	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f91c 	bl	8002528 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f903 	bl	8002514 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2210      	movs	r2, #16
 8002328:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f906 	bl	800253c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8ff 	bl	8002550 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07b      	beq.n	8002454 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d072      	beq.n	800244c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d043      	beq.n	800244c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03e      	beq.n	800244c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d4:	2b60      	cmp	r3, #96	@ 0x60
 80023d6:	d02b      	beq.n	8002430 <HAL_CAN_IRQHandler+0x32a>
 80023d8:	2b60      	cmp	r3, #96	@ 0x60
 80023da:	d82e      	bhi.n	800243a <HAL_CAN_IRQHandler+0x334>
 80023dc:	2b50      	cmp	r3, #80	@ 0x50
 80023de:	d022      	beq.n	8002426 <HAL_CAN_IRQHandler+0x320>
 80023e0:	2b50      	cmp	r3, #80	@ 0x50
 80023e2:	d82a      	bhi.n	800243a <HAL_CAN_IRQHandler+0x334>
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d019      	beq.n	800241c <HAL_CAN_IRQHandler+0x316>
 80023e8:	2b40      	cmp	r3, #64	@ 0x40
 80023ea:	d826      	bhi.n	800243a <HAL_CAN_IRQHandler+0x334>
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d010      	beq.n	8002412 <HAL_CAN_IRQHandler+0x30c>
 80023f0:	2b30      	cmp	r3, #48	@ 0x30
 80023f2:	d822      	bhi.n	800243a <HAL_CAN_IRQHandler+0x334>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d002      	beq.n	80023fe <HAL_CAN_IRQHandler+0x2f8>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d005      	beq.n	8002408 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023fc:	e01d      	b.n	800243a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002406:	e019      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002410:	e014      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800241a:	e00f      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002424:	e00a      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800242e:	e005      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002438:	e000      	b.n	800243c <HAL_CAN_IRQHandler+0x336>
            break;
 800243a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800244a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f87c 	bl	8002564 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	@ (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	@ (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	@ (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff3e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff31 	bl	80025dc <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff f934 	bl	8001a14 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff f91b 	bl	8001a14 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb1b 	bl	8002edc <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fad2 	bl	8002e70 <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	223f      	movs	r2, #63	@ 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e010803f 	.word	0xe010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e040      	b.n	80029a0 <HAL_DMA_Start_IT+0xa8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12f      	bne.n	8002992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa64 	bl	8002e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	223f      	movs	r2, #63	@ 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff f82d 	bl	8001a14 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e052      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_Abort+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	e013      	b.n	8002a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7fe fff2 	bl	8001a14 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d90c      	bls.n	8002a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e015      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e4      	bne.n	8002a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	223f      	movs	r2, #63	@ 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00c      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d14 <HAL_DMA_IRQHandler+0x248>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8e      	ldr	r2, [pc, #568]	@ (8002d18 <HAL_DMA_IRQHandler+0x24c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	2204      	movs	r2, #4
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e01f      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808f 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8087 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	2220      	movs	r2, #32
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d136      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x1da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	223f      	movs	r2, #63	@ 0x3f
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07e      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
        }
        return;
 8002ce2:	e079      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e02c      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000
 8002d18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0210 	bic.w	r2, r2, #16
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d307      	bcc.n	8002db4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x2cc>
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002db4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dd8:	bf00      	nop
    }
  }
}
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dee:	b2db      	uxtb	r3, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b40      	cmp	r3, #64	@ 0x40
 8002e40:	d108      	bne.n	8002e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e52:	e007      	b.n	8002e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3b10      	subs	r3, #16
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d909      	bls.n	8002eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	1d1a      	adds	r2, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eb0:	e007      	b.n	8002ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	aaaaaaab 	.word	0xaaaaaaab
 8002ed8:	0800af74 	.word	0x0800af74

08002edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11f      	bne.n	8002f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d856      	bhi.n	8002faa <DMA_CheckFifoParam+0xce>
 8002efc:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <DMA_CheckFifoParam+0x28>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f27 	.word	0x08002f27
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002fab 	.word	0x08002fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d046      	beq.n	8002fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e043      	b.n	8002fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f2e:	d140      	bne.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e03d      	b.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3e:	d121      	bne.n	8002f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d837      	bhi.n	8002fb6 <DMA_CheckFifoParam+0xda>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <DMA_CheckFifoParam+0x70>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f63 	.word	0x08002f63
 8002f54:	08002f5d 	.word	0x08002f5d
 8002f58:	08002f75 	.word	0x08002f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e030      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d025      	beq.n	8002fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e022      	b.n	8002fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f7c:	d11f      	bne.n	8002fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f82:	e01c      	b.n	8002fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d903      	bls.n	8002f92 <DMA_CheckFifoParam+0xb6>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d003      	beq.n	8002f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f90:	e018      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      break;
 8002f96:	e015      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e00b      	b.n	8002fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8002faa:	bf00      	nop
 8002fac:	e00a      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e008      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e006      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e004      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	e165      	b.n	80032bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 8154 	bne.w	80032b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d005      	beq.n	8003026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003022:	2b02      	cmp	r3, #2
 8003024:	d130      	bne.n	8003088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800305c:	2201      	movs	r2, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 0201 	and.w	r2, r3, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d017      	beq.n	80030c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d123      	bne.n	8003118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80ae 	beq.w	80032b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b5d      	ldr	r3, [pc, #372]	@ (80032d4 <HAL_GPIO_Init+0x300>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	4a5c      	ldr	r2, [pc, #368]	@ (80032d4 <HAL_GPIO_Init+0x300>)
 8003164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003168:	6453      	str	r3, [r2, #68]	@ 0x44
 800316a:	4b5a      	ldr	r3, [pc, #360]	@ (80032d4 <HAL_GPIO_Init+0x300>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003176:	4a58      	ldr	r2, [pc, #352]	@ (80032d8 <HAL_GPIO_Init+0x304>)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4f      	ldr	r2, [pc, #316]	@ (80032dc <HAL_GPIO_Init+0x308>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d025      	beq.n	80031ee <HAL_GPIO_Init+0x21a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4e      	ldr	r2, [pc, #312]	@ (80032e0 <HAL_GPIO_Init+0x30c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <HAL_GPIO_Init+0x216>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4d      	ldr	r2, [pc, #308]	@ (80032e4 <HAL_GPIO_Init+0x310>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x212>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4c      	ldr	r2, [pc, #304]	@ (80032e8 <HAL_GPIO_Init+0x314>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4b      	ldr	r2, [pc, #300]	@ (80032ec <HAL_GPIO_Init+0x318>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x20a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4a      	ldr	r2, [pc, #296]	@ (80032f0 <HAL_GPIO_Init+0x31c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x206>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a49      	ldr	r2, [pc, #292]	@ (80032f4 <HAL_GPIO_Init+0x320>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x202>
 80031d2:	2306      	movs	r3, #6
 80031d4:	e00c      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00a      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031da:	2305      	movs	r3, #5
 80031dc:	e008      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031de:	2304      	movs	r3, #4
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e004      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x21c>
 80031ee:	2300      	movs	r3, #0
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f002 0203 	and.w	r2, r2, #3
 80031f6:	0092      	lsls	r2, r2, #2
 80031f8:	4093      	lsls	r3, r2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003200:	4935      	ldr	r1, [pc, #212]	@ (80032d8 <HAL_GPIO_Init+0x304>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320e:	4b3a      	ldr	r3, [pc, #232]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003232:	4a31      	ldr	r2, [pc, #196]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003238:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325c:	4a26      	ldr	r2, [pc, #152]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a11      	ldr	r2, [pc, #68]	@ (80032f8 <HAL_GPIO_Init+0x324>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	f67f ae96 	bls.w	8002ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3724      	adds	r7, #36	@ 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40020800 	.word	0x40020800
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40021400 	.word	0x40021400
 80032f4:	40021800 	.word	0x40021800
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e12b      	b.n	800359a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fd42 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	@ 0x24
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003394:	f002 fc64 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8003398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a81      	ldr	r2, [pc, #516]	@ (80035a4 <HAL_I2C_Init+0x274>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d807      	bhi.n	80033b4 <HAL_I2C_Init+0x84>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a80      	ldr	r2, [pc, #512]	@ (80035a8 <HAL_I2C_Init+0x278>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bf94      	ite	ls
 80033ac:	2301      	movls	r3, #1
 80033ae:	2300      	movhi	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e006      	b.n	80033c2 <HAL_I2C_Init+0x92>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a7d      	ldr	r2, [pc, #500]	@ (80035ac <HAL_I2C_Init+0x27c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0e7      	b.n	800359a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a78      	ldr	r2, [pc, #480]	@ (80035b0 <HAL_I2C_Init+0x280>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0c9b      	lsrs	r3, r3, #18
 80033d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	@ (80035a4 <HAL_I2C_Init+0x274>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d802      	bhi.n	8003404 <HAL_I2C_Init+0xd4>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	e009      	b.n	8003418 <HAL_I2C_Init+0xe8>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	4a69      	ldr	r2, [pc, #420]	@ (80035b4 <HAL_I2C_Init+0x284>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	3301      	adds	r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800342a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	495c      	ldr	r1, [pc, #368]	@ (80035a4 <HAL_I2C_Init+0x274>)
 8003434:	428b      	cmp	r3, r1
 8003436:	d819      	bhi.n	800346c <HAL_I2C_Init+0x13c>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e59      	subs	r1, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fbb1 f3f3 	udiv	r3, r1, r3
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800344c:	400b      	ands	r3, r1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_I2C_Init+0x138>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e59      	subs	r1, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	e051      	b.n	800350c <HAL_I2C_Init+0x1dc>
 8003468:	2304      	movs	r3, #4
 800346a:	e04f      	b.n	800350c <HAL_I2C_Init+0x1dc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <HAL_I2C_Init+0x168>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e012      	b.n	80034be <HAL_I2C_Init+0x18e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Init+0x196>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e022      	b.n	800350c <HAL_I2C_Init+0x1dc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10e      	bne.n	80034ec <HAL_I2C_Init+0x1bc>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e58      	subs	r0, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ea:	e00f      	b.n	800350c <HAL_I2C_Init+0x1dc>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6809      	ldr	r1, [r1, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800353a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6911      	ldr	r1, [r2, #16]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	000186a0 	.word	0x000186a0
 80035a8:	001e847f 	.word	0x001e847f
 80035ac:	003d08ff 	.word	0x003d08ff
 80035b0:	431bde83 	.word	0x431bde83
 80035b4:	10624dd3 	.word	0x10624dd3

080035b8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	@ 0x30
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d2:	f7fe fa1f 	bl	8001a14 <HAL_GetTick>
 80035d6:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	f040 8176 	bne.w	80038d6 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80035ea:	4b95      	ldr	r3, [pc, #596]	@ (8003840 <HAL_I2C_Mem_Read_DMA+0x288>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	4a94      	ldr	r2, [pc, #592]	@ (8003844 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a1a      	lsrs	r2, r3, #8
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009a      	lsls	r2, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d116      	bne.n	800363e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e14c      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d0db      	beq.n	8003604 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_I2C_Mem_Read_DMA+0xa2>
 8003656:	2302      	movs	r3, #2
 8003658:	e13e      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d007      	beq.n	8003680 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2222      	movs	r2, #34	@ 0x22
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2240      	movs	r2, #64	@ 0x40
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a62      	ldr	r2, [pc, #392]	@ (8003848 <HAL_I2C_Mem_Read_DMA+0x290>)
 80036c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80036c2:	897a      	ldrh	r2, [r7, #10]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80cc 	beq.w	800387c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02d      	beq.n	8003748 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	4a56      	ldr	r2, [pc, #344]	@ (800384c <HAL_I2C_Mem_Read_DMA+0x294>)
 80036f2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	4a55      	ldr	r2, [pc, #340]	@ (8003850 <HAL_I2C_Mem_Read_DMA+0x298>)
 80036fa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	2200      	movs	r2, #0
 8003712:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	2200      	movs	r2, #0
 800371a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3310      	adds	r3, #16
 8003726:	4619      	mov	r1, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	f7ff f8e1 	bl	80028f8 <HAL_DMA_Start_IT>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800373c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 8087 	bne.w	8003854 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003746:	e013      	b.n	8003770 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b3      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003770:	88f8      	ldrh	r0, [r7, #6]
 8003772:	893a      	ldrh	r2, [r7, #8]
 8003774:	8979      	ldrh	r1, [r7, #10]
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2323      	movs	r3, #35	@ 0x23
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4603      	mov	r3, r0
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f001 fc7f 	bl	8005084 <I2C_RequestMemoryRead>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f979 	bl	8002a88 <HAL_DMA_Abort_IT>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e081      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d108      	bne.n	80037ee <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800382a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e049      	b.n	80038d2 <HAL_I2C_Mem_Read_DMA+0x31a>
 800383e:	bf00      	nop
 8003840:	20000000 	.word	0x20000000
 8003844:	14f8b589 	.word	0x14f8b589
 8003848:	ffff0000 	.word	0xffff0000
 800384c:	08005255 	.word	0x08005255
 8003850:	080053ff 	.word	0x080053ff
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f043 0210 	orr.w	r2, r3, #16
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e02d      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800387c:	88f8      	ldrh	r0, [r7, #6]
 800387e:	893a      	ldrh	r2, [r7, #8]
 8003880:	8979      	ldrh	r1, [r7, #10]
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2323      	movs	r3, #35	@ 0x23
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4603      	mov	r3, r0
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f001 fbf9 	bl	8005084 <I2C_RequestMemoryRead>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e01d      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	@ 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003900:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003908:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b10      	cmp	r3, #16
 800390e:	d003      	beq.n	8003918 <HAL_I2C_EV_IRQHandler+0x38>
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	f040 80c1 	bne.w	8003a9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_I2C_EV_IRQHandler+0x6e>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003938:	d003      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x62>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003940:	d101      	bne.n	8003946 <HAL_I2C_EV_IRQHandler+0x66>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_I2C_EV_IRQHandler+0x68>
 8003946:	2300      	movs	r3, #0
 8003948:	2b01      	cmp	r3, #1
 800394a:	f000 8132 	beq.w	8003bb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x92>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f001 ffa8 	bl	80058ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fd6f 	bl	800444e <I2C_Master_SB>
 8003970:	e092      	b.n	8003a98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_I2C_EV_IRQHandler+0xb2>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	0a5b      	lsrs	r3, r3, #9
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fde5 	bl	800455a <I2C_Master_ADD10>
 8003990:	e082      	b.n	8003a98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	0a5b      	lsrs	r3, r3, #9
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fdff 	bl	80045ae <I2C_Master_ADDR>
 80039b0:	e072      	b.n	8003a98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03b      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039cc:	f000 80f3 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	09db      	lsrs	r3, r3, #7
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00f      	beq.n	80039fc <HAL_I2C_EV_IRQHandler+0x11c>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_I2C_EV_IRQHandler+0x11c>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9e9 	bl	8003dcc <I2C_MasterTransmit_TXE>
 80039fa:	e04d      	b.n	8003a98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80d6 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	0a5b      	lsrs	r3, r3, #9
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80cf 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	2b21      	cmp	r3, #33	@ 0x21
 8003a1c:	d103      	bne.n	8003a26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa70 	bl	8003f04 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a24:	e0c7      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	f040 80c4 	bne.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fade 	bl	8003ff0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a34:	e0bf      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a44:	f000 80b7 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00f      	beq.n	8003a74 <HAL_I2C_EV_IRQHandler+0x194>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	0a9b      	lsrs	r3, r3, #10
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_I2C_EV_IRQHandler+0x194>
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb53 	bl	8004118 <I2C_MasterReceive_RXNE>
 8003a72:	e011      	b.n	8003a98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 809a 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	0a5b      	lsrs	r3, r3, #9
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8093 	beq.w	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fbf2 	bl	800427a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a96:	e08e      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a98:	e08d      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e007      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d012      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x20e>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a5b      	lsrs	r3, r3, #9
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 ffb0 	bl	8004a4c <I2C_Slave_ADDR>
 8003aec:	e066      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x22e>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0a5b      	lsrs	r3, r3, #9
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 ffea 	bl	8004ae0 <I2C_Slave_STOPF>
 8003b0c:	e056      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b0e:	7bbb      	ldrb	r3, [r7, #14]
 8003b10:	2b21      	cmp	r3, #33	@ 0x21
 8003b12:	d002      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0x23a>
 8003b14:	7bbb      	ldrb	r3, [r7, #14]
 8003b16:	2b29      	cmp	r3, #41	@ 0x29
 8003b18:	d125      	bne.n	8003b66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	09db      	lsrs	r3, r3, #7
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00f      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x266>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	0a9b      	lsrs	r3, r3, #10
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x266>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fec6 	bl	80048d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b44:	e039      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d033      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2da>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	0a5b      	lsrs	r3, r3, #9
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02d      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fef3 	bl	800494a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b64:	e029      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00f      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	0a9b      	lsrs	r3, r3, #10
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fefe 	bl	800498c <I2C_SlaveReceive_RXNE>
 8003b90:	e014      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00e      	beq.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	0a5b      	lsrs	r3, r3, #9
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 ff2c 	bl	8004a08 <I2C_SlaveReceive_BTF>
 8003bb0:	e004      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	@ 0x28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <HAL_I2C_ER_IRQHandler+0x4e>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	0a5b      	lsrs	r3, r3, #9
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x78>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	0a9b      	lsrs	r3, r3, #10
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03f      	beq.n	8003cc6 <HAL_I2C_ER_IRQHandler+0x104>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d039      	beq.n	8003cc6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003c52:	7efb      	ldrb	r3, [r7, #27]
 8003c54:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c6c:	7ebb      	ldrb	r3, [r7, #26]
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d112      	bne.n	8003c98 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	2b21      	cmp	r3, #33	@ 0x21
 8003c7c:	d008      	beq.n	8003c90 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b29      	cmp	r3, #41	@ 0x29
 8003c82:	d005      	beq.n	8003c90 <HAL_I2C_ER_IRQHandler+0xce>
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b28      	cmp	r3, #40	@ 0x28
 8003c88:	d106      	bne.n	8003c98 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b21      	cmp	r3, #33	@ 0x21
 8003c8e:	d103      	bne.n	8003c98 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 f855 	bl	8004d40 <I2C_Slave_AF>
 8003c96:	e016      	b.n	8003cc6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003caa:	7efb      	ldrb	r3, [r7, #27]
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d002      	beq.n	8003cb6 <HAL_I2C_ER_IRQHandler+0xf4>
 8003cb0:	7efb      	ldrb	r3, [r7, #27]
 8003cb2:	2b40      	cmp	r3, #64	@ 0x40
 8003cb4:	d107      	bne.n	8003cc6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	0adb      	lsrs	r3, r3, #11
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003cee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 f88c 	bl	8004e20 <I2C_ITError>
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d150      	bne.n	8003e94 <I2C_MasterTransmit_TXE+0xc8>
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b21      	cmp	r3, #33	@ 0x21
 8003df6:	d14d      	bne.n	8003e94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d01d      	beq.n	8003e3a <I2C_MasterTransmit_TXE+0x6e>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d01a      	beq.n	8003e3a <I2C_MasterTransmit_TXE+0x6e>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e0a:	d016      	beq.n	8003e3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2211      	movs	r2, #17
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff6c 	bl	8003d10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e38:	e060      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	d107      	bne.n	8003e84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff87 	bl	8003d90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e82:	e03b      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff3f 	bl	8003d10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e92:	e033      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b21      	cmp	r3, #33	@ 0x21
 8003e98:	d005      	beq.n	8003ea6 <I2C_MasterTransmit_TXE+0xda>
 8003e9a:	7bbb      	ldrb	r3, [r7, #14]
 8003e9c:	2b40      	cmp	r3, #64	@ 0x40
 8003e9e:	d12d      	bne.n	8003efc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b22      	cmp	r3, #34	@ 0x22
 8003ea4:	d12a      	bne.n	8003efc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d108      	bne.n	8003ec2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ebe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ec0:	e01c      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d103      	bne.n	8003ed6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f88e 	bl	8003ff0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ed4:	e012      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003efa:	e7ff      	b.n	8003efc <I2C_MasterTransmit_TXE+0x130>
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b21      	cmp	r3, #33	@ 0x21
 8003f1c:	d164      	bne.n	8003fe8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f4c:	e04c      	b.n	8003fe8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d01d      	beq.n	8003f90 <I2C_MasterTransmit_BTF+0x8c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d01a      	beq.n	8003f90 <I2C_MasterTransmit_BTF+0x8c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f60:	d016      	beq.n	8003f90 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f70:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2211      	movs	r2, #17
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fec1 	bl	8003d10 <HAL_I2C_MasterTxCpltCallback>
}
 8003f8e:	e02b      	b.n	8003fe8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f9e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d107      	bne.n	8003fda <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fedc 	bl	8003d90 <HAL_I2C_MemTxCpltCallback>
}
 8003fd8:	e006      	b.n	8003fe8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe94 	bl	8003d10 <HAL_I2C_MasterTxCpltCallback>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11d      	bne.n	8004044 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10b      	bne.n	8004028 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004026:	e073      	b.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	b29b      	uxth	r3, r3
 800402e:	121b      	asrs	r3, r3, #8
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004042:	e065      	b.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10b      	bne.n	8004064 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004050:	b2da      	uxtb	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004062:	e055      	b.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	2b02      	cmp	r3, #2
 800406a:	d151      	bne.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b22      	cmp	r3, #34	@ 0x22
 8004070:	d10d      	bne.n	800408e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004080:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800408c:	e040      	b.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b21      	cmp	r3, #33	@ 0x21
 800409c:	d112      	bne.n	80040c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040c2:	e025      	b.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d120      	bne.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b21      	cmp	r3, #33	@ 0x21
 80040d2:	d11d      	bne.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fe40 	bl	8003d90 <HAL_I2C_MemTxCpltCallback>
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b22      	cmp	r3, #34	@ 0x22
 800412a:	f040 80a2 	bne.w	8004272 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d921      	bls.n	8004180 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b03      	cmp	r3, #3
 800416a:	f040 8082 	bne.w	8004272 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800417e:	e078      	b.n	8004272 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	2b02      	cmp	r3, #2
 8004186:	d074      	beq.n	8004272 <I2C_MasterReceive_RXNE+0x15a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d002      	beq.n	8004194 <I2C_MasterReceive_RXNE+0x7c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d16e      	bne.n	8004272 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fb2f 	bl	80057f8 <I2C_WaitOnSTOPRequestThroughIT>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d142      	bne.n	8004226 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d10a      	bne.n	8004210 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd f9ed 	bl	80015e8 <HAL_I2C_MemRxCpltCallback>
}
 800420e:	e030      	b.n	8004272 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2212      	movs	r2, #18
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fd80 	bl	8003d24 <HAL_I2C_MasterRxCpltCallback>
}
 8004224:	e025      	b.n	8004272 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004234:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fd99 	bl	8003da4 <HAL_I2C_ErrorCallback>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b04      	cmp	r3, #4
 8004290:	d11b      	bne.n	80042ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042c8:	e0bd      	b.n	8004446 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d129      	bne.n	8004328 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00a      	beq.n	8004300 <I2C_MasterReceive_BTF+0x86>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d007      	beq.n	8004300 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004326:	e08e      	b.n	8004446 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d176      	bne.n	8004420 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d002      	beq.n	800433e <I2C_MasterReceive_BTF+0xc4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b10      	cmp	r3, #16
 800433c:	d108      	bne.n	8004350 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e019      	b.n	8004384 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d002      	beq.n	800435c <I2C_MasterReceive_BTF+0xe2>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d108      	bne.n	800436e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e00a      	b.n	8004384 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d007      	beq.n	8004384 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004382:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	d10a      	bne.n	800440a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd f8f0 	bl	80015e8 <HAL_I2C_MemRxCpltCallback>
}
 8004408:	e01d      	b.n	8004446 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2212      	movs	r2, #18
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fc83 	bl	8003d24 <HAL_I2C_MasterRxCpltCallback>
}
 800441e:	e012      	b.n	8004446 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d117      	bne.n	8004492 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800447a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800447c:	e067      	b.n	800454e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]
}
 8004490:	e05d      	b.n	800454e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449a:	d133      	bne.n	8004504 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b21      	cmp	r3, #33	@ 0x21
 80044a6:	d109      	bne.n	80044bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044b8:	611a      	str	r2, [r3, #16]
 80044ba:	e008      	b.n	80044ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <I2C_Master_SB+0x92>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d032      	beq.n	800454e <I2C_Master_SB+0x100>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02d      	beq.n	800454e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004500:	605a      	str	r2, [r3, #4]
}
 8004502:	e024      	b.n	800454e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10e      	bne.n	800452a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004510:	b29b      	uxth	r3, r3
 8004512:	11db      	asrs	r3, r3, #7
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f063 030f 	orn	r3, r3, #15
 8004520:	b2da      	uxtb	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]
}
 8004528:	e011      	b.n	800454e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10d      	bne.n	800454e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	b29b      	uxth	r3, r3
 8004538:	11db      	asrs	r3, r3, #7
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0306 	and.w	r3, r3, #6
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f063 030e 	orn	r3, r3, #14
 8004546:	b2da      	uxtb	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	b2da      	uxtb	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <I2C_Master_ADD10+0x26>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d108      	bne.n	8004592 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00c      	beq.n	80045a2 <I2C_Master_ADD10+0x48>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a0:	605a      	str	r2, [r3, #4]
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b091      	sub	sp, #68	@ 0x44
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b22      	cmp	r3, #34	@ 0x22
 80045d6:	f040 8169 	bne.w	80048ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <I2C_Master_ADDR+0x54>
 80045e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	d10b      	bne.n	8004602 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	e160      	b.n	80048c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <I2C_Master_ADDR+0x98>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004612:	d118      	bne.n	8004646 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004638:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	651a      	str	r2, [r3, #80]	@ 0x50
 8004644:	e13e      	b.n	80048c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d113      	bne.n	8004678 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e115      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	f040 808a 	bne.w	8004798 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800468a:	d137      	bne.n	80046fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046aa:	d113      	bne.n	80046d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	e0e7      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e0d3      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d02e      	beq.n	8004760 <I2C_Master_ADDR+0x1b2>
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	2b20      	cmp	r3, #32
 8004706:	d02b      	beq.n	8004760 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	2b12      	cmp	r3, #18
 800470c:	d102      	bne.n	8004714 <I2C_Master_ADDR+0x166>
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004710:	2b01      	cmp	r3, #1
 8004712:	d125      	bne.n	8004760 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00e      	beq.n	8004738 <I2C_Master_ADDR+0x18a>
 800471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471c:	2b02      	cmp	r3, #2
 800471e:	d00b      	beq.n	8004738 <I2C_Master_ADDR+0x18a>
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	2b10      	cmp	r3, #16
 8004724:	d008      	beq.n	8004738 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e007      	b.n	8004748 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004746:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	e0a1      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e085      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d14d      	bne.n	800483e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d016      	beq.n	80047d6 <I2C_Master_ADDR+0x228>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d013      	beq.n	80047d6 <I2C_Master_ADDR+0x228>
 80047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d010      	beq.n	80047d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e007      	b.n	80047e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f4:	d117      	bne.n	8004826 <I2C_Master_ADDR+0x278>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047fc:	d00b      	beq.n	8004816 <I2C_Master_ADDR+0x268>
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	d008      	beq.n	8004816 <I2C_Master_ADDR+0x268>
 8004804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004806:	2b08      	cmp	r3, #8
 8004808:	d005      	beq.n	8004816 <I2C_Master_ADDR+0x268>
 800480a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480c:	2b10      	cmp	r3, #16
 800480e:	d002      	beq.n	8004816 <I2C_Master_ADDR+0x268>
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	2b20      	cmp	r3, #32
 8004814:	d107      	bne.n	8004826 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004824:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e032      	b.n	80048a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800484c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485c:	d117      	bne.n	800488e <I2C_Master_ADDR+0x2e0>
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004864:	d00b      	beq.n	800487e <I2C_Master_ADDR+0x2d0>
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d008      	beq.n	800487e <I2C_Master_ADDR+0x2d0>
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	2b08      	cmp	r3, #8
 8004870:	d005      	beq.n	800487e <I2C_Master_ADDR+0x2d0>
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	2b10      	cmp	r3, #16
 8004876:	d002      	beq.n	800487e <I2C_Master_ADDR+0x2d0>
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	2b20      	cmp	r3, #32
 800487c:	d107      	bne.n	800488e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800488c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048aa:	e00b      	b.n	80048c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	e7ff      	b.n	80048c4 <I2C_Master_ADDR+0x316>
 80048c4:	bf00      	nop
 80048c6:	3744      	adds	r7, #68	@ 0x44
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02b      	beq.n	8004942 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d114      	bne.n	8004942 <I2C_SlaveTransmit_TXE+0x72>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b29      	cmp	r3, #41	@ 0x29
 800491c:	d111      	bne.n	8004942 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2221      	movs	r2, #33	@ 0x21
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2228      	movs	r2, #40	@ 0x28
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff f9fb 	bl	8003d38 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d011      	beq.n	8004980 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02c      	beq.n	8004a00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d114      	bne.n	8004a00 <I2C_SlaveReceive_RXNE+0x74>
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049da:	d111      	bne.n	8004a00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2222      	movs	r2, #34	@ 0x22
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2228      	movs	r2, #40	@ 0x28
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff f9a6 	bl	8003d4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a66:	2b28      	cmp	r3, #40	@ 0x28
 8004a68:	d127      	bne.n	8004aba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	09db      	lsrs	r3, r3, #7
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	81bb      	strh	r3, [r7, #12]
 8004a9c:	e002      	b.n	8004aa4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004aac:	89ba      	ldrh	r2, [r7, #12]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff f954 	bl	8003d60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ab8:	e00e      	b.n	8004ad8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004afe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3c:	d172      	bne.n	8004c24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b22      	cmp	r3, #34	@ 0x22
 8004b42:	d002      	beq.n	8004b4a <I2C_Slave_STOPF+0x6a>
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b48:	d135      	bne.n	8004bb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f043 0204 	orr.w	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f92c 	bl	8002de0 <HAL_DMA_GetState>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d049      	beq.n	8004c22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	4a69      	ldr	r2, [pc, #420]	@ (8004d38 <I2C_Slave_STOPF+0x258>)
 8004b94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd ff74 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03d      	beq.n	8004c22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bb4:	e035      	b.n	8004c22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe f8f6 	bl	8002de0 <HAL_DMA_GetState>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d014      	beq.n	8004c24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004d38 <I2C_Slave_STOPF+0x258>)
 8004c00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fd ff3e 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
 8004c20:	e000      	b.n	8004c24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03e      	beq.n	8004cac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d112      	bne.n	8004c62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d112      	bne.n	8004c96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8b3 	bl	8004e20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cba:	e039      	b.n	8004d30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc0:	d109      	bne.n	8004cd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2228      	movs	r2, #40	@ 0x28
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff f83b 	bl	8003d4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b28      	cmp	r3, #40	@ 0x28
 8004ce0:	d111      	bne.n	8004d06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a15      	ldr	r2, [pc, #84]	@ (8004d3c <I2C_Slave_STOPF+0x25c>)
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff f83c 	bl	8003d7c <HAL_I2C_ListenCpltCallback>
}
 8004d04:	e014      	b.n	8004d30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	2b22      	cmp	r3, #34	@ 0x22
 8004d0c:	d002      	beq.n	8004d14 <I2C_Slave_STOPF+0x234>
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b22      	cmp	r3, #34	@ 0x22
 8004d12:	d10d      	bne.n	8004d30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff f80e 	bl	8003d4c <HAL_I2C_SlaveRxCpltCallback>
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	08005479 	.word	0x08005479
 8004d3c:	ffff0000 	.word	0xffff0000

08004d40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d002      	beq.n	8004d62 <I2C_Slave_AF+0x22>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d129      	bne.n	8004db6 <I2C_Slave_AF+0x76>
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b28      	cmp	r3, #40	@ 0x28
 8004d66:	d126      	bne.n	8004db6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e1c <I2C_Slave_AF+0xdc>)
 8004d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fe ffe4 	bl	8003d7c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004db4:	e02e      	b.n	8004e14 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b21      	cmp	r3, #33	@ 0x21
 8004dba:	d126      	bne.n	8004e0a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <I2C_Slave_AF+0xdc>)
 8004dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2221      	movs	r2, #33	@ 0x21
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004de6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe ff98 	bl	8003d38 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e08:	e004      	b.n	8004e14 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e12:	615a      	str	r2, [r3, #20]
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	ffff0000 	.word	0xffff0000

08004e20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d002      	beq.n	8004e44 <I2C_ITError+0x24>
 8004e3e:	7bbb      	ldrb	r3, [r7, #14]
 8004e40:	2b40      	cmp	r3, #64	@ 0x40
 8004e42:	d10a      	bne.n	8004e5a <I2C_ITError+0x3a>
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b22      	cmp	r3, #34	@ 0x22
 8004e48:	d107      	bne.n	8004e5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e60:	2b28      	cmp	r3, #40	@ 0x28
 8004e62:	d107      	bne.n	8004e74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2228      	movs	r2, #40	@ 0x28
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e72:	e015      	b.n	8004ea0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e82:	d00a      	beq.n	8004e9a <I2C_ITError+0x7a>
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b60      	cmp	r3, #96	@ 0x60
 8004e88:	d007      	beq.n	8004e9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eae:	d162      	bne.n	8004f76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ebe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d020      	beq.n	8004f10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800507c <I2C_ITError+0x25c>)
 8004ed4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd fdd4 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8089 	beq.w	8004ffa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4798      	blx	r3
 8004f0e:	e074      	b.n	8004ffa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	4a59      	ldr	r2, [pc, #356]	@ (800507c <I2C_ITError+0x25c>)
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd fdb3 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d068      	beq.n	8004ffa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b40      	cmp	r3, #64	@ 0x40
 8004f34:	d10b      	bne.n	8004f4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
 8004f74:	e041      	b.n	8004ffa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b60      	cmp	r3, #96	@ 0x60
 8004f80:	d125      	bne.n	8004fce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9a:	2b40      	cmp	r3, #64	@ 0x40
 8004f9c:	d10b      	bne.n	8004fb6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fe fef6 	bl	8003db8 <HAL_I2C_AbortCpltCallback>
 8004fcc:	e015      	b.n	8004ffa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b40      	cmp	r3, #64	@ 0x40
 8004fda:	d10b      	bne.n	8004ff4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fe fed5 	bl	8003da4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10e      	bne.n	8005028 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d113      	bne.n	8005074 <I2C_ITError+0x254>
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b28      	cmp	r3, #40	@ 0x28
 8005050:	d110      	bne.n	8005074 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a0a      	ldr	r2, [pc, #40]	@ (8005080 <I2C_ITError+0x260>)
 8005056:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fe fe84 	bl	8003d7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	08005479 	.word	0x08005479
 8005080:	ffff0000 	.word	0xffff0000

08005084 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fa7c 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e4:	d103      	bne.n	80050ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0aa      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	4952      	ldr	r1, [pc, #328]	@ (8005250 <I2C_RequestMemoryRead+0x1cc>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fab4 	bl	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e097      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fb1e 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e076      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005160:	893b      	ldrh	r3, [r7, #8]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	e021      	b.n	80051b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	b29b      	uxth	r3, r3
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	6a39      	ldr	r1, [r7, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 faf8 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e050      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b2:	6a39      	ldr	r1, [r7, #32]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fadd 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d107      	bne.n	80051d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e035      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f9e5 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005212:	d103      	bne.n	800521c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e013      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005220:	897b      	ldrh	r3, [r7, #10]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	4906      	ldr	r1, [pc, #24]	@ (8005250 <I2C_RequestMemoryRead+0x1cc>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa1d 	bl	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	00010002 	.word	0x00010002

08005254 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005268:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005270:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005286:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005294:	2200      	movs	r2, #0
 8005296:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	2200      	movs	r2, #0
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80052ae:	2b21      	cmp	r3, #33	@ 0x21
 80052b0:	d007      	beq.n	80052c2 <I2C_DMAXferCplt+0x6e>
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80052b8:	2b22      	cmp	r3, #34	@ 0x22
 80052ba:	d131      	bne.n	8005320 <I2C_DMAXferCplt+0xcc>
 80052bc:	7cbb      	ldrb	r3, [r7, #18]
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d12e      	bne.n	8005320 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	2b29      	cmp	r3, #41	@ 0x29
 80052dc:	d10a      	bne.n	80052f4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2221      	movs	r2, #33	@ 0x21
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2228      	movs	r2, #40	@ 0x28
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f7fe fd23 	bl	8003d38 <HAL_I2C_SlaveTxCpltCallback>
 80052f2:	e00c      	b.n	800530e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052f8:	d109      	bne.n	800530e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2222      	movs	r2, #34	@ 0x22
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2228      	movs	r2, #40	@ 0x28
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005308:	6978      	ldr	r0, [r7, #20]
 800530a:	f7fe fd1f 	bl	8003d4c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800531c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800531e:	e06a      	b.n	80053f6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d064      	beq.n	80053f6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	d107      	bne.n	8005346 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005344:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005354:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800535c:	d009      	beq.n	8005372 <I2C_DMAXferCplt+0x11e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d006      	beq.n	8005372 <I2C_DMAXferCplt+0x11e>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800536a:	d002      	beq.n	8005372 <I2C_DMAXferCplt+0x11e>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b20      	cmp	r3, #32
 8005370:	d107      	bne.n	8005382 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005380:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005390:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f7fe fcf7 	bl	8003da4 <HAL_I2C_ErrorCallback>
}
 80053b6:	e01e      	b.n	80053f6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b40      	cmp	r3, #64	@ 0x40
 80053ca:	d10a      	bne.n	80053e2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7fc f904 	bl	80015e8 <HAL_I2C_MemRxCpltCallback>
}
 80053e0:	e009      	b.n	80053f6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2212      	movs	r2, #18
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80053f0:	6978      	ldr	r0, [r7, #20]
 80053f2:	f7fe fc97 	bl	8003d24 <HAL_I2C_MasterRxCpltCallback>
}
 80053f6:	bf00      	nop
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005418:	2200      	movs	r2, #0
 800541a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	2200      	movs	r2, #0
 800542a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fd fce5 	bl	8002dfc <HAL_DMA_GetError>
 8005432:	4603      	mov	r3, r0
 8005434:	2b02      	cmp	r3, #2
 8005436:	d01b      	beq.n	8005470 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005446:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f043 0210 	orr.w	r2, r3, #16
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7fe fc9a 	bl	8003da4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005490:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005492:	4b4b      	ldr	r3, [pc, #300]	@ (80055c0 <I2C_DMAAbort+0x148>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	08db      	lsrs	r3, r3, #3
 8005498:	4a4a      	ldr	r2, [pc, #296]	@ (80055c4 <I2C_DMAAbort+0x14c>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0a1a      	lsrs	r2, r3, #8
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00da      	lsls	r2, r3, #3
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80054be:	e00a      	b.n	80054d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054d4:	d0ea      	beq.n	80054ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e2:	2200      	movs	r2, #0
 80054e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	2200      	movs	r2, #0
 80054f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005504:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005518:	2200      	movs	r2, #0
 800551a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	2200      	movs	r2, #0
 800552a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b60      	cmp	r3, #96	@ 0x60
 8005546:	d10e      	bne.n	8005566 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7fe fc2a 	bl	8003db8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005564:	e027      	b.n	80055b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800556c:	2b28      	cmp	r3, #40	@ 0x28
 800556e:	d117      	bne.n	80055a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800558e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2228      	movs	r2, #40	@ 0x28
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800559e:	e007      	b.n	80055b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055b0:	6978      	ldr	r0, [r7, #20]
 80055b2:	f7fe fbf7 	bl	8003da4 <HAL_I2C_ErrorCallback>
}
 80055b6:	bf00      	nop
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000000 	.word	0x20000000
 80055c4:	14f8b589 	.word	0x14f8b589

080055c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d8:	e025      	b.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d021      	beq.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fc fa17 	bl	8001a14 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e023      	b.n	800566e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d10d      	bne.n	800564c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	e00c      	b.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	429a      	cmp	r2, r3
 800566a:	d0b6      	beq.n	80055da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005684:	e051      	b.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005694:	d123      	bne.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e046      	b.n	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d021      	beq.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fc f995 	bl	8001a14 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e020      	b.n	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10c      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e00b      	b.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	43da      	mvns	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d18d      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005780:	e02d      	b.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f86a 	bl	800585c <I2C_IsAcknowledgeFailed>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e02d      	b.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d021      	beq.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579a:	f7fc f93b 	bl	8001a14 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d116      	bne.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e007      	b.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b80      	cmp	r3, #128	@ 0x80
 80057ea:	d1ca      	bne.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005804:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	08db      	lsrs	r3, r3, #3
 800580a:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	0a1a      	lsrs	r2, r3, #8
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b01      	subs	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e008      	b.n	8005848 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005844:	d0e9      	beq.n	800581a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000000 	.word	0x20000000
 8005858:	14f8b589 	.word	0x14f8b589

0800585c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005872:	d11b      	bne.n	80058ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800587c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	f043 0204 	orr.w	r2, r3, #4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80058ca:	d103      	bne.n	80058d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058d2:	e007      	b.n	80058e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80058dc:	d102      	bne.n	80058e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2208      	movs	r2, #8
 80058e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0cc      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005904:	4b68      	ldr	r3, [pc, #416]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d90c      	bls.n	800592c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b65      	ldr	r3, [pc, #404]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b63      	ldr	r3, [pc, #396]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0b8      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005944:	4b59      	ldr	r3, [pc, #356]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a58      	ldr	r2, [pc, #352]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800594e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800595c:	4b53      	ldr	r3, [pc, #332]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a52      	ldr	r2, [pc, #328]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b50      	ldr	r3, [pc, #320]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	494d      	ldr	r1, [pc, #308]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d044      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598e:	4b47      	ldr	r3, [pc, #284]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d119      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e07f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b3f      	ldr	r3, [pc, #252]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e06f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059be:	4b3b      	ldr	r3, [pc, #236]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e067      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ce:	4b37      	ldr	r3, [pc, #220]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4934      	ldr	r1, [pc, #208]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e0:	f7fc f818 	bl	8001a14 <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e8:	f7fc f814 	bl	8001a14 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e04f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 020c 	and.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1eb      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a10:	4b25      	ldr	r3, [pc, #148]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d20c      	bcs.n	8005a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b22      	ldr	r3, [pc, #136]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a26:	4b20      	ldr	r3, [pc, #128]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e032      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a44:	4b19      	ldr	r3, [pc, #100]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4916      	ldr	r1, [pc, #88]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a62:	4b12      	ldr	r3, [pc, #72]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	490e      	ldr	r1, [pc, #56]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a76:	f000 f821 	bl	8005abc <HAL_RCC_GetSysClockFreq>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	490a      	ldr	r1, [pc, #40]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a88:	5ccb      	ldrb	r3, [r1, r3]
 8005a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a92:	4b09      	ldr	r3, [pc, #36]	@ (8005ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fb ff78 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023c00 	.word	0x40023c00
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	0800af5c 	.word	0x0800af5c
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	20000004 	.word	0x20000004

08005abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b090      	sub	sp, #64	@ 0x40
 8005ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac8:	2300      	movs	r3, #0
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005acc:	2300      	movs	r3, #0
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad4:	4b59      	ldr	r3, [pc, #356]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d00d      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0x40>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	f200 80a1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aee:	e09b      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b53      	ldr	r3, [pc, #332]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8005af2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005af4:	e09b      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005af6:	4b53      	ldr	r3, [pc, #332]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005afa:	e098      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005afc:	4b4f      	ldr	r3, [pc, #316]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b06:	4b4d      	ldr	r3, [pc, #308]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d028      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b12:	4b4a      	ldr	r3, [pc, #296]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	2200      	movs	r2, #0
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b24:	2100      	movs	r1, #0
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b28:	fb03 f201 	mul.w	r2, r3, r1
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	4a43      	ldr	r2, [pc, #268]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b36:	fba0 1202 	umull	r1, r2, r0, r2
 8005b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3c:	460a      	mov	r2, r1
 8005b3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b42:	4413      	add	r3, r2
 8005b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b48:	2200      	movs	r2, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	61fa      	str	r2, [r7, #28]
 8005b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b56:	f7fa fb63 	bl	8000220 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4613      	mov	r3, r2
 8005b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b62:	e053      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b64:	4b35      	ldr	r3, [pc, #212]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	099b      	lsrs	r3, r3, #6
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	617a      	str	r2, [r7, #20]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b76:	f04f 0b00 	mov.w	fp, #0
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	465b      	mov	r3, fp
 8005b7e:	f04f 0000 	mov.w	r0, #0
 8005b82:	f04f 0100 	mov.w	r1, #0
 8005b86:	0159      	lsls	r1, r3, #5
 8005b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b8c:	0150      	lsls	r0, r2, #5
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	ebb2 080a 	subs.w	r8, r2, sl
 8005b96:	eb63 090b 	sbc.w	r9, r3, fp
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ba6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005baa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bae:	ebb2 0408 	subs.w	r4, r2, r8
 8005bb2:	eb63 0509 	sbc.w	r5, r3, r9
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	00eb      	lsls	r3, r5, #3
 8005bc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc4:	00e2      	lsls	r2, r4, #3
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	461d      	mov	r5, r3
 8005bca:	eb14 030a 	adds.w	r3, r4, sl
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	eb45 030b 	adc.w	r3, r5, fp
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	60fa      	str	r2, [r7, #12]
 8005bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c00:	f7fa fb0e 	bl	8000220 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005c1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3740      	adds	r7, #64	@ 0x40
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	017d7840 	.word	0x017d7840

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000000 	.word	0x20000000

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	@ (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	0800af6c 	.word	0x0800af6c

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	0800af6c 	.word	0x0800af6c

08005cb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e273      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d075      	beq.n	8005dba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005cce:	4b88      	ldr	r3, [pc, #544]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cda:	4b85      	ldr	r3, [pc, #532]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d112      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce6:	4b82      	ldr	r3, [pc, #520]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf2:	d10b      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05b      	beq.n	8005db8 <HAL_RCC_OscConfig+0x108>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d157      	bne.n	8005db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e24e      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d14:	d106      	bne.n	8005d24 <HAL_RCC_OscConfig+0x74>
 8005d16:	4b76      	ldr	r3, [pc, #472]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a75      	ldr	r2, [pc, #468]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e01d      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x98>
 8005d2e:	4b70      	ldr	r3, [pc, #448]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6f      	ldr	r2, [pc, #444]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d48:	4b69      	ldr	r3, [pc, #420]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a68      	ldr	r2, [pc, #416]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b66      	ldr	r3, [pc, #408]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a65      	ldr	r2, [pc, #404]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fb fe54 	bl	8001a14 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fb fe50 	bl	8001a14 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e213      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0xc0>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fb fe40 	bl	8001a14 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fb fe3c 	bl	8001a14 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	@ 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e1ff      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005daa:	4b51      	ldr	r3, [pc, #324]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0xe8>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d063      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd2:	4b47      	ldr	r3, [pc, #284]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d11c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dde:	4b44      	ldr	r3, [pc, #272]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d116      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dea:	4b41      	ldr	r3, [pc, #260]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e1d3      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4937      	ldr	r1, [pc, #220]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e16:	e03a      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e20:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <HAL_RCC_OscConfig+0x244>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fb fdf5 	bl	8001a14 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e2e:	f7fb fdf1 	bl	8001a14 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e1b4      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e40:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4925      	ldr	r1, [pc, #148]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	600b      	str	r3, [r1, #0]
 8005e60:	e015      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e62:	4b24      	ldr	r3, [pc, #144]	@ (8005ef4 <HAL_RCC_OscConfig+0x244>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fb fdd4 	bl	8001a14 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e70:	f7fb fdd0 	bl	8001a14 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e193      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d036      	beq.n	8005f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <HAL_RCC_OscConfig+0x248>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea8:	f7fb fdb4 	bl	8001a14 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb0:	f7fb fdb0 	bl	8001a14 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e173      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x200>
 8005ece:	e01b      	b.n	8005f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	@ (8005ef8 <HAL_RCC_OscConfig+0x248>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed6:	f7fb fd9d 	bl	8001a14 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	e00e      	b.n	8005efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ede:	f7fb fd99 	bl	8001a14 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d907      	bls.n	8005efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e15c      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	42470000 	.word	0x42470000
 8005ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005efc:	4b8a      	ldr	r3, [pc, #552]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1ea      	bne.n	8005ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8097 	beq.w	8006044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f1a:	4b83      	ldr	r3, [pc, #524]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f36:	4b7c      	ldr	r3, [pc, #496]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f46:	4b79      	ldr	r3, [pc, #484]	@ (800612c <HAL_RCC_OscConfig+0x47c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d118      	bne.n	8005f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f52:	4b76      	ldr	r3, [pc, #472]	@ (800612c <HAL_RCC_OscConfig+0x47c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a75      	ldr	r2, [pc, #468]	@ (800612c <HAL_RCC_OscConfig+0x47c>)
 8005f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f5e:	f7fb fd59 	bl	8001a14 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f66:	f7fb fd55 	bl	8001a14 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e118      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f78:	4b6c      	ldr	r3, [pc, #432]	@ (800612c <HAL_RCC_OscConfig+0x47c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d106      	bne.n	8005f9a <HAL_RCC_OscConfig+0x2ea>
 8005f8c:	4b66      	ldr	r3, [pc, #408]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a65      	ldr	r2, [pc, #404]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f98:	e01c      	b.n	8005fd4 <HAL_RCC_OscConfig+0x324>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x30c>
 8005fa2:	4b61      	ldr	r3, [pc, #388]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	4a60      	ldr	r2, [pc, #384]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fa8:	f043 0304 	orr.w	r3, r3, #4
 8005fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fae:	4b5e      	ldr	r3, [pc, #376]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fba:	e00b      	b.n	8005fd4 <HAL_RCC_OscConfig+0x324>
 8005fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc0:	4a59      	ldr	r2, [pc, #356]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc8:	4b57      	ldr	r3, [pc, #348]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	4a56      	ldr	r2, [pc, #344]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005fce:	f023 0304 	bic.w	r3, r3, #4
 8005fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fb fd1a 	bl	8001a14 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fb fd16 	bl	8001a14 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0d7      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ee      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x334>
 8006006:	e014      	b.n	8006032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006008:	f7fb fd04 	bl	8001a14 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600e:	e00a      	b.n	8006026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006010:	f7fb fd00 	bl	8001a14 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0c1      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006026:	4b40      	ldr	r3, [pc, #256]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ee      	bne.n	8006010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d105      	bne.n	8006044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006038:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	4a3a      	ldr	r2, [pc, #232]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 800603e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80ad 	beq.w	80061a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800604e:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b08      	cmp	r3, #8
 8006058:	d060      	beq.n	800611c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d145      	bne.n	80060ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006062:	4b33      	ldr	r3, [pc, #204]	@ (8006130 <HAL_RCC_OscConfig+0x480>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fb fcd4 	bl	8001a14 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006070:	f7fb fcd0 	bl	8001a14 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e093      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	4b29      	ldr	r3, [pc, #164]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69da      	ldr	r2, [r3, #28]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	3b01      	subs	r3, #1
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	071b      	lsls	r3, r3, #28
 80060ba:	491b      	ldr	r1, [pc, #108]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <HAL_RCC_OscConfig+0x480>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fb fca5 	bl	8001a14 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ce:	f7fb fca1 	bl	8001a14 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e064      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e0:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x41e>
 80060ec:	e05c      	b.n	80061a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <HAL_RCC_OscConfig+0x480>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fb fc8e 	bl	8001a14 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fb fc8a 	bl	8001a14 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e04d      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x44c>
 800611a:	e045      	b.n	80061a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d107      	bne.n	8006134 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e040      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
 8006128:	40023800 	.word	0x40023800
 800612c:	40007000 	.word	0x40007000
 8006130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006134:	4b1f      	ldr	r3, [pc, #124]	@ (80061b4 <HAL_RCC_OscConfig+0x504>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d030      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d129      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d122      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800616a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800616c:	4293      	cmp	r3, r2
 800616e:	d119      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	3b01      	subs	r3, #1
 800617e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d10f      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40023800 	.word	0x40023800

080061b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e07b      	b.n	80062c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061da:	d009      	beq.n	80061f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	61da      	str	r2, [r3, #28]
 80061e2:	e005      	b.n	80061f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fa ff4a 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006274:	ea42 0103 	orr.w	r1, r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	f003 0104 	and.w	r1, r3, #4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006296:	f003 0210 	and.w	r2, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	099b      	lsrs	r3, r3, #6
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	099b      	lsrs	r3, r3, #6
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
    return;
 800630e:	e0d7      	b.n	80064c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_SPI_IRQHandler+0x66>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
    return;
 8006330:	e0c6      	b.n	80064c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10c      	bne.n	8006358 <HAL_SPI_IRQHandler+0x8c>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	099b      	lsrs	r3, r3, #6
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80b4 	beq.w	80064c0 <HAL_SPI_IRQHandler+0x1f4>
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80ad 	beq.w	80064c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	099b      	lsrs	r3, r3, #6
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d023      	beq.n	80063ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d011      	beq.n	80063a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	f043 0204 	orr.w	r2, r3, #4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e00b      	b.n	80063ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063a2:	2300      	movs	r3, #0
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	693b      	ldr	r3, [r7, #16]
        return;
 80063b8:	e082      	b.n	80064c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d014      	beq.n	80063f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00c      	beq.n	8006416 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006400:	f043 0208 	orr.w	r2, r3, #8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006408:	2300      	movs	r3, #0
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04f      	beq.n	80064be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800642c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_SPI_IRQHandler+0x17e>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d034      	beq.n	80064b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0203 	bic.w	r2, r2, #3
 8006458:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006466:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006468:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646e:	4618      	mov	r0, r3
 8006470:	f7fc fb0a 	bl	8002a88 <HAL_DMA_Abort_IT>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800648a:	2b00      	cmp	r3, #0
 800648c:	d016      	beq.n	80064bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006492:	4a0d      	ldr	r2, [pc, #52]	@ (80064c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006494:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc faf4 	bl	8002a88 <HAL_DMA_Abort_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80064b2:	e003      	b.n	80064bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f809 	bl	80064cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80064ba:	e000      	b.n	80064be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80064bc:	bf00      	nop
    return;
 80064be:	bf00      	nop
  }
}
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	080064e1 	.word	0x080064e1

080064cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ffe6 	bl	80064cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e03f      	b.n	800659a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa ff32 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2224      	movs	r2, #36	@ 0x24
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800654a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc7b 	bl	8006e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b0ba      	sub	sp, #232	@ 0xe8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_UART_IRQHandler+0x66>
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fb65 	bl	8006cd2 <UART_Receive_IT>
      return;
 8006608:	e256      	b.n	8006ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800660a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80de 	beq.w	80067d0 <HAL_UART_IRQHandler+0x22c>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006624:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80d1 	beq.w	80067d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_UART_IRQHandler+0xae>
 800663a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f043 0201 	orr.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <HAL_UART_IRQHandler+0xd2>
 800665e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f043 0202 	orr.w	r2, r3, #2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_UART_IRQHandler+0xf6>
 8006682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	f043 0204 	orr.w	r2, r3, #4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <HAL_UART_IRQHandler+0x126>
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d105      	bne.n	80066be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f043 0208 	orr.w	r2, r3, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 81ed 	beq.w	8006aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <HAL_UART_IRQHandler+0x14e>
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 faf0 	bl	8006cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b40      	cmp	r3, #64	@ 0x40
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <HAL_UART_IRQHandler+0x17a>
 8006716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671a:	2b00      	cmp	r3, #0
 800671c:	d04f      	beq.n	80067be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9f8 	bl	8006b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d141      	bne.n	80067b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800674c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3314      	adds	r3, #20
 800675a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800675e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800676a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1d9      	bne.n	8006732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d013      	beq.n	80067ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	4a7d      	ldr	r2, [pc, #500]	@ (8006980 <HAL_UART_IRQHandler+0x3dc>)
 800678c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	4618      	mov	r0, r3
 8006794:	f7fc f978 	bl	8002a88 <HAL_DMA_Abort_IT>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00e      	b.n	80067cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f99a 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e00a      	b.n	80067cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f996 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	e006      	b.n	80067cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f992 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80067ca:	e170      	b.n	8006aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	bf00      	nop
    return;
 80067ce:	e16e      	b.n	8006aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	f040 814a 	bne.w	8006a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8143 	beq.w	8006a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 813c 	beq.w	8006a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	f040 80b4 	bne.w	8006984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 8140 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800683a:	429a      	cmp	r2, r3
 800683c:	f080 8139 	bcs.w	8006ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006846:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006852:	f000 8088 	beq.w	8006966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800686c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800688e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800689a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1d9      	bne.n	8006856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3314      	adds	r3, #20
 80068a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e1      	bne.n	80068a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3314      	adds	r3, #20
 80068e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3314      	adds	r3, #20
 80068fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006936:	f023 0310 	bic.w	r3, r3, #16
 800693a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006948:	65ba      	str	r2, [r7, #88]	@ 0x58
 800694a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800694e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e3      	bne.n	8006924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	4618      	mov	r0, r3
 8006962:	f7fc f821 	bl	80029a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800696e:	b29b      	uxth	r3, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	b29b      	uxth	r3, r3
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f8c0 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800697c:	e099      	b.n	8006ab2 <HAL_UART_IRQHandler+0x50e>
 800697e:	bf00      	nop
 8006980:	08006bdb 	.word	0x08006bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800698c:	b29b      	uxth	r3, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 808b 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8086 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80069ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80069d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e3      	bne.n	80069aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	623b      	str	r3, [r7, #32]
   return(result);
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a06:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e3      	bne.n	80069e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a4c:	61fa      	str	r2, [r7, #28]
 8006a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e3      	bne.n	8006a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f848 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a6c:	e023      	b.n	8006ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_UART_IRQHandler+0x4ea>
 8006a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8bb 	bl	8006c02 <UART_Transmit_IT>
    return;
 8006a8c:	e014      	b.n	8006ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x514>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8fb 	bl	8006ca2 <UART_EndTransmit_IT>
    return;
 8006aac:	e004      	b.n	8006ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ab6:	bf00      	nop
  }
}
 8006ab8:	37e8      	adds	r7, #232	@ 0xe8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b095      	sub	sp, #84	@ 0x54
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e5      	bne.n	8006b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d119      	bne.n	8006bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bac:	61ba      	str	r2, [r7, #24]
 8006bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bce:	bf00      	nop
 8006bd0:	3754      	adds	r7, #84	@ 0x54
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff ff77 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b21      	cmp	r3, #33	@ 0x21
 8006c14:	d13e      	bne.n	8006c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c1e:	d114      	bne.n	8006c4a <UART_Transmit_IT+0x48>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	1c9a      	adds	r2, r3, #2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	621a      	str	r2, [r3, #32]
 8006c48:	e008      	b.n	8006c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6211      	str	r1, [r2, #32]
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fefc 	bl	8006ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b08c      	sub	sp, #48	@ 0x30
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b22      	cmp	r3, #34	@ 0x22
 8006ce4:	f040 80ab 	bne.w	8006e3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf0:	d117      	bne.n	8006d22 <UART_Receive_IT+0x50>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d113      	bne.n	8006d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	1c9a      	adds	r2, r3, #2
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d20:	e026      	b.n	8006d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d34:	d007      	beq.n	8006d46 <UART_Receive_IT+0x74>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <UART_Receive_IT+0x82>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e008      	b.n	8006d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d15a      	bne.n	8006e3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0220 	bic.w	r2, r2, #32
 8006d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d135      	bne.n	8006e30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 0310 	bic.w	r3, r3, #16
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dea:	623a      	str	r2, [r7, #32]
 8006dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	69f9      	ldr	r1, [r7, #28]
 8006df0:	6a3a      	ldr	r2, [r7, #32]
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d10a      	bne.n	8006e22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fe67 	bl	8006afc <HAL_UARTEx_RxEventCallback>
 8006e2e:	e002      	b.n	8006e36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fe4f 	bl	8006ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e002      	b.n	8006e40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e000      	b.n	8006e40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3730      	adds	r7, #48	@ 0x30
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e4c:	b0c0      	sub	sp, #256	@ 0x100
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e64:	68d9      	ldr	r1, [r3, #12]
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	ea40 0301 	orr.w	r3, r0, r1
 8006e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ea0:	f021 010c 	bic.w	r1, r1, #12
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec2:	6999      	ldr	r1, [r3, #24]
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	ea40 0301 	orr.w	r3, r0, r1
 8006ece:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b95      	ldr	r3, [pc, #596]	@ (800712c <UART_SetConfig+0x2e4>)
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d011      	beq.n	8006f00 <UART_SetConfig+0xb8>
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b93      	ldr	r3, [pc, #588]	@ (8007130 <UART_SetConfig+0x2e8>)
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d00b      	beq.n	8006f00 <UART_SetConfig+0xb8>
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b91      	ldr	r3, [pc, #580]	@ (8007134 <UART_SetConfig+0x2ec>)
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d005      	beq.n	8006f00 <UART_SetConfig+0xb8>
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b8f      	ldr	r3, [pc, #572]	@ (8007138 <UART_SetConfig+0x2f0>)
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d104      	bne.n	8006f0a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fe fec2 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 8006f04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f08:	e003      	b.n	8006f12 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7fe fea9 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8006f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f1c:	f040 8110 	bne.w	8007140 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	1891      	adds	r1, r2, r2
 8006f38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f3a:	415b      	adcs	r3, r3
 8006f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f42:	4621      	mov	r1, r4
 8006f44:	eb12 0801 	adds.w	r8, r2, r1
 8006f48:	4629      	mov	r1, r5
 8006f4a:	eb43 0901 	adc.w	r9, r3, r1
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f62:	4690      	mov	r8, r2
 8006f64:	4699      	mov	r9, r3
 8006f66:	4623      	mov	r3, r4
 8006f68:	eb18 0303 	adds.w	r3, r8, r3
 8006f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f70:	462b      	mov	r3, r5
 8006f72:	eb49 0303 	adc.w	r3, r9, r3
 8006f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f8e:	460b      	mov	r3, r1
 8006f90:	18db      	adds	r3, r3, r3
 8006f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f94:	4613      	mov	r3, r2
 8006f96:	eb42 0303 	adc.w	r3, r2, r3
 8006f9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fa4:	f7f9 f93c 	bl	8000220 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4b63      	ldr	r3, [pc, #396]	@ (800713c <UART_SetConfig+0x2f4>)
 8006fae:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	011c      	lsls	r4, r3, #4
 8006fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	1891      	adds	r1, r2, r2
 8006fce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006fd0:	415b      	adcs	r3, r3
 8006fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fd8:	4641      	mov	r1, r8
 8006fda:	eb12 0a01 	adds.w	sl, r2, r1
 8006fde:	4649      	mov	r1, r9
 8006fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ff8:	4692      	mov	sl, r2
 8006ffa:	469b      	mov	fp, r3
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8007002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007006:	464b      	mov	r3, r9
 8007008:	eb4b 0303 	adc.w	r3, fp, r3
 800700c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800701c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007024:	460b      	mov	r3, r1
 8007026:	18db      	adds	r3, r3, r3
 8007028:	643b      	str	r3, [r7, #64]	@ 0x40
 800702a:	4613      	mov	r3, r2
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	647b      	str	r3, [r7, #68]	@ 0x44
 8007032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800703a:	f7f9 f8f1 	bl	8000220 <__aeabi_uldivmod>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4611      	mov	r1, r2
 8007044:	4b3d      	ldr	r3, [pc, #244]	@ (800713c <UART_SetConfig+0x2f4>)
 8007046:	fba3 2301 	umull	r2, r3, r3, r1
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	2264      	movs	r2, #100	@ 0x64
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	1acb      	subs	r3, r1, r3
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800705a:	4b38      	ldr	r3, [pc, #224]	@ (800713c <UART_SetConfig+0x2f4>)
 800705c:	fba3 2302 	umull	r2, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007068:	441c      	add	r4, r3
 800706a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007074:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	1891      	adds	r1, r2, r2
 8007082:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007084:	415b      	adcs	r3, r3
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800708c:	4641      	mov	r1, r8
 800708e:	1851      	adds	r1, r2, r1
 8007090:	6339      	str	r1, [r7, #48]	@ 0x30
 8007092:	4649      	mov	r1, r9
 8007094:	414b      	adcs	r3, r1
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070a4:	4659      	mov	r1, fp
 80070a6:	00cb      	lsls	r3, r1, #3
 80070a8:	4651      	mov	r1, sl
 80070aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ae:	4651      	mov	r1, sl
 80070b0:	00ca      	lsls	r2, r1, #3
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	4642      	mov	r2, r8
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070c0:	464b      	mov	r3, r9
 80070c2:	460a      	mov	r2, r1
 80070c4:	eb42 0303 	adc.w	r3, r2, r3
 80070c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070e0:	460b      	mov	r3, r1
 80070e2:	18db      	adds	r3, r3, r3
 80070e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070e6:	4613      	mov	r3, r2
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070f6:	f7f9 f893 	bl	8000220 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <UART_SetConfig+0x2f4>)
 8007100:	fba3 1302 	umull	r1, r3, r3, r2
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	2164      	movs	r1, #100	@ 0x64
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	3332      	adds	r3, #50	@ 0x32
 8007112:	4a0a      	ldr	r2, [pc, #40]	@ (800713c <UART_SetConfig+0x2f4>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	f003 0207 	and.w	r2, r3, #7
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4422      	add	r2, r4
 8007126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007128:	e10a      	b.n	8007340 <UART_SetConfig+0x4f8>
 800712a:	bf00      	nop
 800712c:	40011000 	.word	0x40011000
 8007130:	40011400 	.word	0x40011400
 8007134:	40011800 	.word	0x40011800
 8007138:	40011c00 	.word	0x40011c00
 800713c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007144:	2200      	movs	r2, #0
 8007146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800714a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800714e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007152:	4642      	mov	r2, r8
 8007154:	464b      	mov	r3, r9
 8007156:	1891      	adds	r1, r2, r2
 8007158:	6239      	str	r1, [r7, #32]
 800715a:	415b      	adcs	r3, r3
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
 800715e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007162:	4641      	mov	r1, r8
 8007164:	1854      	adds	r4, r2, r1
 8007166:	4649      	mov	r1, r9
 8007168:	eb43 0501 	adc.w	r5, r3, r1
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	00eb      	lsls	r3, r5, #3
 8007176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800717a:	00e2      	lsls	r2, r4, #3
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	4643      	mov	r3, r8
 8007182:	18e3      	adds	r3, r4, r3
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007188:	464b      	mov	r3, r9
 800718a:	eb45 0303 	adc.w	r3, r5, r3
 800718e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800719e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071ae:	4629      	mov	r1, r5
 80071b0:	008b      	lsls	r3, r1, #2
 80071b2:	4621      	mov	r1, r4
 80071b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b8:	4621      	mov	r1, r4
 80071ba:	008a      	lsls	r2, r1, #2
 80071bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071c0:	f7f9 f82e 	bl	8000220 <__aeabi_uldivmod>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4b60      	ldr	r3, [pc, #384]	@ (800734c <UART_SetConfig+0x504>)
 80071ca:	fba3 2302 	umull	r2, r3, r3, r2
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	011c      	lsls	r4, r3, #4
 80071d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	1891      	adds	r1, r2, r2
 80071ea:	61b9      	str	r1, [r7, #24]
 80071ec:	415b      	adcs	r3, r3
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071f4:	4641      	mov	r1, r8
 80071f6:	1851      	adds	r1, r2, r1
 80071f8:	6139      	str	r1, [r7, #16]
 80071fa:	4649      	mov	r1, r9
 80071fc:	414b      	adcs	r3, r1
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800720c:	4659      	mov	r1, fp
 800720e:	00cb      	lsls	r3, r1, #3
 8007210:	4651      	mov	r1, sl
 8007212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007216:	4651      	mov	r1, sl
 8007218:	00ca      	lsls	r2, r1, #3
 800721a:	4610      	mov	r0, r2
 800721c:	4619      	mov	r1, r3
 800721e:	4603      	mov	r3, r0
 8007220:	4642      	mov	r2, r8
 8007222:	189b      	adds	r3, r3, r2
 8007224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007228:	464b      	mov	r3, r9
 800722a:	460a      	mov	r2, r1
 800722c:	eb42 0303 	adc.w	r3, r2, r3
 8007230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800723e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800724c:	4649      	mov	r1, r9
 800724e:	008b      	lsls	r3, r1, #2
 8007250:	4641      	mov	r1, r8
 8007252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007256:	4641      	mov	r1, r8
 8007258:	008a      	lsls	r2, r1, #2
 800725a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800725e:	f7f8 ffdf 	bl	8000220 <__aeabi_uldivmod>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4611      	mov	r1, r2
 8007268:	4b38      	ldr	r3, [pc, #224]	@ (800734c <UART_SetConfig+0x504>)
 800726a:	fba3 2301 	umull	r2, r3, r3, r1
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	2264      	movs	r2, #100	@ 0x64
 8007272:	fb02 f303 	mul.w	r3, r2, r3
 8007276:	1acb      	subs	r3, r1, r3
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	3332      	adds	r3, #50	@ 0x32
 800727c:	4a33      	ldr	r2, [pc, #204]	@ (800734c <UART_SetConfig+0x504>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007288:	441c      	add	r4, r3
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	673b      	str	r3, [r7, #112]	@ 0x70
 8007292:	677a      	str	r2, [r7, #116]	@ 0x74
 8007294:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	1891      	adds	r1, r2, r2
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	415b      	adcs	r3, r3
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072a8:	4641      	mov	r1, r8
 80072aa:	1851      	adds	r1, r2, r1
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	4649      	mov	r1, r9
 80072b0:	414b      	adcs	r3, r1
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072c0:	4659      	mov	r1, fp
 80072c2:	00cb      	lsls	r3, r1, #3
 80072c4:	4651      	mov	r1, sl
 80072c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ca:	4651      	mov	r1, sl
 80072cc:	00ca      	lsls	r2, r1, #3
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	4642      	mov	r2, r8
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072da:	464b      	mov	r3, r9
 80072dc:	460a      	mov	r2, r1
 80072de:	eb42 0303 	adc.w	r3, r2, r3
 80072e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80072ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072fc:	4649      	mov	r1, r9
 80072fe:	008b      	lsls	r3, r1, #2
 8007300:	4641      	mov	r1, r8
 8007302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007306:	4641      	mov	r1, r8
 8007308:	008a      	lsls	r2, r1, #2
 800730a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800730e:	f7f8 ff87 	bl	8000220 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <UART_SetConfig+0x504>)
 8007318:	fba3 1302 	umull	r1, r3, r3, r2
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	2164      	movs	r1, #100	@ 0x64
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	3332      	adds	r3, #50	@ 0x32
 800732a:	4a08      	ldr	r2, [pc, #32]	@ (800734c <UART_SetConfig+0x504>)
 800732c:	fba2 2303 	umull	r2, r3, r2, r3
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	f003 020f 	and.w	r2, r3, #15
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4422      	add	r2, r4
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734c:	51eb851f 	.word	0x51eb851f

08007350 <__NVIC_SetPriority>:
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800735c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007360:	2b00      	cmp	r3, #0
 8007362:	db0a      	blt.n	800737a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	490c      	ldr	r1, [pc, #48]	@ (800739c <__NVIC_SetPriority+0x4c>)
 800736a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736e:	0112      	lsls	r2, r2, #4
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	440b      	add	r3, r1
 8007374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007378:	e00a      	b.n	8007390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	b2da      	uxtb	r2, r3
 800737e:	4908      	ldr	r1, [pc, #32]	@ (80073a0 <__NVIC_SetPriority+0x50>)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	3b04      	subs	r3, #4
 8007388:	0112      	lsls	r2, r2, #4
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	440b      	add	r3, r1
 800738e:	761a      	strb	r2, [r3, #24]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	e000e100 	.word	0xe000e100
 80073a0:	e000ed00 	.word	0xe000ed00

080073a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073a8:	2100      	movs	r1, #0
 80073aa:	f06f 0004 	mvn.w	r0, #4
 80073ae:	f7ff ffcf 	bl	8007350 <__NVIC_SetPriority>
#endif
}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073be:	f3ef 8305 	mrs	r3, IPSR
 80073c2:	603b      	str	r3, [r7, #0]
  return(result);
 80073c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073ca:	f06f 0305 	mvn.w	r3, #5
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e00c      	b.n	80073ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <osKernelInitialize+0x44>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073da:	4b08      	ldr	r3, [pc, #32]	@ (80073fc <osKernelInitialize+0x44>)
 80073dc:	2201      	movs	r2, #1
 80073de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e002      	b.n	80073ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073ec:	687b      	ldr	r3, [r7, #4]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000568 	.word	0x20000568

08007400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007406:	f3ef 8305 	mrs	r3, IPSR
 800740a:	603b      	str	r3, [r7, #0]
  return(result);
 800740c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007412:	f06f 0305 	mvn.w	r3, #5
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	e010      	b.n	800743c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800741a:	4b0b      	ldr	r3, [pc, #44]	@ (8007448 <osKernelStart+0x48>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d109      	bne.n	8007436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007422:	f7ff ffbf 	bl	80073a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007426:	4b08      	ldr	r3, [pc, #32]	@ (8007448 <osKernelStart+0x48>)
 8007428:	2202      	movs	r2, #2
 800742a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800742c:	f001 fece 	bl	80091cc <vTaskStartScheduler>
      stat = osOK;
 8007430:	2300      	movs	r3, #0
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	e002      	b.n	800743c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007436:	f04f 33ff 	mov.w	r3, #4294967295
 800743a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800743c:	687b      	ldr	r3, [r7, #4]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000568 	.word	0x20000568

0800744c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b08e      	sub	sp, #56	@ 0x38
 8007450:	af04      	add	r7, sp, #16
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745c:	f3ef 8305 	mrs	r3, IPSR
 8007460:	617b      	str	r3, [r7, #20]
  return(result);
 8007462:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007464:	2b00      	cmp	r3, #0
 8007466:	d17e      	bne.n	8007566 <osThreadNew+0x11a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d07b      	beq.n	8007566 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800746e:	2380      	movs	r3, #128	@ 0x80
 8007470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007472:	2318      	movs	r3, #24
 8007474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d045      	beq.n	8007512 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <osThreadNew+0x48>
        name = attr->name;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <osThreadNew+0x6e>
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b38      	cmp	r3, #56	@ 0x38
 80074ac:	d805      	bhi.n	80074ba <osThreadNew+0x6e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <osThreadNew+0x72>
        return (NULL);
 80074ba:	2300      	movs	r3, #0
 80074bc:	e054      	b.n	8007568 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	089b      	lsrs	r3, r3, #2
 80074cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <osThreadNew+0xa8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b5b      	cmp	r3, #91	@ 0x5b
 80074dc:	d90a      	bls.n	80074f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d006      	beq.n	80074f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <osThreadNew+0xa8>
        mem = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e010      	b.n	8007516 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10c      	bne.n	8007516 <osThreadNew+0xca>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <osThreadNew+0xca>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <osThreadNew+0xca>
          mem = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e001      	b.n	8007516 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d110      	bne.n	800753e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007524:	9202      	str	r2, [sp, #8]
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6a3a      	ldr	r2, [r7, #32]
 8007530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 fc6e 	bl	8008e14 <xTaskCreateStatic>
 8007538:	4603      	mov	r3, r0
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	e013      	b.n	8007566 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d110      	bne.n	8007566 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	b29a      	uxth	r2, r3
 8007548:	f107 0310 	add.w	r3, r7, #16
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fcbc 	bl	8008ed4 <xTaskCreate>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d001      	beq.n	8007566 <osThreadNew+0x11a>
            hTask = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007566:	693b      	ldr	r3, [r7, #16]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	@ 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007578:	f3ef 8305 	mrs	r3, IPSR
 800757c:	60bb      	str	r3, [r7, #8]
  return(result);
 800757e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <osDelay+0x1c>
    stat = osErrorISR;
 8007584:	f06f 0305 	mvn.w	r3, #5
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e007      	b.n	800759c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fde2 	bl	8009160 <vTaskDelay>
    }
  }

  return (stat);
 800759c:	68fb      	ldr	r3, [r7, #12]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b088      	sub	sp, #32
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b2:	f3ef 8305 	mrs	r3, IPSR
 80075b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d174      	bne.n	80076a8 <osMutexNew+0x102>
    if (attr != NULL) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <osMutexNew+0x26>
      type = attr->attr_bits;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e001      	b.n	80075d0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <osMutexNew+0x3a>
      rmtx = 1U;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e001      	b.n	80075e4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d15c      	bne.n	80076a8 <osMutexNew+0x102>
      mem = -1;
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d015      	beq.n	8007626 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d006      	beq.n	8007610 <osMutexNew+0x6a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b4f      	cmp	r3, #79	@ 0x4f
 8007608:	d902      	bls.n	8007610 <osMutexNew+0x6a>
          mem = 1;
 800760a:	2301      	movs	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e00c      	b.n	800762a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <osMutexNew+0x84>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <osMutexNew+0x84>
            mem = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e001      	b.n	800762a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d112      	bne.n	8007656 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	4619      	mov	r1, r3
 800763c:	2004      	movs	r0, #4
 800763e:	f000 fce8 	bl	8008012 <xQueueCreateMutexStatic>
 8007642:	61f8      	str	r0, [r7, #28]
 8007644:	e016      	b.n	8007674 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4619      	mov	r1, r3
 800764c:	2001      	movs	r0, #1
 800764e:	f000 fce0 	bl	8008012 <xQueueCreateMutexStatic>
 8007652:	61f8      	str	r0, [r7, #28]
 8007654:	e00e      	b.n	8007674 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007662:	2004      	movs	r0, #4
 8007664:	f000 fcbd 	bl	8007fe2 <xQueueCreateMutex>
 8007668:	61f8      	str	r0, [r7, #28]
 800766a:	e003      	b.n	8007674 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800766c:	2001      	movs	r0, #1
 800766e:	f000 fcb8 	bl	8007fe2 <xQueueCreateMutex>
 8007672:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <osMutexNew+0xee>
        if (attr != NULL) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <osMutexNew+0xe2>
          name = attr->name;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e001      	b.n	800768c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	69f8      	ldr	r0, [r7, #28]
 8007690:	f001 fb38 	bl	8008d04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d006      	beq.n	80076a8 <osMutexNew+0x102>
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80076a8:	69fb      	ldr	r3, [r7, #28]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b08a      	sub	sp, #40	@ 0x28
 80076b6:	af02      	add	r7, sp, #8
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c2:	f3ef 8305 	mrs	r3, IPSR
 80076c6:	613b      	str	r3, [r7, #16]
  return(result);
 80076c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d175      	bne.n	80077ba <osSemaphoreNew+0x108>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d072      	beq.n	80077ba <osSemaphoreNew+0x108>
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d86e      	bhi.n	80077ba <osSemaphoreNew+0x108>
    mem = -1;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <osSemaphoreNew+0x4c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80076f6:	d902      	bls.n	80076fe <osSemaphoreNew+0x4c>
        mem = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e00c      	b.n	8007718 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d108      	bne.n	8007718 <osSemaphoreNew+0x66>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <osSemaphoreNew+0x66>
          mem = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e001      	b.n	8007718 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d04c      	beq.n	80077ba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d128      	bne.n	8007778 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10a      	bne.n	8007742 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2203      	movs	r2, #3
 8007732:	9200      	str	r2, [sp, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	2100      	movs	r1, #0
 8007738:	2001      	movs	r0, #1
 800773a:	f000 fb5d 	bl	8007df8 <xQueueGenericCreateStatic>
 800773e:	61f8      	str	r0, [r7, #28]
 8007740:	e005      	b.n	800774e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007742:	2203      	movs	r2, #3
 8007744:	2100      	movs	r1, #0
 8007746:	2001      	movs	r0, #1
 8007748:	f000 fbd3 	bl	8007ef2 <xQueueGenericCreate>
 800774c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d022      	beq.n	800779a <osSemaphoreNew+0xe8>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01f      	beq.n	800779a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	69f8      	ldr	r0, [r7, #28]
 8007762:	f000 fcdf 	bl	8008124 <xQueueGenericSend>
 8007766:	4603      	mov	r3, r0
 8007768:	2b01      	cmp	r3, #1
 800776a:	d016      	beq.n	800779a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800776c:	69f8      	ldr	r0, [r7, #28]
 800776e:	f001 f97d 	bl	8008a6c <vQueueDelete>
            hSemaphore = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e010      	b.n	800779a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	461a      	mov	r2, r3
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fc5e 	bl	8008048 <xQueueCreateCountingSemaphoreStatic>
 800778c:	61f8      	str	r0, [r7, #28]
 800778e:	e004      	b.n	800779a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fc91 	bl	80080ba <xQueueCreateCountingSemaphore>
 8007798:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00c      	beq.n	80077ba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <osSemaphoreNew+0xfc>
          name = attr->name;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e001      	b.n	80077b2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80077b2:	6979      	ldr	r1, [r7, #20]
 80077b4:	69f8      	ldr	r0, [r7, #28]
 80077b6:	f001 faa5 	bl	8008d04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80077ba:	69fb      	ldr	r3, [r7, #28]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80077dc:	f06f 0303 	mvn.w	r3, #3
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e039      	b.n	8007858 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e4:	f3ef 8305 	mrs	r3, IPSR
 80077e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80077ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d022      	beq.n	8007836 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80077f6:	f06f 0303 	mvn.w	r3, #3
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e02c      	b.n	8007858 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007802:	f107 0308 	add.w	r3, r7, #8
 8007806:	461a      	mov	r2, r3
 8007808:	2100      	movs	r1, #0
 800780a:	6938      	ldr	r0, [r7, #16]
 800780c:	f001 f8ac 	bl	8008968 <xQueueReceiveFromISR>
 8007810:	4603      	mov	r3, r0
 8007812:	2b01      	cmp	r3, #1
 8007814:	d003      	beq.n	800781e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007816:	f06f 0302 	mvn.w	r3, #2
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e01c      	b.n	8007858 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d019      	beq.n	8007858 <osSemaphoreAcquire+0x94>
 8007824:	4b0f      	ldr	r3, [pc, #60]	@ (8007864 <osSemaphoreAcquire+0xa0>)
 8007826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	e010      	b.n	8007858 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6938      	ldr	r0, [r7, #16]
 800783a:	f000 ff85 	bl	8008748 <xQueueSemaphoreTake>
 800783e:	4603      	mov	r3, r0
 8007840:	2b01      	cmp	r3, #1
 8007842:	d009      	beq.n	8007858 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800784a:	f06f 0301 	mvn.w	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e002      	b.n	8007858 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007852:	f06f 0302 	mvn.w	r3, #2
 8007856:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007858:	697b      	ldr	r3, [r7, #20]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800787e:	f06f 0303 	mvn.w	r3, #3
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	e02c      	b.n	80078e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007886:	f3ef 8305 	mrs	r3, IPSR
 800788a:	60fb      	str	r3, [r7, #12]
  return(result);
 800788c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01a      	beq.n	80078c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4619      	mov	r1, r3
 800789c:	6938      	ldr	r0, [r7, #16]
 800789e:	f000 fde1 	bl	8008464 <xQueueGiveFromISR>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d003      	beq.n	80078b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80078a8:	f06f 0302 	mvn.w	r3, #2
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e017      	b.n	80078e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d014      	beq.n	80078e0 <osSemaphoreRelease+0x78>
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <osSemaphoreRelease+0x84>)
 80078b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	e00b      	b.n	80078e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	6938      	ldr	r0, [r7, #16]
 80078d0:	f000 fc28 	bl	8008124 <xQueueGenericSend>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d002      	beq.n	80078e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80078da:	f06f 0302 	mvn.w	r3, #2
 80078de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007900:	f3ef 8305 	mrs	r3, IPSR
 8007904:	613b      	str	r3, [r7, #16]
  return(result);
 8007906:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007908:	2b00      	cmp	r3, #0
 800790a:	d15f      	bne.n	80079cc <osMessageQueueNew+0xdc>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d05c      	beq.n	80079cc <osMessageQueueNew+0xdc>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d059      	beq.n	80079cc <osMessageQueueNew+0xdc>
    mem = -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d029      	beq.n	8007978 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d012      	beq.n	8007952 <osMessageQueueNew+0x62>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b4f      	cmp	r3, #79	@ 0x4f
 8007932:	d90e      	bls.n	8007952 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <osMessageQueueNew+0x62>
        mem = 1;
 800794c:	2301      	movs	r3, #1
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	e014      	b.n	800797c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <osMessageQueueNew+0x8c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10c      	bne.n	800797c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <osMessageQueueNew+0x8c>
          mem = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	e001      	b.n	800797c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10b      	bne.n	800799a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2100      	movs	r1, #0
 800798c:	9100      	str	r1, [sp, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fa31 	bl	8007df8 <xQueueGenericCreateStatic>
 8007996:	61f8      	str	r0, [r7, #28]
 8007998:	e008      	b.n	80079ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80079a0:	2200      	movs	r2, #0
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 faa4 	bl	8007ef2 <xQueueGenericCreate>
 80079aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e001      	b.n	80079c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	69f8      	ldr	r0, [r7, #28]
 80079c8:	f001 f99c 	bl	8008d04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80079cc:	69fb      	ldr	r3, [r7, #28]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f0:	f3ef 8305 	mrs	r3, IPSR
 80079f4:	617b      	str	r3, [r7, #20]
  return(result);
 80079f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d028      	beq.n	8007a4e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <osMessageQueuePut+0x36>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <osMessageQueuePut+0x36>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007a0e:	f06f 0303 	mvn.w	r3, #3
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e038      	b.n	8007a88 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a1a:	f107 0210 	add.w	r2, r7, #16
 8007a1e:	2300      	movs	r3, #0
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	69b8      	ldr	r0, [r7, #24]
 8007a24:	f000 fc80 	bl	8008328 <xQueueGenericSendFromISR>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d003      	beq.n	8007a36 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007a2e:	f06f 0302 	mvn.w	r3, #2
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e028      	b.n	8007a88 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d025      	beq.n	8007a88 <osMessageQueuePut+0xb0>
 8007a3c:	4b15      	ldr	r3, [pc, #84]	@ (8007a94 <osMessageQueuePut+0xbc>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	e01c      	b.n	8007a88 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <osMessageQueuePut+0x82>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d103      	bne.n	8007a62 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a5a:	f06f 0303 	mvn.w	r3, #3
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e012      	b.n	8007a88 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a62:	2300      	movs	r3, #0
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	69b8      	ldr	r0, [r7, #24]
 8007a6a:	f000 fb5b 	bl	8008124 <xQueueGenericSend>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d009      	beq.n	8007a88 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007a7a:	f06f 0301 	mvn.w	r3, #1
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e002      	b.n	8007a88 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a82:	f06f 0302 	mvn.w	r3, #2
 8007a86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a88:	69fb      	ldr	r3, [r7, #28]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	e000ed04 	.word	0xe000ed04

08007a98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d028      	beq.n	8007b0c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <osMessageQueueGet+0x34>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <osMessageQueueGet+0x34>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007acc:	f06f 0303 	mvn.w	r3, #3
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	e037      	b.n	8007b44 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ad8:	f107 0310 	add.w	r3, r7, #16
 8007adc:	461a      	mov	r2, r3
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	69b8      	ldr	r0, [r7, #24]
 8007ae2:	f000 ff41 	bl	8008968 <xQueueReceiveFromISR>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d003      	beq.n	8007af4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007aec:	f06f 0302 	mvn.w	r3, #2
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	e027      	b.n	8007b44 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d024      	beq.n	8007b44 <osMessageQueueGet+0xac>
 8007afa:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <osMessageQueueGet+0xb8>)
 8007afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	e01b      	b.n	8007b44 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <osMessageQueueGet+0x80>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007b18:	f06f 0303 	mvn.w	r3, #3
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e011      	b.n	8007b44 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	69b8      	ldr	r0, [r7, #24]
 8007b26:	f000 fd2d 	bl	8008584 <xQueueReceive>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d009      	beq.n	8007b44 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007b36:	f06f 0301 	mvn.w	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	e002      	b.n	8007b44 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007b3e:	f06f 0302 	mvn.w	r3, #2
 8007b42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007b44:	69fb      	ldr	r3, [r7, #28]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a07      	ldr	r2, [pc, #28]	@ (8007b80 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4a06      	ldr	r2, [pc, #24]	@ (8007b84 <vApplicationGetIdleTaskMemory+0x30>)
 8007b6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2280      	movs	r2, #128	@ 0x80
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	2000056c 	.word	0x2000056c
 8007b84:	200005c8 	.word	0x200005c8

08007b88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a07      	ldr	r2, [pc, #28]	@ (8007bb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4a06      	ldr	r2, [pc, #24]	@ (8007bb8 <vApplicationGetTimerTaskMemory+0x30>)
 8007b9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ba6:	601a      	str	r2, [r3, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	200007c8 	.word	0x200007c8
 8007bb8:	20000824 	.word	0x20000824

08007bbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f103 0208 	add.w	r2, r3, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f103 0208 	add.w	r2, r3, #8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f103 0208 	add.w	r2, r3, #8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d103      	bne.n	8007c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e00c      	b.n	8007c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3308      	adds	r3, #8
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e002      	b.n	8007c8c <vListInsert+0x2e>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d2f6      	bcs.n	8007c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6892      	ldr	r2, [r2, #8]
 8007ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6852      	ldr	r2, [r2, #4]
 8007cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d103      	bne.n	8007d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	1e5a      	subs	r2, r3, #1
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10b      	bne.n	8007d50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	e7fd      	b.n	8007d4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d50:	f002 fcfa 	bl	800a748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d80:	3b01      	subs	r3, #1
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d86:	fb01 f303 	mul.w	r3, r1, r3
 8007d8a:	441a      	add	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22ff      	movs	r2, #255	@ 0xff
 8007d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	22ff      	movs	r2, #255	@ 0xff
 8007d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d114      	bne.n	8007dd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01a      	beq.n	8007de4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3310      	adds	r3, #16
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fc98 	bl	80096e8 <xTaskRemoveFromEventList>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <xQueueGenericReset+0xd0>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	e009      	b.n	8007de4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3310      	adds	r3, #16
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fef1 	bl	8007bbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3324      	adds	r3, #36	@ 0x24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff feec 	bl	8007bbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007de4:	f002 fce2 	bl	800a7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007de8:	2301      	movs	r3, #1
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08e      	sub	sp, #56	@ 0x38
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10b      	bne.n	8007e42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	e7fd      	b.n	8007e3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <xQueueGenericCreateStatic+0x56>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <xQueueGenericCreateStatic+0x5a>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <xQueueGenericCreateStatic+0x5c>
 8007e52:	2300      	movs	r3, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10b      	bne.n	8007e70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	623b      	str	r3, [r7, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	e7fd      	b.n	8007e6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <xQueueGenericCreateStatic+0x84>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <xQueueGenericCreateStatic+0x88>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <xQueueGenericCreateStatic+0x8a>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	61fb      	str	r3, [r7, #28]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e9e:	2350      	movs	r3, #80	@ 0x50
 8007ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b50      	cmp	r3, #80	@ 0x50
 8007ea6:	d00b      	beq.n	8007ec0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	61bb      	str	r3, [r7, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00d      	beq.n	8007ee8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f840 	bl	8007f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3730      	adds	r7, #48	@ 0x30
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b08a      	sub	sp, #40	@ 0x28
 8007ef6:	af02      	add	r7, sp, #8
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	4613      	mov	r3, r2
 8007efe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	613b      	str	r3, [r7, #16]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3350      	adds	r3, #80	@ 0x50
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f002 fd2d 	bl	800a98c <pvPortMalloc>
 8007f32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3350      	adds	r3, #80	@ 0x50
 8007f42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f4c:	79fa      	ldrb	r2, [r7, #7]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f805 	bl	8007f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d103      	bne.n	8007f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e002      	b.n	8007f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f96:	2101      	movs	r1, #1
 8007f98:	69b8      	ldr	r0, [r7, #24]
 8007f9a:	f7ff fec3 	bl	8007d24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00e      	beq.n	8007fda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f8a5 	bl	8008124 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fec:	2301      	movs	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6939      	ldr	r1, [r7, #16]
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f7ff ff79 	bl	8007ef2 <xQueueGenericCreate>
 8008000:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff ffd3 	bl	8007fae <prvInitialiseMutex>

		return xNewQueue;
 8008008:	68fb      	ldr	r3, [r7, #12]
	}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af02      	add	r7, sp, #8
 8008018:	4603      	mov	r3, r0
 800801a:	6039      	str	r1, [r7, #0]
 800801c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800801e:	2301      	movs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	2300      	movs	r3, #0
 8008024:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2200      	movs	r2, #0
 800802e:	6939      	ldr	r1, [r7, #16]
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f7ff fee1 	bl	8007df8 <xQueueGenericCreateStatic>
 8008036:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff ffb8 	bl	8007fae <prvInitialiseMutex>

		return xNewQueue;
 800803e:	68fb      	ldr	r3, [r7, #12]
	}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08a      	sub	sp, #40	@ 0x28
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61bb      	str	r3, [r7, #24]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d90b      	bls.n	8008092 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	617b      	str	r3, [r7, #20]
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008092:	2302      	movs	r3, #2
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	2100      	movs	r1, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff feab 	bl	8007df8 <xQueueGenericCreateStatic>
 80080a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080b0:	69fb      	ldr	r3, [r7, #28]
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	613b      	str	r3, [r7, #16]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d90b      	bls.n	8008102 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	60fb      	str	r3, [r7, #12]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008102:	2202      	movs	r2, #2
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fef3 	bl	8007ef2 <xQueueGenericCreate>
 800810c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800811a:	697b      	ldr	r3, [r7, #20]
	}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	@ 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <xQueueGenericSend+0x34>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <xQueueGenericSend+0x42>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xQueueGenericSend+0x46>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueGenericSend+0x48>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xQueueGenericSend+0x64>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d103      	bne.n	8008196 <xQueueGenericSend+0x72>
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <xQueueGenericSend+0x76>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueGenericSend+0x78>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <xQueueGenericSend+0x94>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	623b      	str	r3, [r7, #32]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b8:	f001 fc56 	bl	8009a68 <xTaskGetSchedulerState>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <xQueueGenericSend+0xa4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <xQueueGenericSend+0xa8>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <xQueueGenericSend+0xaa>
 80081cc:	2300      	movs	r3, #0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <xQueueGenericSend+0xc6>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	61fb      	str	r3, [r7, #28]
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081ea:	f002 faad 	bl	800a748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d302      	bcc.n	8008200 <xQueueGenericSend+0xdc>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d129      	bne.n	8008254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008206:	f000 fc6d 	bl	8008ae4 <prvCopyDataToQueue>
 800820a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	3324      	adds	r3, #36	@ 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fa65 	bl	80096e8 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d013      	beq.n	800824c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b3f      	ldr	r3, [pc, #252]	@ (8008324 <xQueueGenericSend+0x200>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	e00a      	b.n	800824c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800823c:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <xQueueGenericSend+0x200>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800824c:	f002 faae 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 8008250:	2301      	movs	r3, #1
 8008252:	e063      	b.n	800831c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800825a:	f002 faa7 	bl	800a7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800825e:	2300      	movs	r3, #0
 8008260:	e05c      	b.n	800831c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008268:	f107 0314 	add.w	r3, r7, #20
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa9f 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008272:	2301      	movs	r3, #1
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008276:	f002 fa99 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800827a:	f001 f80f 	bl	800929c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800827e:	f002 fa63 	bl	800a748 <vPortEnterCritical>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008288:	b25b      	sxtb	r3, r3
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d103      	bne.n	8008298 <xQueueGenericSend+0x174>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d103      	bne.n	80082ae <xQueueGenericSend+0x18a>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ae:	f002 fa7d 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082b2:	1d3a      	adds	r2, r7, #4
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fa8e 	bl	80097dc <xTaskCheckForTimeOut>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d124      	bne.n	8008310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c8:	f000 fd04 	bl	8008cd4 <prvIsQueueFull>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d018      	beq.n	8008304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	3310      	adds	r3, #16
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f9b2 	bl	8009644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082e2:	f000 fc8f 	bl	8008c04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082e6:	f000 ffe7 	bl	80092b8 <xTaskResumeAll>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f af7c 	bne.w	80081ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <xQueueGenericSend+0x200>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	e772      	b.n	80081ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008306:	f000 fc7d 	bl	8008c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800830a:	f000 ffd5 	bl	80092b8 <xTaskResumeAll>
 800830e:	e76c      	b.n	80081ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008312:	f000 fc77 	bl	8008c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008316:	f000 ffcf 	bl	80092b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800831c:	4618      	mov	r0, r3
 800831e:	3738      	adds	r7, #56	@ 0x38
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b090      	sub	sp, #64	@ 0x40
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <xQueueGenericSendFromISR+0x3e>
 800835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <xQueueGenericSendFromISR+0x42>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSendFromISR+0x44>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d103      	bne.n	8008396 <xQueueGenericSendFromISR+0x6e>
 800838e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <xQueueGenericSendFromISR+0x72>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <xQueueGenericSendFromISR+0x74>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083b8:	f002 faa6 	bl	800a908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083bc:	f3ef 8211 	mrs	r2, BASEPRI
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	61fa      	str	r2, [r7, #28]
 80083d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d302      	bcc.n	80083ea <xQueueGenericSendFromISR+0xc2>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d12f      	bne.n	800844a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008400:	f000 fb70 	bl	8008ae4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008404:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d112      	bne.n	8008434 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	3324      	adds	r3, #36	@ 0x24
 800841a:	4618      	mov	r0, r3
 800841c:	f001 f964 	bl	80096e8 <xTaskRemoveFromEventList>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e007      	b.n	8008444 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008438:	3301      	adds	r3, #1
 800843a:	b2db      	uxtb	r3, r3
 800843c:	b25a      	sxtb	r2, r3
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008444:	2301      	movs	r3, #1
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008448:	e001      	b.n	800844e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800844a:	2300      	movs	r3, #0
 800844c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800845a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800845c:	4618      	mov	r0, r3
 800845e:	3740      	adds	r7, #64	@ 0x40
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	@ 0x38
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	623b      	str	r3, [r7, #32]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61fb      	str	r3, [r7, #28]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <xQueueGiveFromISR+0x5c>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <xQueueGiveFromISR+0x60>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <xQueueGiveFromISR+0x62>
 80084c4:	2300      	movs	r3, #0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	61bb      	str	r3, [r7, #24]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084e2:	f002 fa11 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 80084e6:	f3ef 8211 	mrs	r2, BASEPRI
 80084ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	617a      	str	r2, [r7, #20]
 80084fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80084fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008500:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800850e:	429a      	cmp	r2, r3
 8008510:	d22b      	bcs.n	800856a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008522:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008524:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d112      	bne.n	8008554 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	3324      	adds	r3, #36	@ 0x24
 800853a:	4618      	mov	r0, r3
 800853c:	f001 f8d4 	bl	80096e8 <xTaskRemoveFromEventList>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e007      	b.n	8008564 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008558:	3301      	adds	r3, #1
 800855a:	b2db      	uxtb	r3, r3
 800855c:	b25a      	sxtb	r2, r3
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008564:	2301      	movs	r3, #1
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	e001      	b.n	800856e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800856a:	2300      	movs	r3, #0
 800856c:	637b      	str	r3, [r7, #52]	@ 0x34
 800856e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008570:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f383 8811 	msr	BASEPRI, r3
}
 8008578:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800857a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800857c:	4618      	mov	r0, r3
 800857e:	3738      	adds	r7, #56	@ 0x38
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08c      	sub	sp, #48	@ 0x30
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008590:	2300      	movs	r3, #0
 8008592:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <xQueueReceive+0x32>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	623b      	str	r3, [r7, #32]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d103      	bne.n	80085c4 <xQueueReceive+0x40>
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <xQueueReceive+0x44>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <xQueueReceive+0x46>
 80085c8:	2300      	movs	r3, #0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10b      	bne.n	80085e6 <xQueueReceive+0x62>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	61fb      	str	r3, [r7, #28]
}
 80085e0:	bf00      	nop
 80085e2:	bf00      	nop
 80085e4:	e7fd      	b.n	80085e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085e6:	f001 fa3f 	bl	8009a68 <xTaskGetSchedulerState>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <xQueueReceive+0x72>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <xQueueReceive+0x76>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <xQueueReceive+0x78>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10b      	bne.n	8008618 <xQueueReceive+0x94>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	61bb      	str	r3, [r7, #24]
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	e7fd      	b.n	8008614 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008618:	f002 f896 	bl	800a748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01f      	beq.n	8008668 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800862c:	f000 fac4 	bl	8008bb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	1e5a      	subs	r2, r3, #1
 8008634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008636:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00f      	beq.n	8008660 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	3310      	adds	r3, #16
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f84f 	bl	80096e8 <xTaskRemoveFromEventList>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008650:	4b3c      	ldr	r3, [pc, #240]	@ (8008744 <xQueueReceive+0x1c0>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008660:	f002 f8a4 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 8008664:	2301      	movs	r3, #1
 8008666:	e069      	b.n	800873c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800866e:	f002 f89d 	bl	800a7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008672:	2300      	movs	r3, #0
 8008674:	e062      	b.n	800873c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800867c:	f107 0310 	add.w	r3, r7, #16
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f895 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008686:	2301      	movs	r3, #1
 8008688:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800868a:	f002 f88f 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800868e:	f000 fe05 	bl	800929c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008692:	f002 f859 	bl	800a748 <vPortEnterCritical>
 8008696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800869c:	b25b      	sxtb	r3, r3
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d103      	bne.n	80086ac <xQueueReceive+0x128>
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b2:	b25b      	sxtb	r3, r3
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d103      	bne.n	80086c2 <xQueueReceive+0x13e>
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c2:	f002 f873 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086c6:	1d3a      	adds	r2, r7, #4
 80086c8:	f107 0310 	add.w	r3, r7, #16
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 f884 	bl	80097dc <xTaskCheckForTimeOut>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d123      	bne.n	8008722 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086dc:	f000 fae4 	bl	8008ca8 <prvIsQueueEmpty>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d017      	beq.n	8008716 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e8:	3324      	adds	r3, #36	@ 0x24
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 ffa8 	bl	8009644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f6:	f000 fa85 	bl	8008c04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fa:	f000 fddd 	bl	80092b8 <xTaskResumeAll>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d189      	bne.n	8008618 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008704:	4b0f      	ldr	r3, [pc, #60]	@ (8008744 <xQueueReceive+0x1c0>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	e780      	b.n	8008618 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008718:	f000 fa74 	bl	8008c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800871c:	f000 fdcc 	bl	80092b8 <xTaskResumeAll>
 8008720:	e77a      	b.n	8008618 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008724:	f000 fa6e 	bl	8008c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008728:	f000 fdc6 	bl	80092b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800872c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800872e:	f000 fabb 	bl	8008ca8 <prvIsQueueEmpty>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	f43f af6f 	beq.w	8008618 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800873a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800873c:	4618      	mov	r0, r3
 800873e:	3730      	adds	r7, #48	@ 0x30
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08e      	sub	sp, #56	@ 0x38
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800875a:	2300      	movs	r3, #0
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	623b      	str	r3, [r7, #32]
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	61fb      	str	r3, [r7, #28]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800879c:	f001 f964 	bl	8009a68 <xTaskGetSchedulerState>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <xQueueSemaphoreTake+0x64>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <xQueueSemaphoreTake+0x68>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <xQueueSemaphoreTake+0x6a>
 80087b0:	2300      	movs	r3, #0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	61bb      	str	r3, [r7, #24]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ce:	f001 ffbb 	bl	800a748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d024      	beq.n	8008828 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	1e5a      	subs	r2, r3, #1
 80087e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087ee:	f001 fab5 	bl	8009d5c <pvTaskIncrementMutexHeldCount>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00f      	beq.n	8008820 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	3310      	adds	r3, #16
 8008804:	4618      	mov	r0, r3
 8008806:	f000 ff6f 	bl	80096e8 <xTaskRemoveFromEventList>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008810:	4b54      	ldr	r3, [pc, #336]	@ (8008964 <xQueueSemaphoreTake+0x21c>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008820:	f001 ffc4 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 8008824:	2301      	movs	r3, #1
 8008826:	e098      	b.n	800895a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d112      	bne.n	8008854 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	617b      	str	r3, [r7, #20]
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	e7fd      	b.n	8008848 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800884c:	f001 ffae 	bl	800a7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008850:	2300      	movs	r3, #0
 8008852:	e082      	b.n	800895a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800885a:	f107 030c 	add.w	r3, r7, #12
 800885e:	4618      	mov	r0, r3
 8008860:	f000 ffa6 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008864:	2301      	movs	r3, #1
 8008866:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008868:	f001 ffa0 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800886c:	f000 fd16 	bl	800929c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008870:	f001 ff6a 	bl	800a748 <vPortEnterCritical>
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800887a:	b25b      	sxtb	r3, r3
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d103      	bne.n	800888a <xQueueSemaphoreTake+0x142>
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800888a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d103      	bne.n	80088a0 <xQueueSemaphoreTake+0x158>
 8008898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088a0:	f001 ff84 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a4:	463a      	mov	r2, r7
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 ff95 	bl	80097dc <xTaskCheckForTimeOut>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d132      	bne.n	800891e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80088ba:	f000 f9f5 	bl	8008ca8 <prvIsQueueEmpty>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d026      	beq.n	8008912 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80088cc:	f001 ff3c 	bl	800a748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f8e5 	bl	8009aa4 <xTaskPriorityInherit>
 80088da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80088dc:	f001 ff66 	bl	800a7ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	3324      	adds	r3, #36	@ 0x24
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 feab 	bl	8009644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80088f0:	f000 f988 	bl	8008c04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088f4:	f000 fce0 	bl	80092b8 <xTaskResumeAll>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f47f af67 	bne.w	80087ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008900:	4b18      	ldr	r3, [pc, #96]	@ (8008964 <xQueueSemaphoreTake+0x21c>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	e75d      	b.n	80087ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008912:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008914:	f000 f976 	bl	8008c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008918:	f000 fcce 	bl	80092b8 <xTaskResumeAll>
 800891c:	e757      	b.n	80087ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800891e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008920:	f000 f970 	bl	8008c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008924:	f000 fcc8 	bl	80092b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008928:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800892a:	f000 f9bd 	bl	8008ca8 <prvIsQueueEmpty>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	f43f af4c 	beq.w	80087ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00d      	beq.n	8008958 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800893c:	f001 ff04 	bl	800a748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008942:	f000 f8b7 	bl	8008ab4 <prvGetDisinheritPriorityAfterTimeout>
 8008946:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800894e:	4618      	mov	r0, r3
 8008950:	f001 f980 	bl	8009c54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008954:	f001 ff2a 	bl	800a7ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008958:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800895a:	4618      	mov	r0, r3
 800895c:	3738      	adds	r7, #56	@ 0x38
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	e000ed04 	.word	0xe000ed04

08008968 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	@ 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	623b      	str	r3, [r7, #32]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <xQueueReceiveFromISR+0x3c>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <xQueueReceiveFromISR+0x40>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <xQueueReceiveFromISR+0x42>
 80089a8:	2300      	movs	r3, #0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10b      	bne.n	80089c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	61fb      	str	r3, [r7, #28]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089c6:	f001 ff9f 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 80089ca:	f3ef 8211 	mrs	r2, BASEPRI
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	61ba      	str	r2, [r7, #24]
 80089e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02f      	beq.n	8008a52 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a00:	f000 f8da 	bl	8008bb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	1e5a      	subs	r2, r3, #1
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d112      	bne.n	8008a3c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d016      	beq.n	8008a4c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	3310      	adds	r3, #16
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fe60 	bl	80096e8 <xTaskRemoveFromEventList>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00e      	beq.n	8008a4c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e007      	b.n	8008a4c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a40:	3301      	adds	r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	b25a      	sxtb	r2, r3
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a50:	e001      	b.n	8008a56 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f383 8811 	msr	BASEPRI, r3
}
 8008a60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3738      	adds	r7, #56	@ 0x38
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <vQueueDelete+0x2a>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60bb      	str	r3, [r7, #8]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f95e 	bl	8008d58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d102      	bne.n	8008aac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f002 f83e 	bl	800ab28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008aac:	bf00      	nop
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e001      	b.n	8008ad6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10d      	bne.n	8008b1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d14d      	bne.n	8008ba6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 f830 	bl	8009b74 <xTaskPriorityDisinherit>
 8008b14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
 8008b1c:	e043      	b.n	8008ba6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d119      	bne.n	8008b58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6858      	ldr	r0, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	f002 f946 	bl	800adc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d32b      	bcc.n	8008ba6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	e026      	b.n	8008ba6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68d8      	ldr	r0, [r3, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b60:	461a      	mov	r2, r3
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	f002 f92c 	bl	800adc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b70:	425b      	negs	r3, r3
 8008b72:	441a      	add	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d207      	bcs.n	8008b94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	441a      	add	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d105      	bne.n	8008ba6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008bae:	697b      	ldr	r3, [r7, #20]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d018      	beq.n	8008bfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	441a      	add	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d303      	bcc.n	8008bec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68d9      	ldr	r1, [r3, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6838      	ldr	r0, [r7, #0]
 8008bf8:	f002 f8e2 	bl	800adc0 <memcpy>
	}
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c0c:	f001 fd9c 	bl	800a748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c18:	e011      	b.n	8008c3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d012      	beq.n	8008c48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3324      	adds	r3, #36	@ 0x24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fd5e 	bl	80096e8 <xTaskRemoveFromEventList>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c32:	f000 fe37 	bl	80098a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dce9      	bgt.n	8008c1a <prvUnlockQueue+0x16>
 8008c46:	e000      	b.n	8008c4a <prvUnlockQueue+0x46>
					break;
 8008c48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	22ff      	movs	r2, #255	@ 0xff
 8008c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c52:	f001 fdab 	bl	800a7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c56:	f001 fd77 	bl	800a748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c62:	e011      	b.n	8008c88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d012      	beq.n	8008c92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3310      	adds	r3, #16
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fd39 	bl	80096e8 <xTaskRemoveFromEventList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c7c:	f000 fe12 	bl	80098a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dce9      	bgt.n	8008c64 <prvUnlockQueue+0x60>
 8008c90:	e000      	b.n	8008c94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	22ff      	movs	r2, #255	@ 0xff
 8008c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c9c:	f001 fd86 	bl	800a7ac <vPortExitCritical>
}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cb0:	f001 fd4a 	bl	800a748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e001      	b.n	8008cc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cc6:	f001 fd71 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cdc:	f001 fd34 	bl	800a748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d102      	bne.n	8008cf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e001      	b.n	8008cf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cf6:	f001 fd59 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	e014      	b.n	8008d3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d14:	4a0f      	ldr	r2, [pc, #60]	@ (8008d54 <vQueueAddToRegistry+0x50>)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d20:	490c      	ldr	r1, [pc, #48]	@ (8008d54 <vQueueAddToRegistry+0x50>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d54 <vQueueAddToRegistry+0x50>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	4413      	add	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d36:	e006      	b.n	8008d46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b07      	cmp	r3, #7
 8008d42:	d9e7      	bls.n	8008d14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000c24 	.word	0x20000c24

08008d58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e016      	b.n	8008d94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d66:	4a10      	ldr	r2, [pc, #64]	@ (8008da8 <vQueueUnregisterQueue+0x50>)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d10b      	bne.n	8008d8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d76:	4a0c      	ldr	r2, [pc, #48]	@ (8008da8 <vQueueUnregisterQueue+0x50>)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d80:	4a09      	ldr	r2, [pc, #36]	@ (8008da8 <vQueueUnregisterQueue+0x50>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	4413      	add	r3, r2
 8008d88:	2200      	movs	r2, #0
 8008d8a:	605a      	str	r2, [r3, #4]
				break;
 8008d8c:	e006      	b.n	8008d9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3301      	adds	r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	d9e5      	bls.n	8008d66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	20000c24 	.word	0x20000c24

08008dac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dbc:	f001 fcc4 	bl	800a748 <vPortEnterCritical>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d103      	bne.n	8008dd6 <vQueueWaitForMessageRestricted+0x2a>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ddc:	b25b      	sxtb	r3, r3
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de2:	d103      	bne.n	8008dec <vQueueWaitForMessageRestricted+0x40>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dec:	f001 fcde 	bl	800a7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3324      	adds	r3, #36	@ 0x24
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68b9      	ldr	r1, [r7, #8]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fc45 	bl	8009690 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	f7ff fefc 	bl	8008c04 <prvUnlockQueue>
	}
 8008e0c:	bf00      	nop
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	@ 0x38
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10b      	bne.n	8008e40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	623b      	str	r3, [r7, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	61fb      	str	r3, [r7, #28]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e5e:	235c      	movs	r3, #92	@ 0x5c
 8008e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e66:	d00b      	beq.n	8008e80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	61bb      	str	r3, [r7, #24]
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	e7fd      	b.n	8008e7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01e      	beq.n	8008ec6 <xTaskCreateStatic+0xb2>
 8008e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01b      	beq.n	8008ec6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	9302      	str	r3, [sp, #8]
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f850 	bl	8008f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ebe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ec0:	f000 f8de 	bl	8009080 <prvAddNewTaskToReadyList>
 8008ec4:	e001      	b.n	8008eca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008eca:	697b      	ldr	r3, [r7, #20]
	}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3728      	adds	r7, #40	@ 0x28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08c      	sub	sp, #48	@ 0x30
 8008ed8:	af04      	add	r7, sp, #16
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 fd4f 	bl	800a98c <pvPortMalloc>
 8008eee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00e      	beq.n	8008f14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ef6:	205c      	movs	r0, #92	@ 0x5c
 8008ef8:	f001 fd48 	bl	800a98c <pvPortMalloc>
 8008efc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f0a:	e005      	b.n	8008f18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f0c:	6978      	ldr	r0, [r7, #20]
 8008f0e:	f001 fe0b 	bl	800ab28 <vPortFree>
 8008f12:	e001      	b.n	8008f18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d017      	beq.n	8008f4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	9302      	str	r3, [sp, #8]
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f80e 	bl	8008f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f42:	69f8      	ldr	r0, [r7, #28]
 8008f44:	f000 f89c 	bl	8009080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	61bb      	str	r3, [r7, #24]
 8008f4c:	e002      	b.n	8008f54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f54:	69bb      	ldr	r3, [r7, #24]
	}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b088      	sub	sp, #32
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	461a      	mov	r2, r3
 8008f76:	21a5      	movs	r1, #165	@ 0xa5
 8008f78:	f001 fef6 	bl	800ad68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f86:	3b01      	subs	r3, #1
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	f023 0307 	bic.w	r3, r3, #7
 8008f94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	617b      	str	r3, [r7, #20]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01f      	beq.n	8008ffe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	e012      	b.n	8008fea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	7819      	ldrb	r1, [r3, #0]
 8008fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3334      	adds	r3, #52	@ 0x34
 8008fd4:	460a      	mov	r2, r1
 8008fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2b0f      	cmp	r3, #15
 8008fee:	d9e9      	bls.n	8008fc4 <prvInitialiseNewTask+0x66>
 8008ff0:	e000      	b.n	8008ff4 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ffc:	e003      	b.n	8009006 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	2b37      	cmp	r3, #55	@ 0x37
 800900a:	d901      	bls.n	8009010 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800900c:	2337      	movs	r3, #55	@ 0x37
 800900e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009014:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800901a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2200      	movs	r2, #0
 8009020:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	3304      	adds	r3, #4
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fde8 	bl	8007bfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	3318      	adds	r3, #24
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe fde3 	bl	8007bfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800903a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	2200      	movs	r2, #0
 8009050:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	68f9      	ldr	r1, [r7, #12]
 800905e:	69b8      	ldr	r0, [r7, #24]
 8009060:	f001 fa3e 	bl	800a4e0 <pxPortInitialiseStack>
 8009064:	4602      	mov	r2, r0
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009076:	bf00      	nop
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009088:	f001 fb5e 	bl	800a748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800908c:	4b2d      	ldr	r3, [pc, #180]	@ (8009144 <prvAddNewTaskToReadyList+0xc4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	4a2c      	ldr	r2, [pc, #176]	@ (8009144 <prvAddNewTaskToReadyList+0xc4>)
 8009094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009096:	4b2c      	ldr	r3, [pc, #176]	@ (8009148 <prvAddNewTaskToReadyList+0xc8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800909e:	4a2a      	ldr	r2, [pc, #168]	@ (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a4:	4b27      	ldr	r3, [pc, #156]	@ (8009144 <prvAddNewTaskToReadyList+0xc4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d110      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090ac:	f000 fc1e 	bl	80098ec <prvInitialiseTaskLists>
 80090b0:	e00d      	b.n	80090ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090b2:	4b26      	ldr	r3, [pc, #152]	@ (800914c <prvAddNewTaskToReadyList+0xcc>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ba:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d802      	bhi.n	80090ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ce:	4b20      	ldr	r3, [pc, #128]	@ (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	4a1e      	ldr	r2, [pc, #120]	@ (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d903      	bls.n	80090f4 <prvAddNewTaskToReadyList+0x74>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	4a18      	ldr	r2, [pc, #96]	@ (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4a15      	ldr	r2, [pc, #84]	@ (8009158 <prvAddNewTaskToReadyList+0xd8>)
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fd83 	bl	8007c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009110:	f001 fb4c 	bl	800a7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009114:	4b0d      	ldr	r3, [pc, #52]	@ (800914c <prvAddNewTaskToReadyList+0xcc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00e      	beq.n	800913a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <prvAddNewTaskToReadyList+0xc8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009126:	429a      	cmp	r2, r3
 8009128:	d207      	bcs.n	800913a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800912a:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <prvAddNewTaskToReadyList+0xdc>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20001138 	.word	0x20001138
 8009148:	20000c64 	.word	0x20000c64
 800914c:	20001144 	.word	0x20001144
 8009150:	20001154 	.word	0x20001154
 8009154:	20001140 	.word	0x20001140
 8009158:	20000c68 	.word	0x20000c68
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d018      	beq.n	80091a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009172:	4b14      	ldr	r3, [pc, #80]	@ (80091c4 <vTaskDelay+0x64>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <vTaskDelay+0x32>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	60bb      	str	r3, [r7, #8]
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	e7fd      	b.n	800918e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009192:	f000 f883 	bl	800929c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fdf3 	bl	8009d84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800919e:	f000 f88b 	bl	80092b8 <xTaskResumeAll>
 80091a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <vTaskDelay+0x68>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20001160 	.word	0x20001160
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	@ 0x28
 80091d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091da:	463a      	mov	r2, r7
 80091dc:	1d39      	adds	r1, r7, #4
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fcb6 	bl	8007b54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	9202      	str	r2, [sp, #8]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2300      	movs	r3, #0
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	460a      	mov	r2, r1
 80091fa:	4922      	ldr	r1, [pc, #136]	@ (8009284 <vTaskStartScheduler+0xb8>)
 80091fc:	4822      	ldr	r0, [pc, #136]	@ (8009288 <vTaskStartScheduler+0xbc>)
 80091fe:	f7ff fe09 	bl	8008e14 <xTaskCreateStatic>
 8009202:	4603      	mov	r3, r0
 8009204:	4a21      	ldr	r2, [pc, #132]	@ (800928c <vTaskStartScheduler+0xc0>)
 8009206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009208:	4b20      	ldr	r3, [pc, #128]	@ (800928c <vTaskStartScheduler+0xc0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e001      	b.n	800921a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d102      	bne.n	8009226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009220:	f000 fe04 	bl	8009e2c <xTimerCreateTimerTask>
 8009224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d116      	bne.n	800925a <vTaskStartScheduler+0x8e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009240:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <vTaskStartScheduler+0xc4>)
 8009242:	f04f 32ff 	mov.w	r2, #4294967295
 8009246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009248:	4b12      	ldr	r3, [pc, #72]	@ (8009294 <vTaskStartScheduler+0xc8>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800924e:	4b12      	ldr	r3, [pc, #72]	@ (8009298 <vTaskStartScheduler+0xcc>)
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009254:	f001 f9d4 	bl	800a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009258:	e00f      	b.n	800927a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d10b      	bne.n	800927a <vTaskStartScheduler+0xae>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60fb      	str	r3, [r7, #12]
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	e7fd      	b.n	8009276 <vTaskStartScheduler+0xaa>
}
 800927a:	bf00      	nop
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	0800ae50 	.word	0x0800ae50
 8009288:	080098bd 	.word	0x080098bd
 800928c:	2000115c 	.word	0x2000115c
 8009290:	20001158 	.word	0x20001158
 8009294:	20001144 	.word	0x20001144
 8009298:	2000113c 	.word	0x2000113c

0800929c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092a0:	4b04      	ldr	r3, [pc, #16]	@ (80092b4 <vTaskSuspendAll+0x18>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a03      	ldr	r2, [pc, #12]	@ (80092b4 <vTaskSuspendAll+0x18>)
 80092a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092aa:	bf00      	nop
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20001160 	.word	0x20001160

080092b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092c6:	4b42      	ldr	r3, [pc, #264]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	603b      	str	r3, [r7, #0]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092e6:	f001 fa2f 	bl	800a748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092ea:	4b39      	ldr	r3, [pc, #228]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	4a37      	ldr	r2, [pc, #220]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092f4:	4b36      	ldr	r3, [pc, #216]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d162      	bne.n	80093c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092fc:	4b35      	ldr	r3, [pc, #212]	@ (80093d4 <xTaskResumeAll+0x11c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05e      	beq.n	80093c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009304:	e02f      	b.n	8009366 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009306:	4b34      	ldr	r3, [pc, #208]	@ (80093d8 <xTaskResumeAll+0x120>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3318      	adds	r3, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fcdc 	bl	8007cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3304      	adds	r3, #4
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fcd7 	bl	8007cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009326:	4b2d      	ldr	r3, [pc, #180]	@ (80093dc <xTaskResumeAll+0x124>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d903      	bls.n	8009336 <xTaskResumeAll+0x7e>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	4a2a      	ldr	r2, [pc, #168]	@ (80093dc <xTaskResumeAll+0x124>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4a27      	ldr	r2, [pc, #156]	@ (80093e0 <xTaskResumeAll+0x128>)
 8009344:	441a      	add	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe fc62 	bl	8007c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009356:	4b23      	ldr	r3, [pc, #140]	@ (80093e4 <xTaskResumeAll+0x12c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	429a      	cmp	r2, r3
 800935e:	d302      	bcc.n	8009366 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009360:	4b21      	ldr	r3, [pc, #132]	@ (80093e8 <xTaskResumeAll+0x130>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009366:	4b1c      	ldr	r3, [pc, #112]	@ (80093d8 <xTaskResumeAll+0x120>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1cb      	bne.n	8009306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009374:	f000 fb58 	bl	8009a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009378:	4b1c      	ldr	r3, [pc, #112]	@ (80093ec <xTaskResumeAll+0x134>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d010      	beq.n	80093a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009384:	f000 f846 	bl	8009414 <xTaskIncrementTick>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800938e:	4b16      	ldr	r3, [pc, #88]	@ (80093e8 <xTaskResumeAll+0x130>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3b01      	subs	r3, #1
 8009398:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1f1      	bne.n	8009384 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80093a0:	4b12      	ldr	r3, [pc, #72]	@ (80093ec <xTaskResumeAll+0x134>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093a6:	4b10      	ldr	r3, [pc, #64]	@ (80093e8 <xTaskResumeAll+0x130>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093b2:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <xTaskResumeAll+0x138>)
 80093b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093c2:	f001 f9f3 	bl	800a7ac <vPortExitCritical>

	return xAlreadyYielded;
 80093c6:	68bb      	ldr	r3, [r7, #8]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001160 	.word	0x20001160
 80093d4:	20001138 	.word	0x20001138
 80093d8:	200010f8 	.word	0x200010f8
 80093dc:	20001140 	.word	0x20001140
 80093e0:	20000c68 	.word	0x20000c68
 80093e4:	20000c64 	.word	0x20000c64
 80093e8:	2000114c 	.word	0x2000114c
 80093ec:	20001148 	.word	0x20001148
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093fa:	4b05      	ldr	r3, [pc, #20]	@ (8009410 <xTaskGetTickCount+0x1c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009400:	687b      	ldr	r3, [r7, #4]
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	2000113c 	.word	0x2000113c

08009414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800941e:	4b4f      	ldr	r3, [pc, #316]	@ (800955c <xTaskIncrementTick+0x148>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 8090 	bne.w	8009548 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009428:	4b4d      	ldr	r3, [pc, #308]	@ (8009560 <xTaskIncrementTick+0x14c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009430:	4a4b      	ldr	r2, [pc, #300]	@ (8009560 <xTaskIncrementTick+0x14c>)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d121      	bne.n	8009480 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800943c:	4b49      	ldr	r3, [pc, #292]	@ (8009564 <xTaskIncrementTick+0x150>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	603b      	str	r3, [r7, #0]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <xTaskIncrementTick+0x46>
 800945e:	4b41      	ldr	r3, [pc, #260]	@ (8009564 <xTaskIncrementTick+0x150>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	4b40      	ldr	r3, [pc, #256]	@ (8009568 <xTaskIncrementTick+0x154>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a3e      	ldr	r2, [pc, #248]	@ (8009564 <xTaskIncrementTick+0x150>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4a3e      	ldr	r2, [pc, #248]	@ (8009568 <xTaskIncrementTick+0x154>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4b3e      	ldr	r3, [pc, #248]	@ (800956c <xTaskIncrementTick+0x158>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a3c      	ldr	r2, [pc, #240]	@ (800956c <xTaskIncrementTick+0x158>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	f000 fad4 	bl	8009a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009480:	4b3b      	ldr	r3, [pc, #236]	@ (8009570 <xTaskIncrementTick+0x15c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d349      	bcc.n	800951e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800948a:	4b36      	ldr	r3, [pc, #216]	@ (8009564 <xTaskIncrementTick+0x150>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d104      	bne.n	800949e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009494:	4b36      	ldr	r3, [pc, #216]	@ (8009570 <xTaskIncrementTick+0x15c>)
 8009496:	f04f 32ff 	mov.w	r2, #4294967295
 800949a:	601a      	str	r2, [r3, #0]
					break;
 800949c:	e03f      	b.n	800951e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949e:	4b31      	ldr	r3, [pc, #196]	@ (8009564 <xTaskIncrementTick+0x150>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d203      	bcs.n	80094be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009570 <xTaskIncrementTick+0x15c>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094bc:	e02f      	b.n	800951e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fe fc04 	bl	8007cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	3318      	adds	r3, #24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fbfb 	bl	8007cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	4b25      	ldr	r3, [pc, #148]	@ (8009574 <xTaskIncrementTick+0x160>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d903      	bls.n	80094ee <xTaskIncrementTick+0xda>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	4a22      	ldr	r2, [pc, #136]	@ (8009574 <xTaskIncrementTick+0x160>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009578 <xTaskIncrementTick+0x164>)
 80094fc:	441a      	add	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3304      	adds	r3, #4
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fe fb86 	bl	8007c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950e:	4b1b      	ldr	r3, [pc, #108]	@ (800957c <xTaskIncrementTick+0x168>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009514:	429a      	cmp	r2, r3
 8009516:	d3b8      	bcc.n	800948a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800951c:	e7b5      	b.n	800948a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800951e:	4b17      	ldr	r3, [pc, #92]	@ (800957c <xTaskIncrementTick+0x168>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009524:	4914      	ldr	r1, [pc, #80]	@ (8009578 <xTaskIncrementTick+0x164>)
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d901      	bls.n	800953a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800953a:	4b11      	ldr	r3, [pc, #68]	@ (8009580 <xTaskIncrementTick+0x16c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e004      	b.n	8009552 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009548:	4b0e      	ldr	r3, [pc, #56]	@ (8009584 <xTaskIncrementTick+0x170>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a0d      	ldr	r2, [pc, #52]	@ (8009584 <xTaskIncrementTick+0x170>)
 8009550:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20001160 	.word	0x20001160
 8009560:	2000113c 	.word	0x2000113c
 8009564:	200010f0 	.word	0x200010f0
 8009568:	200010f4 	.word	0x200010f4
 800956c:	20001150 	.word	0x20001150
 8009570:	20001158 	.word	0x20001158
 8009574:	20001140 	.word	0x20001140
 8009578:	20000c68 	.word	0x20000c68
 800957c:	20000c64 	.word	0x20000c64
 8009580:	2000114c 	.word	0x2000114c
 8009584:	20001148 	.word	0x20001148

08009588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800958e:	4b28      	ldr	r3, [pc, #160]	@ (8009630 <vTaskSwitchContext+0xa8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009596:	4b27      	ldr	r3, [pc, #156]	@ (8009634 <vTaskSwitchContext+0xac>)
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800959c:	e042      	b.n	8009624 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800959e:	4b25      	ldr	r3, [pc, #148]	@ (8009634 <vTaskSwitchContext+0xac>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	4b24      	ldr	r3, [pc, #144]	@ (8009638 <vTaskSwitchContext+0xb0>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	e011      	b.n	80095d0 <vTaskSwitchContext+0x48>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10b      	bne.n	80095ca <vTaskSwitchContext+0x42>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	607b      	str	r3, [r7, #4]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <vTaskSwitchContext+0x3e>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	491a      	ldr	r1, [pc, #104]	@ (800963c <vTaskSwitchContext+0xb4>)
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0e3      	beq.n	80095ac <vTaskSwitchContext+0x24>
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4a13      	ldr	r2, [pc, #76]	@ (800963c <vTaskSwitchContext+0xb4>)
 80095f0:	4413      	add	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	605a      	str	r2, [r3, #4]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3308      	adds	r3, #8
 8009606:	429a      	cmp	r2, r3
 8009608:	d104      	bne.n	8009614 <vTaskSwitchContext+0x8c>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	605a      	str	r2, [r3, #4]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	4a09      	ldr	r2, [pc, #36]	@ (8009640 <vTaskSwitchContext+0xb8>)
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	4a06      	ldr	r2, [pc, #24]	@ (8009638 <vTaskSwitchContext+0xb0>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6013      	str	r3, [r2, #0]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	20001160 	.word	0x20001160
 8009634:	2000114c 	.word	0x2000114c
 8009638:	20001140 	.word	0x20001140
 800963c:	20000c68 	.word	0x20000c68
 8009640:	20000c64 	.word	0x20000c64

08009644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800966c:	4b07      	ldr	r3, [pc, #28]	@ (800968c <vTaskPlaceOnEventList+0x48>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3318      	adds	r3, #24
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fe faf2 	bl	8007c5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800967a:	2101      	movs	r1, #1
 800967c:	6838      	ldr	r0, [r7, #0]
 800967e:	f000 fb81 	bl	8009d84 <prvAddCurrentTaskToDelayedList>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000c64 	.word	0x20000c64

08009690 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	617b      	str	r3, [r7, #20]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3318      	adds	r3, #24
 80096c0:	4619      	mov	r1, r3
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7fe faa7 	bl	8007c16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	68b8      	ldr	r0, [r7, #8]
 80096d8:	f000 fb54 	bl	8009d84 <prvAddCurrentTaskToDelayedList>
	}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000c64 	.word	0x20000c64

080096e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10b      	bne.n	8009716 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60fb      	str	r3, [r7, #12]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3318      	adds	r3, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fad8 	bl	8007cd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009720:	4b1d      	ldr	r3, [pc, #116]	@ (8009798 <xTaskRemoveFromEventList+0xb0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d11d      	bne.n	8009764 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3304      	adds	r3, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe facf 	bl	8007cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009736:	4b19      	ldr	r3, [pc, #100]	@ (800979c <xTaskRemoveFromEventList+0xb4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d903      	bls.n	8009746 <xTaskRemoveFromEventList+0x5e>
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	4a16      	ldr	r2, [pc, #88]	@ (800979c <xTaskRemoveFromEventList+0xb4>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a13      	ldr	r2, [pc, #76]	@ (80097a0 <xTaskRemoveFromEventList+0xb8>)
 8009754:	441a      	add	r2, r3
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7fe fa5a 	bl	8007c16 <vListInsertEnd>
 8009762:	e005      	b.n	8009770 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3318      	adds	r3, #24
 8009768:	4619      	mov	r1, r3
 800976a:	480e      	ldr	r0, [pc, #56]	@ (80097a4 <xTaskRemoveFromEventList+0xbc>)
 800976c:	f7fe fa53 	bl	8007c16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009774:	4b0c      	ldr	r3, [pc, #48]	@ (80097a8 <xTaskRemoveFromEventList+0xc0>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	429a      	cmp	r2, r3
 800977c:	d905      	bls.n	800978a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800977e:	2301      	movs	r3, #1
 8009780:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009782:	4b0a      	ldr	r3, [pc, #40]	@ (80097ac <xTaskRemoveFromEventList+0xc4>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e001      	b.n	800978e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800978e:	697b      	ldr	r3, [r7, #20]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20001160 	.word	0x20001160
 800979c:	20001140 	.word	0x20001140
 80097a0:	20000c68 	.word	0x20000c68
 80097a4:	200010f8 	.word	0x200010f8
 80097a8:	20000c64 	.word	0x20000c64
 80097ac:	2000114c 	.word	0x2000114c

080097b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097b8:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <vTaskInternalSetTimeOutState+0x24>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097c0:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <vTaskInternalSetTimeOutState+0x28>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	605a      	str	r2, [r3, #4]
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	20001150 	.word	0x20001150
 80097d8:	2000113c 	.word	0x2000113c

080097dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	613b      	str	r3, [r7, #16]
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	e7fd      	b.n	8009800 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	60fb      	str	r3, [r7, #12]
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	e7fd      	b.n	800981e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009822:	f000 ff91 	bl	800a748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009826:	4b1d      	ldr	r3, [pc, #116]	@ (800989c <xTaskCheckForTimeOut+0xc0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d102      	bne.n	8009846 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	e023      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4b15      	ldr	r3, [pc, #84]	@ (80098a0 <xTaskCheckForTimeOut+0xc4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d007      	beq.n	8009862 <xTaskCheckForTimeOut+0x86>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	429a      	cmp	r2, r3
 800985a:	d302      	bcc.n	8009862 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	61fb      	str	r3, [r7, #28]
 8009860:	e015      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	429a      	cmp	r2, r3
 800986a:	d20b      	bcs.n	8009884 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	1ad2      	subs	r2, r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff ff99 	bl	80097b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	e004      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800988a:	2301      	movs	r3, #1
 800988c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800988e:	f000 ff8d 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8009892:	69fb      	ldr	r3, [r7, #28]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	2000113c 	.word	0x2000113c
 80098a0:	20001150 	.word	0x20001150

080098a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098a8:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <vTaskMissedYield+0x14>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
}
 80098ae:	bf00      	nop
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	2000114c 	.word	0x2000114c

080098bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098c4:	f000 f852 	bl	800996c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <prvIdleTask+0x28>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d9f9      	bls.n	80098c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <prvIdleTask+0x2c>)
 80098d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098e0:	e7f0      	b.n	80098c4 <prvIdleTask+0x8>
 80098e2:	bf00      	nop
 80098e4:	20000c68 	.word	0x20000c68
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f2:	2300      	movs	r3, #0
 80098f4:	607b      	str	r3, [r7, #4]
 80098f6:	e00c      	b.n	8009912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4a12      	ldr	r2, [pc, #72]	@ (800994c <prvInitialiseTaskLists+0x60>)
 8009904:	4413      	add	r3, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe f958 	bl	8007bbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3301      	adds	r3, #1
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b37      	cmp	r3, #55	@ 0x37
 8009916:	d9ef      	bls.n	80098f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009918:	480d      	ldr	r0, [pc, #52]	@ (8009950 <prvInitialiseTaskLists+0x64>)
 800991a:	f7fe f94f 	bl	8007bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800991e:	480d      	ldr	r0, [pc, #52]	@ (8009954 <prvInitialiseTaskLists+0x68>)
 8009920:	f7fe f94c 	bl	8007bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009924:	480c      	ldr	r0, [pc, #48]	@ (8009958 <prvInitialiseTaskLists+0x6c>)
 8009926:	f7fe f949 	bl	8007bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800992a:	480c      	ldr	r0, [pc, #48]	@ (800995c <prvInitialiseTaskLists+0x70>)
 800992c:	f7fe f946 	bl	8007bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009930:	480b      	ldr	r0, [pc, #44]	@ (8009960 <prvInitialiseTaskLists+0x74>)
 8009932:	f7fe f943 	bl	8007bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <prvInitialiseTaskLists+0x78>)
 8009938:	4a05      	ldr	r2, [pc, #20]	@ (8009950 <prvInitialiseTaskLists+0x64>)
 800993a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <prvInitialiseTaskLists+0x7c>)
 800993e:	4a05      	ldr	r2, [pc, #20]	@ (8009954 <prvInitialiseTaskLists+0x68>)
 8009940:	601a      	str	r2, [r3, #0]
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000c68 	.word	0x20000c68
 8009950:	200010c8 	.word	0x200010c8
 8009954:	200010dc 	.word	0x200010dc
 8009958:	200010f8 	.word	0x200010f8
 800995c:	2000110c 	.word	0x2000110c
 8009960:	20001124 	.word	0x20001124
 8009964:	200010f0 	.word	0x200010f0
 8009968:	200010f4 	.word	0x200010f4

0800996c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009972:	e019      	b.n	80099a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009974:	f000 fee8 	bl	800a748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009978:	4b10      	ldr	r3, [pc, #64]	@ (80099bc <prvCheckTasksWaitingTermination+0x50>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe f9a3 	bl	8007cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <prvCheckTasksWaitingTermination+0x54>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3b01      	subs	r3, #1
 8009990:	4a0b      	ldr	r2, [pc, #44]	@ (80099c0 <prvCheckTasksWaitingTermination+0x54>)
 8009992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009994:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3b01      	subs	r3, #1
 800999a:	4a0a      	ldr	r2, [pc, #40]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 800999c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800999e:	f000 ff05 	bl	800a7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f810 	bl	80099c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099a8:	4b06      	ldr	r3, [pc, #24]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e1      	bne.n	8009974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	2000110c 	.word	0x2000110c
 80099c0:	20001138 	.word	0x20001138
 80099c4:	20001120 	.word	0x20001120

080099c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d108      	bne.n	80099ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f8a2 	bl	800ab28 <vPortFree>
				vPortFree( pxTCB );
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 f89f 	bl	800ab28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099ea:	e019      	b.n	8009a20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d103      	bne.n	80099fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 f896 	bl	800ab28 <vPortFree>
	}
 80099fc:	e010      	b.n	8009a20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d00b      	beq.n	8009a20 <prvDeleteTCB+0x58>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	60fb      	str	r3, [r7, #12]
}
 8009a1a:	bf00      	nop
 8009a1c:	bf00      	nop
 8009a1e:	e7fd      	b.n	8009a1c <prvDeleteTCB+0x54>
	}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a60 <prvResetNextTaskUnblockTime+0x38>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a38:	4b0a      	ldr	r3, [pc, #40]	@ (8009a64 <prvResetNextTaskUnblockTime+0x3c>)
 8009a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a40:	e008      	b.n	8009a54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a42:	4b07      	ldr	r3, [pc, #28]	@ (8009a60 <prvResetNextTaskUnblockTime+0x38>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4a04      	ldr	r2, [pc, #16]	@ (8009a64 <prvResetNextTaskUnblockTime+0x3c>)
 8009a52:	6013      	str	r3, [r2, #0]
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	200010f0 	.word	0x200010f0
 8009a64:	20001158 	.word	0x20001158

08009a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a9c <xTaskGetSchedulerState+0x34>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a76:	2301      	movs	r3, #1
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	e008      	b.n	8009a8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a7c:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <xTaskGetSchedulerState+0x38>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a84:	2302      	movs	r3, #2
 8009a86:	607b      	str	r3, [r7, #4]
 8009a88:	e001      	b.n	8009a8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a8e:	687b      	ldr	r3, [r7, #4]
	}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20001144 	.word	0x20001144
 8009aa0:	20001160 	.word	0x20001160

08009aa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d051      	beq.n	8009b5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4b2a      	ldr	r3, [pc, #168]	@ (8009b68 <xTaskPriorityInherit+0xc4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d241      	bcs.n	8009b4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	db06      	blt.n	8009ade <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad0:	4b25      	ldr	r3, [pc, #148]	@ (8009b68 <xTaskPriorityInherit+0xc4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6959      	ldr	r1, [r3, #20]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4a1f      	ldr	r2, [pc, #124]	@ (8009b6c <xTaskPriorityInherit+0xc8>)
 8009af0:	4413      	add	r3, r2
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d122      	bne.n	8009b3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe f8e8 	bl	8007cd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b00:	4b19      	ldr	r3, [pc, #100]	@ (8009b68 <xTaskPriorityInherit+0xc4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0e:	4b18      	ldr	r3, [pc, #96]	@ (8009b70 <xTaskPriorityInherit+0xcc>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d903      	bls.n	8009b1e <xTaskPriorityInherit+0x7a>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	4a15      	ldr	r2, [pc, #84]	@ (8009b70 <xTaskPriorityInherit+0xcc>)
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4a10      	ldr	r2, [pc, #64]	@ (8009b6c <xTaskPriorityInherit+0xc8>)
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7fe f86e 	bl	8007c16 <vListInsertEnd>
 8009b3a:	e004      	b.n	8009b46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <xTaskPriorityInherit+0xc4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b46:	2301      	movs	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e008      	b.n	8009b5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <xTaskPriorityInherit+0xc4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d201      	bcs.n	8009b5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000c64 	.word	0x20000c64
 8009b6c:	20000c68 	.word	0x20000c68
 8009b70:	20001140 	.word	0x20001140

08009b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d058      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c48 <xTaskPriorityDisinherit+0xd4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d00b      	beq.n	8009bac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	60fb      	str	r3, [r7, #12]
}
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	e7fd      	b.n	8009ba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60bb      	str	r3, [r7, #8]
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	e7fd      	b.n	8009bc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d02c      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d128      	bne.n	8009c3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe f86e 	bl	8007cd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c4c <xTaskPriorityDisinherit+0xd8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <xTaskPriorityDisinherit+0xa8>
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	4a0c      	ldr	r2, [pc, #48]	@ (8009c4c <xTaskPriorityDisinherit+0xd8>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a09      	ldr	r2, [pc, #36]	@ (8009c50 <xTaskPriorityDisinherit+0xdc>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fd ffef 	bl	8007c16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c3c:	697b      	ldr	r3, [r7, #20]
	}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000c64 	.word	0x20000c64
 8009c4c:	20001140 	.word	0x20001140
 8009c50:	20000c68 	.word	0x20000c68

08009c54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d06c      	beq.n	8009d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	e7fd      	b.n	8009c88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d902      	bls.n	8009c9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	e002      	b.n	8009ca2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ca0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d04c      	beq.n	8009d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d147      	bne.n	8009d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009cb6:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d10b      	bne.n	8009cd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60bb      	str	r3, [r7, #8]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	db04      	blt.n	8009cf6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	6959      	ldr	r1, [r3, #20]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a13      	ldr	r2, [pc, #76]	@ (8009d54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d06:	4413      	add	r3, r2
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d11c      	bne.n	8009d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd ffdd 	bl	8007cd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d903      	bls.n	8009d2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d26:	4a0c      	ldr	r2, [pc, #48]	@ (8009d58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4a07      	ldr	r2, [pc, #28]	@ (8009d54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d38:	441a      	add	r2, r3
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7fd ff68 	bl	8007c16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d46:	bf00      	nop
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000c64 	.word	0x20000c64
 8009d54:	20000c68 	.word	0x20000c68
 8009d58:	20001140 	.word	0x20001140

08009d5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d60:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d68:	4b05      	ldr	r3, [pc, #20]	@ (8009d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d6e:	3201      	adds	r2, #1
 8009d70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009d72:	4b03      	ldr	r3, [pc, #12]	@ (8009d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d74:	681b      	ldr	r3, [r3, #0]
	}
 8009d76:	4618      	mov	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20000c64 	.word	0x20000c64

08009d84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d8e:	4b21      	ldr	r3, [pc, #132]	@ (8009e14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d94:	4b20      	ldr	r3, [pc, #128]	@ (8009e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fd ff98 	bl	8007cd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d10a      	bne.n	8009dbe <prvAddCurrentTaskToDelayedList+0x3a>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d007      	beq.n	8009dbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dae:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4819      	ldr	r0, [pc, #100]	@ (8009e1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009db8:	f7fd ff2d 	bl	8007c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dbc:	e026      	b.n	8009e0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dc6:	4b14      	ldr	r3, [pc, #80]	@ (8009e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d209      	bcs.n	8009dea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dd6:	4b12      	ldr	r3, [pc, #72]	@ (8009e20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	4b0f      	ldr	r3, [pc, #60]	@ (8009e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f7fd ff3b 	bl	8007c5e <vListInsert>
}
 8009de8:	e010      	b.n	8009e0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dea:	4b0e      	ldr	r3, [pc, #56]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fd ff31 	bl	8007c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d202      	bcs.n	8009e0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e06:	4a08      	ldr	r2, [pc, #32]	@ (8009e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6013      	str	r3, [r2, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	2000113c 	.word	0x2000113c
 8009e18:	20000c64 	.word	0x20000c64
 8009e1c:	20001124 	.word	0x20001124
 8009e20:	200010f4 	.word	0x200010f4
 8009e24:	200010f0 	.word	0x200010f0
 8009e28:	20001158 	.word	0x20001158

08009e2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e36:	f000 fb13 	bl	800a460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009eb0 <xTimerCreateTimerTask+0x84>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d021      	beq.n	8009e86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e4a:	1d3a      	adds	r2, r7, #4
 8009e4c:	f107 0108 	add.w	r1, r7, #8
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fd fe97 	bl	8007b88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	9202      	str	r2, [sp, #8]
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	2302      	movs	r3, #2
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	460a      	mov	r2, r1
 8009e6c:	4911      	ldr	r1, [pc, #68]	@ (8009eb4 <xTimerCreateTimerTask+0x88>)
 8009e6e:	4812      	ldr	r0, [pc, #72]	@ (8009eb8 <xTimerCreateTimerTask+0x8c>)
 8009e70:	f7fe ffd0 	bl	8008e14 <xTaskCreateStatic>
 8009e74:	4603      	mov	r3, r0
 8009e76:	4a11      	ldr	r2, [pc, #68]	@ (8009ebc <xTimerCreateTimerTask+0x90>)
 8009e78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e7a:	4b10      	ldr	r3, [pc, #64]	@ (8009ebc <xTimerCreateTimerTask+0x90>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e82:	2301      	movs	r3, #1
 8009e84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	613b      	str	r3, [r7, #16]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ea4:	697b      	ldr	r3, [r7, #20]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20001194 	.word	0x20001194
 8009eb4:	0800ae58 	.word	0x0800ae58
 8009eb8:	08009ff9 	.word	0x08009ff9
 8009ebc:	20001198 	.word	0x20001198

08009ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	@ 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10b      	bne.n	8009ef0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	623b      	str	r3, [r7, #32]
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ef0:	4b19      	ldr	r3, [pc, #100]	@ (8009f58 <xTimerGenericCommand+0x98>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d02a      	beq.n	8009f4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	dc18      	bgt.n	8009f3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f0a:	f7ff fdad 	bl	8009a68 <xTaskGetSchedulerState>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d109      	bne.n	8009f28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f14:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <xTimerGenericCommand+0x98>)
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	f107 0110 	add.w	r1, r7, #16
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f20:	f7fe f900 	bl	8008124 <xQueueGenericSend>
 8009f24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f26:	e012      	b.n	8009f4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f28:	4b0b      	ldr	r3, [pc, #44]	@ (8009f58 <xTimerGenericCommand+0x98>)
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	f107 0110 	add.w	r1, r7, #16
 8009f30:	2300      	movs	r3, #0
 8009f32:	2200      	movs	r2, #0
 8009f34:	f7fe f8f6 	bl	8008124 <xQueueGenericSend>
 8009f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f3a:	e008      	b.n	8009f4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f3c:	4b06      	ldr	r3, [pc, #24]	@ (8009f58 <xTimerGenericCommand+0x98>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	f107 0110 	add.w	r1, r7, #16
 8009f44:	2300      	movs	r3, #0
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	f7fe f9ee 	bl	8008328 <xQueueGenericSendFromISR>
 8009f4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3728      	adds	r7, #40	@ 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20001194 	.word	0x20001194

08009f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f66:	4b23      	ldr	r3, [pc, #140]	@ (8009ff4 <prvProcessExpiredTimer+0x98>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd feab 	bl	8007cd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d023      	beq.n	8009fd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	699a      	ldr	r2, [r3, #24]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	18d1      	adds	r1, r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	6978      	ldr	r0, [r7, #20]
 8009f96:	f000 f8d5 	bl	800a144 <prvInsertTimerInActiveList>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d020      	beq.n	8009fe2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6978      	ldr	r0, [r7, #20]
 8009fac:	f7ff ff88 	bl	8009ec0 <xTimerGenericCommand>
 8009fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d114      	bne.n	8009fe2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60fb      	str	r3, [r7, #12]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	4798      	blx	r3
}
 8009fea:	bf00      	nop
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2000118c 	.word	0x2000118c

08009ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a000:	f107 0308 	add.w	r3, r7, #8
 800a004:	4618      	mov	r0, r3
 800a006:	f000 f859 	bl	800a0bc <prvGetNextExpireTime>
 800a00a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	4619      	mov	r1, r3
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 f805 	bl	800a020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a016:	f000 f8d7 	bl	800a1c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a01a:	bf00      	nop
 800a01c:	e7f0      	b.n	800a000 <prvTimerTask+0x8>
	...

0800a020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a02a:	f7ff f937 	bl	800929c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f866 	bl	800a104 <prvSampleTimeNow>
 800a038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d130      	bne.n	800a0a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <prvProcessTimerOrBlockTask+0x3c>
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d806      	bhi.n	800a05c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a04e:	f7ff f933 	bl	80092b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ff81 	bl	8009f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a05a:	e024      	b.n	800a0a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d008      	beq.n	800a074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a062:	4b13      	ldr	r3, [pc, #76]	@ (800a0b0 <prvProcessTimerOrBlockTask+0x90>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <prvProcessTimerOrBlockTask+0x50>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <prvProcessTimerOrBlockTask+0x52>
 800a070:	2300      	movs	r3, #0
 800a072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a074:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <prvProcessTimerOrBlockTask+0x94>)
 800a076:	6818      	ldr	r0, [r3, #0]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	4619      	mov	r1, r3
 800a082:	f7fe fe93 	bl	8008dac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a086:	f7ff f917 	bl	80092b8 <xTaskResumeAll>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a090:	4b09      	ldr	r3, [pc, #36]	@ (800a0b8 <prvProcessTimerOrBlockTask+0x98>)
 800a092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
}
 800a0a0:	e001      	b.n	800a0a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0a2:	f7ff f909 	bl	80092b8 <xTaskResumeAll>
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20001190 	.word	0x20001190
 800a0b4:	20001194 	.word	0x20001194
 800a0b8:	e000ed04 	.word	0xe000ed04

0800a0bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <prvGetNextExpireTime+0x44>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <prvGetNextExpireTime+0x16>
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	e000      	b.n	800a0d4 <prvGetNextExpireTime+0x18>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e0:	4b07      	ldr	r3, [pc, #28]	@ (800a100 <prvGetNextExpireTime+0x44>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	e001      	b.n	800a0f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	2000118c 	.word	0x2000118c

0800a104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a10c:	f7ff f972 	bl	80093f4 <xTaskGetTickCount>
 800a110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a112:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <prvSampleTimeNow+0x3c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d205      	bcs.n	800a128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a11c:	f000 f93a 	bl	800a394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e002      	b.n	800a12e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a12e:	4a04      	ldr	r2, [pc, #16]	@ (800a140 <prvSampleTimeNow+0x3c>)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a134:	68fb      	ldr	r3, [r7, #12]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000119c 	.word	0x2000119c

0800a144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	429a      	cmp	r2, r3
 800a168:	d812      	bhi.n	800a190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	429a      	cmp	r2, r3
 800a176:	d302      	bcc.n	800a17e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a178:	2301      	movs	r3, #1
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	e01b      	b.n	800a1b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a17e:	4b10      	ldr	r3, [pc, #64]	@ (800a1c0 <prvInsertTimerInActiveList+0x7c>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3304      	adds	r3, #4
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f7fd fd68 	bl	8007c5e <vListInsert>
 800a18e:	e012      	b.n	800a1b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d206      	bcs.n	800a1a6 <prvInsertTimerInActiveList+0x62>
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d302      	bcc.n	800a1a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e007      	b.n	800a1b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1a6:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <prvInsertTimerInActiveList+0x80>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fd fd54 	bl	8007c5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1b6:	697b      	ldr	r3, [r7, #20]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20001190 	.word	0x20001190
 800a1c4:	2000118c 	.word	0x2000118c

0800a1c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08e      	sub	sp, #56	@ 0x38
 800a1cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1ce:	e0ce      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da19      	bge.n	800a20a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1d6:	1d3b      	adds	r3, r7, #4
 800a1d8:	3304      	adds	r3, #4
 800a1da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	61fb      	str	r3, [r7, #28]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a200:	6850      	ldr	r0, [r2, #4]
 800a202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a204:	6892      	ldr	r2, [r2, #8]
 800a206:	4611      	mov	r1, r2
 800a208:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f2c0 80ae 	blt.w	800a36e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d004      	beq.n	800a228 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	3304      	adds	r3, #4
 800a222:	4618      	mov	r0, r3
 800a224:	f7fd fd54 	bl	8007cd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a228:	463b      	mov	r3, r7
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff ff6a 	bl	800a104 <prvSampleTimeNow>
 800a230:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b09      	cmp	r3, #9
 800a236:	f200 8097 	bhi.w	800a368 <prvProcessReceivedCommands+0x1a0>
 800a23a:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <prvProcessReceivedCommands+0x78>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a269 	.word	0x0800a269
 800a248:	0800a269 	.word	0x0800a269
 800a24c:	0800a2df 	.word	0x0800a2df
 800a250:	0800a2f3 	.word	0x0800a2f3
 800a254:	0800a33f 	.word	0x0800a33f
 800a258:	0800a269 	.word	0x0800a269
 800a25c:	0800a269 	.word	0x0800a269
 800a260:	0800a2df 	.word	0x0800a2df
 800a264:	0800a2f3 	.word	0x0800a2f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	18d1      	adds	r1, r2, r3
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a288:	f7ff ff5c 	bl	800a144 <prvInsertTimerInActiveList>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d06c      	beq.n	800a36c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a298:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d061      	beq.n	800a36c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	441a      	add	r2, r3
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2ba:	f7ff fe01 	bl	8009ec0 <xTimerGenericCommand>
 800a2be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d152      	bne.n	800a36c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	61bb      	str	r3, [r7, #24]
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	e7fd      	b.n	800a2da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2e4:	f023 0301 	bic.w	r3, r3, #1
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2f0:	e03d      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10b      	bne.n	800a32a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	18d1      	adds	r1, r2, r3
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a338:	f7ff ff04 	bl	800a144 <prvInsertTimerInActiveList>
					break;
 800a33c:	e017      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a34c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a34e:	f000 fbeb 	bl	800ab28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a352:	e00c      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a366:	e002      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a368:	bf00      	nop
 800a36a:	e000      	b.n	800a36e <prvProcessReceivedCommands+0x1a6>
					break;
 800a36c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a36e:	4b08      	ldr	r3, [pc, #32]	@ (800a390 <prvProcessReceivedCommands+0x1c8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	1d39      	adds	r1, r7, #4
 800a374:	2200      	movs	r2, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe f904 	bl	8008584 <xQueueReceive>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f47f af26 	bne.w	800a1d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	3730      	adds	r7, #48	@ 0x30
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20001194 	.word	0x20001194

0800a394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a39a:	e049      	b.n	800a430 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a39c:	4b2e      	ldr	r3, [pc, #184]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fd fc8b 	bl	8007cd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d02f      	beq.n	800a430 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d90e      	bls.n	800a400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7fd fc30 	bl	8007c5e <vListInsert>
 800a3fe:	e017      	b.n	800a430 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a400:	2300      	movs	r3, #0
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	2300      	movs	r3, #0
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	2100      	movs	r1, #0
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fd58 	bl	8009ec0 <xTimerGenericCommand>
 800a410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10b      	bne.n	800a430 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	603b      	str	r3, [r7, #0]
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	e7fd      	b.n	800a42c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a430:	4b09      	ldr	r3, [pc, #36]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1b0      	bne.n	800a39c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a43a:	4b07      	ldr	r3, [pc, #28]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a440:	4b06      	ldr	r3, [pc, #24]	@ (800a45c <prvSwitchTimerLists+0xc8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a04      	ldr	r2, [pc, #16]	@ (800a458 <prvSwitchTimerLists+0xc4>)
 800a446:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a448:	4a04      	ldr	r2, [pc, #16]	@ (800a45c <prvSwitchTimerLists+0xc8>)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	6013      	str	r3, [r2, #0]
}
 800a44e:	bf00      	nop
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	2000118c 	.word	0x2000118c
 800a45c:	20001190 	.word	0x20001190

0800a460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a466:	f000 f96f 	bl	800a748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a46a:	4b15      	ldr	r3, [pc, #84]	@ (800a4c0 <prvCheckForValidListAndQueue+0x60>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d120      	bne.n	800a4b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a472:	4814      	ldr	r0, [pc, #80]	@ (800a4c4 <prvCheckForValidListAndQueue+0x64>)
 800a474:	f7fd fba2 	bl	8007bbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a478:	4813      	ldr	r0, [pc, #76]	@ (800a4c8 <prvCheckForValidListAndQueue+0x68>)
 800a47a:	f7fd fb9f 	bl	8007bbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a47e:	4b13      	ldr	r3, [pc, #76]	@ (800a4cc <prvCheckForValidListAndQueue+0x6c>)
 800a480:	4a10      	ldr	r2, [pc, #64]	@ (800a4c4 <prvCheckForValidListAndQueue+0x64>)
 800a482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a484:	4b12      	ldr	r3, [pc, #72]	@ (800a4d0 <prvCheckForValidListAndQueue+0x70>)
 800a486:	4a10      	ldr	r2, [pc, #64]	@ (800a4c8 <prvCheckForValidListAndQueue+0x68>)
 800a488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a48a:	2300      	movs	r3, #0
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	4b11      	ldr	r3, [pc, #68]	@ (800a4d4 <prvCheckForValidListAndQueue+0x74>)
 800a490:	4a11      	ldr	r2, [pc, #68]	@ (800a4d8 <prvCheckForValidListAndQueue+0x78>)
 800a492:	2110      	movs	r1, #16
 800a494:	200a      	movs	r0, #10
 800a496:	f7fd fcaf 	bl	8007df8 <xQueueGenericCreateStatic>
 800a49a:	4603      	mov	r3, r0
 800a49c:	4a08      	ldr	r2, [pc, #32]	@ (800a4c0 <prvCheckForValidListAndQueue+0x60>)
 800a49e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4a0:	4b07      	ldr	r3, [pc, #28]	@ (800a4c0 <prvCheckForValidListAndQueue+0x60>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4a8:	4b05      	ldr	r3, [pc, #20]	@ (800a4c0 <prvCheckForValidListAndQueue+0x60>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	490b      	ldr	r1, [pc, #44]	@ (800a4dc <prvCheckForValidListAndQueue+0x7c>)
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fc28 	bl	8008d04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4b4:	f000 f97a 	bl	800a7ac <vPortExitCritical>
}
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20001194 	.word	0x20001194
 800a4c4:	20001164 	.word	0x20001164
 800a4c8:	20001178 	.word	0x20001178
 800a4cc:	2000118c 	.word	0x2000118c
 800a4d0:	20001190 	.word	0x20001190
 800a4d4:	20001240 	.word	0x20001240
 800a4d8:	200011a0 	.word	0x200011a0
 800a4dc:	0800ae60 	.word	0x0800ae60

0800a4e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3b04      	subs	r3, #4
 800a4f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b04      	subs	r3, #4
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f023 0201 	bic.w	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3b04      	subs	r3, #4
 800a50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a510:	4a0c      	ldr	r2, [pc, #48]	@ (800a544 <pxPortInitialiseStack+0x64>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b14      	subs	r3, #20
 800a51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3b04      	subs	r3, #4
 800a526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f06f 0202 	mvn.w	r2, #2
 800a52e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3b20      	subs	r3, #32
 800a534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a536:	68fb      	ldr	r3, [r7, #12]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	0800a549 	.word	0x0800a549

0800a548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a552:	4b13      	ldr	r3, [pc, #76]	@ (800a5a0 <prvTaskExitError+0x58>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d00b      	beq.n	800a574 <prvTaskExitError+0x2c>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60fb      	str	r3, [r7, #12]
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <prvTaskExitError+0x28>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	60bb      	str	r3, [r7, #8]
}
 800a586:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a588:	bf00      	nop
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0fc      	beq.n	800a58a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	2000000c 	.word	0x2000000c
	...

0800a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5b0:	4b07      	ldr	r3, [pc, #28]	@ (800a5d0 <pxCurrentTCBConst2>)
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	6808      	ldr	r0, [r1, #0]
 800a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	f380 8809 	msr	PSP, r0
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8811 	msr	BASEPRI, r0
 800a5ca:	4770      	bx	lr
 800a5cc:	f3af 8000 	nop.w

0800a5d0 <pxCurrentTCBConst2>:
 800a5d0:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5d8:	4808      	ldr	r0, [pc, #32]	@ (800a5fc <prvPortStartFirstTask+0x24>)
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	6800      	ldr	r0, [r0, #0]
 800a5de:	f380 8808 	msr	MSP, r0
 800a5e2:	f04f 0000 	mov.w	r0, #0
 800a5e6:	f380 8814 	msr	CONTROL, r0
 800a5ea:	b662      	cpsie	i
 800a5ec:	b661      	cpsie	f
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	df00      	svc	0
 800a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5fa:	bf00      	nop
 800a5fc:	e000ed08 	.word	0xe000ed08

0800a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a606:	4b47      	ldr	r3, [pc, #284]	@ (800a724 <xPortStartScheduler+0x124>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a47      	ldr	r2, [pc, #284]	@ (800a728 <xPortStartScheduler+0x128>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d10b      	bne.n	800a628 <xPortStartScheduler+0x28>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	60fb      	str	r3, [r7, #12]
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a628:	4b3e      	ldr	r3, [pc, #248]	@ (800a724 <xPortStartScheduler+0x124>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a3f      	ldr	r2, [pc, #252]	@ (800a72c <xPortStartScheduler+0x12c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10b      	bne.n	800a64a <xPortStartScheduler+0x4a>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	613b      	str	r3, [r7, #16]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a64a:	4b39      	ldr	r3, [pc, #228]	@ (800a730 <xPortStartScheduler+0x130>)
 800a64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	22ff      	movs	r2, #255	@ 0xff
 800a65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <xPortStartScheduler+0x134>)
 800a670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a672:	4b31      	ldr	r3, [pc, #196]	@ (800a738 <xPortStartScheduler+0x138>)
 800a674:	2207      	movs	r2, #7
 800a676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a678:	e009      	b.n	800a68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <xPortStartScheduler+0x138>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3b01      	subs	r3, #1
 800a680:	4a2d      	ldr	r2, [pc, #180]	@ (800a738 <xPortStartScheduler+0x138>)
 800a682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	b2db      	uxtb	r3, r3
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a696:	2b80      	cmp	r3, #128	@ 0x80
 800a698:	d0ef      	beq.n	800a67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a69a:	4b27      	ldr	r3, [pc, #156]	@ (800a738 <xPortStartScheduler+0x138>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f1c3 0307 	rsb	r3, r3, #7
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d00b      	beq.n	800a6be <xPortStartScheduler+0xbe>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	60bb      	str	r3, [r7, #8]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6be:	4b1e      	ldr	r3, [pc, #120]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6d0:	4a19      	ldr	r2, [pc, #100]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6dc:	4b17      	ldr	r3, [pc, #92]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6e8:	4b14      	ldr	r3, [pc, #80]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a13      	ldr	r2, [pc, #76]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6f4:	f000 f8da 	bl	800a8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6f8:	4b11      	ldr	r3, [pc, #68]	@ (800a740 <xPortStartScheduler+0x140>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6fe:	f000 f8f9 	bl	800a8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <xPortStartScheduler+0x144>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a0f      	ldr	r2, [pc, #60]	@ (800a744 <xPortStartScheduler+0x144>)
 800a708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a70e:	f7ff ff63 	bl	800a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a712:	f7fe ff39 	bl	8009588 <vTaskSwitchContext>
	prvTaskExitError();
 800a716:	f7ff ff17 	bl	800a548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	e000ed00 	.word	0xe000ed00
 800a728:	410fc271 	.word	0x410fc271
 800a72c:	410fc270 	.word	0x410fc270
 800a730:	e000e400 	.word	0xe000e400
 800a734:	20001290 	.word	0x20001290
 800a738:	20001294 	.word	0x20001294
 800a73c:	e000ed20 	.word	0xe000ed20
 800a740:	2000000c 	.word	0x2000000c
 800a744:	e000ef34 	.word	0xe000ef34

0800a748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a762:	4b10      	ldr	r3, [pc, #64]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a0e      	ldr	r2, [pc, #56]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a76c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d110      	bne.n	800a796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a774:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a8 <vPortEnterCritical+0x60>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00b      	beq.n	800a796 <vPortEnterCritical+0x4e>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	603b      	str	r3, [r7, #0]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <vPortEnterCritical+0x4a>
	}
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2000000c 	.word	0x2000000c
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7b2:	4b12      	ldr	r3, [pc, #72]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <vPortExitCritical+0x26>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	607b      	str	r3, [r7, #4]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	4a08      	ldr	r2, [pc, #32]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7dc:	4b07      	ldr	r3, [pc, #28]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <vPortExitCritical+0x44>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	f383 8811 	msr	BASEPRI, r3
}
 800a7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	2000000c 	.word	0x2000000c

0800a800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a800:	f3ef 8009 	mrs	r0, PSP
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4b15      	ldr	r3, [pc, #84]	@ (800a860 <pxCurrentTCBConst>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	f01e 0f10 	tst.w	lr, #16
 800a810:	bf08      	it	eq
 800a812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	6010      	str	r0, [r2, #0]
 800a81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a824:	f380 8811 	msr	BASEPRI, r0
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f7fe feaa 	bl	8009588 <vTaskSwitchContext>
 800a834:	f04f 0000 	mov.w	r0, #0
 800a838:	f380 8811 	msr	BASEPRI, r0
 800a83c:	bc09      	pop	{r0, r3}
 800a83e:	6819      	ldr	r1, [r3, #0]
 800a840:	6808      	ldr	r0, [r1, #0]
 800a842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a846:	f01e 0f10 	tst.w	lr, #16
 800a84a:	bf08      	it	eq
 800a84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a850:	f380 8809 	msr	PSP, r0
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst>:
 800a860:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a882:	f7fe fdc7 	bl	8009414 <xTaskIncrementTick>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a88c:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <xPortSysTickHandler+0x40>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f383 8811 	msr	BASEPRI, r3
}
 800a89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <vPortSetupTimerInterrupt+0x38>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <vPortSetupTimerInterrupt+0x3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8ec <vPortSetupTimerInterrupt+0x40>)
 800a8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c6:	099b      	lsrs	r3, r3, #6
 800a8c8:	4a09      	ldr	r2, [pc, #36]	@ (800a8f0 <vPortSetupTimerInterrupt+0x44>)
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ce:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000e010 	.word	0xe000e010
 800a8e4:	e000e018 	.word	0xe000e018
 800a8e8:	20000000 	.word	0x20000000
 800a8ec:	10624dd3 	.word	0x10624dd3
 800a8f0:	e000e014 	.word	0xe000e014

0800a8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a904 <vPortEnableVFP+0x10>
 800a8f8:	6801      	ldr	r1, [r0, #0]
 800a8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8fe:	6001      	str	r1, [r0, #0]
 800a900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a902:	bf00      	nop
 800a904:	e000ed88 	.word	0xe000ed88

0800a908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d915      	bls.n	800a946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a91a:	4a18      	ldr	r2, [pc, #96]	@ (800a97c <vPortValidateInterruptPriority+0x74>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a924:	4b16      	ldr	r3, [pc, #88]	@ (800a980 <vPortValidateInterruptPriority+0x78>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	7afa      	ldrb	r2, [r7, #11]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d20b      	bcs.n	800a946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	e7fd      	b.n	800a942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a946:	4b0f      	ldr	r3, [pc, #60]	@ (800a984 <vPortValidateInterruptPriority+0x7c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a94e:	4b0e      	ldr	r3, [pc, #56]	@ (800a988 <vPortValidateInterruptPriority+0x80>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d90b      	bls.n	800a96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	603b      	str	r3, [r7, #0]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <vPortValidateInterruptPriority+0x62>
	}
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	e000e3f0 	.word	0xe000e3f0
 800a980:	20001290 	.word	0x20001290
 800a984:	e000ed0c 	.word	0xe000ed0c
 800a988:	20001294 	.word	0x20001294

0800a98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	@ 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a994:	2300      	movs	r3, #0
 800a996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a998:	f7fe fc80 	bl	800929c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a99c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab10 <pvPortMalloc+0x184>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9a4:	f000 f924 	bl	800abf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab14 <pvPortMalloc+0x188>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 8095 	bne.w	800aae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01e      	beq.n	800a9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a9bc:	2208      	movs	r2, #8
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d015      	beq.n	800a9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f023 0307 	bic.w	r3, r3, #7
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f003 0307 	and.w	r3, r3, #7
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <pvPortMalloc+0x6e>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	617b      	str	r3, [r7, #20]
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	e7fd      	b.n	800a9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d06f      	beq.n	800aae0 <pvPortMalloc+0x154>
 800aa00:	4b45      	ldr	r3, [pc, #276]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d86a      	bhi.n	800aae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa0a:	4b44      	ldr	r3, [pc, #272]	@ (800ab1c <pvPortMalloc+0x190>)
 800aa0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa0e:	4b43      	ldr	r3, [pc, #268]	@ (800ab1c <pvPortMalloc+0x190>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa14:	e004      	b.n	800aa20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d903      	bls.n	800aa32 <pvPortMalloc+0xa6>
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f1      	bne.n	800aa16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa32:	4b37      	ldr	r3, [pc, #220]	@ (800ab10 <pvPortMalloc+0x184>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d051      	beq.n	800aae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2208      	movs	r2, #8
 800aa42:	4413      	add	r3, r2
 800aa44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	2308      	movs	r3, #8
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d920      	bls.n	800aaa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4413      	add	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <pvPortMalloc+0xfc>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	613b      	str	r3, [r7, #16]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa9a:	69b8      	ldr	r0, [r7, #24]
 800aa9c:	f000 f90a 	bl	800acb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aaac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaae:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab20 <pvPortMalloc+0x194>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d203      	bcs.n	800aac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaba:	4b17      	ldr	r3, [pc, #92]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <pvPortMalloc+0x194>)
 800aac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <pvPortMalloc+0x188>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	431a      	orrs	r2, r3
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aad6:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <pvPortMalloc+0x198>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	4a11      	ldr	r2, [pc, #68]	@ (800ab24 <pvPortMalloc+0x198>)
 800aade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aae0:	f7fe fbea 	bl	80092b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <pvPortMalloc+0x17a>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	60fb      	str	r3, [r7, #12]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <pvPortMalloc+0x176>
	return pvReturn;
 800ab06:	69fb      	ldr	r3, [r7, #28]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	@ 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20004ea0 	.word	0x20004ea0
 800ab14:	20004eb4 	.word	0x20004eb4
 800ab18:	20004ea4 	.word	0x20004ea4
 800ab1c:	20004e98 	.word	0x20004e98
 800ab20:	20004ea8 	.word	0x20004ea8
 800ab24:	20004eac 	.word	0x20004eac

0800ab28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d04f      	beq.n	800abda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab3a:	2308      	movs	r3, #8
 800ab3c:	425b      	negs	r3, r3
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4413      	add	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b25      	ldr	r3, [pc, #148]	@ (800abe4 <vPortFree+0xbc>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10b      	bne.n	800ab6e <vPortFree+0x46>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60fb      	str	r3, [r7, #12]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <vPortFree+0x66>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	60bb      	str	r3, [r7, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	e7fd      	b.n	800ab8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	4b14      	ldr	r3, [pc, #80]	@ (800abe4 <vPortFree+0xbc>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01e      	beq.n	800abda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d11a      	bne.n	800abda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	4b0e      	ldr	r3, [pc, #56]	@ (800abe4 <vPortFree+0xbc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	43db      	mvns	r3, r3
 800abae:	401a      	ands	r2, r3
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abb4:	f7fe fb72 	bl	800929c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	4b0a      	ldr	r3, [pc, #40]	@ (800abe8 <vPortFree+0xc0>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4413      	add	r3, r2
 800abc2:	4a09      	ldr	r2, [pc, #36]	@ (800abe8 <vPortFree+0xc0>)
 800abc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f000 f874 	bl	800acb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abcc:	4b07      	ldr	r3, [pc, #28]	@ (800abec <vPortFree+0xc4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	4a06      	ldr	r2, [pc, #24]	@ (800abec <vPortFree+0xc4>)
 800abd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abd6:	f7fe fb6f 	bl	80092b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abda:	bf00      	nop
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20004eb4 	.word	0x20004eb4
 800abe8:	20004ea4 	.word	0x20004ea4
 800abec:	20004eb0 	.word	0x20004eb0

0800abf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800abfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abfc:	4b27      	ldr	r3, [pc, #156]	@ (800ac9c <prvHeapInit+0xac>)
 800abfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00c      	beq.n	800ac24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3307      	adds	r3, #7
 800ac0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0307 	bic.w	r3, r3, #7
 800ac16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac9c <prvHeapInit+0xac>)
 800ac20:	4413      	add	r3, r2
 800ac22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac28:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <prvHeapInit+0xb0>)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aca0 <prvHeapInit+0xb0>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4413      	add	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4a15      	ldr	r2, [pc, #84]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac52:	4b14      	ldr	r3, [pc, #80]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac5a:	4b12      	ldr	r3, [pc, #72]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	1ad2      	subs	r2, r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac70:	4b0c      	ldr	r3, [pc, #48]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aca8 <prvHeapInit+0xb8>)
 800ac7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	4a09      	ldr	r2, [pc, #36]	@ (800acac <prvHeapInit+0xbc>)
 800ac86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac88:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <prvHeapInit+0xc0>)
 800ac8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac8e:	601a      	str	r2, [r3, #0]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	20001298 	.word	0x20001298
 800aca0:	20004e98 	.word	0x20004e98
 800aca4:	20004ea0 	.word	0x20004ea0
 800aca8:	20004ea8 	.word	0x20004ea8
 800acac:	20004ea4 	.word	0x20004ea4
 800acb0:	20004eb4 	.word	0x20004eb4

0800acb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acbc:	4b28      	ldr	r3, [pc, #160]	@ (800ad60 <prvInsertBlockIntoFreeList+0xac>)
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e002      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x14>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d8f7      	bhi.n	800acc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	4413      	add	r3, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d108      	bne.n	800acf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	441a      	add	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	441a      	add	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d118      	bne.n	800ad3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b15      	ldr	r3, [pc, #84]	@ (800ad64 <prvInsertBlockIntoFreeList+0xb0>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d00d      	beq.n	800ad32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	441a      	add	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e008      	b.n	800ad44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad32:	4b0c      	ldr	r3, [pc, #48]	@ (800ad64 <prvInsertBlockIntoFreeList+0xb0>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	e003      	b.n	800ad44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d002      	beq.n	800ad52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20004e98 	.word	0x20004e98
 800ad64:	20004ea0 	.word	0x20004ea0

0800ad68 <memset>:
 800ad68:	4402      	add	r2, r0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d100      	bne.n	800ad72 <memset+0xa>
 800ad70:	4770      	bx	lr
 800ad72:	f803 1b01 	strb.w	r1, [r3], #1
 800ad76:	e7f9      	b.n	800ad6c <memset+0x4>

0800ad78 <__libc_init_array>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	4d0d      	ldr	r5, [pc, #52]	@ (800adb0 <__libc_init_array+0x38>)
 800ad7c:	4c0d      	ldr	r4, [pc, #52]	@ (800adb4 <__libc_init_array+0x3c>)
 800ad7e:	1b64      	subs	r4, r4, r5
 800ad80:	10a4      	asrs	r4, r4, #2
 800ad82:	2600      	movs	r6, #0
 800ad84:	42a6      	cmp	r6, r4
 800ad86:	d109      	bne.n	800ad9c <__libc_init_array+0x24>
 800ad88:	4d0b      	ldr	r5, [pc, #44]	@ (800adb8 <__libc_init_array+0x40>)
 800ad8a:	4c0c      	ldr	r4, [pc, #48]	@ (800adbc <__libc_init_array+0x44>)
 800ad8c:	f000 f826 	bl	800addc <_init>
 800ad90:	1b64      	subs	r4, r4, r5
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	2600      	movs	r6, #0
 800ad96:	42a6      	cmp	r6, r4
 800ad98:	d105      	bne.n	800ada6 <__libc_init_array+0x2e>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada0:	4798      	blx	r3
 800ada2:	3601      	adds	r6, #1
 800ada4:	e7ee      	b.n	800ad84 <__libc_init_array+0xc>
 800ada6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adaa:	4798      	blx	r3
 800adac:	3601      	adds	r6, #1
 800adae:	e7f2      	b.n	800ad96 <__libc_init_array+0x1e>
 800adb0:	0800af84 	.word	0x0800af84
 800adb4:	0800af84 	.word	0x0800af84
 800adb8:	0800af84 	.word	0x0800af84
 800adbc:	0800af88 	.word	0x0800af88

0800adc0 <memcpy>:
 800adc0:	440a      	add	r2, r1
 800adc2:	4291      	cmp	r1, r2
 800adc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc8:	d100      	bne.n	800adcc <memcpy+0xc>
 800adca:	4770      	bx	lr
 800adcc:	b510      	push	{r4, lr}
 800adce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add6:	4291      	cmp	r1, r2
 800add8:	d1f9      	bne.n	800adce <memcpy+0xe>
 800adda:	bd10      	pop	{r4, pc}

0800addc <_init>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr

0800ade8 <_fini>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr

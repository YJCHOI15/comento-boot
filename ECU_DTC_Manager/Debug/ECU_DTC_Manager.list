
ECU_DTC_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dec4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800e0a4  0800e0a4  0000f0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e364  0800e364  00010060  2**0
                  CONTENTS
  4 .ARM          00000008  0800e364  0800e364  0000f364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e36c  0800e36c  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e36c  0800e36c  0000f36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e370  0800e370  0000f370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800e374  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000510c  20000060  0800e3d4  00010060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000516c  0800e3d4  0001016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcb6  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044f7  00000000  00000000  0002dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a9  00000000  00000000  00033a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e89  00000000  00000000  00034cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7f3  00000000  00000000  0005ab62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e33bc  00000000  00000000  00079355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e4  00000000  00000000  0015c754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00163038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e08c 	.word	0x0800e08c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800e08c 	.word	0x0800e08c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b988 	b.w	8000960 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	468e      	mov	lr, r1
 8000670:	4604      	mov	r4, r0
 8000672:	4688      	mov	r8, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14a      	bne.n	800070e <__udivmoddi4+0xa6>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d962      	bls.n	8000744 <__udivmoddi4+0xdc>
 800067e:	fab2 f682 	clz	r6, r2
 8000682:	b14e      	cbz	r6, 8000698 <__udivmoddi4+0x30>
 8000684:	f1c6 0320 	rsb	r3, r6, #32
 8000688:	fa01 f806 	lsl.w	r8, r1, r6
 800068c:	fa20 f303 	lsr.w	r3, r0, r3
 8000690:	40b7      	lsls	r7, r6
 8000692:	ea43 0808 	orr.w	r8, r3, r8
 8000696:	40b4      	lsls	r4, r6
 8000698:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800069c:	fa1f fc87 	uxth.w	ip, r7
 80006a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80006a4:	0c23      	lsrs	r3, r4, #16
 80006a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80006aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ae:	fb01 f20c 	mul.w	r2, r1, ip
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x62>
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80006bc:	f080 80ea 	bcs.w	8000894 <__udivmoddi4+0x22c>
 80006c0:	429a      	cmp	r2, r3
 80006c2:	f240 80e7 	bls.w	8000894 <__udivmoddi4+0x22c>
 80006c6:	3902      	subs	r1, #2
 80006c8:	443b      	add	r3, r7
 80006ca:	1a9a      	subs	r2, r3, r2
 80006cc:	b2a3      	uxth	r3, r4
 80006ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80006d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006da:	fb00 fc0c 	mul.w	ip, r0, ip
 80006de:	459c      	cmp	ip, r3
 80006e0:	d909      	bls.n	80006f6 <__udivmoddi4+0x8e>
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006e8:	f080 80d6 	bcs.w	8000898 <__udivmoddi4+0x230>
 80006ec:	459c      	cmp	ip, r3
 80006ee:	f240 80d3 	bls.w	8000898 <__udivmoddi4+0x230>
 80006f2:	443b      	add	r3, r7
 80006f4:	3802      	subs	r0, #2
 80006f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006fa:	eba3 030c 	sub.w	r3, r3, ip
 80006fe:	2100      	movs	r1, #0
 8000700:	b11d      	cbz	r5, 800070a <__udivmoddi4+0xa2>
 8000702:	40f3      	lsrs	r3, r6
 8000704:	2200      	movs	r2, #0
 8000706:	e9c5 3200 	strd	r3, r2, [r5]
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d905      	bls.n	800071e <__udivmoddi4+0xb6>
 8000712:	b10d      	cbz	r5, 8000718 <__udivmoddi4+0xb0>
 8000714:	e9c5 0100 	strd	r0, r1, [r5]
 8000718:	2100      	movs	r1, #0
 800071a:	4608      	mov	r0, r1
 800071c:	e7f5      	b.n	800070a <__udivmoddi4+0xa2>
 800071e:	fab3 f183 	clz	r1, r3
 8000722:	2900      	cmp	r1, #0
 8000724:	d146      	bne.n	80007b4 <__udivmoddi4+0x14c>
 8000726:	4573      	cmp	r3, lr
 8000728:	d302      	bcc.n	8000730 <__udivmoddi4+0xc8>
 800072a:	4282      	cmp	r2, r0
 800072c:	f200 8105 	bhi.w	800093a <__udivmoddi4+0x2d2>
 8000730:	1a84      	subs	r4, r0, r2
 8000732:	eb6e 0203 	sbc.w	r2, lr, r3
 8000736:	2001      	movs	r0, #1
 8000738:	4690      	mov	r8, r2
 800073a:	2d00      	cmp	r5, #0
 800073c:	d0e5      	beq.n	800070a <__udivmoddi4+0xa2>
 800073e:	e9c5 4800 	strd	r4, r8, [r5]
 8000742:	e7e2      	b.n	800070a <__udivmoddi4+0xa2>
 8000744:	2a00      	cmp	r2, #0
 8000746:	f000 8090 	beq.w	800086a <__udivmoddi4+0x202>
 800074a:	fab2 f682 	clz	r6, r2
 800074e:	2e00      	cmp	r6, #0
 8000750:	f040 80a4 	bne.w	800089c <__udivmoddi4+0x234>
 8000754:	1a8a      	subs	r2, r1, r2
 8000756:	0c03      	lsrs	r3, r0, #16
 8000758:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800075c:	b280      	uxth	r0, r0
 800075e:	b2bc      	uxth	r4, r7
 8000760:	2101      	movs	r1, #1
 8000762:	fbb2 fcfe 	udiv	ip, r2, lr
 8000766:	fb0e 221c 	mls	r2, lr, ip, r2
 800076a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800076e:	fb04 f20c 	mul.w	r2, r4, ip
 8000772:	429a      	cmp	r2, r3
 8000774:	d907      	bls.n	8000786 <__udivmoddi4+0x11e>
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	f10c 38ff 	add.w	r8, ip, #4294967295
 800077c:	d202      	bcs.n	8000784 <__udivmoddi4+0x11c>
 800077e:	429a      	cmp	r2, r3
 8000780:	f200 80e0 	bhi.w	8000944 <__udivmoddi4+0x2dc>
 8000784:	46c4      	mov	ip, r8
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	fbb3 f2fe 	udiv	r2, r3, lr
 800078c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000790:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000794:	fb02 f404 	mul.w	r4, r2, r4
 8000798:	429c      	cmp	r4, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x144>
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	f102 30ff 	add.w	r0, r2, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x142>
 80007a4:	429c      	cmp	r4, r3
 80007a6:	f200 80ca 	bhi.w	800093e <__udivmoddi4+0x2d6>
 80007aa:	4602      	mov	r2, r0
 80007ac:	1b1b      	subs	r3, r3, r4
 80007ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007b2:	e7a5      	b.n	8000700 <__udivmoddi4+0x98>
 80007b4:	f1c1 0620 	rsb	r6, r1, #32
 80007b8:	408b      	lsls	r3, r1
 80007ba:	fa22 f706 	lsr.w	r7, r2, r6
 80007be:	431f      	orrs	r7, r3
 80007c0:	fa0e f401 	lsl.w	r4, lr, r1
 80007c4:	fa20 f306 	lsr.w	r3, r0, r6
 80007c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007d0:	4323      	orrs	r3, r4
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	fa1f fc87 	uxth.w	ip, r7
 80007da:	fbbe f0f9 	udiv	r0, lr, r9
 80007de:	0c1c      	lsrs	r4, r3, #16
 80007e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ec:	45a6      	cmp	lr, r4
 80007ee:	fa02 f201 	lsl.w	r2, r2, r1
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x1a0>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007fa:	f080 809c 	bcs.w	8000936 <__udivmoddi4+0x2ce>
 80007fe:	45a6      	cmp	lr, r4
 8000800:	f240 8099 	bls.w	8000936 <__udivmoddi4+0x2ce>
 8000804:	3802      	subs	r0, #2
 8000806:	443c      	add	r4, r7
 8000808:	eba4 040e 	sub.w	r4, r4, lr
 800080c:	fa1f fe83 	uxth.w	lr, r3
 8000810:	fbb4 f3f9 	udiv	r3, r4, r9
 8000814:	fb09 4413 	mls	r4, r9, r3, r4
 8000818:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800081c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000820:	45a4      	cmp	ip, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x1ce>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f103 3eff 	add.w	lr, r3, #4294967295
 800082a:	f080 8082 	bcs.w	8000932 <__udivmoddi4+0x2ca>
 800082e:	45a4      	cmp	ip, r4
 8000830:	d97f      	bls.n	8000932 <__udivmoddi4+0x2ca>
 8000832:	3b02      	subs	r3, #2
 8000834:	443c      	add	r4, r7
 8000836:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800083a:	eba4 040c 	sub.w	r4, r4, ip
 800083e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000842:	4564      	cmp	r4, ip
 8000844:	4673      	mov	r3, lr
 8000846:	46e1      	mov	r9, ip
 8000848:	d362      	bcc.n	8000910 <__udivmoddi4+0x2a8>
 800084a:	d05f      	beq.n	800090c <__udivmoddi4+0x2a4>
 800084c:	b15d      	cbz	r5, 8000866 <__udivmoddi4+0x1fe>
 800084e:	ebb8 0203 	subs.w	r2, r8, r3
 8000852:	eb64 0409 	sbc.w	r4, r4, r9
 8000856:	fa04 f606 	lsl.w	r6, r4, r6
 800085a:	fa22 f301 	lsr.w	r3, r2, r1
 800085e:	431e      	orrs	r6, r3
 8000860:	40cc      	lsrs	r4, r1
 8000862:	e9c5 6400 	strd	r6, r4, [r5]
 8000866:	2100      	movs	r1, #0
 8000868:	e74f      	b.n	800070a <__udivmoddi4+0xa2>
 800086a:	fbb1 fcf2 	udiv	ip, r1, r2
 800086e:	0c01      	lsrs	r1, r0, #16
 8000870:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000874:	b280      	uxth	r0, r0
 8000876:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800087a:	463b      	mov	r3, r7
 800087c:	4638      	mov	r0, r7
 800087e:	463c      	mov	r4, r7
 8000880:	46b8      	mov	r8, r7
 8000882:	46be      	mov	lr, r7
 8000884:	2620      	movs	r6, #32
 8000886:	fbb1 f1f7 	udiv	r1, r1, r7
 800088a:	eba2 0208 	sub.w	r2, r2, r8
 800088e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000892:	e766      	b.n	8000762 <__udivmoddi4+0xfa>
 8000894:	4601      	mov	r1, r0
 8000896:	e718      	b.n	80006ca <__udivmoddi4+0x62>
 8000898:	4610      	mov	r0, r2
 800089a:	e72c      	b.n	80006f6 <__udivmoddi4+0x8e>
 800089c:	f1c6 0220 	rsb	r2, r6, #32
 80008a0:	fa2e f302 	lsr.w	r3, lr, r2
 80008a4:	40b7      	lsls	r7, r6
 80008a6:	40b1      	lsls	r1, r6
 80008a8:	fa20 f202 	lsr.w	r2, r0, r2
 80008ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008b0:	430a      	orrs	r2, r1
 80008b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008b6:	b2bc      	uxth	r4, r7
 80008b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008bc:	0c11      	lsrs	r1, r2, #16
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb08 f904 	mul.w	r9, r8, r4
 80008c6:	40b0      	lsls	r0, r6
 80008c8:	4589      	cmp	r9, r1
 80008ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ce:	b280      	uxth	r0, r0
 80008d0:	d93e      	bls.n	8000950 <__udivmoddi4+0x2e8>
 80008d2:	1879      	adds	r1, r7, r1
 80008d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008d8:	d201      	bcs.n	80008de <__udivmoddi4+0x276>
 80008da:	4589      	cmp	r9, r1
 80008dc:	d81f      	bhi.n	800091e <__udivmoddi4+0x2b6>
 80008de:	eba1 0109 	sub.w	r1, r1, r9
 80008e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008e6:	fb09 f804 	mul.w	r8, r9, r4
 80008ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ee:	b292      	uxth	r2, r2
 80008f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f4:	4542      	cmp	r2, r8
 80008f6:	d229      	bcs.n	800094c <__udivmoddi4+0x2e4>
 80008f8:	18ba      	adds	r2, r7, r2
 80008fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80008fe:	d2c4      	bcs.n	800088a <__udivmoddi4+0x222>
 8000900:	4542      	cmp	r2, r8
 8000902:	d2c2      	bcs.n	800088a <__udivmoddi4+0x222>
 8000904:	f1a9 0102 	sub.w	r1, r9, #2
 8000908:	443a      	add	r2, r7
 800090a:	e7be      	b.n	800088a <__udivmoddi4+0x222>
 800090c:	45f0      	cmp	r8, lr
 800090e:	d29d      	bcs.n	800084c <__udivmoddi4+0x1e4>
 8000910:	ebbe 0302 	subs.w	r3, lr, r2
 8000914:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000918:	3801      	subs	r0, #1
 800091a:	46e1      	mov	r9, ip
 800091c:	e796      	b.n	800084c <__udivmoddi4+0x1e4>
 800091e:	eba7 0909 	sub.w	r9, r7, r9
 8000922:	4449      	add	r1, r9
 8000924:	f1a8 0c02 	sub.w	ip, r8, #2
 8000928:	fbb1 f9fe 	udiv	r9, r1, lr
 800092c:	fb09 f804 	mul.w	r8, r9, r4
 8000930:	e7db      	b.n	80008ea <__udivmoddi4+0x282>
 8000932:	4673      	mov	r3, lr
 8000934:	e77f      	b.n	8000836 <__udivmoddi4+0x1ce>
 8000936:	4650      	mov	r0, sl
 8000938:	e766      	b.n	8000808 <__udivmoddi4+0x1a0>
 800093a:	4608      	mov	r0, r1
 800093c:	e6fd      	b.n	800073a <__udivmoddi4+0xd2>
 800093e:	443b      	add	r3, r7
 8000940:	3a02      	subs	r2, #2
 8000942:	e733      	b.n	80007ac <__udivmoddi4+0x144>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	443b      	add	r3, r7
 800094a:	e71c      	b.n	8000786 <__udivmoddi4+0x11e>
 800094c:	4649      	mov	r1, r9
 800094e:	e79c      	b.n	800088a <__udivmoddi4+0x222>
 8000950:	eba1 0109 	sub.w	r1, r1, r9
 8000954:	46c4      	mov	ip, r8
 8000956:	fbb1 f9fe 	udiv	r9, r1, lr
 800095a:	fb09 f804 	mul.w	r8, r9, r4
 800095e:	e7c4      	b.n	80008ea <__udivmoddi4+0x282>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <EEPROM_CS_LOW>:
#include "eeprom_25lc256.h"

extern SPI_HandleTypeDef hspi1;
osSemaphoreId_t spi_dma_semaphore;

static void EEPROM_CS_LOW(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <EEPROM_CS_LOW+0x14>)
 800096e:	f003 ff63 	bl	8004838 <HAL_GPIO_WritePin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40020400 	.word	0x40020400

0800097c <EEPROM_CS_HIGH>:

static void EEPROM_CS_HIGH(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <EEPROM_CS_HIGH+0x14>)
 8000986:	f003 ff57 	bl	8004838 <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020400 	.word	0x40020400

08000994 <EEPROM_WriteEnable>:

/* EEPROM에 데이터를 쓰기 전에 
 * 쓰기 활성화 명령을 전송해야 한다. 
 */
static void EEPROM_WriteEnable(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 800099a:	2306      	movs	r3, #6
 800099c:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_LOW();
 800099e:	f7ff ffe1 	bl	8000964 <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80009a2:	1df9      	adds	r1, r7, #7
 80009a4:	2364      	movs	r3, #100	@ 0x64
 80009a6:	2201      	movs	r2, #1
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <EEPROM_WriteEnable+0x28>)
 80009aa:	f006 ff2c 	bl	8007806 <HAL_SPI_Transmit>
    EEPROM_CS_HIGH();
 80009ae:	f7ff ffe5 	bl	800097c <EEPROM_CS_HIGH>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000318 	.word	0x20000318

080009c0 <EEPROM_WaitForWriteInProgress>:
/* 
 * EEPROM에 데이터 저장 시간을 고려하여
 * EEPROM의 상태 레지스터를 계속 확인하고
 * 내부 쓰기 작업이 끝나면 다음 명령을 보내기 위함
 */
static void EEPROM_WaitForWriteInProgress(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_RDSR;
 80009c6:	2305      	movs	r3, #5
 80009c8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    EEPROM_CS_LOW();
 80009ca:	f7ff ffcb 	bl	8000964 <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80009ce:	1df9      	adds	r1, r7, #7
 80009d0:	2364      	movs	r3, #100	@ 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <EEPROM_WaitForWriteInProgress+0x3c>)
 80009d6:	f006 ff16 	bl	8007806 <HAL_SPI_Transmit>
    do {
        HAL_SPI_Receive(&hspi1, &status, 1, 100);
 80009da:	1db9      	adds	r1, r7, #6
 80009dc:	2364      	movs	r3, #100	@ 0x64
 80009de:	2201      	movs	r2, #1
 80009e0:	4806      	ldr	r0, [pc, #24]	@ (80009fc <EEPROM_WaitForWriteInProgress+0x3c>)
 80009e2:	f007 f84c 	bl	8007a7e <HAL_SPI_Receive>
    } while (status & 0x01); // 상태 레지스터의 WIP(Write-In-Progress) 비트가 0이 될 때까지 대기
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f4      	bne.n	80009da <EEPROM_WaitForWriteInProgress+0x1a>
    EEPROM_CS_HIGH();
 80009f0:	f7ff ffc4 	bl	800097c <EEPROM_CS_HIGH>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000318 	.word	0x20000318

08000a00 <EEPROM_Init>:

void EEPROM_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    // DMA 콜백 함수에서 Release
    spi_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f009 fab0 	bl	8009f6e <osSemaphoreNew>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <EEPROM_Init+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
    if (spi_dma_semaphore == NULL) {
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <EEPROM_Init+0x24>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <EEPROM_Init+0x20>
        Error_Handler();
 8000a1c:	f000 fc1c 	bl	8001258 <Error_Handler>
    }
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000007c 	.word	0x2000007c

08000a28 <EEPROM_Write_DTC>:

HAL_StatusTypeDef EEPROM_Write_DTC(uint16_t address, uint8_t* pData, uint16_t size) {
 8000a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	6039      	str	r1, [r7, #0]
 8000a34:	80fb      	strh	r3, [r7, #6]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80bb      	strh	r3, [r7, #4]
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	461e      	mov	r6, r3
    EEPROM_WaitForWriteInProgress();
 8000a3e:	f7ff ffbf 	bl	80009c0 <EEPROM_WaitForWriteInProgress>
    EEPROM_WriteEnable();
 8000a42:	f7ff ffa7 	bl	8000994 <EEPROM_WriteEnable>

    uint8_t tx_buffer[size + 3];          // 명령어(1) + 데이터 저장할 주소(2) + 데이터(size) 저장
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	1cd9      	adds	r1, r3, #3
 8000a4a:	1e4b      	subs	r3, r1, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	460a      	mov	r2, r1
 8000a50:	2300      	movs	r3, #0
 8000a52:	4690      	mov	r8, r2
 8000a54:	4699      	mov	r9, r3
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4614      	mov	r4, r2
 8000a70:	461d      	mov	r5, r3
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	00eb      	lsls	r3, r5, #3
 8000a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a80:	00e2      	lsls	r2, r4, #3
 8000a82:	460b      	mov	r3, r1
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3300      	adds	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
    tx_buffer[0] = EEPROM_CMD_WRITE;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = (address >> 8) & 0xFF; // 주소 상위 바이트
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = address & 0xFF;        // 주소 하위 바이트
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	709a      	strb	r2, [r3, #2]
    memcpy(&tx_buffer[3], pData, size);
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	88ba      	ldrh	r2, [r7, #4]
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00c fe9e 	bl	800d7f8 <memcpy>

    EEPROM_CS_LOW();
 8000abc:	f7ff ff52 	bl	8000964 <EEPROM_CS_LOW>
    if (HAL_SPI_Transmit_DMA(&hspi1, tx_buffer, size + 3) != HAL_OK) {
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	3303      	adds	r3, #3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	4810      	ldr	r0, [pc, #64]	@ (8000b0c <EEPROM_Write_DTC+0xe4>)
 8000acc:	f007 fa8a 	bl	8007fe4 <HAL_SPI_Transmit_DMA>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <EEPROM_Write_DTC+0xb6>
        EEPROM_CS_HIGH();
 8000ad6:	f7ff ff51 	bl	800097c <EEPROM_CS_HIGH>
        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <EEPROM_Write_DTC+0xd6>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <EEPROM_Write_DTC+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2164      	movs	r1, #100	@ 0x64
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f009 facb 	bl	800a080 <osSemaphoreAcquire>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <EEPROM_Write_DTC+0xd0>
        EEPROM_CS_HIGH();
 8000af0:	f7ff ff44 	bl	800097c <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e002      	b.n	8000afe <EEPROM_Write_DTC+0xd6>
    }

    EEPROM_CS_HIGH();
 8000af8:	f7ff ff40 	bl	800097c <EEPROM_CS_HIGH>
    return HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	46b5      	mov	sp, r6
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000318 	.word	0x20000318
 8000b10:	2000007c 	.word	0x2000007c

08000b14 <EEPROM_Read_DTCs>:

HAL_StatusTypeDef EEPROM_Read_DTCs(uint16_t address, uint8_t* pData, uint16_t size) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
    EEPROM_WaitForWriteInProgress();
 8000b24:	f7ff ff4c 	bl	80009c0 <EEPROM_WaitForWriteInProgress>

    uint8_t tx_buffer[3]; // 명령어(1) + 주소(2)
    tx_buffer[0] = EEPROM_CMD_READ;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = (address >> 8) & 0xFF;
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = address & 0xFF;
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_LOW();
 8000b3c:	f7ff ff12 	bl	8000964 <EEPROM_CS_LOW>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, pData, size + 3) != HAL_OK) {
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	3303      	adds	r3, #3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	f107 010c 	add.w	r1, r7, #12
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <EEPROM_Read_DTCs+0x74>)
 8000b4e:	f007 faff 	bl	8008150 <HAL_SPI_TransmitReceive_DMA>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <EEPROM_Read_DTCs+0x4c>
        EEPROM_CS_HIGH();
 8000b58:	f7ff ff10 	bl	800097c <EEPROM_CS_HIGH>
        return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e00f      	b.n	8000b80 <EEPROM_Read_DTCs+0x6c>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <EEPROM_Read_DTCs+0x78>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2164      	movs	r1, #100	@ 0x64
 8000b66:	4618      	mov	r0, r3
 8000b68:	f009 fa8a 	bl	800a080 <osSemaphoreAcquire>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <EEPROM_Read_DTCs+0x66>
        EEPROM_CS_HIGH();
 8000b72:	f7ff ff03 	bl	800097c <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e002      	b.n	8000b80 <EEPROM_Read_DTCs+0x6c>
    }

    EEPROM_CS_HIGH();
 8000b7a:	f7ff feff 	bl	800097c <EEPROM_CS_HIGH>
    return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000318 	.word	0x20000318
 8000b8c:	2000007c 	.word	0x2000007c

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f001 fd74 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f8a8 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 fae2 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba0:	f000 fa7a 	bl	8001098 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ba4:	f000 f900 	bl	8000da8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000ba8:	f000 f950 	bl	8000e4c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000bac:	f000 f982 	bl	8000eb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bb0:	f000 f9ae 	bl	8000f10 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000bb4:	f000 f9da 	bl	8000f6c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bb8:	f000 fa0e 	bl	8000fd8 <MX_SPI2_Init>
  MX_UART4_Init();
 8000bbc:	f000 fa42 	bl	8001044 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PMIC_Init();
 8000bc0:	f000 fb50 	bl	8001264 <PMIC_Init>
  EEPROM_Init();
 8000bc4:	f7ff ff1c 	bl	8000a00 <EEPROM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc8:	f008 ffcc 	bl	8009b64 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000bcc:	482b      	ldr	r0, [pc, #172]	@ (8000c7c <main+0xec>)
 8000bce:	f009 f8c0 	bl	8009d52 <osMutexNew>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c80 <main+0xf0>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  EepromMutexHandle = osMutexNew(&EepromMutex_attributes);
 8000bd8:	482a      	ldr	r0, [pc, #168]	@ (8000c84 <main+0xf4>)
 8000bda:	f009 f8ba 	bl	8009d52 <osMutexNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <main+0xf8>)
 8000be2:	6013      	str	r3, [r2, #0]
  /* Create the queue(s) */
  /* creation of CanQueue */
  
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  CanQueueHandle = osMessageQueueNew (8, sizeof(CAN_Message_t), &CanQueue_attributes);
 8000be4:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <main+0xfc>)
 8000be6:	2124      	movs	r1, #36	@ 0x24
 8000be8:	2008      	movs	r0, #8
 8000bea:	f009 fadf 	bl	800a1ac <osMessageQueueNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <main+0x100>)
 8000bf2:	6013      	str	r3, [r2, #0]
  DTC_RequestQueueHandle = osMessageQueueNew(16, sizeof(DTC_RequestMessage_t), &DTC_RequestQueue_attributes);
 8000bf4:	4a27      	ldr	r2, [pc, #156]	@ (8000c94 <main+0x104>)
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	f009 fad7 	bl	800a1ac <osMessageQueueNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a25      	ldr	r2, [pc, #148]	@ (8000c98 <main+0x108>)
 8000c02:	6013      	str	r3, [r2, #0]
  DTC_ResponseQueueHandle = osMessageQueueNew(1, sizeof(DTC_ResponseMessage_t), &DTC_ResponseQueue_attributes);
 8000c04:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <main+0x10c>)
 8000c06:	2122      	movs	r1, #34	@ 0x22
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f009 facf 	bl	800a1ac <osMessageQueueNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <main+0x110>)
 8000c12:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c14:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <main+0x114>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <main+0x118>)
 8000c1a:	f008 ffed 	bl	8009bf8 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <main+0x11c>)
 8000c22:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 8000c24:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <main+0x120>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <main+0x124>)
 8000c2a:	f008 ffe5 	bl	8009bf8 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <main+0x128>)
 8000c32:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 8000c34:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <main+0x12c>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4821      	ldr	r0, [pc, #132]	@ (8000cc0 <main+0x130>)
 8000c3a:	f008 ffdd 	bl	8009bf8 <osThreadNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <main+0x134>)
 8000c42:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 8000c44:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <main+0x138>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4820      	ldr	r0, [pc, #128]	@ (8000ccc <main+0x13c>)
 8000c4a:	f008 ffd5 	bl	8009bf8 <osThreadNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <main+0x140>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8000c54:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd4 <main+0x144>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	481f      	ldr	r0, [pc, #124]	@ (8000cd8 <main+0x148>)
 8000c5a:	f008 ffcd 	bl	8009bf8 <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <main+0x14c>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8000c64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <main+0x150>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <main+0x154>)
 8000c6a:	f008 ffc5 	bl	8009bf8 <osThreadNew>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <main+0x158>)
 8000c72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c74:	f008 ff9a 	bl	8009bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <main+0xe8>
 8000c7c:	0800e2c0 	.word	0x0800e2c0
 8000c80:	200005a8 	.word	0x200005a8
 8000c84:	0800e300 	.word	0x0800e300
 8000c88:	200005b4 	.word	0x200005b4
 8000c8c:	0800e2a8 	.word	0x0800e2a8
 8000c90:	200005a4 	.word	0x200005a4
 8000c94:	0800e2d0 	.word	0x0800e2d0
 8000c98:	200005ac 	.word	0x200005ac
 8000c9c:	0800e2e8 	.word	0x0800e2e8
 8000ca0:	200005b0 	.word	0x200005b0
 8000ca4:	0800e1d0 	.word	0x0800e1d0
 8000ca8:	080024e1 	.word	0x080024e1
 8000cac:	2000058c 	.word	0x2000058c
 8000cb0:	0800e1f4 	.word	0x0800e1f4
 8000cb4:	08001dc9 	.word	0x08001dc9
 8000cb8:	20000590 	.word	0x20000590
 8000cbc:	0800e218 	.word	0x0800e218
 8000cc0:	08002031 	.word	0x08002031
 8000cc4:	20000594 	.word	0x20000594
 8000cc8:	0800e23c 	.word	0x0800e23c
 8000ccc:	080021e1 	.word	0x080021e1
 8000cd0:	20000598 	.word	0x20000598
 8000cd4:	0800e260 	.word	0x0800e260
 8000cd8:	080023a5 	.word	0x080023a5
 8000cdc:	2000059c 	.word	0x2000059c
 8000ce0:	0800e284 	.word	0x0800e284
 8000ce4:	08002469 	.word	0x08002469
 8000ce8:	200005a0 	.word	0x200005a0

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	@ 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2234      	movs	r2, #52	@ 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00c fd48 	bl	800d790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <SystemClock_Config+0xb4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <SystemClock_Config+0xb4>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <SystemClock_Config+0xb4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <SystemClock_Config+0xb8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 fa45 	bl	80071ec <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d68:	f000 fa76 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 f850 	bl	8006e2c <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d92:	f000 fa61 	bl	8001258 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3750      	adds	r7, #80	@ 0x50
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0x9c>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <MX_ADC1_Init+0xa0>)
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e08:	f001 fcac 	bl	8002764 <HAL_ADC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 fa21 	bl	8001258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e28:	f001 fe60 	bl	8002aec <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e32:	f000 fa11 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000080 	.word	0x20000080
 8000e44:	40012000 	.word	0x40012000
 8000e48:	0f000001 	.word	0x0f000001

08000e4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <MX_CAN1_Init+0x64>)
 8000e54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e58:	2210      	movs	r2, #16
 8000e5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e68:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_CAN1_Init+0x60>)
 8000e9a:	f002 f855 	bl	8002f48 <HAL_CAN_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 f9d8 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	40006400 	.word	0x40006400

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000eba:	4a13      	ldr	r2, [pc, #76]	@ (8000f08 <MX_I2C1_Init+0x54>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_I2C1_Init+0x58>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_I2C1_Init+0x50>)
 8000ef2:	f003 fcbb 	bl	800486c <HAL_I2C_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000efc:	f000 f9ac 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000f0 	.word	0x200000f0
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f16:	4a13      	ldr	r2, [pc, #76]	@ (8000f64 <MX_I2C2_Init+0x54>)
 8000f18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <MX_I2C2_Init+0x58>)
 8000f1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <MX_I2C2_Init+0x50>)
 8000f4e:	f003 fc8d 	bl	800486c <HAL_I2C_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f58:	f000 f97e 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000144 	.word	0x20000144
 8000f64:	40005800 	.word	0x40005800
 8000f68:	000186a0 	.word	0x000186a0

08000f6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <MX_SPI1_Init+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fb8:	220a      	movs	r2, #10
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_SPI1_Init+0x64>)
 8000fbe:	f006 fb99 	bl	80076f4 <HAL_SPI_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fc8:	f000 f946 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000318 	.word	0x20000318
 8000fd4:	40013000 	.word	0x40013000

08000fd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <MX_SPI2_Init+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fe4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_SPI2_Init+0x64>)
 8001004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001008:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_SPI2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_SPI2_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_SPI2_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_SPI2_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_SPI2_Init+0x64>)
 8001024:	220a      	movs	r2, #10
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_SPI2_Init+0x64>)
 800102a:	f006 fb63 	bl	80076f4 <HAL_SPI_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001034:	f000 f910 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000370 	.word	0x20000370
 8001040:	40003800 	.word	0x40003800

08001044 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_UART4_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <MX_UART4_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <MX_UART4_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_UART4_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_UART4_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_UART4_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_UART4_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_UART4_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_UART4_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_UART4_Init+0x4c>)
 800107c:	f007 fd1a 	bl	8008ab4 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f8e7 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000548 	.word	0x20000548
 8001094:	40004c00 	.word	0x40004c00

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a27      	ldr	r2, [pc, #156]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <MX_DMA_Init+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	200b      	movs	r0, #11
 80010dc:	f002 fdc5 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010e0:	200b      	movs	r0, #11
 80010e2:	f002 fdde 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	200d      	movs	r0, #13
 80010ec:	f002 fdbd 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010f0:	200d      	movs	r0, #13
 80010f2:	f002 fdd6 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	200e      	movs	r0, #14
 80010fc:	f002 fdb5 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001100:	200e      	movs	r0, #14
 8001102:	f002 fdce 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	200f      	movs	r0, #15
 800110c:	f002 fdad 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001110:	200f      	movs	r0, #15
 8001112:	f002 fdc6 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2011      	movs	r0, #17
 800111c:	f002 fda5 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001120:	2011      	movs	r0, #17
 8001122:	f002 fdbe 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	202f      	movs	r0, #47	@ 0x2f
 800112c:	f002 fd9d 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001130:	202f      	movs	r0, #47	@ 0x2f
 8001132:	f002 fdb6 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2038      	movs	r0, #56	@ 0x38
 800113c:	f002 fd95 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	@ 0x38
 8001142:	f002 fdae 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	203b      	movs	r0, #59	@ 0x3b
 800114c:	f002 fd8d 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001150:	203b      	movs	r0, #59	@ 0x3b
 8001152:	f002 fda6 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <MX_GPIO_Init+0xec>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a33      	ldr	r2, [pc, #204]	@ (8001250 <MX_GPIO_Init+0xec>)
 8001184:	f043 0320 	orr.w	r3, r3, #32
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <MX_GPIO_Init+0xec>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <MX_GPIO_Init+0xec>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a25      	ldr	r2, [pc, #148]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_GPIO_Init+0xec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2107      	movs	r1, #7
 800120a:	4812      	ldr	r0, [pc, #72]	@ (8001254 <MX_GPIO_Init+0xf0>)
 800120c:	f003 fb14 	bl	8004838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001210:	2303      	movs	r3, #3
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	@ (8001254 <MX_GPIO_Init+0xf0>)
 8001228:	f003 f972 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122c:	2304      	movs	r3, #4
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001230:	2311      	movs	r3, #17
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_GPIO_Init+0xf0>)
 8001244:	f003 f964 	bl	8004510 <HAL_GPIO_Init>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40020400 	.word	0x40020400

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <PMIC_Init>:

/*
 * PMIC 드라이버 초기화
 * RTOS 세마포어 생성
 */
void PMIC_Init(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    i2c_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2001      	movs	r0, #1
 800126e:	f008 fe7e 	bl	8009f6e <osSemaphoreNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <PMIC_Init+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
    if (i2c_dma_semaphore == NULL) {
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <PMIC_Init+0x24>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <PMIC_Init+0x20>
        // 세마포어 생성 실패 처리
        Error_Handler();
 8001280:	f7ff ffea 	bl	8001258 <Error_Handler>
    }
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200005b8 	.word	0x200005b8

0800128c <PMIC_Read_Faults>:

/**
 * DMA를 사용하여 PMIC의 Fault 관련 레지스터들을 연속으로 read
 */
HAL_StatusTypeDef PMIC_Read_Faults(uint8_t* pData, uint16_t Size) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
    // HAL_I2C_Mem_Read_DMA 함수를 호출하여 Non-Blocking I2C 읽기 시작
    // FSM_STATE_REG(0x05) 레지스터부터 Size 바이트만큼 read
    if (HAL_I2C_Mem_Read_DMA(&hi2c1, MP5475_I2C_SLAVE_ADDR, FSM_STATE_REG, I2C_MEMADD_SIZE_8BIT, pData, Size) != HAL_OK) {
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	2205      	movs	r2, #5
 80012a4:	21c0      	movs	r1, #192	@ 0xc0
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <PMIC_Read_Faults+0x4c>)
 80012a8:	f003 fc24 	bl	8004af4 <HAL_I2C_Mem_Read_DMA>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <PMIC_Read_Faults+0x2a>
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00b      	b.n	80012ce <PMIC_Read_Faults+0x42>
    }

    // DMA 전송이 완료될 때까지 세마포어 대기 (Blocked)
    if (osSemaphoreAcquire(i2c_dma_semaphore, 100) == osOK) {
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <PMIC_Read_Faults+0x50>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2164      	movs	r1, #100	@ 0x64
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fedf 	bl	800a080 <osSemaphoreAcquire>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <PMIC_Read_Faults+0x40>
        return HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e000      	b.n	80012ce <PMIC_Read_Faults+0x42>
    } else {
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
    }
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000f0 	.word	0x200000f0
 80012dc:	200005b8 	.word	0x200005b8

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_MspInit+0x54>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_MspInit+0x54>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_MspInit+0x54>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_MspInit+0x54>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_MspInit+0x54>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_MspInit+0x54>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	210f      	movs	r1, #15
 8001322:	f06f 0001 	mvn.w	r0, #1
 8001326:	f002 fca0 	bl	8003c6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_ADC_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001392:	2304      	movs	r3, #4
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <HAL_ADC_MspInit+0x84>)
 80013a6:	f003 f8b3 	bl	8004510 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_CAN_MspInit+0xa4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13b      	bne.n	800145a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 8001408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <HAL_CAN_MspInit+0xa8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141a:	2303      	movs	r3, #3
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800142a:	2309      	movs	r3, #9
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <HAL_CAN_MspInit+0xac>)
 8001436:	f003 f86b 	bl	8004510 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	2013      	movs	r0, #19
 8001440:	f002 fc13 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001444:	2013      	movs	r0, #19
 8001446:	f002 fc2c 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	2014      	movs	r0, #20
 8001450:	f002 fc0b 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001454:	2014      	movs	r0, #20
 8001456:	f002 fc24 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40006400 	.word	0x40006400
 8001468:	40023800 	.word	0x40023800
 800146c:	40021800 	.word	0x40021800

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9c      	ldr	r2, [pc, #624]	@ (8001700 <HAL_I2C_MspInit+0x290>)
 800148e:	4293      	cmp	r3, r2
 8001490:	f040 809b 	bne.w	80015ca <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	4b9a      	ldr	r3, [pc, #616]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4a99      	ldr	r2, [pc, #612]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a4:	4b97      	ldr	r3, [pc, #604]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b0:	23c0      	movs	r3, #192	@ 0xc0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	488f      	ldr	r0, [pc, #572]	@ (8001708 <HAL_I2C_MspInit+0x298>)
 80014cc:	f003 f820 	bl	8004510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a8a      	ldr	r2, [pc, #552]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ec:	4b87      	ldr	r3, [pc, #540]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 80014ee:	4a88      	ldr	r2, [pc, #544]	@ (8001710 <HAL_I2C_MspInit+0x2a0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f2:	4b86      	ldr	r3, [pc, #536]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 80014f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b84      	ldr	r3, [pc, #528]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b82      	ldr	r3, [pc, #520]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b81      	ldr	r3, [pc, #516]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b7f      	ldr	r3, [pc, #508]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b7d      	ldr	r3, [pc, #500]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b7c      	ldr	r3, [pc, #496]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001520:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001522:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001526:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001528:	4b78      	ldr	r3, [pc, #480]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152e:	4877      	ldr	r0, [pc, #476]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001530:	f002 fbd2 	bl	8003cd8 <HAL_DMA_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800153a:	f7ff fe8d 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a72      	ldr	r2, [pc, #456]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38
 8001544:	4a71      	ldr	r2, [pc, #452]	@ (800170c <HAL_I2C_MspInit+0x29c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800154a:	4b72      	ldr	r3, [pc, #456]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 800154c:	4a72      	ldr	r2, [pc, #456]	@ (8001718 <HAL_I2C_MspInit+0x2a8>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001550:	4b70      	ldr	r3, [pc, #448]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001552:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001556:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001558:	4b6e      	ldr	r3, [pc, #440]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155e:	4b6d      	ldr	r3, [pc, #436]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001564:	4b6b      	ldr	r3, [pc, #428]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156c:	4b69      	ldr	r3, [pc, #420]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001572:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001578:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800157e:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001580:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001584:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800158c:	4861      	ldr	r0, [pc, #388]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 800158e:	f002 fba3 	bl	8003cd8 <HAL_DMA_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001598:	f7ff fe5e 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a5d      	ldr	r2, [pc, #372]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001714 <HAL_I2C_MspInit+0x2a4>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2105      	movs	r1, #5
 80015ac:	201f      	movs	r0, #31
 80015ae:	f002 fb5c 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015b2:	201f      	movs	r0, #31
 80015b4:	f002 fb75 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2105      	movs	r1, #5
 80015bc:	2020      	movs	r0, #32
 80015be:	f002 fb54 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015c2:	2020      	movs	r0, #32
 80015c4:	f002 fb6d 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015c8:	e095      	b.n	80016f6 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a53      	ldr	r2, [pc, #332]	@ (800171c <HAL_I2C_MspInit+0x2ac>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f040 8090 	bne.w	80016f6 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a49      	ldr	r2, [pc, #292]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f6:	2312      	movs	r3, #18
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001602:	2304      	movs	r3, #4
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4844      	ldr	r0, [pc, #272]	@ (8001720 <HAL_I2C_MspInit+0x2b0>)
 800160e:	f002 ff7f 	bl	8004510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a3a      	ldr	r2, [pc, #232]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b38      	ldr	r3, [pc, #224]	@ (8001704 <HAL_I2C_MspInit+0x294>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800162e:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001630:	4a3d      	ldr	r2, [pc, #244]	@ (8001728 <HAL_I2C_MspInit+0x2b8>)
 8001632:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001636:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800163a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001650:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001656:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800166e:	482d      	ldr	r0, [pc, #180]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001670:	f002 fb32 	bl	8003cd8 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 800167a:	f7ff fded 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
 8001684:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <HAL_I2C_MspInit+0x2b4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 800168c:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <HAL_I2C_MspInit+0x2c0>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001690:	4b26      	ldr	r3, [pc, #152]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 8001692:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80016ca:	4818      	ldr	r0, [pc, #96]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016cc:	f002 fb04 	bl	8003cd8 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80016d6:	f7ff fdbf 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a13      	ldr	r2, [pc, #76]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_I2C_MspInit+0x2bc>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2021      	movs	r0, #33	@ 0x21
 80016ec:	f002 fabd 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80016f0:	2021      	movs	r0, #33	@ 0x21
 80016f2:	f002 fad6 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	@ 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	20000198 	.word	0x20000198
 8001710:	40026010 	.word	0x40026010
 8001714:	200001f8 	.word	0x200001f8
 8001718:	400260a0 	.word	0x400260a0
 800171c:	40005800 	.word	0x40005800
 8001720:	40021400 	.word	0x40021400
 8001724:	20000258 	.word	0x20000258
 8001728:	40026040 	.word	0x40026040
 800172c:	200002b8 	.word	0x200002b8
 8001730:	400260b8 	.word	0x400260b8

08001734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a4a      	ldr	r2, [pc, #296]	@ (800187c <HAL_SPI_MspInit+0x148>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f040 80a0 	bne.w	8001898 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	4b48      	ldr	r3, [pc, #288]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001760:	4a47      	ldr	r2, [pc, #284]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 8001762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001766:	6453      	str	r3, [r2, #68]	@ 0x44
 8001768:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	4b41      	ldr	r3, [pc, #260]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177c:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6313      	str	r3, [r2, #48]	@ 0x30
 8001784:	4b3e      	ldr	r3, [pc, #248]	@ (8001880 <HAL_SPI_MspInit+0x14c>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001790:	23e0      	movs	r3, #224	@ 0xe0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a0:	2305      	movs	r3, #5
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4836      	ldr	r0, [pc, #216]	@ (8001884 <HAL_SPI_MspInit+0x150>)
 80017ac:	f002 feb0 	bl	8004510 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80017b0:	4b35      	ldr	r3, [pc, #212]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017b2:	4a36      	ldr	r2, [pc, #216]	@ (800188c <HAL_SPI_MspInit+0x158>)
 80017b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80017bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017be:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017e4:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ea:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017f0:	4825      	ldr	r0, [pc, #148]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 80017f2:	f002 fa71 	bl	8003cd8 <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80017fc:	f7ff fd2c 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a21      	ldr	r2, [pc, #132]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 8001804:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001806:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <HAL_SPI_MspInit+0x154>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 800180e:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <HAL_SPI_MspInit+0x160>)
 8001810:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001814:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001818:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 800181c:	2240      	movs	r2, #64	@ 0x40
 800181e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800184c:	4810      	ldr	r0, [pc, #64]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 800184e:	f002 fa43 	bl	8003cd8 <HAL_DMA_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001858:	f7ff fcfe 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001860:	649a      	str	r2, [r3, #72]	@ 0x48
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_SPI_MspInit+0x15c>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2105      	movs	r1, #5
 800186c:	2023      	movs	r0, #35	@ 0x23
 800186e:	f002 f9fc 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001872:	2023      	movs	r0, #35	@ 0x23
 8001874:	f002 fa15 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001878:	e0c1      	b.n	80019fe <HAL_SPI_MspInit+0x2ca>
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	200003c8 	.word	0x200003c8
 800188c:	40026410 	.word	0x40026410
 8001890:	20000428 	.word	0x20000428
 8001894:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a08 <HAL_SPI_MspInit+0x2d4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f040 80ad 	bne.w	80019fe <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	4b58      	ldr	r3, [pc, #352]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a57      	ldr	r2, [pc, #348]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b4:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	4a50      	ldr	r2, [pc, #320]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	4a49      	ldr	r2, [pc, #292]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ec:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_SPI_MspInit+0x2d8>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018f8:	230c      	movs	r3, #12
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001908:	2305      	movs	r3, #5
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	483f      	ldr	r0, [pc, #252]	@ (8001a10 <HAL_SPI_MspInit+0x2dc>)
 8001914:	f002 fdfc 	bl	8004510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192a:	2305      	movs	r3, #5
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4837      	ldr	r0, [pc, #220]	@ (8001a14 <HAL_SPI_MspInit+0x2e0>)
 8001936:	f002 fdeb 	bl	8004510 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800193a:	4b37      	ldr	r3, [pc, #220]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800193c:	4a37      	ldr	r2, [pc, #220]	@ (8001a1c <HAL_SPI_MspInit+0x2e8>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001940:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001946:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194c:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001952:	4b31      	ldr	r3, [pc, #196]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001954:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001958:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001960:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001966:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001968:	2200      	movs	r2, #0
 800196a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800196c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001974:	2200      	movs	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001978:	4827      	ldr	r0, [pc, #156]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800197a:	f002 f9ad 	bl	8003cd8 <HAL_DMA_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001984:	f7ff fc68 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a23      	ldr	r2, [pc, #140]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 800198c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800198e:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_SPI_MspInit+0x2e4>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001994:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 8001996:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <HAL_SPI_MspInit+0x2f0>)
 8001998:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c6:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80019d2:	4813      	ldr	r0, [pc, #76]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019d4:	f002 f980 	bl	8003cd8 <HAL_DMA_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 80019de:	f7ff fc3b 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <HAL_SPI_MspInit+0x2ec>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	2024      	movs	r0, #36	@ 0x24
 80019f4:	f002 f939 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019f8:	2024      	movs	r0, #36	@ 0x24
 80019fa:	f002 f952 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	@ 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020400 	.word	0x40020400
 8001a18:	20000488 	.word	0x20000488
 8001a1c:	40026058 	.word	0x40026058
 8001a20:	200004e8 	.word	0x200004e8
 8001a24:	40026070 	.word	0x40026070

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <HAL_UART_MspInit+0xb4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d144      	bne.n	8001ad4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_UART_MspInit+0xb8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a92:	2308      	movs	r3, #8
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4811      	ldr	r0, [pc, #68]	@ (8001ae4 <HAL_UART_MspInit+0xbc>)
 8001a9e:	f002 fd37 	bl	8004510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001ab4:	230b      	movs	r3, #11
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <HAL_UART_MspInit+0xbc>)
 8001ac0:	f002 fd26 	bl	8004510 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	2034      	movs	r0, #52	@ 0x34
 8001aca:	f002 f8ce 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ace:	2034      	movs	r0, #52	@ 0x34
 8001ad0:	f002 f8e7 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004c00 	.word	0x40004c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b22:	f000 fdff 	bl	8002724 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b26:	f00a fc79 	bl	800c41c <xTaskGetSchedulerState>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b30:	f00b fb72 	bl	800d218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <DMA1_Stream0_IRQHandler+0x10>)
 8001b3e:	f002 fa63 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000198 	.word	0x20000198

08001b4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <DMA1_Stream2_IRQHandler+0x10>)
 8001b52:	f002 fa59 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000258 	.word	0x20000258

08001b60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <DMA1_Stream3_IRQHandler+0x10>)
 8001b66:	f002 fa4f 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000488 	.word	0x20000488

08001b74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <DMA1_Stream4_IRQHandler+0x10>)
 8001b7a:	f002 fa45 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200004e8 	.word	0x200004e8

08001b88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <DMA1_Stream6_IRQHandler+0x10>)
 8001b8e:	f002 fa3b 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001f8 	.word	0x200001f8

08001b9c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <CAN1_TX_IRQHandler+0x10>)
 8001ba2:	f001 fd58 	bl	8003656 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000c8 	.word	0x200000c8

08001bb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <CAN1_RX0_IRQHandler+0x10>)
 8001bb6:	f001 fd4e 	bl	8003656 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000c8 	.word	0x200000c8

08001bc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <I2C1_EV_IRQHandler+0x10>)
 8001bca:	f003 f927 	bl	8004e1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200000f0 	.word	0x200000f0

08001bd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <I2C1_ER_IRQHandler+0x10>)
 8001bde:	f003 fa8e 	bl	80050fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200000f0 	.word	0x200000f0

08001bec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <I2C2_EV_IRQHandler+0x10>)
 8001bf2:	f003 f913 	bl	8004e1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000144 	.word	0x20000144

08001c00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <SPI1_IRQHandler+0x10>)
 8001c06:	f006 fba5 	bl	8008354 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000318 	.word	0x20000318

08001c14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <SPI2_IRQHandler+0x10>)
 8001c1a:	f006 fb9b 	bl	8008354 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000370 	.word	0x20000370

08001c28 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <DMA1_Stream7_IRQHandler+0x10>)
 8001c2e:	f002 f9eb 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200002b8 	.word	0x200002b8

08001c3c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <UART4_IRQHandler+0x10>)
 8001c42:	f007 f817 	bl	8008c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000548 	.word	0x20000548

08001c50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <DMA2_Stream0_IRQHandler+0x10>)
 8001c56:	f002 f9d7 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003c8 	.word	0x200003c8

08001c64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <DMA2_Stream3_IRQHandler+0x10>)
 8001c6a:	f002 f9cd 	bl	8004008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000428 	.word	0x20000428

08001c78 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

/* PMIC Fault Read Callback */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d104      	bne.n	8001c94 <HAL_I2C_MemRxCpltCallback+0x1c>
    // Blocked I2CTask를 깨우기 위해 세마포어 반납
    osSemaphoreRelease(i2c_dma_semaphore);
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f008 fa48 	bl	800a124 <osSemaphoreRelease>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	200005b8 	.word	0x200005b8

08001ca4 <HAL_SPI_TxCpltCallback>:

/* EEPROM Write Callback */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <HAL_SPI_TxCpltCallback+0x24>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d104      	bne.n	8001cc0 <HAL_SPI_TxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_SPI_TxCpltCallback+0x28>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f008 fa32 	bl	800a124 <osSemaphoreRelease>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013000 	.word	0x40013000
 8001ccc:	2000007c 	.word	0x2000007c

08001cd0 <HAL_SPI_TxRxCpltCallback>:

/* EEPROM Read Callback */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <HAL_SPI_TxRxCpltCallback+0x24>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d104      	bne.n	8001cec <HAL_SPI_TxRxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_SPI_TxRxCpltCallback+0x28>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f008 fa1c 	bl	800a124 <osSemaphoreRelease>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013000 	.word	0x40013000
 8001cf8:	2000007c 	.word	0x2000007c

08001cfc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN 수신 FIFO 0에 메시지가 도착했을 때 호출되는 콜백 함수 */
extern osMessageQueueId_t CanQueueHandle;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    CAN_Message_t rx_msg;

    // 1. 수신된 CAN 메시지를 하드웨어 버퍼에서 읽어온다. 
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_msg.header, rx_msg.data) == HAL_OK) {
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	331c      	adds	r3, #28
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f001 fb68 	bl	80033e6 <HAL_CAN_GetRxMessage>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        // 2. 읽어온 메시지를 CanQueueHandle 메시지 큐로 전송한다.
        //    ISR에서는 타임아웃을 0으로 설정하여 절대 대기하지 않는다.
        osMessageQueuePut(CanQueueHandle, &rx_msg, 0, 0);
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	f107 010c 	add.w	r1, r7, #12
 8001d24:	2300      	movs	r3, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	f008 fab4 	bl	800a294 <osMessageQueuePut>
    }
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	@ 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200005a4 	.word	0x200005a4

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f00b fd1a 	bl	800d7a0 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20050000 	.word	0x20050000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	200005bc 	.word	0x200005bc
 8001da0:	20005170 	.word	0x20005170

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <StartI2CTask>:

/**
 * I2CTask는 1ms 주기로 PMIC의 Fault 상태를 확인하여,
 * 새롭게 발생한 Fault가 있으면 SPITask로 DTC 이벤트 큐를 전송한다.
 */
void StartI2CTask(void *argument) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	@ 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  static uint8_t previous_faults[5] = {0};   // 이전 Fault 상태를 저장하기 위한 static 변수
  static bool is_i2c_com_failed = false;      // I2C 통신 실패 상태 추적 플래그

  for(;;)
  {
    osDelay(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f007 ffa3 	bl	8009d1c <osDelay>

    if (PMIC_Read_Faults(current_faults, 5) == HAL_OK) {
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	2105      	movs	r1, #5
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fa55 	bl	800128c <PMIC_Read_Faults>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 80fe 	bne.w	8001fe6 <StartI2CTask+0x21e>

      MP5475_Reg07_Status* pCurReg07 = (MP5475_Reg07_Status*)&current_faults[2];
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	3302      	adds	r3, #2
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      MP5475_Reg08_Status* pCurReg08 = (MP5475_Reg08_Status*)&current_faults[3];
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	3303      	adds	r3, #3
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
      MP5475_Reg09_Status* pCurReg09 = (MP5475_Reg09_Status*)&current_faults[4];
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	3304      	adds	r3, #4
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24

      MP5475_Reg07_Status* pPrevReg07 = (MP5475_Reg07_Status*)&previous_faults[2];
 8001e02:	4b85      	ldr	r3, [pc, #532]	@ (8002018 <StartI2CTask+0x250>)
 8001e04:	623b      	str	r3, [r7, #32]
      MP5475_Reg08_Status* pPrevReg08 = (MP5475_Reg08_Status*)&previous_faults[3];
 8001e06:	4b85      	ldr	r3, [pc, #532]	@ (800201c <StartI2CTask+0x254>)
 8001e08:	61fb      	str	r3, [r7, #28]
      MP5475_Reg09_Status* pPrevReg09 = (MP5475_Reg09_Status*)&previous_faults[4];
 8001e0a:	4b85      	ldr	r3, [pc, #532]	@ (8002020 <StartI2CTask+0x258>)
 8001e0c:	61bb      	str	r3, [r7, #24]

      DTC_RequestMessage_t msg;
      msg.type = SAVE_DTC_REQUEST;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	733b      	strb	r3, [r7, #12]

      /* 0x07 레지스터: UV Fault 상태 확인 */
      if (pCurReg07->bits.bucka_uv && !pPrevReg07->bits.bucka_uv) {
 8001e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d011      	beq.n	8001e44 <StartI2CTask+0x7c>
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <StartI2CTask+0x7c>
        msg.dtc_code = DTC_C1221_BUCK_A_UV; 
 8001e2e:	f241 2321 	movw	r3, #4641	@ 0x1221
 8001e32:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001e34:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <StartI2CTask+0x25c>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f107 010c 	add.w	r1, r7, #12
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f008 fa28 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckb_uv && !pPrevReg07->bits.buckb_uv) {
 8001e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <StartI2CTask+0xae>
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <StartI2CTask+0xae>
        msg.dtc_code = DTC_C1222_BUCK_B_UV; 
 8001e60:	f241 2322 	movw	r3, #4642	@ 0x1222
 8001e64:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001e66:	4b6f      	ldr	r3, [pc, #444]	@ (8002024 <StartI2CTask+0x25c>)
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2200      	movs	r2, #0
 8001e72:	f008 fa0f 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckc_uv && !pPrevReg07->bits.buckc_uv) {
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d011      	beq.n	8001ea8 <StartI2CTask+0xe0>
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <StartI2CTask+0xe0>
        msg.dtc_code = DTC_C1242_BUCK_C_UV; 
 8001e92:	f241 2342 	movw	r3, #4674	@ 0x1242
 8001e96:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001e98:	4b62      	ldr	r3, [pc, #392]	@ (8002024 <StartI2CTask+0x25c>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f107 010c 	add.w	r1, r7, #12
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f008 f9f6 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckd_uv && !pPrevReg07->bits.buckd_uv) {
 8001ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d011      	beq.n	8001eda <StartI2CTask+0x112>
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10a      	bne.n	8001eda <StartI2CTask+0x112>
        msg.dtc_code = DTC_C0577_BUCK_D_UV; 
 8001ec4:	f240 5377 	movw	r3, #1399	@ 0x577
 8001ec8:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001eca:	4b56      	ldr	r3, [pc, #344]	@ (8002024 <StartI2CTask+0x25c>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f107 010c 	add.w	r1, r7, #12
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f008 f9dd 	bl	800a294 <osMessageQueuePut>
      }

      /* 0x08 레지스터: OC Fault 상태 확인 */
      if (pCurReg08->bits.bucka_oc && !pPrevReg08->bits.bucka_oc) {
 8001eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d011      	beq.n	8001f0c <StartI2CTask+0x144>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <StartI2CTask+0x144>
        msg.dtc_code = DTC_C1232_BUCK_A_OC; 
 8001ef6:	f241 2332 	movw	r3, #4658	@ 0x1232
 8001efa:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001efc:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <StartI2CTask+0x25c>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	f008 f9c4 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckb_oc && !pPrevReg08->bits.buckb_oc) {
 8001f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <StartI2CTask+0x176>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <StartI2CTask+0x176>
        msg.dtc_code = DTC_C1233_BUCK_B_OC; 
 8001f28:	f241 2333 	movw	r3, #4659	@ 0x1233
 8001f2c:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <StartI2CTask+0x25c>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f008 f9ab 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckc_oc && !pPrevReg08->bits.buckc_oc) {
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d011      	beq.n	8001f70 <StartI2CTask+0x1a8>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <StartI2CTask+0x1a8>
        msg.dtc_code = DTC_C1217_BUCK_C_OC; 
 8001f5a:	f241 2317 	movw	r3, #4631	@ 0x1217
 8001f5e:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001f60:	4b30      	ldr	r3, [pc, #192]	@ (8002024 <StartI2CTask+0x25c>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f107 010c 	add.w	r1, r7, #12
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f008 f992 	bl	800a294 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckd_oc && !pPrevReg08->bits.buckd_oc) {
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d011      	beq.n	8001fa2 <StartI2CTask+0x1da>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <StartI2CTask+0x1da>
        msg.dtc_code = DTC_C0121_BUCK_D_OC; 
 8001f8c:	f240 1321 	movw	r3, #289	@ 0x121
 8001f90:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <StartI2CTask+0x25c>)
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	f107 010c 	add.w	r1, r7, #12
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f008 f979 	bl	800a294 <osMessageQueuePut>
      }

      /* 0x09 레지스터: 시스템 Fault 상태 확인 */
      if (pCurReg09->bits.pmic_high_temp_shutdown && !pPrevReg09->bits.pmic_high_temp_shutdown) {
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d011      	beq.n	8001fd4 <StartI2CTask+0x20c>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <StartI2CTask+0x20c>
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL; 
 8001fbe:	f240 1321 	movw	r3, #289	@ 0x121
 8001fc2:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <StartI2CTask+0x25c>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f107 010c 	add.w	r1, r7, #12
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f008 f960 	bl	800a294 <osMessageQueuePut>
      }

      memcpy(previous_faults, current_faults, 5);
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <StartI2CTask+0x260>)
 8001fd6:	f107 0210 	add.w	r2, r7, #16
 8001fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fde:	6018      	str	r0, [r3, #0]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	7019      	strb	r1, [r3, #0]
 8001fe4:	e6f4      	b.n	8001dd0 <StartI2CTask+0x8>

    } else {
      // 이전에 통신 실패 상태가 아니었을 때만 DTC를 한 번 전송하여 중복 방지
      if (!is_i2c_com_failed) {
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <StartI2CTask+0x264>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f43f aeed 	beq.w	8001dd0 <StartI2CTask+0x8>
        is_i2c_com_failed = true; // 통신 실패 상태로 설정
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <StartI2CTask+0x264>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
        DTC_RequestMessage_t msg;
        msg.type = SAVE_DTC_REQUEST;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	723b      	strb	r3, [r7, #8]
        // PMIC와 통신이 두절된 것은 브레이크 시스템 전체와의 통신 두절로 간주
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL;
 8002000:	f240 1321 	movw	r3, #289	@ 0x121
 8002004:	817b      	strh	r3, [r7, #10]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <StartI2CTask+0x25c>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	f107 0108 	add.w	r1, r7, #8
 800200e:	2300      	movs	r3, #0
 8002010:	2200      	movs	r2, #0
 8002012:	f008 f93f 	bl	800a294 <osMessageQueuePut>
    osDelay(1);
 8002016:	e6db      	b.n	8001dd0 <StartI2CTask+0x8>
 8002018:	200005ca 	.word	0x200005ca
 800201c:	200005cb 	.word	0x200005cb
 8002020:	200005cc 	.word	0x200005cc
 8002024:	200005ac 	.word	0x200005ac
 8002028:	200005c8 	.word	0x200005c8
 800202c:	200005cd 	.word	0x200005cd

08002030 <StartSPITask>:
}

/*
 * SPITask는 DTC 관련 요청을 받아 EEPROM에 읽고 쓰는 역할을 전담한다.
 */
void StartSPITask(void *argument) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b092      	sub	sp, #72	@ 0x48
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  DTC_RequestMessage_t request_msg;
  osStatus_t status;

  for(;;) {
    // DTC_RequestQueueHandle에 메시지가 도착할 때까지 Blocked
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 8002038:	4b66      	ldr	r3, [pc, #408]	@ (80021d4 <StartSPITask+0x1a4>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	2200      	movs	r2, #0
 8002046:	f008 f985 	bl	800a354 <osMessageQueueGet>
 800204a:	6378      	str	r0, [r7, #52]	@ 0x34

    if (status == osOK) {
 800204c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f2      	bne.n	8002038 <StartSPITask+0x8>
      // EEPROM 접근을 위해 뮤텍스를 점유
      if (osMutexAcquire(EepromMutexHandle, 100) == osOK) {
 8002052:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <StartSPITask+0x1a8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2164      	movs	r1, #100	@ 0x64
 8002058:	4618      	mov	r0, r3
 800205a:	f007 ff00 	bl	8009e5e <osMutexAcquire>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e9      	bne.n	8002038 <StartSPITask+0x8>
        switch (request_msg.type) {
 8002064:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002068:	2b02      	cmp	r3, #2
 800206a:	f000 809c 	beq.w	80021a6 <StartSPITask+0x176>
 800206e:	2b02      	cmp	r3, #2
 8002070:	f300 80aa 	bgt.w	80021c8 <StartSPITask+0x198>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <StartSPITask+0x4e>
 8002078:	2b01      	cmp	r3, #1
 800207a:	d05c      	beq.n	8002136 <StartSPITask+0x106>
 800207c:	e0a4      	b.n	80021c8 <StartSPITask+0x198>
          case SAVE_DTC_REQUEST:
          {
            // 1. 현재 저장된 DTC 목록을 EEPROM에서 읽어온다. 
            DTC_Code_t stored_dtcs[MAX_DTC_COUNT] = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2220      	movs	r2, #32
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f00b fb82 	bl	800d790 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)stored_dtcs, sizeof(stored_dtcs));
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	2220      	movs	r2, #32
 8002092:	4619      	mov	r1, r3
 8002094:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002098:	f7fe fd3c 	bl	8000b14 <EEPROM_Read_DTCs>

            // 2. 이미 저장된 DTC인지, 빈 공간이 있는지 확인한다.
            bool already_exists = false;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            int empty_slot = -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ac:	e027      	b.n	80020fe <StartSPITask+0xce>
              if (stored_dtcs[i] == request_msg.dtc_code) {
 80020ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	3348      	adds	r3, #72	@ 0x48
 80020b4:	443b      	add	r3, r7
 80020b6:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 80020ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020bc:	429a      	cmp	r2, r3
 80020be:	d103      	bne.n	80020c8 <StartSPITask+0x98>
                already_exists = true;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80020c6:	e01d      	b.n	8002104 <StartSPITask+0xd4>
              }
              if ((stored_dtcs[i] == 0x0000 || stored_dtcs[i] == 0xFFFF) && empty_slot == -1) {
 80020c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	3348      	adds	r3, #72	@ 0x48
 80020ce:	443b      	add	r3, r7
 80020d0:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <StartSPITask+0xbc>
 80020d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	3348      	adds	r3, #72	@ 0x48
 80020de:	443b      	add	r3, r7
 80020e0:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80020e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d105      	bne.n	80020f8 <StartSPITask+0xc8>
 80020ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d101      	bne.n	80020f8 <StartSPITask+0xc8>
                empty_slot = i;
 80020f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f6:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 80020f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020fa:	3301      	adds	r3, #1
 80020fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002100:	2b0f      	cmp	r3, #15
 8002102:	ddd4      	ble.n	80020ae <StartSPITask+0x7e>
              }
            }

            // 3. 중복되지 않았고, 빈 공간이 있으면 새로운 DTC를 추가하고 EEPROM에 쓴다.
            if (!already_exists && empty_slot != -1) {
 8002104:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d059      	beq.n	80021c6 <StartSPITask+0x196>
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d055      	beq.n	80021c6 <StartSPITask+0x196>
              uint16_t write_address = DTC_STORAGE_START_ADDRESS + (empty_slot * DTC_ENTRY_SIZE);
 800211a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800211c:	3380      	adds	r3, #128	@ 0x80
 800211e:	b29b      	uxth	r3, r3
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	867b      	strh	r3, [r7, #50]	@ 0x32
              EEPROM_Write_DTC(write_address, (uint8_t*)&request_msg.dtc_code, DTC_ENTRY_SIZE);
 8002124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002128:	1c99      	adds	r1, r3, #2
 800212a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800212c:	2202      	movs	r2, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fc7a 	bl	8000a28 <EEPROM_Write_DTC>
            }
            break;
 8002134:	e047      	b.n	80021c6 <StartSPITask+0x196>
          }

          case READ_ALL_DTCS_REQUEST:
          {
            DTC_ResponseMessage_t response_msg = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2222      	movs	r2, #34	@ 0x22
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f00b fb26 	bl	800d790 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)response_msg.dtc_list, sizeof(response_msg.dtc_list));
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	3302      	adds	r3, #2
 800214a:	2220      	movs	r2, #32
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002152:	f7fe fcdf 	bl	8000b14 <EEPROM_Read_DTCs>

            // 유효한 DTC 개수 카운트
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8002156:	2300      	movs	r3, #0
 8002158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800215a:	e018      	b.n	800218e <StartSPITask+0x15e>
              if (response_msg.dtc_list[i] != 0x0000 && response_msg.dtc_list[i] != 0xFFFF) {
 800215c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	3348      	adds	r3, #72	@ 0x48
 8002162:	443b      	add	r3, r7
 8002164:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <StartSPITask+0x158>
 800216c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	3348      	adds	r3, #72	@ 0x48
 8002172:	443b      	add	r3, r7
 8002174:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8002178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <StartSPITask+0x158>
                response_msg.dtc_count++;
 8002180:	7a3b      	ldrb	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	723b      	strb	r3, [r7, #8]
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8002188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218a:	3301      	adds	r3, #1
 800218c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800218e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002190:	2b0f      	cmp	r3, #15
 8002192:	dde3      	ble.n	800215c <StartSPITask+0x12c>
              }
            }
            // CANTask로 응답 전송
            osMessageQueuePut(DTC_ResponseQueueHandle, &response_msg, 0, 10);
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <StartSPITask+0x1ac>)
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f107 0108 	add.w	r1, r7, #8
 800219c:	230a      	movs	r3, #10
 800219e:	2200      	movs	r2, #0
 80021a0:	f008 f878 	bl	800a294 <osMessageQueuePut>
            break;
 80021a4:	e010      	b.n	80021c8 <StartSPITask+0x198>
          }

          case CLEAR_ALL_DTCS_REQUEST:
          {
            uint8_t clear_buffer[MAX_DTC_COUNT * DTC_ENTRY_SIZE];
            memset(clear_buffer, 0xFF, sizeof(clear_buffer)); // EEPROM은 보통 0xFF로 지움
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	2220      	movs	r2, #32
 80021ac:	21ff      	movs	r1, #255	@ 0xff
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00b faee 	bl	800d790 <memset>
            EEPROM_Write_DTC(DTC_STORAGE_START_ADDRESS, clear_buffer, sizeof(clear_buffer));
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2220      	movs	r2, #32
 80021ba:	4619      	mov	r1, r3
 80021bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021c0:	f7fe fc32 	bl	8000a28 <EEPROM_Write_DTC>
            break;
 80021c4:	e000      	b.n	80021c8 <StartSPITask+0x198>
            break;
 80021c6:	bf00      	nop
          }
        }
        // 작업이 끝났으므로 뮤텍스를 반드시 해제한다.
        osMutexRelease(EepromMutexHandle);
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <StartSPITask+0x1a8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 fe91 	bl	8009ef4 <osMutexRelease>
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 80021d2:	e731      	b.n	8002038 <StartSPITask+0x8>
 80021d4:	200005ac 	.word	0x200005ac
 80021d8:	200005b4 	.word	0x200005b4
 80021dc:	200005b0 	.word	0x200005b0

080021e0 <StartCANTask>:

/* 
 * CAN 메시지 수신을 기다리다가, 진단 요청이 오면 처리한다. 
 */
void StartCANTask(void *argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  CAN_Message_t rx_msg;
  osStatus_t status;

  // CAN 드라이버 초기화 및 인터럽트 활성화
  CAN_Init();
 80021e8:	f000 f9be 	bl	8002568 <CAN_Init>

  for(;;)
  {
    // CanQueueHandle에 메시지가 도착할 때까지 Blocked
    status = osMessageQueueGet(CanQueueHandle, &rx_msg, NULL, osWaitForever);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <StartCANTask+0x3c>)
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	f107 0108 	add.w	r1, r7, #8
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	2200      	movs	r2, #0
 80021fa:	f008 f8ab 	bl	800a354 <osMessageQueueGet>
 80021fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status == osOK) {
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f2      	bne.n	80021ec <StartCANTask+0xc>
      // 수신된 메시지 ID가 진단 요청 ID(0x7DF)일 경우에만 처리
      if (rx_msg.header.StdId == CAN_ID_DIAG_REQUEST) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f240 72df 	movw	r2, #2015	@ 0x7df
 800220c:	4293      	cmp	r3, r2
 800220e:	d1ed      	bne.n	80021ec <StartCANTask+0xc>
        Process_CAN_Response(&rx_msg);
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f803 	bl	8002220 <Process_CAN_Response>
    status = osMessageQueueGet(CanQueueHandle, &rx_msg, NULL, osWaitForever);
 800221a:	e7e7      	b.n	80021ec <StartCANTask+0xc>
 800221c:	200005a4 	.word	0x200005a4

08002220 <Process_CAN_Response>:
/**
 * 수신된 UDS 진단 요청 메시지를 파싱하고 처리한다.
 * rx_msg: 수신된 CAN 메시지 데이터
 */
static void Process_CAN_Response(CAN_Message_t* rx_msg)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b094      	sub	sp, #80	@ 0x50
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint8_t sid = rx_msg->data[1]; // Service ID
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7f5b      	ldrb	r3, [r3, #29]
 800222c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  switch (sid) {
 8002230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002234:	2b14      	cmp	r3, #20
 8002236:	f000 8092 	beq.w	800235e <Process_CAN_Response+0x13e>
 800223a:	2b19      	cmp	r3, #25
 800223c:	f040 80aa 	bne.w	8002394 <Process_CAN_Response+0x174>

    case SID_READ_DTC_INFO: // 0x19 - DTC 정보 읽기 요청
    {
      // 1. SPITask에게 "모든 DTC를 읽어달라"고 요청
      DTC_RequestMessage_t request_to_spi;
      request_to_spi.type = READ_ALL_DTCS_REQUEST;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
      osMessageQueuePut(DTC_RequestQueueHandle, &request_to_spi, 0, 10);
 8002246:	4b55      	ldr	r3, [pc, #340]	@ (800239c <Process_CAN_Response+0x17c>)
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800224e:	230a      	movs	r3, #10
 8002250:	2200      	movs	r2, #0
 8002252:	f008 f81f 	bl	800a294 <osMessageQueuePut>

      // 2. SPITask로부터 응답이 올 때까지 잠시 Blocked
      DTC_ResponseMessage_t response_from_spi;
      if (osMessageQueueGet(DTC_ResponseQueueHandle, &response_from_spi, NULL, 100) == osOK) {
 8002256:	4b52      	ldr	r3, [pc, #328]	@ (80023a0 <Process_CAN_Response+0x180>)
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	f107 010c 	add.w	r1, r7, #12
 800225e:	2364      	movs	r3, #100	@ 0x64
 8002260:	2200      	movs	r2, #0
 8002262:	f008 f877 	bl	800a354 <osMessageQueueGet>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 8092 	bne.w	8002392 <Process_CAN_Response+0x172>
        // 3. UDS 프로토콜에 맞춰 응답 메시지 포맷팅
        uint8_t tx_data[8] = {0};
 800226e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
        uint8_t valid_dtc_count = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // 유효한 DTC만 필터링하여 응답 데이터 구성
        for (int i = 0; i < MAX_DTC_COUNT && valid_dtc_count < 2; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002282:	e049      	b.n	8002318 <Process_CAN_Response+0xf8>
            if (response_from_spi.dtc_list[i] != 0x0000 && response_from_spi.dtc_list[i] != 0xFFFF) {
 8002284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	3350      	adds	r3, #80	@ 0x50
 800228a:	443b      	add	r3, r7
 800228c:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03e      	beq.n	8002312 <Process_CAN_Response+0xf2>
 8002294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3350      	adds	r3, #80	@ 0x50
 800229a:	443b      	add	r3, r7
 800229c:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 80022a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d034      	beq.n	8002312 <Process_CAN_Response+0xf2>
                if (valid_dtc_count == 0) { // 첫 번째 DTC
 80022a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d117      	bne.n	80022e0 <Process_CAN_Response+0xc0>
                    tx_data[3] = (response_from_spi.dtc_list[i] >> 8) & 0xFF; // DTC High Byte
 80022b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	3350      	adds	r3, #80	@ 0x50
 80022b6:	443b      	add	r3, r7
 80022b8:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                    tx_data[4] = response_from_spi.dtc_list[i] & 0xFF;        // DTC Low Byte
 80022c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	3350      	adds	r3, #80	@ 0x50
 80022cc:	443b      	add	r3, r7
 80022ce:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    tx_data[5] = 0x09; // DTC Status (exmple)
 80022d8:	2309      	movs	r3, #9
 80022da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80022de:	e013      	b.n	8002308 <Process_CAN_Response+0xe8>
                } else { // 두 번째 DTC
                    tx_data[6] = (response_from_spi.dtc_list[i] >> 8) & 0xFF;
 80022e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	3350      	adds	r3, #80	@ 0x50
 80022e6:	443b      	add	r3, r7
 80022e8:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    tx_data[7] = response_from_spi.dtc_list[i] & 0xFF;
 80022f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	3350      	adds	r3, #80	@ 0x50
 80022fc:	443b      	add	r3, r7
 80022fe:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                }
                valid_dtc_count++;
 8002308:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800230c:	3301      	adds	r3, #1
 800230e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        for (int i = 0; i < MAX_DTC_COUNT && valid_dtc_count < 2; i++) {
 8002312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002314:	3301      	adds	r3, #1
 8002316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231a:	2b0f      	cmp	r3, #15
 800231c:	dc03      	bgt.n	8002326 <Process_CAN_Response+0x106>
 800231e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002322:	2b01      	cmp	r3, #1
 8002324:	d9ae      	bls.n	8002284 <Process_CAN_Response+0x64>
            }
        }

        // PCI 및 SID, Sub-function 설정
        tx_data[0] = 1 + (valid_dtc_count * 3); // PCI: SID + SubFunc + DTCs
 8002326:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800232a:	461a      	mov	r2, r3
 800232c:	0052      	lsls	r2, r2, #1
 800232e:	4413      	add	r3, r2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3301      	adds	r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        tx_data[1] = SID_READ_DTC_INFO | SID_POSITIVE_RESPONSE_MASK; // 0x59
 800233a:	2359      	movs	r3, #89	@ 0x59
 800233c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        tx_data[2] = SUB_FUNC_DTC_BY_STATUS_MASK; // 0x02
 8002340:	2302      	movs	r3, #2
 8002342:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

        // 4. 진단기로 최종 응답 전송
        CAN_SendMessage(CAN_ID_DIAG_RESPONSE, tx_data, tx_data[0] + 1);
 8002346:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800234a:	3301      	adds	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002352:	4619      	mov	r1, r3
 8002354:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8002358:	f000 f91e 	bl	8002598 <CAN_SendMessage>
      }
      break;
 800235c:	e019      	b.n	8002392 <Process_CAN_Response+0x172>

    case SID_CLEAR_DIAG_INFO: // 0x14 - DTC 삭제 요청
    {
      // 1. SPITask에게 "모든 DTC를 삭제해달라"고 요청
      DTC_RequestMessage_t request_to_spi;
      request_to_spi.type = CLEAR_ALL_DTCS_REQUEST;
 800235e:	2302      	movs	r3, #2
 8002360:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      osMessageQueuePut(DTC_RequestQueueHandle, &request_to_spi, 0, 10);
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <Process_CAN_Response+0x17c>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800236c:	230a      	movs	r3, #10
 800236e:	2200      	movs	r2, #0
 8002370:	f007 ff90 	bl	800a294 <osMessageQueuePut>

      // 2. UDS 프로토콜에 맞춰 긍정 응답 메시지 포맷팅
      uint8_t tx_data[2];
      tx_data[0] = 0x01; // PCI
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
      tx_data[1] = SID_CLEAR_DIAG_INFO | SID_POSITIVE_RESPONSE_MASK; // 0x54
 800237a:	2354      	movs	r3, #84	@ 0x54
 800237c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

      // 3. 진단기로 최종 응답 전송
      CAN_SendMessage(CAN_ID_DIAG_RESPONSE, tx_data, 2);
 8002380:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002384:	2202      	movs	r2, #2
 8002386:	4619      	mov	r1, r3
 8002388:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 800238c:	f000 f904 	bl	8002598 <CAN_SendMessage>
      break;
 8002390:	e000      	b.n	8002394 <Process_CAN_Response+0x174>
      break;
 8002392:	bf00      	nop
    }
  }
}
 8002394:	bf00      	nop
 8002396:	3750      	adds	r7, #80	@ 0x50
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200005ac 	.word	0x200005ac
 80023a0:	200005b0 	.word	0x200005b0

080023a4 <StartADCTask>:

/**
 * ADCTask는 5ms 주기로 PMIC BUCK D 채널의 전압을 모니터링하고,
 * 임계값을 벗어나면 SPITask로 DTC 저장 요청을 보낸다.
 */
void StartADCTask(void *argument) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

    float measured_voltage;

    for(;;) {
        // 5ms 주기를 만들기 위해 5ms 대기
        osDelay(5);
 80023ac:	2005      	movs	r0, #5
 80023ae:	f007 fcb5 	bl	8009d1c <osDelay>

        measured_voltage = ADC_GetVoltage();
 80023b2:	f000 f89f 	bl	80024f4 <ADC_GetVoltage>
 80023b6:	ed87 0a03 	vstr	s0, [r7, #12]
        g_latest_adc_voltage = measured_voltage;
 80023ba:	4a25      	ldr	r2, [pc, #148]	@ (8002450 <StartADCTask+0xac>)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6013      	str	r3, [r2, #0]

        DTC_RequestMessage_t msg;
        msg.type = SAVE_DTC_REQUEST;
 80023c0:	2300      	movs	r3, #0
 80023c2:	723b      	strb	r3, [r7, #8]

        /* 저전압 상태 확인 */
        if (measured_voltage < VOLTAGE_THRESHOLD_LOW) {
 80023c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002454 <StartADCTask+0xb0>
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d515      	bpl.n	8002402 <StartADCTask+0x5e>
            // 이전에 저전압 상태가 아니었을 때만 DTC를 한 번 전송
            if (!g_is_voltage_low) {
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <StartADCTask+0xb4>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d011      	beq.n	8002408 <StartADCTask+0x64>
                g_is_voltage_low = true; // 저전압 상태로 설정
 80023e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <StartADCTask+0xb4>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
                msg.dtc_code = DTC_C1236_VOLTAGE_LOW;
 80023ea:	f241 2336 	movw	r3, #4662	@ 0x1236
 80023ee:	817b      	strh	r3, [r7, #10]
                osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <StartADCTask+0xb8>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f107 0108 	add.w	r1, r7, #8
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	f007 ff4a 	bl	800a294 <osMessageQueuePut>
 8002400:	e002      	b.n	8002408 <StartADCTask+0x64>
            }
        } else {
            // 전압이 정상으로 돌아오면 상태 플래그 리셋
            g_is_voltage_low = false;
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <StartADCTask+0xb4>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
        }

        /* 과전압 상태 확인 */
        if (measured_voltage > VOLTAGE_THRESHOLD_HIGH) {
 8002408:	edd7 7a03 	vldr	s15, [r7, #12]
 800240c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002460 <StartADCTask+0xbc>
 8002410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	dd15      	ble.n	8002446 <StartADCTask+0xa2>
            // 이전에 과전압 상태가 아니었을 때만 DTC를 한 번 전송
            if (!g_is_voltage_high) {
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <StartADCTask+0xc0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0c1      	beq.n	80023ac <StartADCTask+0x8>
                g_is_voltage_high = true; // 과전압 상태로 설정
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <StartADCTask+0xc0>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
                msg.dtc_code = DTC_C1237_VOLTAGE_HIGH;
 800242e:	f241 2337 	movw	r3, #4663	@ 0x1237
 8002432:	817b      	strh	r3, [r7, #10]
                osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <StartADCTask+0xb8>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f107 0108 	add.w	r1, r7, #8
 800243c:	2300      	movs	r3, #0
 800243e:	2200      	movs	r2, #0
 8002440:	f007 ff28 	bl	800a294 <osMessageQueuePut>
 8002444:	e7b2      	b.n	80023ac <StartADCTask+0x8>
            }
        } else {
            // 전압이 정상으로 돌아오면 상태 플래그 리셋
            g_is_voltage_high = false;
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <StartADCTask+0xc0>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    for(;;) {
 800244c:	e7ae      	b.n	80023ac <StartADCTask+0x8>
 800244e:	bf00      	nop
 8002450:	200005c0 	.word	0x200005c0
 8002454:	3fb851ec 	.word	0x3fb851ec
 8002458:	200005c4 	.word	0x200005c4
 800245c:	200005ac 	.word	0x200005ac
 8002460:	400a3d71 	.word	0x400a3d71
 8002464:	200005c5 	.word	0x200005c5

08002468 <StartUARTTask>:
}

/**
 * UARTTask는 5ms 주기로 시스템 상태를 UART로 출력한다.
 */
void StartUARTTask(void *argument) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(5);
 8002470:	2005      	movs	r0, #5
 8002472:	f007 fc53 	bl	8009d1c <osDelay>
    
    if (g_is_voltage_low) {
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <StartUARTTask+0x60>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <StartUARTTask+0x2c>
        UART_Printf("[BUCK_D] Low System Supply Voltage: %.2fV\r\n", g_latest_adc_voltage);
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <StartUARTTask+0x64>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f880 	bl	8000588 <__aeabi_f2d>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4810      	ldr	r0, [pc, #64]	@ (80024d0 <StartUARTTask+0x68>)
 800248e:	f000 f8a9 	bl	80025e4 <UART_Printf>
 8002492:	e7ed      	b.n	8002470 <StartUARTTask+0x8>
    } else if (g_is_voltage_high) {
 8002494:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <StartUARTTask+0x6c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <StartUARTTask+0x4a>
        UART_Printf("[BUCK_D] High System Supply Voltage: %.2fV\r\n", g_latest_adc_voltage);
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <StartUARTTask+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f871 	bl	8000588 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	480b      	ldr	r0, [pc, #44]	@ (80024d8 <StartUARTTask+0x70>)
 80024ac:	f000 f89a 	bl	80025e4 <UART_Printf>
 80024b0:	e7de      	b.n	8002470 <StartUARTTask+0x8>
    } else {
        UART_Printf("System Status: OK, PMIC BUCK_D Voltage: %.2fV\r\n", g_latest_adc_voltage);
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <StartUARTTask+0x64>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f866 	bl	8000588 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4806      	ldr	r0, [pc, #24]	@ (80024dc <StartUARTTask+0x74>)
 80024c2:	f000 f88f 	bl	80025e4 <UART_Printf>
    osDelay(5);
 80024c6:	e7d3      	b.n	8002470 <StartUARTTask+0x8>
 80024c8:	200005c4 	.word	0x200005c4
 80024cc:	200005c0 	.word	0x200005c0
 80024d0:	0800e12c 	.word	0x0800e12c
 80024d4:	200005c5 	.word	0x200005c5
 80024d8:	0800e158 	.word	0x0800e158
 80024dc:	0800e188 	.word	0x0800e188

080024e0 <StartDefaultTask>:
    }
  }
}

void StartDefaultTask(void *argument)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 80024e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024ec:	f007 fc16 	bl	8009d1c <osDelay>
 80024f0:	e7fa      	b.n	80024e8 <StartDefaultTask+0x8>
	...

080024f4 <ADC_GetVoltage>:
#include "yj_adc.h"

extern ADC_HandleTypeDef hadc1;

float ADC_GetVoltage(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
    uint32_t raw_value = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
    float voltage = 0.0f;
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	607b      	str	r3, [r7, #4]

    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8002504:	4815      	ldr	r0, [pc, #84]	@ (800255c <ADC_GetVoltage+0x68>)
 8002506:	f000 f971 	bl	80027ec <HAL_ADC_Start>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d119      	bne.n	8002544 <ADC_GetVoltage+0x50>
        // 변환이 완료될 때까지 대기 (Blocking 방식, 10ms 타임아웃)
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8002510:	210a      	movs	r1, #10
 8002512:	4812      	ldr	r0, [pc, #72]	@ (800255c <ADC_GetVoltage+0x68>)
 8002514:	f000 fa51 	bl	80029ba <HAL_ADC_PollForConversion>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d112      	bne.n	8002544 <ADC_GetVoltage+0x50>

            raw_value = HAL_ADC_GetValue(&hadc1);
 800251e:	480f      	ldr	r0, [pc, #60]	@ (800255c <ADC_GetVoltage+0x68>)
 8002520:	f000 fad6 	bl	8002ad0 <HAL_ADC_GetValue>
 8002524:	6038      	str	r0, [r7, #0]
            voltage = (raw_value / ADC_RESOLUTION) * ADC_VREF;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002530:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002560 <ADC_GetVoltage+0x6c>
 8002534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002538:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002564 <ADC_GetVoltage+0x70>
 800253c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002540:	edc7 7a01 	vstr	s15, [r7, #4]
        }
    }
    HAL_ADC_Stop(&hadc1);
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <ADC_GetVoltage+0x68>)
 8002546:	f000 fa05 	bl	8002954 <HAL_ADC_Stop>

    return voltage;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb0 0a67 	vmov.f32	s0, s15
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000080 	.word	0x20000080
 8002560:	457ff000 	.word	0x457ff000
 8002564:	40533333 	.word	0x40533333

08002568 <CAN_Init>:
#include "yj_can.h"

extern CAN_HandleTypeDef hcan1;

HAL_StatusTypeDef CAN_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    // CAN 수신 FIFO 0에 메시지가 도착하면 인터럽트가 발생하도록 설정
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800256c:	2102      	movs	r1, #2
 800256e:	4809      	ldr	r0, [pc, #36]	@ (8002594 <CAN_Init+0x2c>)
 8002570:	f001 f84b 	bl	800360a <HAL_CAN_ActivateNotification>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <CAN_Init+0x16>
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e008      	b.n	8002590 <CAN_Init+0x28>
    }

    // CAN 컨트롤러 시작
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800257e:	4805      	ldr	r0, [pc, #20]	@ (8002594 <CAN_Init+0x2c>)
 8002580:	f000 fddd 	bl	800313e <HAL_CAN_Start>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <CAN_Init+0x26>
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <CAN_Init+0x28>
    }
    return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200000c8 	.word	0x200000c8

08002598 <CAN_SendMessage>:

/* ID와 uds 프로토콜 기반 데이터를 실제 CAN 버스에 전송한다. */
HAL_StatusTypeDef CAN_SendMessage(uint32_t id, uint8_t* pData, uint8_t len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	@ 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;

    tx_header.StdId = id;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
    tx_header.IDE = CAN_ID_STD;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    tx_header.RTR = CAN_RTR_DATA;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.DLC = len;
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 비어있는 CAN 송신 메일박스가 있을 때까지 최대 10ms 대기
    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 80025b6:	480a      	ldr	r0, [pc, #40]	@ (80025e0 <CAN_SendMessage+0x48>)
 80025b8:	f000 fee0 	bl	800337c <HAL_CAN_GetTxMailboxesFreeLevel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <CAN_SendMessage+0x3e>
        return HAL_CAN_AddTxMessage(&hcan1, &tx_header, pData, &tx_mailbox);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	f107 0118 	add.w	r1, r7, #24
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4804      	ldr	r0, [pc, #16]	@ (80025e0 <CAN_SendMessage+0x48>)
 80025ce:	f000 fdfa 	bl	80031c6 <HAL_CAN_AddTxMessage>
 80025d2:	4603      	mov	r3, r0
 80025d4:	e000      	b.n	80025d8 <CAN_SendMessage+0x40>
    }
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	3730      	adds	r7, #48	@ 0x30
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000c8 	.word	0x200000c8

080025e4 <UART_Printf>:
extern UART_HandleTypeDef huart4;

#define UART_BUFFER_SIZE 256
static char uart_buffer[UART_BUFFER_SIZE];

void UART_Printf(const char *format, ...) {
 80025e4:	b40f      	push	{r0, r1, r2, r3}
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
    va_list args;
    int len;

    // 가변 인자 처리 시작
    va_start(args, format);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	603b      	str	r3, [r7, #0]

    // 포맷 문자열과 가변 인자를 uart_buffer에 저장
    len = vsnprintf(uart_buffer, UART_BUFFER_SIZE, format, args);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fa:	480a      	ldr	r0, [pc, #40]	@ (8002624 <UART_Printf+0x40>)
 80025fc:	f00b f8ba 	bl	800d774 <vsniprintf>
 8002600:	6078      	str	r0, [r7, #4]

    // 가변 인자 처리 종료
    va_end(args);

    if (len > 0) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	dd06      	ble.n	8002616 <UART_Printf+0x32>
        // 포맷팅된 문자열을 Polling 방식으로 전송 (Blocking)
        HAL_UART_Transmit(&huart4, (uint8_t*)uart_buffer, len, 100); // 100ms timeout
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	b29a      	uxth	r2, r3
 800260c:	2364      	movs	r3, #100	@ 0x64
 800260e:	4905      	ldr	r1, [pc, #20]	@ (8002624 <UART_Printf+0x40>)
 8002610:	4805      	ldr	r0, [pc, #20]	@ (8002628 <UART_Printf+0x44>)
 8002612:	f006 fa9c 	bl	8008b4e <HAL_UART_Transmit>
    }
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002620:	b004      	add	sp, #16
 8002622:	4770      	bx	lr
 8002624:	200005d0 	.word	0x200005d0
 8002628:	20000548 	.word	0x20000548

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800262c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480d      	ldr	r0, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002632:	490e      	ldr	r1, [pc, #56]	@ (800266c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002634:	4a0e      	ldr	r2, [pc, #56]	@ (8002670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002648:	4c0b      	ldr	r4, [pc, #44]	@ (8002678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002656:	f7ff fba5 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f00b f8a7 	bl	800d7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265e:	f7fe fa97 	bl	8000b90 <main>
  bx  lr    
 8002662:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002664:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002670:	0800e374 	.word	0x0800e374
  ldr r2, =_sbss
 8002674:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002678:	2000516c 	.word	0x2000516c

0800267c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <HAL_Init+0x40>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800268e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <HAL_Init+0x40>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269c:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a07      	ldr	r2, [pc, #28]	@ (80026c0 <HAL_Init+0x40>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f001 fad3 	bl	8003c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ae:	200f      	movs	r0, #15
 80026b0:	f000 f808 	bl	80026c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b4:	f7fe fe14 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_InitTick+0x54>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_InitTick+0x58>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 faeb 	bl	8003cbe <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00e      	b.n	8002710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d80a      	bhi.n	800270e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f001 fab3 	bl	8003c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002704:	4a06      	ldr	r2, [pc, #24]	@ (8002720 <HAL_InitTick+0x5c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000000 	.word	0x20000000
 800271c:	20000008 	.word	0x20000008
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_IncTick+0x20>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_IncTick+0x24>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <HAL_IncTick+0x24>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000008 	.word	0x20000008
 8002748:	200006d0 	.word	0x200006d0

0800274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_GetTick+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200006d0 	.word	0x200006d0

08002764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e033      	b.n	80027e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fdd8 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027aa:	f023 0302 	bic.w	r3, r3, #2
 80027ae:	f043 0202 	orr.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 faca 	bl	8002d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80027d2:	e001      	b.n	80027d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Start+0x1a>
 8002802:	2302      	movs	r3, #2
 8002804:	e097      	b.n	8002936 <HAL_ADC_Start+0x14a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d018      	beq.n	800284e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800282c:	4b45      	ldr	r3, [pc, #276]	@ (8002944 <HAL_ADC_Start+0x158>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a45      	ldr	r2, [pc, #276]	@ (8002948 <HAL_ADC_Start+0x15c>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0c9a      	lsrs	r2, r3, #18
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002840:	e002      	b.n	8002848 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3b01      	subs	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f9      	bne.n	8002842 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d15f      	bne.n	800291c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002886:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289a:	d106      	bne.n	80028aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f023 0206 	bic.w	r2, r3, #6
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80028a8:	e002      	b.n	80028b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <HAL_ADC_Start+0x160>)
 80028ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d129      	bne.n	8002934 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e020      	b.n	8002934 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <HAL_ADC_Start+0x164>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d11b      	bne.n	8002934 <HAL_ADC_Start+0x148>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d114      	bne.n	8002934 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	e00b      	b.n	8002934 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	f043 0210 	orr.w	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000000 	.word	0x20000000
 8002948:	431bde83 	.word	0x431bde83
 800294c:	40012300 	.word	0x40012300
 8002950:	40012000 	.word	0x40012000

08002954 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADC_Stop+0x16>
 8002966:	2302      	movs	r3, #2
 8002968:	e021      	b.n	80029ae <HAL_ADC_Stop+0x5a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d6:	d113      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e063      	b.n	8002ac8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a00:	f7ff fea4 	bl	800274c <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a06:	e021      	b.n	8002a4c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d01d      	beq.n	8002a4c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x6c>
 8002a16:	f7ff fe99 	bl	800274c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d212      	bcs.n	8002a4c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d00b      	beq.n	8002a4c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e03d      	b.n	8002ac8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d1d6      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0212 	mvn.w	r2, #18
 8002a62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d123      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11f      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d111      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e113      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x244>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d925      	bls.n	8002b64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b1e      	subs	r3, #30
 8002b2e:	2207      	movs	r2, #7
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43da      	mvns	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68d9      	ldr	r1, [r3, #12]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4403      	add	r3, r0
 8002b56:	3b1e      	subs	r3, #30
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e022      	b.n	8002baa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	2207      	movs	r2, #7
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	400a      	ands	r2, r1
 8002b86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4403      	add	r3, r0
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d824      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b05      	subs	r3, #5
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b05      	subs	r3, #5
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bfa:	e04c      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d824      	bhi.n	8002c4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3b23      	subs	r3, #35	@ 0x23
 8002c16:	221f      	movs	r2, #31
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b23      	subs	r3, #35	@ 0x23
 8002c40:	fa00 f203 	lsl.w	r2, r0, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c4c:	e023      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b41      	subs	r3, #65	@ 0x41
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b41      	subs	r3, #65	@ 0x41
 8002c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <HAL_ADC_ConfigChannel+0x250>)
 8002c98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	@ (8002d40 <HAL_ADC_ConfigChannel+0x254>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d10b      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <HAL_ADC_ConfigChannel+0x254>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12b      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x23a>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d44 <HAL_ADC_ConfigChannel+0x258>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0x1f4>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b11      	cmp	r3, #17
 8002cde:	d122      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <HAL_ADC_ConfigChannel+0x258>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_ADC_ConfigChannel+0x25c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a11      	ldr	r2, [pc, #68]	@ (8002d4c <HAL_ADC_ConfigChannel+0x260>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	0c9a      	lsrs	r2, r3, #18
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d18:	e002      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40012300 	.word	0x40012300
 8002d40:	40012000 	.word	0x40012000
 8002d44:	10000012 	.word	0x10000012
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	431bde83 	.word	0x431bde83

08002d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d58:	4b79      	ldr	r3, [pc, #484]	@ (8002f40 <ADC_Init+0x1f0>)
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de2:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <ADC_Init+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e00f      	b.n	8002e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0202 	bic.w	r2, r2, #2
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	035a      	lsls	r2, r3, #13
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e007      	b.n	8002ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	051a      	lsls	r2, r3, #20
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f06:	025a      	lsls	r2, r3, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	029a      	lsls	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	0f000001 	.word	0x0f000001

08002f48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0ed      	b.n	8003136 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe fa2a 	bl	80013c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7ff fbe6 	bl	800274c <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f82:	e012      	b.n	8002faa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f84:	f7ff fbe2 	bl	800274c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d90b      	bls.n	8002faa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0c5      	b.n	8003136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0e5      	beq.n	8002f84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0202 	bic.w	r2, r2, #2
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc8:	f7ff fbc0 	bl	800274c <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fce:	e012      	b.n	8002ff6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fd0:	f7ff fbbc 	bl	800274c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d90b      	bls.n	8002ff6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2205      	movs	r2, #5
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e09f      	b.n	8003136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e1b      	ldrb	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e5b      	ldrb	r3, [r3, #25]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7e9b      	ldrb	r3, [r3, #26]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e007      	b.n	8003082 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0220 	bic.w	r2, r2, #32
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7edb      	ldrb	r3, [r3, #27]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0210 	bic.w	r2, r2, #16
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0210 	orr.w	r2, r2, #16
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7f1b      	ldrb	r3, [r3, #28]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0208 	orr.w	r2, r2, #8
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0208 	bic.w	r2, r2, #8
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7f5b      	ldrb	r3, [r3, #29]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e007      	b.n	8003100 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	ea42 0103 	orr.w	r1, r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d12e      	bne.n	80031b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800316a:	f7ff faef 	bl	800274c <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003170:	e012      	b.n	8003198 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003172:	f7ff faeb 	bl	800274c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b0a      	cmp	r3, #10
 800317e:	d90b      	bls.n	8003198 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2205      	movs	r2, #5
 8003190:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e012      	b.n	80031be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e006      	b.n	80031be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b089      	sub	sp, #36	@ 0x24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d003      	beq.n	80031f2 <HAL_CAN_AddTxMessage+0x2c>
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	f040 80b8 	bne.w	8003362 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a0 	beq.w	8003352 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d907      	bls.n	8003232 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e09e      	b.n	8003370 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6809      	ldr	r1, [r1, #0]
 8003252:	431a      	orrs	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3318      	adds	r3, #24
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	440b      	add	r3, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e00f      	b.n	8003280 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800326a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003274:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3318      	adds	r3, #24
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	440b      	add	r3, r1
 800327e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3318      	adds	r3, #24
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	440b      	add	r3, r1
 8003290:	3304      	adds	r3, #4
 8003292:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	7d1b      	ldrb	r3, [r3, #20]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d111      	bne.n	80032c0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3318      	adds	r3, #24
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	6811      	ldr	r1, [r2, #0]
 80032b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3318      	adds	r3, #24
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	440b      	add	r3, r1
 80032bc:	3304      	adds	r3, #4
 80032be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3307      	adds	r3, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	061a      	lsls	r2, r3, #24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3306      	adds	r3, #6
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3305      	adds	r3, #5
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	4313      	orrs	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	3204      	adds	r2, #4
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	4610      	mov	r0, r2
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	ea43 0200 	orr.w	r2, r3, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80032f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3303      	adds	r3, #3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	061a      	lsls	r2, r3, #24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3302      	adds	r3, #2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3301      	adds	r3, #1
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4313      	orrs	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	4610      	mov	r0, r2
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	6811      	ldr	r1, [r2, #0]
 800331e:	ea43 0200 	orr.w	r2, r3, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	440b      	add	r3, r1
 8003328:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800332c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3318      	adds	r3, #24
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	6811      	ldr	r1, [r2, #0]
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3318      	adds	r3, #24
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	440b      	add	r3, r1
 800334c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e00e      	b.n	8003370 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e006      	b.n	8003370 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3724      	adds	r7, #36	@ 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d11d      	bne.n	80033d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d003      	beq.n	800340a <HAL_CAN_GetRxMessage+0x24>
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b02      	cmp	r3, #2
 8003406:	f040 80f3 	bne.w	80035f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10e      	bne.n	800342e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0e7      	b.n	80035fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0d8      	b.n	80035fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	331b      	adds	r3, #27
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	4413      	add	r3, r2
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0204 	and.w	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10c      	bne.n	8003484 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	331b      	adds	r3, #27
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	4413      	add	r3, r2
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0d5b      	lsrs	r3, r3, #21
 800347a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e00b      	b.n	800349c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	331b      	adds	r3, #27
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	08db      	lsrs	r3, r3, #3
 8003494:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	331b      	adds	r3, #27
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0202 	and.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	331b      	adds	r3, #27
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	331b      	adds	r3, #27
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	331b      	adds	r3, #27
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	4413      	add	r3, r2
 8003504:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0a1a      	lsrs	r2, r3, #8
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4413      	add	r3, r2
 8003534:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0c1a      	lsrs	r2, r3, #16
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3302      	adds	r3, #2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e1a      	lsrs	r2, r3, #24
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	3303      	adds	r3, #3
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4413      	add	r3, r2
 8003568:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4413      	add	r3, r2
 8003580:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0a1a      	lsrs	r2, r3, #8
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3305      	adds	r3, #5
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0c1a      	lsrs	r2, r3, #16
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3306      	adds	r3, #6
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e1a      	lsrs	r2, r3, #24
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3307      	adds	r3, #7
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d108      	bne.n	80035dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	e007      	b.n	80035ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0220 	orr.w	r2, r2, #32
 80035ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e006      	b.n	80035fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800361a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <HAL_CAN_ActivateNotification+0x1e>
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d109      	bne.n	800363c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6959      	ldr	r1, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e006      	b.n	800364a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d07c      	beq.n	8003796 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d023      	beq.n	80036ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f983 	bl	80039c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80036be:	e016      	b.n	80036ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d2:	e00c      	b.n	80036ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e6:	e002      	b.n	80036ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f989 	bl	8003a00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d024      	beq.n	8003742 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003700:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f963 	bl	80039d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003712:	e016      	b.n	8003742 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
 8003726:	e00c      	b.n	8003742 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
 800373a:	e002      	b.n	8003742 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f969 	bl	8003a14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d024      	beq.n	8003796 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003754:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f943 	bl	80039ec <HAL_CAN_TxMailbox2CompleteCallback>
 8003766:	e016      	b.n	8003796 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	e00c      	b.n	8003796 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
 800378e:	e002      	b.n	8003796 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f949 	bl	8003a28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00c      	beq.n	80037ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2210      	movs	r2, #16
 80037b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2208      	movs	r2, #8
 80037d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f930 	bl	8003a3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fe fa81 	bl	8001cfc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00c      	beq.n	800381e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2210      	movs	r2, #16
 800381c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f912 	bl	8003a64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8f9 	bl	8003a50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8fc 	bl	8003a78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2208      	movs	r2, #8
 800389a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8f5 	bl	8003a8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d07b      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d072      	beq.n	800399c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003910:	2b00      	cmp	r3, #0
 8003912:	d043      	beq.n	800399c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03e      	beq.n	800399c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003924:	2b60      	cmp	r3, #96	@ 0x60
 8003926:	d02b      	beq.n	8003980 <HAL_CAN_IRQHandler+0x32a>
 8003928:	2b60      	cmp	r3, #96	@ 0x60
 800392a:	d82e      	bhi.n	800398a <HAL_CAN_IRQHandler+0x334>
 800392c:	2b50      	cmp	r3, #80	@ 0x50
 800392e:	d022      	beq.n	8003976 <HAL_CAN_IRQHandler+0x320>
 8003930:	2b50      	cmp	r3, #80	@ 0x50
 8003932:	d82a      	bhi.n	800398a <HAL_CAN_IRQHandler+0x334>
 8003934:	2b40      	cmp	r3, #64	@ 0x40
 8003936:	d019      	beq.n	800396c <HAL_CAN_IRQHandler+0x316>
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d826      	bhi.n	800398a <HAL_CAN_IRQHandler+0x334>
 800393c:	2b30      	cmp	r3, #48	@ 0x30
 800393e:	d010      	beq.n	8003962 <HAL_CAN_IRQHandler+0x30c>
 8003940:	2b30      	cmp	r3, #48	@ 0x30
 8003942:	d822      	bhi.n	800398a <HAL_CAN_IRQHandler+0x334>
 8003944:	2b10      	cmp	r3, #16
 8003946:	d002      	beq.n	800394e <HAL_CAN_IRQHandler+0x2f8>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d005      	beq.n	8003958 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800394c:	e01d      	b.n	800398a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	f043 0308 	orr.w	r3, r3, #8
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003956:	e019      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	f043 0310 	orr.w	r3, r3, #16
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003960:	e014      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	f043 0320 	orr.w	r3, r3, #32
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800396a:	e00f      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003974:	e00a      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800397e:	e005      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003988:	e000      	b.n	800398c <HAL_CAN_IRQHandler+0x336>
            break;
 800398a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800399a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f872 	bl	8003aa0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039bc:	bf00      	nop
 80039be:	3728      	adds	r7, #40	@ 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ae6:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	60d3      	str	r3, [r2, #12]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b00:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <__NVIC_GetPriorityGrouping+0x18>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 0307 	and.w	r3, r3, #7
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db0b      	blt.n	8003b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4907      	ldr	r1, [pc, #28]	@ (8003b50 <__NVIC_EnableIRQ+0x38>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2001      	movs	r0, #1
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000e100 	.word	0xe000e100

08003b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6039      	str	r1, [r7, #0]
 8003b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	db0a      	blt.n	8003b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	490c      	ldr	r1, [pc, #48]	@ (8003ba0 <__NVIC_SetPriority+0x4c>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	0112      	lsls	r2, r2, #4
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	440b      	add	r3, r1
 8003b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b7c:	e00a      	b.n	8003b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4908      	ldr	r1, [pc, #32]	@ (8003ba4 <__NVIC_SetPriority+0x50>)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3b04      	subs	r3, #4
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	761a      	strb	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e100 	.word	0xe000e100
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f1c3 0307 	rsb	r3, r3, #7
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	bf28      	it	cs
 8003bc6:	2304      	movcs	r3, #4
 8003bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d902      	bls.n	8003bd8 <NVIC_EncodePriority+0x30>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3b03      	subs	r3, #3
 8003bd6:	e000      	b.n	8003bda <NVIC_EncodePriority+0x32>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	401a      	ands	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	43d9      	mvns	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	4313      	orrs	r3, r2
         );
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3724      	adds	r7, #36	@ 0x24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c20:	d301      	bcc.n	8003c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00f      	b.n	8003c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c26:	4a0a      	ldr	r2, [pc, #40]	@ (8003c50 <SysTick_Config+0x40>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c2e:	210f      	movs	r1, #15
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f7ff ff8e 	bl	8003b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c38:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <SysTick_Config+0x40>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3e:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <SysTick_Config+0x40>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010

08003c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff29 	bl	8003ab4 <__NVIC_SetPriorityGrouping>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7c:	f7ff ff3e 	bl	8003afc <__NVIC_GetPriorityGrouping>
 8003c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7ff ff8e 	bl	8003ba8 <NVIC_EncodePriority>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff5d 	bl	8003b54 <__NVIC_SetPriority>
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff31 	bl	8003b18 <__NVIC_EnableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ffa2 	bl	8003c10 <SysTick_Config>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7fe fd32 	bl	800274c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e099      	b.n	8003e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d14:	e00f      	b.n	8003d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d16:	f7fe fd19 	bl	800274c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d908      	bls.n	8003d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e078      	b.n	8003e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e8      	bne.n	8003d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <HAL_DMA_Init+0x158>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d117      	bne.n	8003dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fb1b 	bl	8004418 <DMA_CheckFifoParam>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	@ 0x40
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003df6:	2301      	movs	r3, #1
 8003df8:	e016      	b.n	8003e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fad2 	bl	80043ac <DMA_CalcBaseAndBitshift>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	223f      	movs	r2, #63	@ 0x3f
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	e010803f 	.word	0xe010803f

08003e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_DMA_Start_IT+0x26>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e040      	b.n	8003edc <HAL_DMA_Start_IT+0xa8>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d12f      	bne.n	8003ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fa64 	bl	8004350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	223f      	movs	r2, #63	@ 0x3f
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0216 	orr.w	r2, r2, #22
 8003ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e005      	b.n	8003eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ef2:	f7fe fc2b 	bl	800274c <HAL_GetTick>
 8003ef6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d008      	beq.n	8003f16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2280      	movs	r2, #128	@ 0x80
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e052      	b.n	8003fbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_Abort+0x62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f66:	e013      	b.n	8003f90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f68:	f7fe fbf0 	bl	800274c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d90c      	bls.n	8003f90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e015      	b.n	8003fbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e4      	bne.n	8003f68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	223f      	movs	r2, #63	@ 0x3f
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2280      	movs	r2, #128	@ 0x80
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e00c      	b.n	8003ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2205      	movs	r2, #5
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004014:	4b8e      	ldr	r3, [pc, #568]	@ (8004250 <HAL_DMA_IRQHandler+0x248>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a8e      	ldr	r2, [pc, #568]	@ (8004254 <HAL_DMA_IRQHandler+0x24c>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a9b      	lsrs	r3, r3, #10
 8004020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004032:	2208      	movs	r2, #8
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01a      	beq.n	8004074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	2208      	movs	r2, #8
 8004062:	409a      	lsls	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	f043 0201 	orr.w	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004078:	2201      	movs	r2, #1
 800407a:	409a      	lsls	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d012      	beq.n	80040aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004096:	2201      	movs	r2, #1
 8004098:	409a      	lsls	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	2204      	movs	r2, #4
 80040b0:	409a      	lsls	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d012      	beq.n	80040e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	2204      	movs	r2, #4
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	2210      	movs	r2, #16
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d043      	beq.n	8004178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d03c      	beq.n	8004178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	2210      	movs	r2, #16
 8004104:	409a      	lsls	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d018      	beq.n	800414a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d024      	beq.n	8004178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
 8004136:	e01f      	b.n	8004178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01b      	beq.n	8004178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
 8004148:	e016      	b.n	8004178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0208 	bic.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	2220      	movs	r2, #32
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 808f 	beq.w	80042a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8087 	beq.w	80042a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	2220      	movs	r2, #32
 80041a0:	409a      	lsls	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d136      	bne.n	8004220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0216 	bic.w	r2, r2, #22
 80041c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x1da>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0208 	bic.w	r2, r2, #8
 80041f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	223f      	movs	r2, #63	@ 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004212:	2b00      	cmp	r3, #0
 8004214:	d07e      	beq.n	8004314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
        }
        return;
 800421e:	e079      	b.n	8004314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01d      	beq.n	800426a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	2b00      	cmp	r3, #0
 8004242:	d031      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
 800424c:	e02c      	b.n	80042a8 <HAL_DMA_IRQHandler+0x2a0>
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000
 8004254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d023      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
 8004268:	e01e      	b.n	80042a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0210 	bic.w	r2, r2, #16
 8004286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d032      	beq.n	8004316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d022      	beq.n	8004302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2205      	movs	r2, #5
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3301      	adds	r3, #1
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d307      	bcc.n	80042f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f2      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x2cc>
 80042ee:	e000      	b.n	80042f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
 8004312:	e000      	b.n	8004316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004314:	bf00      	nop
    }
  }
}
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432a:	b2db      	uxtb	r3, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800436c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b40      	cmp	r3, #64	@ 0x40
 800437c:	d108      	bne.n	8004390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800438e:	e007      	b.n	80043a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	3b10      	subs	r3, #16
 80043bc:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <DMA_CalcBaseAndBitshift+0x64>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043c6:	4a13      	ldr	r2, [pc, #76]	@ (8004414 <DMA_CalcBaseAndBitshift+0x68>)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d909      	bls.n	80043ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80043ec:	e007      	b.n	80043fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	aaaaaaab 	.word	0xaaaaaaab
 8004414:	0800e328 	.word	0x0800e328

08004418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11f      	bne.n	8004472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d856      	bhi.n	80044e6 <DMA_CheckFifoParam+0xce>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <DMA_CheckFifoParam+0x28>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004451 	.word	0x08004451
 8004444:	08004463 	.word	0x08004463
 8004448:	08004451 	.word	0x08004451
 800444c:	080044e7 	.word	0x080044e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d046      	beq.n	80044ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e043      	b.n	80044ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800446a:	d140      	bne.n	80044ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004470:	e03d      	b.n	80044ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800447a:	d121      	bne.n	80044c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d837      	bhi.n	80044f2 <DMA_CheckFifoParam+0xda>
 8004482:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <DMA_CheckFifoParam+0x70>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004499 	.word	0x08004499
 800448c:	0800449f 	.word	0x0800449f
 8004490:	08004499 	.word	0x08004499
 8004494:	080044b1 	.word	0x080044b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e030      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d025      	beq.n	80044f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ae:	e022      	b.n	80044f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044b8:	d11f      	bne.n	80044fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044be:	e01c      	b.n	80044fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d903      	bls.n	80044ce <DMA_CheckFifoParam+0xb6>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d003      	beq.n	80044d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044cc:	e018      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      break;
 80044d2:	e015      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e00b      	b.n	80044fe <DMA_CheckFifoParam+0xe6>
      break;
 80044e6:	bf00      	nop
 80044e8:	e00a      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044ea:	bf00      	nop
 80044ec:	e008      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044ee:	bf00      	nop
 80044f0:	e006      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044f2:	bf00      	nop
 80044f4:	e004      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;   
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	@ 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e165      	b.n	80047f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	f040 8154 	bne.w	80047f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d005      	beq.n	8004562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455e:	2b02      	cmp	r3, #2
 8004560:	d130      	bne.n	80045c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0201 	and.w	r2, r3, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d017      	beq.n	8004600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d123      	bne.n	8004654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	08da      	lsrs	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80ae 	beq.w	80047f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b5d      	ldr	r3, [pc, #372]	@ (8004810 <HAL_GPIO_Init+0x300>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	4a5c      	ldr	r2, [pc, #368]	@ (8004810 <HAL_GPIO_Init+0x300>)
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004810 <HAL_GPIO_Init+0x300>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b2:	4a58      	ldr	r2, [pc, #352]	@ (8004814 <HAL_GPIO_Init+0x304>)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	3302      	adds	r3, #2
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004818 <HAL_GPIO_Init+0x308>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d025      	beq.n	800472a <HAL_GPIO_Init+0x21a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4e      	ldr	r2, [pc, #312]	@ (800481c <HAL_GPIO_Init+0x30c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <HAL_GPIO_Init+0x216>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004820 <HAL_GPIO_Init+0x310>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_GPIO_Init+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004824 <HAL_GPIO_Init+0x314>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_GPIO_Init+0x20e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004828 <HAL_GPIO_Init+0x318>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00d      	beq.n	800471a <HAL_GPIO_Init+0x20a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4a      	ldr	r2, [pc, #296]	@ (800482c <HAL_GPIO_Init+0x31c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x206>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a49      	ldr	r2, [pc, #292]	@ (8004830 <HAL_GPIO_Init+0x320>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_GPIO_Init+0x202>
 800470e:	2306      	movs	r3, #6
 8004710:	e00c      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004712:	2307      	movs	r3, #7
 8004714:	e00a      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004716:	2305      	movs	r3, #5
 8004718:	e008      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800471a:	2304      	movs	r3, #4
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800471e:	2303      	movs	r3, #3
 8004720:	e004      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004722:	2302      	movs	r3, #2
 8004724:	e002      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800472a:	2300      	movs	r3, #0
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	f002 0203 	and.w	r2, r2, #3
 8004732:	0092      	lsls	r2, r2, #2
 8004734:	4093      	lsls	r3, r2
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473c:	4935      	ldr	r1, [pc, #212]	@ (8004814 <HAL_GPIO_Init+0x304>)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474a:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <HAL_GPIO_Init+0x324>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800476e:	4a31      	ldr	r2, [pc, #196]	@ (8004834 <HAL_GPIO_Init+0x324>)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004774:	4b2f      	ldr	r3, [pc, #188]	@ (8004834 <HAL_GPIO_Init+0x324>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004798:	4a26      	ldr	r2, [pc, #152]	@ (8004834 <HAL_GPIO_Init+0x324>)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800479e:	4b25      	ldr	r3, [pc, #148]	@ (8004834 <HAL_GPIO_Init+0x324>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_GPIO_Init+0x324>)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <HAL_GPIO_Init+0x324>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <HAL_GPIO_Init+0x324>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	f67f ae96 	bls.w	800452c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3724      	adds	r7, #36	@ 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	40013800 	.word	0x40013800
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800
 8004824:	40020c00 	.word	0x40020c00
 8004828:	40021000 	.word	0x40021000
 800482c:	40021400 	.word	0x40021400
 8004830:	40021800 	.word	0x40021800
 8004834:	40013c00 	.word	0x40013c00

08004838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
 8004844:	4613      	mov	r3, r2
 8004846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004848:	787b      	ldrb	r3, [r7, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004854:	e003      	b.n	800485e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	041a      	lsls	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	619a      	str	r2, [r3, #24]
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e12b      	b.n	8004ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fdec 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	@ 0x24
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048d0:	f002 fc64 	bl	800719c <HAL_RCC_GetPCLK1Freq>
 80048d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a81      	ldr	r2, [pc, #516]	@ (8004ae0 <HAL_I2C_Init+0x274>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d807      	bhi.n	80048f0 <HAL_I2C_Init+0x84>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a80      	ldr	r2, [pc, #512]	@ (8004ae4 <HAL_I2C_Init+0x278>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bf94      	ite	ls
 80048e8:	2301      	movls	r3, #1
 80048ea:	2300      	movhi	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e006      	b.n	80048fe <HAL_I2C_Init+0x92>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ae8 <HAL_I2C_Init+0x27c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	bf94      	ite	ls
 80048f8:	2301      	movls	r3, #1
 80048fa:	2300      	movhi	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0e7      	b.n	8004ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a78      	ldr	r2, [pc, #480]	@ (8004aec <HAL_I2C_Init+0x280>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	0c9b      	lsrs	r3, r3, #18
 8004910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae0 <HAL_I2C_Init+0x274>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d802      	bhi.n	8004940 <HAL_I2C_Init+0xd4>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	e009      	b.n	8004954 <HAL_I2C_Init+0xe8>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	4a69      	ldr	r2, [pc, #420]	@ (8004af0 <HAL_I2C_Init+0x284>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	3301      	adds	r3, #1
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004966:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	495c      	ldr	r1, [pc, #368]	@ (8004ae0 <HAL_I2C_Init+0x274>)
 8004970:	428b      	cmp	r3, r1
 8004972:	d819      	bhi.n	80049a8 <HAL_I2C_Init+0x13c>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1e59      	subs	r1, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004988:	400b      	ands	r3, r1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_I2C_Init+0x138>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1e59      	subs	r1, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fbb1 f3f3 	udiv	r3, r1, r3
 800499c:	3301      	adds	r3, #1
 800499e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a2:	e051      	b.n	8004a48 <HAL_I2C_Init+0x1dc>
 80049a4:	2304      	movs	r3, #4
 80049a6:	e04f      	b.n	8004a48 <HAL_I2C_Init+0x1dc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <HAL_I2C_Init+0x168>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	440b      	add	r3, r1
 80049be:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e012      	b.n	80049fa <HAL_I2C_Init+0x18e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e58      	subs	r0, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	0099      	lsls	r1, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Init+0x196>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e022      	b.n	8004a48 <HAL_I2C_Init+0x1dc>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10e      	bne.n	8004a28 <HAL_I2C_Init+0x1bc>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e58      	subs	r0, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	440b      	add	r3, r1
 8004a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a26:	e00f      	b.n	8004a48 <HAL_I2C_Init+0x1dc>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e58      	subs	r0, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	0099      	lsls	r1, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	6809      	ldr	r1, [r1, #0]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69da      	ldr	r2, [r3, #28]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6911      	ldr	r1, [r2, #16]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68d2      	ldr	r2, [r2, #12]
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	000186a0 	.word	0x000186a0
 8004ae4:	001e847f 	.word	0x001e847f
 8004ae8:	003d08ff 	.word	0x003d08ff
 8004aec:	431bde83 	.word	0x431bde83
 8004af0:	10624dd3 	.word	0x10624dd3

08004af4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	@ 0x30
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	4608      	mov	r0, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	817b      	strh	r3, [r7, #10]
 8004b06:	460b      	mov	r3, r1
 8004b08:	813b      	strh	r3, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b0e:	f7fd fe1d 	bl	800274c <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	f040 8176 	bne.w	8004e12 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b26:	4b95      	ldr	r3, [pc, #596]	@ (8004d7c <HAL_I2C_Mem_Read_DMA+0x288>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	4a94      	ldr	r2, [pc, #592]	@ (8004d80 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0a1a      	lsrs	r2, r3, #8
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009a      	lsls	r2, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d116      	bne.n	8004b7a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f043 0220 	orr.w	r2, r3, #32
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e14c      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d0db      	beq.n	8004b40 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e13e      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d007      	beq.n	8004bbc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2222      	movs	r2, #34	@ 0x22
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2240      	movs	r2, #64	@ 0x40
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a62      	ldr	r2, [pc, #392]	@ (8004d84 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004bfe:	897a      	ldrh	r2, [r7, #10]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004c04:	893a      	ldrh	r2, [r7, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80cc 	beq.w	8004db8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02d      	beq.n	8004c84 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	4a56      	ldr	r2, [pc, #344]	@ (8004d88 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	4a55      	ldr	r2, [pc, #340]	@ (8004d8c <HAL_I2C_Mem_Read_DMA+0x298>)
 8004c36:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	2200      	movs	r2, #0
 8004c46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3310      	adds	r3, #16
 8004c62:	4619      	mov	r1, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6e:	f7ff f8e1 	bl	8003e34 <HAL_DMA_Start_IT>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 8087 	bne.w	8004d90 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004c82:	e013      	b.n	8004cac <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b3      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004cac:	88f8      	ldrh	r0, [r7, #6]
 8004cae:	893a      	ldrh	r2, [r7, #8]
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	2323      	movs	r3, #35	@ 0x23
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4603      	mov	r3, r0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f001 fc7f 	bl	80065c0 <I2C_RequestMemoryRead>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d023      	beq.n	8004d10 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff f979 	bl	8003fc4 <HAL_DMA_Abort_IT>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	2200      	movs	r2, #0
 8004cde:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cee:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e081      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d108      	bne.n	8004d2a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e007      	b.n	8004d3a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d66:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e049      	b.n	8004e0e <HAL_I2C_Mem_Read_DMA+0x31a>
 8004d7a:	bf00      	nop
 8004d7c:	20000000 	.word	0x20000000
 8004d80:	14f8b589 	.word	0x14f8b589
 8004d84:	ffff0000 	.word	0xffff0000
 8004d88:	08006791 	.word	0x08006791
 8004d8c:	0800693b 	.word	0x0800693b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f043 0210 	orr.w	r2, r3, #16
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e02d      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004db8:	88f8      	ldrh	r0, [r7, #6]
 8004dba:	893a      	ldrh	r2, [r7, #8]
 8004dbc:	8979      	ldrh	r1, [r7, #10]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	2323      	movs	r3, #35	@ 0x23
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f001 fbf9 	bl	80065c0 <I2C_RequestMemoryRead>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e01d      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3728      	adds	r7, #40	@ 0x28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d003      	beq.n	8004e54 <HAL_I2C_EV_IRQHandler+0x38>
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	f040 80c1 	bne.w	8004fd6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <HAL_I2C_EV_IRQHandler+0x6e>
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e74:	d003      	beq.n	8004e7e <HAL_I2C_EV_IRQHandler+0x62>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2C_EV_IRQHandler+0x66>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_I2C_EV_IRQHandler+0x68>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f000 8132 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x92>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	0a5b      	lsrs	r3, r3, #9
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d006      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 ffa8 	bl	8006df6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd6f 	bl	800598a <I2C_Master_SB>
 8004eac:	e092      	b.n	8004fd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	08db      	lsrs	r3, r3, #3
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_I2C_EV_IRQHandler+0xb2>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	0a5b      	lsrs	r3, r3, #9
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fde5 	bl	8005a96 <I2C_Master_ADD10>
 8004ecc:	e082      	b.n	8004fd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_I2C_EV_IRQHandler+0xd2>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	0a5b      	lsrs	r3, r3, #9
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fdff 	bl	8005aea <I2C_Master_ADDR>
 8004eec:	e072      	b.n	8004fd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	089b      	lsrs	r3, r3, #2
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03b      	beq.n	8004f72 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f08:	f000 80f3 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00f      	beq.n	8004f38 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	0a9b      	lsrs	r3, r3, #10
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f9e9 	bl	8005308 <I2C_MasterTransmit_TXE>
 8004f36:	e04d      	b.n	8004fd4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80d6 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	0a5b      	lsrs	r3, r3, #9
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80cf 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b21      	cmp	r3, #33	@ 0x21
 8004f58:	d103      	bne.n	8004f62 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa70 	bl	8005440 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f60:	e0c7      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	f040 80c4 	bne.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fade 	bl	800552c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f70:	e0bf      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f80:	f000 80b7 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00f      	beq.n	8004fb0 <HAL_I2C_EV_IRQHandler+0x194>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	0a9b      	lsrs	r3, r3, #10
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_I2C_EV_IRQHandler+0x194>
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fb53 	bl	8005654 <I2C_MasterReceive_RXNE>
 8004fae:	e011      	b.n	8004fd4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 809a 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	0a5b      	lsrs	r3, r3, #9
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8093 	beq.w	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fbf2 	bl	80057b6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fd2:	e08e      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fd4:	e08d      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	e007      	b.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0x20e>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	0a5b      	lsrs	r3, r3, #9
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 ffb0 	bl	8005f88 <I2C_Slave_ADDR>
 8005028:	e066      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x22e>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 ffea 	bl	800601c <I2C_Slave_STOPF>
 8005048:	e056      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b21      	cmp	r3, #33	@ 0x21
 800504e:	d002      	beq.n	8005056 <HAL_I2C_EV_IRQHandler+0x23a>
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	2b29      	cmp	r3, #41	@ 0x29
 8005054:	d125      	bne.n	80050a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	09db      	lsrs	r3, r3, #7
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00f      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0x266>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	0a9b      	lsrs	r3, r3, #10
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_I2C_EV_IRQHandler+0x266>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	089b      	lsrs	r3, r3, #2
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fec6 	bl	8005e0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005080:	e039      	b.n	80050f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d033      	beq.n	80050f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	0a5b      	lsrs	r3, r3, #9
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02d      	beq.n	80050f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fef3 	bl	8005e86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050a0:	e029      	b.n	80050f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00f      	beq.n	80050ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	0a9b      	lsrs	r3, r3, #10
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	089b      	lsrs	r3, r3, #2
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fefe 	bl	8005ec8 <I2C_SlaveReceive_RXNE>
 80050cc:	e014      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 ff2c 	bl	8005f44 <I2C_SlaveReceive_BTF>
 80050ec:	e004      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b08a      	sub	sp, #40	@ 0x28
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005120:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <HAL_I2C_ER_IRQHandler+0x4e>
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800514a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	0a5b      	lsrs	r3, r3, #9
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00e      	beq.n	8005176 <HAL_I2C_ER_IRQHandler+0x78>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005174:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	0a9b      	lsrs	r3, r3, #10
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d03f      	beq.n	8005202 <HAL_I2C_ER_IRQHandler+0x104>
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d039      	beq.n	8005202 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800518e:	7efb      	ldrb	r3, [r7, #27]
 8005190:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051a8:	7ebb      	ldrb	r3, [r7, #26]
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d112      	bne.n	80051d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	2b21      	cmp	r3, #33	@ 0x21
 80051b8:	d008      	beq.n	80051cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b29      	cmp	r3, #41	@ 0x29
 80051be:	d005      	beq.n	80051cc <HAL_I2C_ER_IRQHandler+0xce>
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	2b28      	cmp	r3, #40	@ 0x28
 80051c4:	d106      	bne.n	80051d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b21      	cmp	r3, #33	@ 0x21
 80051ca:	d103      	bne.n	80051d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 f855 	bl	800627c <I2C_Slave_AF>
 80051d2:	e016      	b.n	8005202 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	f043 0304 	orr.w	r3, r3, #4
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051e6:	7efb      	ldrb	r3, [r7, #27]
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d002      	beq.n	80051f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80051ec:	7efb      	ldrb	r3, [r7, #27]
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	d107      	bne.n	8005202 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005200:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	0adb      	lsrs	r3, r3, #11
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00e      	beq.n	800522c <HAL_I2C_ER_IRQHandler+0x12e>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	f043 0308 	orr.w	r3, r3, #8
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800522a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 f88c 	bl	800635c <I2C_ITError>
  }
}
 8005244:	bf00      	nop
 8005246:	3728      	adds	r7, #40	@ 0x28
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
 80052a8:	4613      	mov	r3, r2
 80052aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005316:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800531e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d150      	bne.n	80053d0 <I2C_MasterTransmit_TXE+0xc8>
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b21      	cmp	r3, #33	@ 0x21
 8005332:	d14d      	bne.n	80053d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d01d      	beq.n	8005376 <I2C_MasterTransmit_TXE+0x6e>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d01a      	beq.n	8005376 <I2C_MasterTransmit_TXE+0x6e>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005346:	d016      	beq.n	8005376 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005356:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2211      	movs	r2, #17
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ff6c 	bl	800524c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005374:	e060      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005384:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005394:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d107      	bne.n	80053c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff87 	bl	80052cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053be:	e03b      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff3f 	bl	800524c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ce:	e033      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b21      	cmp	r3, #33	@ 0x21
 80053d4:	d005      	beq.n	80053e2 <I2C_MasterTransmit_TXE+0xda>
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d12d      	bne.n	8005438 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b22      	cmp	r3, #34	@ 0x22
 80053e0:	d12a      	bne.n	8005438 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d108      	bne.n	80053fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80053fc:	e01c      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b40      	cmp	r3, #64	@ 0x40
 8005408:	d103      	bne.n	8005412 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f88e 	bl	800552c <I2C_MemoryTransmit_TXE_BTF>
}
 8005410:	e012      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005436:	e7ff      	b.n	8005438 <I2C_MasterTransmit_TXE+0x130>
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b21      	cmp	r3, #33	@ 0x21
 8005458:	d164      	bne.n	8005524 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	781a      	ldrb	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005488:	e04c      	b.n	8005524 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d01d      	beq.n	80054cc <I2C_MasterTransmit_BTF+0x8c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b20      	cmp	r3, #32
 8005494:	d01a      	beq.n	80054cc <I2C_MasterTransmit_BTF+0x8c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800549c:	d016      	beq.n	80054cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2211      	movs	r2, #17
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fec1 	bl	800524c <HAL_I2C_MasterTxCpltCallback>
}
 80054ca:	e02b      	b.n	8005524 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d107      	bne.n	8005516 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fedc 	bl	80052cc <HAL_I2C_MemTxCpltCallback>
}
 8005514:	e006      	b.n	8005524 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fe94 	bl	800524c <HAL_I2C_MasterTxCpltCallback>
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11d      	bne.n	8005580 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10b      	bne.n	8005564 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005550:	b2da      	uxtb	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555c:	1c9a      	adds	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005562:	e073      	b.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005568:	b29b      	uxth	r3, r3
 800556a:	121b      	asrs	r3, r3, #8
 800556c:	b2da      	uxtb	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800557e:	e065      	b.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10b      	bne.n	80055a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800559e:	e055      	b.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d151      	bne.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b22      	cmp	r3, #34	@ 0x22
 80055ac:	d10d      	bne.n	80055ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055c8:	e040      	b.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b21      	cmp	r3, #33	@ 0x21
 80055d8:	d112      	bne.n	8005600 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80055fe:	e025      	b.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d120      	bne.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b21      	cmp	r3, #33	@ 0x21
 800560e:	d11d      	bne.n	800564c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800561e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe40 	bl	80052cc <HAL_I2C_MemTxCpltCallback>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b22      	cmp	r3, #34	@ 0x22
 8005666:	f040 80a2 	bne.w	80057ae <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d921      	bls.n	80056bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	f040 8082 	bne.w	80057ae <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80056ba:	e078      	b.n	80057ae <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d074      	beq.n	80057ae <I2C_MasterReceive_RXNE+0x15a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d002      	beq.n	80056d0 <I2C_MasterReceive_RXNE+0x7c>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d16e      	bne.n	80057ae <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 fb2f 	bl	8006d34 <I2C_WaitOnSTOPRequestThroughIT>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d142      	bne.n	8005762 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b40      	cmp	r3, #64	@ 0x40
 8005734:	d10a      	bne.n	800574c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fc fa97 	bl	8001c78 <HAL_I2C_MemRxCpltCallback>
}
 800574a:	e030      	b.n	80057ae <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2212      	movs	r2, #18
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fd80 	bl	8005260 <HAL_I2C_MasterRxCpltCallback>
}
 8005760:	e025      	b.n	80057ae <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005770:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fd99 	bl	80052e0 <HAL_I2C_ErrorCallback>
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d11b      	bne.n	8005806 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057dc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005804:	e0bd      	b.n	8005982 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b03      	cmp	r3, #3
 800580e:	d129      	bne.n	8005864 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800581e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d00a      	beq.n	800583c <I2C_MasterReceive_BTF+0x86>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d007      	beq.n	800583c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800583a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005862:	e08e      	b.n	8005982 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d176      	bne.n	800595c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <I2C_MasterReceive_BTF+0xc4>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b10      	cmp	r3, #16
 8005878:	d108      	bne.n	800588c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e019      	b.n	80058c0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d002      	beq.n	8005898 <I2C_MasterReceive_BTF+0xe2>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d108      	bne.n	80058aa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e00a      	b.n	80058c0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d007      	beq.n	80058c0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800591a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d10a      	bne.n	8005946 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fc f99a 	bl	8001c78 <HAL_I2C_MemRxCpltCallback>
}
 8005944:	e01d      	b.n	8005982 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2212      	movs	r2, #18
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fc83 	bl	8005260 <HAL_I2C_MasterRxCpltCallback>
}
 800595a:	e012      	b.n	8005982 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d117      	bne.n	80059ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059b8:	e067      	b.n	8005a8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]
}
 80059cc:	e05d      	b.n	8005a8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059d6:	d133      	bne.n	8005a40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b21      	cmp	r3, #33	@ 0x21
 80059e2:	d109      	bne.n	80059f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	e008      	b.n	8005a0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <I2C_Master_SB+0x92>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d032      	beq.n	8005a8a <I2C_Master_SB+0x100>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d02d      	beq.n	8005a8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3c:	605a      	str	r2, [r3, #4]
}
 8005a3e:	e024      	b.n	8005a8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10e      	bne.n	8005a66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	11db      	asrs	r3, r3, #7
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 0306 	and.w	r3, r3, #6
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f063 030f 	orn	r3, r3, #15
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	611a      	str	r2, [r3, #16]
}
 8005a64:	e011      	b.n	8005a8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10d      	bne.n	8005a8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	11db      	asrs	r3, r3, #7
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0306 	and.w	r3, r3, #6
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f063 030e 	orn	r3, r3, #14
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	611a      	str	r2, [r3, #16]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <I2C_Master_ADD10+0x26>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00c      	beq.n	8005ade <I2C_Master_ADD10+0x48>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005adc:	605a      	str	r2, [r3, #4]
  }
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b091      	sub	sp, #68	@ 0x44
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005af8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b22      	cmp	r3, #34	@ 0x22
 8005b12:	f040 8169 	bne.w	8005de8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10f      	bne.n	8005b3e <I2C_Master_ADDR+0x54>
 8005b1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005b22:	2b40      	cmp	r3, #64	@ 0x40
 8005b24:	d10b      	bne.n	8005b3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b26:	2300      	movs	r3, #0
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	e160      	b.n	8005e00 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d11d      	bne.n	8005b82 <I2C_Master_ADDR+0x98>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b4e:	d118      	bne.n	8005b82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b50:	2300      	movs	r3, #0
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b80:	e13e      	b.n	8005e00 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d113      	bne.n	8005bb4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e115      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	f040 808a 	bne.w	8005cd4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bc6:	d137      	bne.n	8005c38 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be6:	d113      	bne.n	8005c10 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	e0e7      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c10:	2300      	movs	r3, #0
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e0d3      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d02e      	beq.n	8005c9c <I2C_Master_ADDR+0x1b2>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d02b      	beq.n	8005c9c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c46:	2b12      	cmp	r3, #18
 8005c48:	d102      	bne.n	8005c50 <I2C_Master_ADDR+0x166>
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d125      	bne.n	8005c9c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00e      	beq.n	8005c74 <I2C_Master_ADDR+0x18a>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d00b      	beq.n	8005c74 <I2C_Master_ADDR+0x18a>
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d008      	beq.n	8005c74 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e007      	b.n	8005c84 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c82:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	e0a1      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005caa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e085      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d14d      	bne.n	8005d7a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d016      	beq.n	8005d12 <I2C_Master_ADDR+0x228>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d013      	beq.n	8005d12 <I2C_Master_ADDR+0x228>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d010      	beq.n	8005d12 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e007      	b.n	8005d22 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d20:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d30:	d117      	bne.n	8005d62 <I2C_Master_ADDR+0x278>
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d38:	d00b      	beq.n	8005d52 <I2C_Master_ADDR+0x268>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d008      	beq.n	8005d52 <I2C_Master_ADDR+0x268>
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d005      	beq.n	8005d52 <I2C_Master_ADDR+0x268>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d002      	beq.n	8005d52 <I2C_Master_ADDR+0x268>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d107      	bne.n	8005d62 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e032      	b.n	8005de0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d88:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d98:	d117      	bne.n	8005dca <I2C_Master_ADDR+0x2e0>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005da0:	d00b      	beq.n	8005dba <I2C_Master_ADDR+0x2d0>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d008      	beq.n	8005dba <I2C_Master_ADDR+0x2d0>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d005      	beq.n	8005dba <I2C_Master_ADDR+0x2d0>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d002      	beq.n	8005dba <I2C_Master_ADDR+0x2d0>
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d107      	bne.n	8005dca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005de6:	e00b      	b.n	8005e00 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	e7ff      	b.n	8005e00 <I2C_Master_ADDR+0x316>
 8005e00:	bf00      	nop
 8005e02:	3744      	adds	r7, #68	@ 0x44
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02b      	beq.n	8005e7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d114      	bne.n	8005e7e <I2C_SlaveTransmit_TXE+0x72>
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b29      	cmp	r3, #41	@ 0x29
 8005e58:	d111      	bne.n	8005e7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2221      	movs	r2, #33	@ 0x21
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2228      	movs	r2, #40	@ 0x28
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff f9fb 	bl	8005274 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02c      	beq.n	8005f3c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d114      	bne.n	8005f3c <I2C_SlaveReceive_RXNE+0x74>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f16:	d111      	bne.n	8005f3c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f26:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2222      	movs	r2, #34	@ 0x22
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2228      	movs	r2, #40	@ 0x28
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff f9a6 	bl	8005288 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d012      	beq.n	8005f7c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fa2:	2b28      	cmp	r3, #40	@ 0x28
 8005fa4:	d127      	bne.n	8005ff6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	09db      	lsrs	r3, r3, #7
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	81bb      	strh	r3, [r7, #12]
 8005fd8:	e002      	b.n	8005fe0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005fe8:	89ba      	ldrh	r2, [r7, #12]
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff f954 	bl	800529c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ff4:	e00e      	b.n	8006014 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800603a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006068:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006078:	d172      	bne.n	8006160 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b22      	cmp	r3, #34	@ 0x22
 800607e:	d002      	beq.n	8006086 <I2C_Slave_STOPF+0x6a>
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b2a      	cmp	r3, #42	@ 0x2a
 8006084:	d135      	bne.n	80060f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f043 0204 	orr.w	r2, r3, #4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe f92c 	bl	800431c <HAL_DMA_GetState>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d049      	beq.n	800615e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	4a69      	ldr	r2, [pc, #420]	@ (8006274 <I2C_Slave_STOPF+0x258>)
 80060d0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fd ff74 	bl	8003fc4 <HAL_DMA_Abort_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03d      	beq.n	800615e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060f0:	e035      	b.n	800615e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	f043 0204 	orr.w	r2, r3, #4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006124:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe f8f6 	bl	800431c <HAL_DMA_GetState>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d014      	beq.n	8006160 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	4a4e      	ldr	r2, [pc, #312]	@ (8006274 <I2C_Slave_STOPF+0x258>)
 800613c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd ff3e 	bl	8003fc4 <HAL_DMA_Abort_IT>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006158:	4610      	mov	r0, r2
 800615a:	4798      	blx	r3
 800615c:	e000      	b.n	8006160 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800615e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d03e      	beq.n	80061e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b04      	cmp	r3, #4
 8006176:	d112      	bne.n	800619e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a8:	2b40      	cmp	r3, #64	@ 0x40
 80061aa:	d112      	bne.n	80061d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	f043 0204 	orr.w	r2, r3, #4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f8b3 	bl	800635c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80061f6:	e039      	b.n	800626c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fc:	d109      	bne.n	8006212 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2228      	movs	r2, #40	@ 0x28
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff f83b 	bl	8005288 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b28      	cmp	r3, #40	@ 0x28
 800621c:	d111      	bne.n	8006242 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <I2C_Slave_STOPF+0x25c>)
 8006222:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f83c 	bl	80052b8 <HAL_I2C_ListenCpltCallback>
}
 8006240:	e014      	b.n	800626c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	2b22      	cmp	r3, #34	@ 0x22
 8006248:	d002      	beq.n	8006250 <I2C_Slave_STOPF+0x234>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b22      	cmp	r3, #34	@ 0x22
 800624e:	d10d      	bne.n	800626c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff f80e 	bl	8005288 <HAL_I2C_SlaveRxCpltCallback>
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	080069b5 	.word	0x080069b5
 8006278:	ffff0000 	.word	0xffff0000

0800627c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800628a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d002      	beq.n	800629e <I2C_Slave_AF+0x22>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b20      	cmp	r3, #32
 800629c:	d129      	bne.n	80062f2 <I2C_Slave_AF+0x76>
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b28      	cmp	r3, #40	@ 0x28
 80062a2:	d126      	bne.n	80062f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <I2C_Slave_AF+0xdc>)
 80062a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fe ffe4 	bl	80052b8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80062f0:	e02e      	b.n	8006350 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	2b21      	cmp	r3, #33	@ 0x21
 80062f6:	d126      	bne.n	8006346 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a17      	ldr	r2, [pc, #92]	@ (8006358 <I2C_Slave_AF+0xdc>)
 80062fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2221      	movs	r2, #33	@ 0x21
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006322:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800632c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800633c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fe ff98 	bl	8005274 <HAL_I2C_SlaveTxCpltCallback>
}
 8006344:	e004      	b.n	8006350 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800634e:	615a      	str	r2, [r3, #20]
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	ffff0000 	.word	0xffff0000

0800635c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006372:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b10      	cmp	r3, #16
 8006378:	d002      	beq.n	8006380 <I2C_ITError+0x24>
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d10a      	bne.n	8006396 <I2C_ITError+0x3a>
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	2b22      	cmp	r3, #34	@ 0x22
 8006384:	d107      	bne.n	8006396 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006394:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800639c:	2b28      	cmp	r3, #40	@ 0x28
 800639e:	d107      	bne.n	80063b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2228      	movs	r2, #40	@ 0x28
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80063ae:	e015      	b.n	80063dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063be:	d00a      	beq.n	80063d6 <I2C_ITError+0x7a>
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b60      	cmp	r3, #96	@ 0x60
 80063c4:	d007      	beq.n	80063d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ea:	d162      	bne.n	80064b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d020      	beq.n	800644c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640e:	4a6a      	ldr	r2, [pc, #424]	@ (80065b8 <I2C_ITError+0x25c>)
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fdd4 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8089 	beq.w	8006536 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006446:	4610      	mov	r0, r2
 8006448:	4798      	blx	r3
 800644a:	e074      	b.n	8006536 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	4a59      	ldr	r2, [pc, #356]	@ (80065b8 <I2C_ITError+0x25c>)
 8006452:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	4618      	mov	r0, r3
 800645a:	f7fd fdb3 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d068      	beq.n	8006536 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d10b      	bne.n	800648a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	e041      	b.n	8006536 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b60      	cmp	r3, #96	@ 0x60
 80064bc:	d125      	bne.n	800650a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d6:	2b40      	cmp	r3, #64	@ 0x40
 80064d8:	d10b      	bne.n	80064f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fe fef6 	bl	80052f4 <HAL_I2C_AbortCpltCallback>
 8006508:	e015      	b.n	8006536 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b40      	cmp	r3, #64	@ 0x40
 8006516:	d10b      	bne.n	8006530 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe fed5 	bl	80052e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10e      	bne.n	8006564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800657a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b04      	cmp	r3, #4
 8006586:	d113      	bne.n	80065b0 <I2C_ITError+0x254>
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b28      	cmp	r3, #40	@ 0x28
 800658c:	d110      	bne.n	80065b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <I2C_ITError+0x260>)
 8006592:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fe fe84 	bl	80052b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	080069b5 	.word	0x080069b5
 80065bc:	ffff0000 	.word	0xffff0000

080065c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	817b      	strh	r3, [r7, #10]
 80065d2:	460b      	mov	r3, r1
 80065d4:	813b      	strh	r3, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	2200      	movs	r2, #0
 8006602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fa7c 	bl	8006b04 <I2C_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006620:	d103      	bne.n	800662a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0aa      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800662e:	897b      	ldrh	r3, [r7, #10]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800663c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	4952      	ldr	r1, [pc, #328]	@ (800678c <I2C_RequestMemoryRead+0x1cc>)
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fab4 	bl	8006bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e097      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fb1e 	bl	8006cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e076      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d105      	bne.n	80066a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	611a      	str	r2, [r3, #16]
 80066a6:	e021      	b.n	80066ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066a8:	893b      	ldrh	r3, [r7, #8]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b8:	6a39      	ldr	r1, [r7, #32]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 faf8 	bl	8006cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d107      	bne.n	80066de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e050      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066e2:	893b      	ldrh	r3, [r7, #8]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ee:	6a39      	ldr	r1, [r7, #32]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fadd 	bl	8006cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	2b04      	cmp	r3, #4
 8006702:	d107      	bne.n	8006714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e035      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2200      	movs	r2, #0
 8006730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f9e5 	bl	8006b04 <I2C_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674e:	d103      	bne.n	8006758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e013      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800675c:	897b      	ldrh	r3, [r7, #10]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	4906      	ldr	r1, [pc, #24]	@ (800678c <I2C_RequestMemoryRead+0x1cc>)
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fa1d 	bl	8006bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	00010002 	.word	0x00010002

08006790 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80067c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d0:	2200      	movs	r2, #0
 80067d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e0:	2200      	movs	r2, #0
 80067e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80067ea:	2b21      	cmp	r3, #33	@ 0x21
 80067ec:	d007      	beq.n	80067fe <I2C_DMAXferCplt+0x6e>
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80067f4:	2b22      	cmp	r3, #34	@ 0x22
 80067f6:	d131      	bne.n	800685c <I2C_DMAXferCplt+0xcc>
 80067f8:	7cbb      	ldrb	r3, [r7, #18]
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d12e      	bne.n	800685c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800680c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2200      	movs	r2, #0
 8006812:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006814:	7cfb      	ldrb	r3, [r7, #19]
 8006816:	2b29      	cmp	r3, #41	@ 0x29
 8006818:	d10a      	bne.n	8006830 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2221      	movs	r2, #33	@ 0x21
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2228      	movs	r2, #40	@ 0x28
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7fe fd23 	bl	8005274 <HAL_I2C_SlaveTxCpltCallback>
 800682e:	e00c      	b.n	800684a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006830:	7cfb      	ldrb	r3, [r7, #19]
 8006832:	2b2a      	cmp	r3, #42	@ 0x2a
 8006834:	d109      	bne.n	800684a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2222      	movs	r2, #34	@ 0x22
 800683a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2228      	movs	r2, #40	@ 0x28
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006844:	6978      	ldr	r0, [r7, #20]
 8006846:	f7fe fd1f 	bl	8005288 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006858:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800685a:	e06a      	b.n	8006932 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d064      	beq.n	8006932 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	d107      	bne.n	8006882 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006880:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006890:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006898:	d009      	beq.n	80068ae <I2C_DMAXferCplt+0x11e>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d006      	beq.n	80068ae <I2C_DMAXferCplt+0x11e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80068a6:	d002      	beq.n	80068ae <I2C_DMAXferCplt+0x11e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d107      	bne.n	80068be <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068dc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80068ec:	6978      	ldr	r0, [r7, #20]
 80068ee:	f7fe fcf7 	bl	80052e0 <HAL_I2C_ErrorCallback>
}
 80068f2:	e01e      	b.n	8006932 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b40      	cmp	r3, #64	@ 0x40
 8006906:	d10a      	bne.n	800691e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006916:	6978      	ldr	r0, [r7, #20]
 8006918:	f7fb f9ae 	bl	8001c78 <HAL_I2C_MemRxCpltCallback>
}
 800691c:	e009      	b.n	8006932 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2212      	movs	r2, #18
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800692c:	6978      	ldr	r0, [r7, #20]
 800692e:	f7fe fc97 	bl	8005260 <HAL_I2C_MasterRxCpltCallback>
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	2200      	movs	r2, #0
 8006966:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fd fce5 	bl	8004338 <HAL_DMA_GetError>
 800696e:	4603      	mov	r3, r0
 8006970:	2b02      	cmp	r3, #2
 8006972:	d01b      	beq.n	80069ac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006982:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7fe fc9a 	bl	80052e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ce:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <I2C_DMAAbort+0x148>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006b00 <I2C_DMAAbort+0x14c>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0a1a      	lsrs	r2, r3, #8
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	f043 0220 	orr.w	r2, r3, #32
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80069fa:	e00a      	b.n	8006a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a10:	d0ea      	beq.n	80069e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	2200      	movs	r2, #0
 8006a20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	2200      	movs	r2, #0
 8006a30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	2200      	movs	r2, #0
 8006a56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a64:	2200      	movs	r2, #0
 8006a66:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b60      	cmp	r3, #96	@ 0x60
 8006a82:	d10e      	bne.n	8006aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7fe fc2a 	bl	80052f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006aa0:	e027      	b.n	8006af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aa8:	2b28      	cmp	r3, #40	@ 0x28
 8006aaa:	d117      	bne.n	8006adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2228      	movs	r2, #40	@ 0x28
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006ada:	e007      	b.n	8006aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	f7fe fbf7 	bl	80052e0 <HAL_I2C_ErrorCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000000 	.word	0x20000000
 8006b00:	14f8b589 	.word	0x14f8b589

08006b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b14:	e025      	b.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d021      	beq.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7fb fe15 	bl	800274c <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d116      	bne.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e023      	b.n	8006baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10d      	bne.n	8006b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	43da      	mvns	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	e00c      	b.n	8006ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d0b6      	beq.n	8006b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bc0:	e051      	b.n	8006c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd0:	d123      	bne.n	8006c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	f043 0204 	orr.w	r2, r3, #4
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e046      	b.n	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d021      	beq.n	8006c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c22:	f7fb fd93 	bl	800274c <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d302      	bcc.n	8006c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d116      	bne.n	8006c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e020      	b.n	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d10c      	bne.n	8006c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	43da      	mvns	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e00b      	b.n	8006ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	43da      	mvns	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d18d      	bne.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cbc:	e02d      	b.n	8006d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f86a 	bl	8006d98 <I2C_IsAcknowledgeFailed>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e02d      	b.n	8006d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d021      	beq.n	8006d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd6:	f7fb fd39 	bl	800274c <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d116      	bne.n	8006d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e007      	b.n	8006d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	2b80      	cmp	r3, #128	@ 0x80
 8006d26:	d1ca      	bne.n	8006cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	08db      	lsrs	r3, r3, #3
 8006d46:	4a13      	ldr	r2, [pc, #76]	@ (8006d94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d48:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4c:	0a1a      	lsrs	r2, r3, #8
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d107      	bne.n	8006d72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e008      	b.n	8006d84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d80:	d0e9      	beq.n	8006d56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000000 	.word	0x20000000
 8006d94:	14f8b589 	.word	0x14f8b589

08006d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dae:	d11b      	bne.n	8006de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd4:	f043 0204 	orr.w	r2, r3, #4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e02:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006e06:	d103      	bne.n	8006e10 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e0e:	e007      	b.n	8006e20 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e14:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006e18:	d102      	bne.n	8006e20 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0cc      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b68      	ldr	r3, [pc, #416]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d90c      	bls.n	8006e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b65      	ldr	r3, [pc, #404]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b63      	ldr	r3, [pc, #396]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0b8      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d020      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e80:	4b59      	ldr	r3, [pc, #356]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4a58      	ldr	r2, [pc, #352]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e98:	4b53      	ldr	r3, [pc, #332]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4a52      	ldr	r2, [pc, #328]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea4:	4b50      	ldr	r3, [pc, #320]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	494d      	ldr	r1, [pc, #308]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d044      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eca:	4b47      	ldr	r3, [pc, #284]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d119      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e07f      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d003      	beq.n	8006eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e06f      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efa:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e067      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f0a:	4b37      	ldr	r3, [pc, #220]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4934      	ldr	r1, [pc, #208]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f1c:	f7fb fc16 	bl	800274c <HAL_GetTick>
 8006f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f22:	e00a      	b.n	8006f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f24:	f7fb fc12 	bl	800274c <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e04f      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 020c 	and.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d1eb      	bne.n	8006f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f4c:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d20c      	bcs.n	8006f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5a:	4b22      	ldr	r3, [pc, #136]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f62:	4b20      	ldr	r3, [pc, #128]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e032      	b.n	8006fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f80:	4b19      	ldr	r3, [pc, #100]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	4916      	ldr	r1, [pc, #88]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f9e:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	490e      	ldr	r1, [pc, #56]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fb2:	f000 f821 	bl	8006ff8 <HAL_RCC_GetSysClockFreq>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	490a      	ldr	r1, [pc, #40]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006fc4:	5ccb      	ldrb	r3, [r1, r3]
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fce:	4b09      	ldr	r3, [pc, #36]	@ (8006ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fb fb76 	bl	80026c4 <HAL_InitTick>

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40023c00 	.word	0x40023c00
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	0800e310 	.word	0x0800e310
 8006ff0:	20000000 	.word	0x20000000
 8006ff4:	20000004 	.word	0x20000004

08006ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ffc:	b090      	sub	sp, #64	@ 0x40
 8006ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
 8007004:	2300      	movs	r3, #0
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007008:	2300      	movs	r3, #0
 800700a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007010:	4b59      	ldr	r3, [pc, #356]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 030c 	and.w	r3, r3, #12
 8007018:	2b08      	cmp	r3, #8
 800701a:	d00d      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0x40>
 800701c:	2b08      	cmp	r3, #8
 800701e:	f200 80a1 	bhi.w	8007164 <HAL_RCC_GetSysClockFreq+0x16c>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_RCC_GetSysClockFreq+0x34>
 8007026:	2b04      	cmp	r3, #4
 8007028:	d003      	beq.n	8007032 <HAL_RCC_GetSysClockFreq+0x3a>
 800702a:	e09b      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b53      	ldr	r3, [pc, #332]	@ (800717c <HAL_RCC_GetSysClockFreq+0x184>)
 800702e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007030:	e09b      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007032:	4b53      	ldr	r3, [pc, #332]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x188>)
 8007034:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007036:	e098      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007038:	4b4f      	ldr	r3, [pc, #316]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007042:	4b4d      	ldr	r3, [pc, #308]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d028      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800704e:	4b4a      	ldr	r3, [pc, #296]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	099b      	lsrs	r3, r3, #6
 8007054:	2200      	movs	r2, #0
 8007056:	623b      	str	r3, [r7, #32]
 8007058:	627a      	str	r2, [r7, #36]	@ 0x24
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007060:	2100      	movs	r1, #0
 8007062:	4b47      	ldr	r3, [pc, #284]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x188>)
 8007064:	fb03 f201 	mul.w	r2, r3, r1
 8007068:	2300      	movs	r3, #0
 800706a:	fb00 f303 	mul.w	r3, r0, r3
 800706e:	4413      	add	r3, r2
 8007070:	4a43      	ldr	r2, [pc, #268]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x188>)
 8007072:	fba0 1202 	umull	r1, r2, r0, r2
 8007076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007078:	460a      	mov	r2, r1
 800707a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800707c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800707e:	4413      	add	r3, r2
 8007080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007084:	2200      	movs	r2, #0
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	61fa      	str	r2, [r7, #28]
 800708a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800708e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007092:	f7f9 fad1 	bl	8000638 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4613      	mov	r3, r2
 800709c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709e:	e053      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070a0:	4b35      	ldr	r3, [pc, #212]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	099b      	lsrs	r3, r3, #6
 80070a6:	2200      	movs	r2, #0
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	617a      	str	r2, [r7, #20]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070b2:	f04f 0b00 	mov.w	fp, #0
 80070b6:	4652      	mov	r2, sl
 80070b8:	465b      	mov	r3, fp
 80070ba:	f04f 0000 	mov.w	r0, #0
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	0159      	lsls	r1, r3, #5
 80070c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070c8:	0150      	lsls	r0, r2, #5
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	ebb2 080a 	subs.w	r8, r2, sl
 80070d2:	eb63 090b 	sbc.w	r9, r3, fp
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80070e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80070e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80070ea:	ebb2 0408 	subs.w	r4, r2, r8
 80070ee:	eb63 0509 	sbc.w	r5, r3, r9
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	00eb      	lsls	r3, r5, #3
 80070fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007100:	00e2      	lsls	r2, r4, #3
 8007102:	4614      	mov	r4, r2
 8007104:	461d      	mov	r5, r3
 8007106:	eb14 030a 	adds.w	r3, r4, sl
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	eb45 030b 	adc.w	r3, r5, fp
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800711e:	4629      	mov	r1, r5
 8007120:	028b      	lsls	r3, r1, #10
 8007122:	4621      	mov	r1, r4
 8007124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007128:	4621      	mov	r1, r4
 800712a:	028a      	lsls	r2, r1, #10
 800712c:	4610      	mov	r0, r2
 800712e:	4619      	mov	r1, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	2200      	movs	r2, #0
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	60fa      	str	r2, [r7, #12]
 8007138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800713c:	f7f9 fa7c 	bl	8000638 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4613      	mov	r3, r2
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007148:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x180>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	3301      	adds	r3, #1
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007158:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007162:	e002      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007164:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCC_GetSysClockFreq+0x184>)
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800716c:	4618      	mov	r0, r3
 800716e:	3740      	adds	r7, #64	@ 0x40
 8007170:	46bd      	mov	sp, r7
 8007172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800
 800717c:	00f42400 	.word	0x00f42400
 8007180:	017d7840 	.word	0x017d7840

08007184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007188:	4b03      	ldr	r3, [pc, #12]	@ (8007198 <HAL_RCC_GetHCLKFreq+0x14>)
 800718a:	681b      	ldr	r3, [r3, #0]
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20000000 	.word	0x20000000

0800719c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071a0:	f7ff fff0 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 80071a4:	4602      	mov	r2, r0
 80071a6:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	0a9b      	lsrs	r3, r3, #10
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	4903      	ldr	r1, [pc, #12]	@ (80071c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071b2:	5ccb      	ldrb	r3, [r1, r3]
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800
 80071c0:	0800e320 	.word	0x0800e320

080071c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071c8:	f7ff ffdc 	bl	8007184 <HAL_RCC_GetHCLKFreq>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	0b5b      	lsrs	r3, r3, #13
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	4903      	ldr	r1, [pc, #12]	@ (80071e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071da:	5ccb      	ldrb	r3, [r1, r3]
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40023800 	.word	0x40023800
 80071e8:	0800e320 	.word	0x0800e320

080071ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e273      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d075      	beq.n	80072f6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800720a:	4b88      	ldr	r3, [pc, #544]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	2b04      	cmp	r3, #4
 8007214:	d00c      	beq.n	8007230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007216:	4b85      	ldr	r3, [pc, #532]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800721e:	2b08      	cmp	r3, #8
 8007220:	d112      	bne.n	8007248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007222:	4b82      	ldr	r3, [pc, #520]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800722a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800722e:	d10b      	bne.n	8007248 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	4b7e      	ldr	r3, [pc, #504]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d05b      	beq.n	80072f4 <HAL_RCC_OscConfig+0x108>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d157      	bne.n	80072f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e24e      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007250:	d106      	bne.n	8007260 <HAL_RCC_OscConfig+0x74>
 8007252:	4b76      	ldr	r3, [pc, #472]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a75      	ldr	r2, [pc, #468]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e01d      	b.n	800729c <HAL_RCC_OscConfig+0xb0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007268:	d10c      	bne.n	8007284 <HAL_RCC_OscConfig+0x98>
 800726a:	4b70      	ldr	r3, [pc, #448]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6f      	ldr	r2, [pc, #444]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4b6d      	ldr	r3, [pc, #436]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a6c      	ldr	r2, [pc, #432]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800727c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e00b      	b.n	800729c <HAL_RCC_OscConfig+0xb0>
 8007284:	4b69      	ldr	r3, [pc, #420]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a68      	ldr	r2, [pc, #416]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800728a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	4b66      	ldr	r3, [pc, #408]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a65      	ldr	r2, [pc, #404]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800729a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d013      	beq.n	80072cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fb fa52 	bl	800274c <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fb fa4e 	bl	800274c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	@ 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e213      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072be:	4b5b      	ldr	r3, [pc, #364]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0xc0>
 80072ca:	e014      	b.n	80072f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fb fa3e 	bl	800274c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072d4:	f7fb fa3a 	bl	800274c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	@ 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e1ff      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072e6:	4b51      	ldr	r3, [pc, #324]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0xe8>
 80072f2:	e000      	b.n	80072f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d063      	beq.n	80073ca <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007302:	4b4a      	ldr	r3, [pc, #296]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800730e:	4b47      	ldr	r3, [pc, #284]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007316:	2b08      	cmp	r3, #8
 8007318:	d11c      	bne.n	8007354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800731a:	4b44      	ldr	r3, [pc, #272]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d116      	bne.n	8007354 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007326:	4b41      	ldr	r3, [pc, #260]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_RCC_OscConfig+0x152>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d001      	beq.n	800733e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e1d3      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733e:	4b3b      	ldr	r3, [pc, #236]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4937      	ldr	r1, [pc, #220]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800734e:	4313      	orrs	r3, r2
 8007350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007352:	e03a      	b.n	80073ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800735c:	4b34      	ldr	r3, [pc, #208]	@ (8007430 <HAL_RCC_OscConfig+0x244>)
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007362:	f7fb f9f3 	bl	800274c <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800736a:	f7fb f9ef 	bl	800274c <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e1b4      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800737c:	4b2b      	ldr	r3, [pc, #172]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007388:	4b28      	ldr	r3, [pc, #160]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4925      	ldr	r1, [pc, #148]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007398:	4313      	orrs	r3, r2
 800739a:	600b      	str	r3, [r1, #0]
 800739c:	e015      	b.n	80073ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800739e:	4b24      	ldr	r3, [pc, #144]	@ (8007430 <HAL_RCC_OscConfig+0x244>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fb f9d2 	bl	800274c <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ac:	f7fb f9ce 	bl	800274c <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e193      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073be:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d036      	beq.n	8007444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d016      	beq.n	800740c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073de:	4b15      	ldr	r3, [pc, #84]	@ (8007434 <HAL_RCC_OscConfig+0x248>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e4:	f7fb f9b2 	bl	800274c <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ec:	f7fb f9ae 	bl	800274c <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e173      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <HAL_RCC_OscConfig+0x240>)
 8007400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0x200>
 800740a:	e01b      	b.n	8007444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800740c:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <HAL_RCC_OscConfig+0x248>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007412:	f7fb f99b 	bl	800274c <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007418:	e00e      	b.n	8007438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800741a:	f7fb f997 	bl	800274c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d907      	bls.n	8007438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e15c      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
 800742c:	40023800 	.word	0x40023800
 8007430:	42470000 	.word	0x42470000
 8007434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007438:	4b8a      	ldr	r3, [pc, #552]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800743a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ea      	bne.n	800741a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8097 	beq.w	8007580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007456:	4b83      	ldr	r3, [pc, #524]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	4b7f      	ldr	r3, [pc, #508]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	4a7e      	ldr	r2, [pc, #504]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007470:	6413      	str	r3, [r2, #64]	@ 0x40
 8007472:	4b7c      	ldr	r3, [pc, #496]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007482:	4b79      	ldr	r3, [pc, #484]	@ (8007668 <HAL_RCC_OscConfig+0x47c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d118      	bne.n	80074c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800748e:	4b76      	ldr	r3, [pc, #472]	@ (8007668 <HAL_RCC_OscConfig+0x47c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a75      	ldr	r2, [pc, #468]	@ (8007668 <HAL_RCC_OscConfig+0x47c>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800749a:	f7fb f957 	bl	800274c <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a2:	f7fb f953 	bl	800274c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e118      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007668 <HAL_RCC_OscConfig+0x47c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d106      	bne.n	80074d6 <HAL_RCC_OscConfig+0x2ea>
 80074c8:	4b66      	ldr	r3, [pc, #408]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074cc:	4a65      	ldr	r2, [pc, #404]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80074d4:	e01c      	b.n	8007510 <HAL_RCC_OscConfig+0x324>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCC_OscConfig+0x30c>
 80074de:	4b61      	ldr	r3, [pc, #388]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e2:	4a60      	ldr	r2, [pc, #384]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074e4:	f043 0304 	orr.w	r3, r3, #4
 80074e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ea:	4b5e      	ldr	r3, [pc, #376]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ee:	4a5d      	ldr	r2, [pc, #372]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f6:	e00b      	b.n	8007510 <HAL_RCC_OscConfig+0x324>
 80074f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	4a59      	ldr	r2, [pc, #356]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	6713      	str	r3, [r2, #112]	@ 0x70
 8007504:	4b57      	ldr	r3, [pc, #348]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	4a56      	ldr	r2, [pc, #344]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800750a:	f023 0304 	bic.w	r3, r3, #4
 800750e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007518:	f7fb f918 	bl	800274c <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800751e:	e00a      	b.n	8007536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007520:	f7fb f914 	bl	800274c <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e0d7      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007536:	4b4b      	ldr	r3, [pc, #300]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0ee      	beq.n	8007520 <HAL_RCC_OscConfig+0x334>
 8007542:	e014      	b.n	800756e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007544:	f7fb f902 	bl	800274c <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800754a:	e00a      	b.n	8007562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800754c:	f7fb f8fe 	bl	800274c <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e0c1      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007562:	4b40      	ldr	r3, [pc, #256]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1ee      	bne.n	800754c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d105      	bne.n	8007580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007574:	4b3b      	ldr	r3, [pc, #236]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	4a3a      	ldr	r2, [pc, #232]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800757a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800757e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80ad 	beq.w	80076e4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800758a:	4b36      	ldr	r3, [pc, #216]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	2b08      	cmp	r3, #8
 8007594:	d060      	beq.n	8007658 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d145      	bne.n	800762a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759e:	4b33      	ldr	r3, [pc, #204]	@ (800766c <HAL_RCC_OscConfig+0x480>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fb f8d2 	bl	800274c <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fb f8ce 	bl	800274c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e093      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075be:	4b29      	ldr	r3, [pc, #164]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f0      	bne.n	80075ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	019b      	lsls	r3, r3, #6
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	3b01      	subs	r3, #1
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	061b      	lsls	r3, r3, #24
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	071b      	lsls	r3, r3, #28
 80075f6:	491b      	ldr	r1, [pc, #108]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075fc:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <HAL_RCC_OscConfig+0x480>)
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007602:	f7fb f8a3 	bl	800274c <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800760a:	f7fb f89f 	bl	800274c <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e064      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761c:	4b11      	ldr	r3, [pc, #68]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x41e>
 8007628:	e05c      	b.n	80076e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762a:	4b10      	ldr	r3, [pc, #64]	@ (800766c <HAL_RCC_OscConfig+0x480>)
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007630:	f7fb f88c 	bl	800274c <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007638:	f7fb f888 	bl	800274c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e04d      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764a:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <HAL_RCC_OscConfig+0x478>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f0      	bne.n	8007638 <HAL_RCC_OscConfig+0x44c>
 8007656:	e045      	b.n	80076e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d107      	bne.n	8007670 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e040      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
 8007664:	40023800 	.word	0x40023800
 8007668:	40007000 	.word	0x40007000
 800766c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007670:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <HAL_RCC_OscConfig+0x504>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d030      	beq.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d129      	bne.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d122      	bne.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076a0:	4013      	ands	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d119      	bne.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	3b01      	subs	r3, #1
 80076ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076bc:	429a      	cmp	r2, r3
 80076be:	d10f      	bne.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d107      	bne.n	80076e0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40023800 	.word	0x40023800

080076f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e07b      	b.n	80077fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007716:	d009      	beq.n	800772c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	61da      	str	r2, [r3, #28]
 800771e:	e005      	b.n	800772c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7f9 fff4 	bl	8001734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b0:	ea42 0103 	orr.w	r1, r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	f003 0104 	and.w	r1, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	f003 0210 	and.w	r2, r3, #16
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b088      	sub	sp, #32
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_SPI_Transmit+0x22>
 8007824:	2302      	movs	r3, #2
 8007826:	e126      	b.n	8007a76 <HAL_SPI_Transmit+0x270>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007830:	f7fa ff8c 	bl	800274c <HAL_GetTick>
 8007834:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d002      	beq.n	800784c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007846:	2302      	movs	r3, #2
 8007848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800784a:	e10b      	b.n	8007a64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_SPI_Transmit+0x52>
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800785c:	e102      	b.n	8007a64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2203      	movs	r2, #3
 8007862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a4:	d10f      	bne.n	80078c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d0:	2b40      	cmp	r3, #64	@ 0x40
 80078d2:	d007      	beq.n	80078e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ec:	d14b      	bne.n	8007986 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Transmit+0xf6>
 80078f6:	8afb      	ldrh	r3, [r7, #22]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d13e      	bne.n	800797a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007920:	e02b      	b.n	800797a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d112      	bne.n	8007956 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	881a      	ldrh	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	1c9a      	adds	r2, r3, #2
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007954:	e011      	b.n	800797a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007956:	f7fa fef9 	bl	800274c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d803      	bhi.n	800796e <HAL_SPI_Transmit+0x168>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d102      	bne.n	8007974 <HAL_SPI_Transmit+0x16e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007978:	e074      	b.n	8007a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1ce      	bne.n	8007922 <HAL_SPI_Transmit+0x11c>
 8007984:	e04c      	b.n	8007a20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Transmit+0x18e>
 800798e:	8afb      	ldrh	r3, [r7, #22]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d140      	bne.n	8007a16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079ba:	e02c      	b.n	8007a16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d113      	bne.n	80079f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079f0:	e011      	b.n	8007a16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079f2:	f7fa feab 	bl	800274c <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d803      	bhi.n	8007a0a <HAL_SPI_Transmit+0x204>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d102      	bne.n	8007a10 <HAL_SPI_Transmit+0x20a>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a14:	e026      	b.n	8007a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1cd      	bne.n	80079bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f001 f803 	bl	8008a30 <SPI_EndRxTxTransaction>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e000      	b.n	8007a64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af02      	add	r7, sp, #8
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	603b      	str	r3, [r7, #0]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a9a:	d112      	bne.n	8007ac2 <HAL_SPI_Receive+0x44>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10e      	bne.n	8007ac2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f8f1 	bl	8007ca0 <HAL_SPI_TransmitReceive>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	e0ea      	b.n	8007c98 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_SPI_Receive+0x52>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e0e3      	b.n	8007c98 <HAL_SPI_Receive+0x21a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ad8:	f7fa fe38 	bl	800274c <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
 8007aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aee:	e0ca      	b.n	8007c86 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <HAL_SPI_Receive+0x7e>
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b00:	e0c1      	b.n	8007c86 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2204      	movs	r2, #4
 8007b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b48:	d10f      	bne.n	8007b6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	d007      	beq.n	8007b88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d162      	bne.n	8007c56 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b90:	e02e      	b.n	8007bf0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d115      	bne.n	8007bcc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f103 020c 	add.w	r2, r3, #12
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bca:	e011      	b.n	8007bf0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bcc:	f7fa fdbe 	bl	800274c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d803      	bhi.n	8007be4 <HAL_SPI_Receive+0x166>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d102      	bne.n	8007bea <HAL_SPI_Receive+0x16c>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bee:	e04a      	b.n	8007c86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1cb      	bne.n	8007b92 <HAL_SPI_Receive+0x114>
 8007bfa:	e031      	b.n	8007c60 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d113      	bne.n	8007c32 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c14:	b292      	uxth	r2, r2
 8007c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1c:	1c9a      	adds	r2, r3, #2
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c30:	e011      	b.n	8007c56 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c32:	f7fa fd8b 	bl	800274c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d803      	bhi.n	8007c4a <HAL_SPI_Receive+0x1cc>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d102      	bne.n	8007c50 <HAL_SPI_Receive+0x1d2>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c54:	e017      	b.n	8007c86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1cd      	bne.n	8007bfc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fe7d 	bl	8008964 <SPI_EndRxTransaction>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e000      	b.n	8007c86 <HAL_SPI_Receive+0x208>
  }

error :
 8007c84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	@ 0x30
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_SPI_TransmitReceive+0x26>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e18a      	b.n	8007fdc <HAL_SPI_TransmitReceive+0x33c>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cce:	f7fa fd3d 	bl	800274c <HAL_GetTick>
 8007cd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ce4:	887b      	ldrh	r3, [r7, #2]
 8007ce6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d00f      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x70>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf6:	d107      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x68>
 8007d00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d003      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d0e:	e15b      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_SPI_TransmitReceive+0x82>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <HAL_SPI_TransmitReceive+0x82>
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d28:	e14e      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d003      	beq.n	8007d3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2205      	movs	r2, #5
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	887a      	ldrh	r2, [r7, #2]
 8007d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	887a      	ldrh	r2, [r7, #2]
 8007d60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	887a      	ldrh	r2, [r7, #2]
 8007d66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7e:	2b40      	cmp	r3, #64	@ 0x40
 8007d80:	d007      	beq.n	8007d92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d9a:	d178      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <HAL_SPI_TransmitReceive+0x10a>
 8007da4:	8b7b      	ldrh	r3, [r7, #26]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d166      	bne.n	8007e78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	881a      	ldrh	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	1c9a      	adds	r2, r3, #2
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dce:	e053      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d11b      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x176>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x176>
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d113      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	881a      	ldrh	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	1c9a      	adds	r2, r3, #2
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d119      	bne.n	8007e58 <HAL_SPI_TransmitReceive+0x1b8>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d014      	beq.n	8007e58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	1c9a      	adds	r2, r3, #2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e54:	2301      	movs	r3, #1
 8007e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e58:	f7fa fc78 	bl	800274c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d807      	bhi.n	8007e78 <HAL_SPI_TransmitReceive+0x1d8>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d003      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007e76:	e0a7      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1a6      	bne.n	8007dd0 <HAL_SPI_TransmitReceive+0x130>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1a1      	bne.n	8007dd0 <HAL_SPI_TransmitReceive+0x130>
 8007e8c:	e07c      	b.n	8007f88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_SPI_TransmitReceive+0x1fc>
 8007e96:	8b7b      	ldrh	r3, [r7, #26]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d16b      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec2:	e057      	b.n	8007f74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d11c      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x26c>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d017      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x26c>
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d114      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	330c      	adds	r3, #12
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d119      	bne.n	8007f4e <HAL_SPI_TransmitReceive+0x2ae>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d014      	beq.n	8007f4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f4e:	f7fa fbfd 	bl	800274c <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d803      	bhi.n	8007f66 <HAL_SPI_TransmitReceive+0x2c6>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d102      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x2cc>
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007f72:	e029      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1a2      	bne.n	8007ec4 <HAL_SPI_TransmitReceive+0x224>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d19d      	bne.n	8007ec4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 fd4f 	bl	8008a30 <SPI_EndRxTxTransaction>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007fa4:	e010      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	e000      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3730      	adds	r7, #48	@ 0x30
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_SPI_Transmit_DMA+0x20>
 8008000:	2302      	movs	r3, #2
 8008002:	e09b      	b.n	800813c <HAL_SPI_Transmit_DMA+0x158>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b01      	cmp	r3, #1
 8008016:	d002      	beq.n	800801e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008018:	2302      	movs	r3, #2
 800801a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800801c:	e089      	b.n	8008132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_SPI_Transmit_DMA+0x46>
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800802e:	e080      	b.n	8008132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2203      	movs	r2, #3
 8008034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008076:	d10f      	bne.n	8008098 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800809c:	4a29      	ldr	r2, [pc, #164]	@ (8008144 <HAL_SPI_Transmit_DMA+0x160>)
 800809e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a4:	4a28      	ldr	r2, [pc, #160]	@ (8008148 <HAL_SPI_Transmit_DMA+0x164>)
 80080a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ac:	4a27      	ldr	r2, [pc, #156]	@ (800814c <HAL_SPI_Transmit_DMA+0x168>)
 80080ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b4:	2200      	movs	r2, #0
 80080b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	4619      	mov	r1, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	330c      	adds	r3, #12
 80080c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80080d0:	f7fb feb0 	bl	8003e34 <HAL_DMA_Start_IT>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	f043 0210 	orr.w	r2, r3, #16
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80080f2:	e01e      	b.n	8008132 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fe:	2b40      	cmp	r3, #64	@ 0x40
 8008100:	d007      	beq.n	8008112 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008110:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0220 	orr.w	r2, r2, #32
 8008120:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0202 	orr.w	r2, r2, #2
 8008130:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	08008799 	.word	0x08008799
 8008148:	080085b9 	.word	0x080085b9
 800814c:	080087ed 	.word	0x080087ed

08008150 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_SPI_TransmitReceive_DMA+0x20>
 800816c:	2302      	movs	r3, #2
 800816e:	e0e3      	b.n	8008338 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800817e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008186:	7dbb      	ldrb	r3, [r7, #22]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d00d      	beq.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008192:	d106      	bne.n	80081a2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800819c:	7dbb      	ldrb	r3, [r7, #22]
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d002      	beq.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80081a2:	2302      	movs	r3, #2
 80081a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081a6:	e0c2      	b.n	800832e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 80081b4:	887b      	ldrh	r3, [r7, #2]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081be:	e0b6      	b.n	800832e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d003      	beq.n	80081d4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2205      	movs	r2, #5
 80081d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	887a      	ldrh	r2, [r7, #2]
 80081e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	887a      	ldrh	r2, [r7, #2]
 80081ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	887a      	ldrh	r2, [r7, #2]
 80081f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	887a      	ldrh	r2, [r7, #2]
 80081fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b04      	cmp	r3, #4
 8008214:	d108      	bne.n	8008228 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800821a:	4a49      	ldr	r2, [pc, #292]	@ (8008340 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800821c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008222:	4a48      	ldr	r2, [pc, #288]	@ (8008344 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008224:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008226:	e007      	b.n	8008238 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800822c:	4a46      	ldr	r2, [pc, #280]	@ (8008348 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800822e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008234:	4a45      	ldr	r2, [pc, #276]	@ (800834c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8008236:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823c:	4a44      	ldr	r2, [pc, #272]	@ (8008350 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800823e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008244:	2200      	movs	r2, #0
 8008246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	330c      	adds	r3, #12
 8008252:	4619      	mov	r1, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800825e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008260:	f7fb fde8 	bl	8003e34 <HAL_DMA_Start_IT>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00c      	beq.n	8008284 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826e:	f043 0210 	orr.w	r2, r3, #16
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008282:	e054      	b.n	800832e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008298:	2200      	movs	r2, #0
 800829a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a0:	2200      	movs	r2, #0
 80082a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a8:	2200      	movs	r2, #0
 80082aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b0:	2200      	movs	r2, #0
 80082b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082bc:	4619      	mov	r1, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	330c      	adds	r3, #12
 80082c4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082cc:	f7fb fdb2 	bl	8003e34 <HAL_DMA_Start_IT>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	f043 0210 	orr.w	r2, r3, #16
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80082ee:	e01e      	b.n	800832e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fa:	2b40      	cmp	r3, #64	@ 0x40
 80082fc:	d007      	beq.n	800830e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800830c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0220 	orr.w	r2, r2, #32
 800831c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0202 	orr.w	r2, r2, #2
 800832c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008336:	7dfb      	ldrb	r3, [r7, #23]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	080087b5 	.word	0x080087b5
 8008344:	08008661 	.word	0x08008661
 8008348:	080087d1 	.word	0x080087d1
 800834c:	08008709 	.word	0x08008709
 8008350:	080087ed 	.word	0x080087ed

08008354 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	099b      	lsrs	r3, r3, #6
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10f      	bne.n	8008398 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	099b      	lsrs	r3, r3, #6
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
    return;
 8008396:	e0d7      	b.n	8008548 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <HAL_SPI_IRQHandler+0x66>
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	09db      	lsrs	r3, r3, #7
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
    return;
 80083b8:	e0c6      	b.n	8008548 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10c      	bne.n	80083e0 <HAL_SPI_IRQHandler+0x8c>
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	099b      	lsrs	r3, r3, #6
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80b4 	beq.w	8008548 <HAL_SPI_IRQHandler+0x1f4>
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80ad 	beq.w	8008548 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	099b      	lsrs	r3, r3, #6
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d023      	beq.n	8008442 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b03      	cmp	r3, #3
 8008404:	d011      	beq.n	800842a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840a:	f043 0204 	orr.w	r2, r3, #4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	e00b      	b.n	8008442 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800842a:	2300      	movs	r3, #0
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	693b      	ldr	r3, [r7, #16]
        return;
 8008440:	e082      	b.n	8008548 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d014      	beq.n	8008478 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	f043 0201 	orr.w	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008488:	f043 0208 	orr.w	r2, r3, #8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008490:	2300      	movs	r3, #0
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d04f      	beq.n	8008546 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <HAL_SPI_IRQHandler+0x17e>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d034      	beq.n	800853c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0203 	bic.w	r2, r2, #3
 80084e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d011      	beq.n	800850e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <HAL_SPI_IRQHandler+0x1fc>)
 80084f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fb fd64 	bl	8003fc4 <HAL_DMA_Abort_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d005      	beq.n	800850e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008512:	2b00      	cmp	r3, #0
 8008514:	d016      	beq.n	8008544 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851a:	4a0d      	ldr	r2, [pc, #52]	@ (8008550 <HAL_SPI_IRQHandler+0x1fc>)
 800851c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008522:	4618      	mov	r0, r3
 8008524:	f7fb fd4e 	bl	8003fc4 <HAL_DMA_Abort_IT>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800853a:	e003      	b.n	8008544 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f831 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008542:	e000      	b.n	8008546 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008544:	bf00      	nop
    return;
 8008546:	bf00      	nop
  }
}
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	0800882d 	.word	0x0800882d

08008554 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085c6:	f7fa f8c1 	bl	800274c <HAL_GetTick>
 80085ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085da:	d03b      	beq.n	8008654 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0220 	bic.w	r2, r2, #32
 80085ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0202 	bic.w	r2, r2, #2
 80085fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	2164      	movs	r1, #100	@ 0x64
 8008600:	6978      	ldr	r0, [r7, #20]
 8008602:	f000 fa15 	bl	8008a30 <SPI_EndRxTxTransaction>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008610:	f043 0220 	orr.w	r2, r3, #32
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800864c:	6978      	ldr	r0, [r7, #20]
 800864e:	f7ff ffa9 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008652:	e002      	b.n	800865a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f7f9 fb25 	bl	8001ca4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800866e:	f7fa f86d 	bl	800274c <HAL_GetTick>
 8008672:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008682:	d03b      	beq.n	80086fc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0220 	bic.w	r2, r2, #32
 8008692:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10d      	bne.n	80086b8 <SPI_DMAReceiveCplt+0x58>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a4:	d108      	bne.n	80086b8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 0203 	bic.w	r2, r2, #3
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	e007      	b.n	80086c8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	2164      	movs	r1, #100	@ 0x64
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f949 	bl	8008964 <SPI_EndRxTransaction>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff ff55 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086fa:	e002      	b.n	8008702 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff ff29 	bl	8008554 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008716:	f7fa f819 	bl	800274c <HAL_GetTick>
 800871a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800872a:	d02f      	beq.n	800878c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0220 	bic.w	r2, r2, #32
 800873a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	2164      	movs	r1, #100	@ 0x64
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f975 	bl	8008a30 <SPI_EndRxTxTransaction>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008750:	f043 0220 	orr.w	r2, r3, #32
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0203 	bic.w	r2, r2, #3
 8008766:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff ff0d 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800878a:	e002      	b.n	8008792 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7f9 fa9f 	bl	8001cd0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fede 	bl	8008568 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff feda 	bl	800857c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff fed6 	bl	8008590 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0203 	bic.w	r2, r2, #3
 8008808:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	f043 0210 	orr.w	r2, r3, #16
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff fec0 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff feac 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008864:	f7f9 ff72 	bl	800274c <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4413      	add	r3, r2
 8008872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008874:	f7f9 ff6a 	bl	800274c <HAL_GetTick>
 8008878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800887a:	4b39      	ldr	r3, [pc, #228]	@ (8008960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	015b      	lsls	r3, r3, #5
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800888a:	e054      	b.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d050      	beq.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008894:	f7f9 ff5a 	bl	800274c <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d902      	bls.n	80088aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d13d      	bne.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088c2:	d111      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088cc:	d004      	beq.n	80088d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d6:	d107      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f0:	d10f      	bne.n	8008912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e017      	b.n	8008956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b01      	subs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4013      	ands	r3, r2
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	bf0c      	ite	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	2300      	movne	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d19b      	bne.n	800888c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000000 	.word	0x20000000

08008964 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008978:	d111      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008982:	d004      	beq.n	800898e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898c:	d107      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800899c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089a6:	d12a      	bne.n	80089fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b0:	d012      	beq.n	80089d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff ff49 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02d      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089cc:	f043 0220 	orr.w	r2, r3, #32
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e026      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	2101      	movs	r1, #1
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff ff36 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01a      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089f2:	f043 0220 	orr.w	r2, r3, #32
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e013      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2101      	movs	r1, #1
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff ff23 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e000      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008aac <SPI_EndRxTxTransaction+0x7c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab0 <SPI_EndRxTxTransaction+0x80>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	0d5b      	lsrs	r3, r3, #21
 8008a48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a5a:	d112      	bne.n	8008a82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2180      	movs	r1, #128	@ 0x80
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fef4 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d016      	beq.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e00f      	b.n	8008aa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b80      	cmp	r3, #128	@ 0x80
 8008a9a:	d0f2      	beq.n	8008a82 <SPI_EndRxTxTransaction+0x52>
 8008a9c:	e000      	b.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008a9e:	bf00      	nop
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000000 	.word	0x20000000
 8008ab0:	165e9f81 	.word	0x165e9f81

08008ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e03f      	b.n	8008b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7f8 ffa4 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	@ 0x24
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fd7b 	bl	80095f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b08a      	sub	sp, #40	@ 0x28
 8008b52:	af02      	add	r7, sp, #8
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	603b      	str	r3, [r7, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d17c      	bne.n	8008c68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <HAL_UART_Transmit+0x2c>
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e075      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_UART_Transmit+0x3e>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e06e      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2221      	movs	r2, #33	@ 0x21
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ba2:	f7f9 fdd3 	bl	800274c <HAL_GetTick>
 8008ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bbc:	d108      	bne.n	8008bd0 <HAL_UART_Transmit+0x82>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	e003      	b.n	8008bd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008be0:	e02a      	b.n	8008c38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	2180      	movs	r1, #128	@ 0x80
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 faf9 	bl	80091e4 <UART_WaitOnFlagUntilTimeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e036      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	3302      	adds	r3, #2
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	e007      	b.n	8008c2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1cf      	bne.n	8008be2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2140      	movs	r1, #64	@ 0x40
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fac9 	bl	80091e4 <UART_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e006      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b0ba      	sub	sp, #232	@ 0xe8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
 8008cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fbd3 	bl	800947e <UART_Receive_IT>
      return;
 8008cd8:	e256      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80de 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
 8008ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80d1 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
 8008d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	f043 0201 	orr.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
 8008d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3e:	f043 0202 	orr.w	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
 8008d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	f043 0204 	orr.w	r2, r3, #4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d011      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
 8008d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	f043 0208 	orr.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 81ed 	beq.w	800917e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb5e 	bl	800947e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dcc:	2b40      	cmp	r3, #64	@ 0x40
 8008dce:	bf0c      	ite	eq
 8008dd0:	2301      	moveq	r3, #1
 8008dd2:	2300      	movne	r3, #0
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <HAL_UART_IRQHandler+0x17a>
 8008de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d04f      	beq.n	8008e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa66 	bl	80092c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfe:	2b40      	cmp	r3, #64	@ 0x40
 8008e00:	d141      	bne.n	8008e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3314      	adds	r3, #20
 8008e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d9      	bne.n	8008e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d013      	beq.n	8008e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5a:	4a7d      	ldr	r2, [pc, #500]	@ (8009050 <HAL_UART_IRQHandler+0x3dc>)
 8008e5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fb f8ae 	bl	8003fc4 <HAL_DMA_Abort_IT>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00e      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f99a 	bl	80091b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e00a      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f996 	bl	80091b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	e006      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f992 	bl	80091b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008e9a:	e170      	b.n	800917e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	bf00      	nop
    return;
 8008e9e:	e16e      	b.n	800917e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	f040 814a 	bne.w	800913e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8143 	beq.w	800913e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 813c 	beq.w	800913e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b40      	cmp	r3, #64	@ 0x40
 8008ee8:	f040 80b4 	bne.w	8009054 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8140 	beq.w	8009182 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f080 8139 	bcs.w	8009182 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	f000 8088 	beq.w	8009036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1d9      	bne.n	8008f26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3314      	adds	r3, #20
 8008f78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e1      	bne.n	8008f72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e3      	bne.n	8008fae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009006:	f023 0310 	bic.w	r3, r3, #16
 800900a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	330c      	adds	r3, #12
 8009014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009018:	65ba      	str	r2, [r7, #88]	@ 0x58
 800901a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800901e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e3      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009030:	4618      	mov	r0, r3
 8009032:	f7fa ff57 	bl	8003ee4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800903e:	b29b      	uxth	r3, r3
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b29b      	uxth	r3, r3
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8c0 	bl	80091cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800904c:	e099      	b.n	8009182 <HAL_UART_IRQHandler+0x50e>
 800904e:	bf00      	nop
 8009050:	08009387 	.word	0x08009387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800905c:	b29b      	uxth	r3, r3
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 808b 	beq.w	8009186 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8086 	beq.w	8009186 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	330c      	adds	r3, #12
 8009080:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800908a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009090:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800909e:	647a      	str	r2, [r7, #68]	@ 0x44
 80090a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e3      	bne.n	800907a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	623b      	str	r3, [r7, #32]
   return(result);
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3314      	adds	r3, #20
 80090d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800911c:	61fa      	str	r2, [r7, #28]
 800911e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	617b      	str	r3, [r7, #20]
   return(result);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e3      	bne.n	80090f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f848 	bl	80091cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800913c:	e023      	b.n	8009186 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d009      	beq.n	800915e <HAL_UART_IRQHandler+0x4ea>
 800914a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800914e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f929 	bl	80093ae <UART_Transmit_IT>
    return;
 800915c:	e014      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <HAL_UART_IRQHandler+0x514>
 800916a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f969 	bl	800944e <UART_EndTransmit_IT>
    return;
 800917c:	e004      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
    return;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
      return;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
      return;
 8009186:	bf00      	nop
  }
}
 8009188:	37e8      	adds	r7, #232	@ 0xe8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop

08009190 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b090      	sub	sp, #64	@ 0x40
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f4:	e050      	b.n	8009298 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d04c      	beq.n	8009298 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009200:	2b00      	cmp	r3, #0
 8009202:	d007      	beq.n	8009214 <UART_WaitOnFlagUntilTimeout+0x30>
 8009204:	f7f9 faa2 	bl	800274c <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009210:	429a      	cmp	r2, r3
 8009212:	d241      	bcs.n	8009298 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	330c      	adds	r3, #12
 8009232:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009234:	637a      	str	r2, [r7, #52]	@ 0x34
 8009236:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800923a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e5      	bne.n	8009214 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	613b      	str	r3, [r7, #16]
   return(result);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f023 0301 	bic.w	r3, r3, #1
 800925e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3314      	adds	r3, #20
 8009266:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009268:	623a      	str	r2, [r7, #32]
 800926a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69f9      	ldr	r1, [r7, #28]
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	61bb      	str	r3, [r7, #24]
   return(result);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e5      	bne.n	8009248 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e00f      	b.n	80092b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4013      	ands	r3, r2
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bf0c      	ite	eq
 80092a8:	2301      	moveq	r3, #1
 80092aa:	2300      	movne	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d09f      	beq.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3740      	adds	r7, #64	@ 0x40
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b095      	sub	sp, #84	@ 0x54
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	330c      	adds	r3, #12
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	330c      	adds	r3, #12
 80092e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80092ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e5      	bne.n	80092c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3314      	adds	r3, #20
 8009302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	61fb      	str	r3, [r7, #28]
   return(result);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3314      	adds	r3, #20
 800931a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800931c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800931e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009334:	2b01      	cmp	r3, #1
 8009336:	d119      	bne.n	800936c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	330c      	adds	r3, #12
 800933e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	60bb      	str	r3, [r7, #8]
   return(result);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f023 0310 	bic.w	r3, r3, #16
 800934e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009358:	61ba      	str	r2, [r7, #24]
 800935a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6979      	ldr	r1, [r7, #20]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	613b      	str	r3, [r7, #16]
   return(result);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e5      	bne.n	8009338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800937a:	bf00      	nop
 800937c:	3754      	adds	r7, #84	@ 0x54
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff ff09 	bl	80091b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b21      	cmp	r3, #33	@ 0x21
 80093c0:	d13e      	bne.n	8009440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ca:	d114      	bne.n	80093f6 <UART_Transmit_IT+0x48>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d110      	bne.n	80093f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	621a      	str	r2, [r3, #32]
 80093f4:	e008      	b.n	8009408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	1c59      	adds	r1, r3, #1
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6211      	str	r1, [r2, #32]
 8009400:	781a      	ldrb	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800940c:	b29b      	uxth	r3, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	b29b      	uxth	r3, r3
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4619      	mov	r1, r3
 8009416:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10f      	bne.n	800943c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800942a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800943a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	e000      	b.n	8009442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009440:	2302      	movs	r3, #2
  }
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff fe8e 	bl	8009190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b08c      	sub	sp, #48	@ 0x30
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b22      	cmp	r3, #34	@ 0x22
 8009490:	f040 80ab 	bne.w	80095ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800949c:	d117      	bne.n	80094ce <UART_Receive_IT+0x50>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d113      	bne.n	80094ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094bc:	b29a      	uxth	r2, r3
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	1c9a      	adds	r2, r3, #2
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80094cc:	e026      	b.n	800951c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e0:	d007      	beq.n	80094f2 <UART_Receive_IT+0x74>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <UART_Receive_IT+0x82>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	e008      	b.n	8009512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950c:	b2da      	uxtb	r2, r3
 800950e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009520:	b29b      	uxth	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	b29b      	uxth	r3, r3
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	4619      	mov	r1, r3
 800952a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800952c:	2b00      	cmp	r3, #0
 800952e:	d15a      	bne.n	80095e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0220 	bic.w	r2, r2, #32
 800953e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800954e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	695a      	ldr	r2, [r3, #20]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f022 0201 	bic.w	r2, r2, #1
 800955e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956c:	2b01      	cmp	r3, #1
 800956e:	d135      	bne.n	80095dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	330c      	adds	r3, #12
 800957c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	613b      	str	r3, [r7, #16]
   return(result);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f023 0310 	bic.w	r3, r3, #16
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	330c      	adds	r3, #12
 8009594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009596:	623a      	str	r2, [r7, #32]
 8009598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	69f9      	ldr	r1, [r7, #28]
 800959c:	6a3a      	ldr	r2, [r7, #32]
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e5      	bne.n	8009576 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0310 	and.w	r3, r3, #16
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d10a      	bne.n	80095ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff fdf9 	bl	80091cc <HAL_UARTEx_RxEventCallback>
 80095da:	e002      	b.n	80095e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fde1 	bl	80091a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e002      	b.n	80095ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e000      	b.n	80095ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095ea:	2302      	movs	r3, #2
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3730      	adds	r7, #48	@ 0x30
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095f8:	b0c0      	sub	sp, #256	@ 0x100
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800960c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009610:	68d9      	ldr	r1, [r3, #12]
 8009612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	ea40 0301 	orr.w	r3, r0, r1
 800961c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	431a      	orrs	r2, r3
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	431a      	orrs	r2, r3
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	4313      	orrs	r3, r2
 800963c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800964c:	f021 010c 	bic.w	r1, r1, #12
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800965a:	430b      	orrs	r3, r1
 800965c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800965e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800966a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800966e:	6999      	ldr	r1, [r3, #24]
 8009670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	ea40 0301 	orr.w	r3, r0, r1
 800967a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800967c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b95      	ldr	r3, [pc, #596]	@ (80098d8 <UART_SetConfig+0x2e4>)
 8009684:	429a      	cmp	r2, r3
 8009686:	d011      	beq.n	80096ac <UART_SetConfig+0xb8>
 8009688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b93      	ldr	r3, [pc, #588]	@ (80098dc <UART_SetConfig+0x2e8>)
 8009690:	429a      	cmp	r2, r3
 8009692:	d00b      	beq.n	80096ac <UART_SetConfig+0xb8>
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b91      	ldr	r3, [pc, #580]	@ (80098e0 <UART_SetConfig+0x2ec>)
 800969c:	429a      	cmp	r2, r3
 800969e:	d005      	beq.n	80096ac <UART_SetConfig+0xb8>
 80096a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b8f      	ldr	r3, [pc, #572]	@ (80098e4 <UART_SetConfig+0x2f0>)
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d104      	bne.n	80096b6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096ac:	f7fd fd8a 	bl	80071c4 <HAL_RCC_GetPCLK2Freq>
 80096b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80096b4:	e003      	b.n	80096be <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096b6:	f7fd fd71 	bl	800719c <HAL_RCC_GetPCLK1Freq>
 80096ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c8:	f040 8110 	bne.w	80098ec <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80096da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	1891      	adds	r1, r2, r2
 80096e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80096e6:	415b      	adcs	r3, r3
 80096e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80096ee:	4621      	mov	r1, r4
 80096f0:	eb12 0801 	adds.w	r8, r2, r1
 80096f4:	4629      	mov	r1, r5
 80096f6:	eb43 0901 	adc.w	r9, r3, r1
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800970a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800970e:	4690      	mov	r8, r2
 8009710:	4699      	mov	r9, r3
 8009712:	4623      	mov	r3, r4
 8009714:	eb18 0303 	adds.w	r3, r8, r3
 8009718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800971c:	462b      	mov	r3, r5
 800971e:	eb49 0303 	adc.w	r3, r9, r3
 8009722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009732:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800973a:	460b      	mov	r3, r1
 800973c:	18db      	adds	r3, r3, r3
 800973e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009740:	4613      	mov	r3, r2
 8009742:	eb42 0303 	adc.w	r3, r2, r3
 8009746:	657b      	str	r3, [r7, #84]	@ 0x54
 8009748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800974c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009750:	f7f6 ff72 	bl	8000638 <__aeabi_uldivmod>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4b63      	ldr	r3, [pc, #396]	@ (80098e8 <UART_SetConfig+0x2f4>)
 800975a:	fba3 2302 	umull	r2, r3, r3, r2
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	011c      	lsls	r4, r3, #4
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800976c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	1891      	adds	r1, r2, r2
 800977a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800977c:	415b      	adcs	r3, r3
 800977e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009784:	4641      	mov	r1, r8
 8009786:	eb12 0a01 	adds.w	sl, r2, r1
 800978a:	4649      	mov	r1, r9
 800978c:	eb43 0b01 	adc.w	fp, r3, r1
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800979c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097a4:	4692      	mov	sl, r2
 80097a6:	469b      	mov	fp, r3
 80097a8:	4643      	mov	r3, r8
 80097aa:	eb1a 0303 	adds.w	r3, sl, r3
 80097ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097b2:	464b      	mov	r3, r9
 80097b4:	eb4b 0303 	adc.w	r3, fp, r3
 80097b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80097cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097d0:	460b      	mov	r3, r1
 80097d2:	18db      	adds	r3, r3, r3
 80097d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80097d6:	4613      	mov	r3, r2
 80097d8:	eb42 0303 	adc.w	r3, r2, r3
 80097dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80097de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80097e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80097e6:	f7f6 ff27 	bl	8000638 <__aeabi_uldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	4b3d      	ldr	r3, [pc, #244]	@ (80098e8 <UART_SetConfig+0x2f4>)
 80097f2:	fba3 2301 	umull	r2, r3, r3, r1
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	2264      	movs	r2, #100	@ 0x64
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	1acb      	subs	r3, r1, r3
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009806:	4b38      	ldr	r3, [pc, #224]	@ (80098e8 <UART_SetConfig+0x2f4>)
 8009808:	fba3 2302 	umull	r2, r3, r3, r2
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009814:	441c      	add	r4, r3
 8009816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800981a:	2200      	movs	r2, #0
 800981c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009820:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	1891      	adds	r1, r2, r2
 800982e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009830:	415b      	adcs	r3, r3
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009838:	4641      	mov	r1, r8
 800983a:	1851      	adds	r1, r2, r1
 800983c:	6339      	str	r1, [r7, #48]	@ 0x30
 800983e:	4649      	mov	r1, r9
 8009840:	414b      	adcs	r3, r1
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009850:	4659      	mov	r1, fp
 8009852:	00cb      	lsls	r3, r1, #3
 8009854:	4651      	mov	r1, sl
 8009856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800985a:	4651      	mov	r1, sl
 800985c:	00ca      	lsls	r2, r1, #3
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	4603      	mov	r3, r0
 8009864:	4642      	mov	r2, r8
 8009866:	189b      	adds	r3, r3, r2
 8009868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800986c:	464b      	mov	r3, r9
 800986e:	460a      	mov	r2, r1
 8009870:	eb42 0303 	adc.w	r3, r2, r3
 8009874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009884:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800988c:	460b      	mov	r3, r1
 800988e:	18db      	adds	r3, r3, r3
 8009890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009892:	4613      	mov	r3, r2
 8009894:	eb42 0303 	adc.w	r3, r2, r3
 8009898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800989a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800989e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80098a2:	f7f6 fec9 	bl	8000638 <__aeabi_uldivmod>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4b0f      	ldr	r3, [pc, #60]	@ (80098e8 <UART_SetConfig+0x2f4>)
 80098ac:	fba3 1302 	umull	r1, r3, r3, r2
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	2164      	movs	r1, #100	@ 0x64
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	3332      	adds	r3, #50	@ 0x32
 80098be:	4a0a      	ldr	r2, [pc, #40]	@ (80098e8 <UART_SetConfig+0x2f4>)
 80098c0:	fba2 2303 	umull	r2, r3, r2, r3
 80098c4:	095b      	lsrs	r3, r3, #5
 80098c6:	f003 0207 	and.w	r2, r3, #7
 80098ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4422      	add	r2, r4
 80098d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098d4:	e10a      	b.n	8009aec <UART_SetConfig+0x4f8>
 80098d6:	bf00      	nop
 80098d8:	40011000 	.word	0x40011000
 80098dc:	40011400 	.word	0x40011400
 80098e0:	40011800 	.word	0x40011800
 80098e4:	40011c00 	.word	0x40011c00
 80098e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098fe:	4642      	mov	r2, r8
 8009900:	464b      	mov	r3, r9
 8009902:	1891      	adds	r1, r2, r2
 8009904:	6239      	str	r1, [r7, #32]
 8009906:	415b      	adcs	r3, r3
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
 800990a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800990e:	4641      	mov	r1, r8
 8009910:	1854      	adds	r4, r2, r1
 8009912:	4649      	mov	r1, r9
 8009914:	eb43 0501 	adc.w	r5, r3, r1
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	f04f 0300 	mov.w	r3, #0
 8009920:	00eb      	lsls	r3, r5, #3
 8009922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009926:	00e2      	lsls	r2, r4, #3
 8009928:	4614      	mov	r4, r2
 800992a:	461d      	mov	r5, r3
 800992c:	4643      	mov	r3, r8
 800992e:	18e3      	adds	r3, r4, r3
 8009930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009934:	464b      	mov	r3, r9
 8009936:	eb45 0303 	adc.w	r3, r5, r3
 800993a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800994a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800995a:	4629      	mov	r1, r5
 800995c:	008b      	lsls	r3, r1, #2
 800995e:	4621      	mov	r1, r4
 8009960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009964:	4621      	mov	r1, r4
 8009966:	008a      	lsls	r2, r1, #2
 8009968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800996c:	f7f6 fe64 	bl	8000638 <__aeabi_uldivmod>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4b60      	ldr	r3, [pc, #384]	@ (8009af8 <UART_SetConfig+0x504>)
 8009976:	fba3 2302 	umull	r2, r3, r3, r2
 800997a:	095b      	lsrs	r3, r3, #5
 800997c:	011c      	lsls	r4, r3, #4
 800997e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009982:	2200      	movs	r2, #0
 8009984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009988:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800998c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009990:	4642      	mov	r2, r8
 8009992:	464b      	mov	r3, r9
 8009994:	1891      	adds	r1, r2, r2
 8009996:	61b9      	str	r1, [r7, #24]
 8009998:	415b      	adcs	r3, r3
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099a0:	4641      	mov	r1, r8
 80099a2:	1851      	adds	r1, r2, r1
 80099a4:	6139      	str	r1, [r7, #16]
 80099a6:	4649      	mov	r1, r9
 80099a8:	414b      	adcs	r3, r1
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099b8:	4659      	mov	r1, fp
 80099ba:	00cb      	lsls	r3, r1, #3
 80099bc:	4651      	mov	r1, sl
 80099be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099c2:	4651      	mov	r1, sl
 80099c4:	00ca      	lsls	r2, r1, #3
 80099c6:	4610      	mov	r0, r2
 80099c8:	4619      	mov	r1, r3
 80099ca:	4603      	mov	r3, r0
 80099cc:	4642      	mov	r2, r8
 80099ce:	189b      	adds	r3, r3, r2
 80099d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099d4:	464b      	mov	r3, r9
 80099d6:	460a      	mov	r2, r1
 80099d8:	eb42 0303 	adc.w	r3, r2, r3
 80099dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80099f8:	4649      	mov	r1, r9
 80099fa:	008b      	lsls	r3, r1, #2
 80099fc:	4641      	mov	r1, r8
 80099fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a02:	4641      	mov	r1, r8
 8009a04:	008a      	lsls	r2, r1, #2
 8009a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a0a:	f7f6 fe15 	bl	8000638 <__aeabi_uldivmod>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	4b38      	ldr	r3, [pc, #224]	@ (8009af8 <UART_SetConfig+0x504>)
 8009a16:	fba3 2301 	umull	r2, r3, r3, r1
 8009a1a:	095b      	lsrs	r3, r3, #5
 8009a1c:	2264      	movs	r2, #100	@ 0x64
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
 8009a22:	1acb      	subs	r3, r1, r3
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	3332      	adds	r3, #50	@ 0x32
 8009a28:	4a33      	ldr	r2, [pc, #204]	@ (8009af8 <UART_SetConfig+0x504>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	095b      	lsrs	r3, r3, #5
 8009a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a34:	441c      	add	r4, r3
 8009a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	1891      	adds	r1, r2, r2
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	415b      	adcs	r3, r3
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a54:	4641      	mov	r1, r8
 8009a56:	1851      	adds	r1, r2, r1
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	414b      	adcs	r3, r1
 8009a5e:	607b      	str	r3, [r7, #4]
 8009a60:	f04f 0200 	mov.w	r2, #0
 8009a64:	f04f 0300 	mov.w	r3, #0
 8009a68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	00cb      	lsls	r3, r1, #3
 8009a70:	4651      	mov	r1, sl
 8009a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a76:	4651      	mov	r1, sl
 8009a78:	00ca      	lsls	r2, r1, #3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4642      	mov	r2, r8
 8009a82:	189b      	adds	r3, r3, r2
 8009a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a86:	464b      	mov	r3, r9
 8009a88:	460a      	mov	r2, r1
 8009a8a:	eb42 0303 	adc.w	r3, r2, r3
 8009a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	008b      	lsls	r3, r1, #2
 8009aac:	4641      	mov	r1, r8
 8009aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ab2:	4641      	mov	r1, r8
 8009ab4:	008a      	lsls	r2, r1, #2
 8009ab6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009aba:	f7f6 fdbd 	bl	8000638 <__aeabi_uldivmod>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8009af8 <UART_SetConfig+0x504>)
 8009ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac8:	095b      	lsrs	r3, r3, #5
 8009aca:	2164      	movs	r1, #100	@ 0x64
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	3332      	adds	r3, #50	@ 0x32
 8009ad6:	4a08      	ldr	r2, [pc, #32]	@ (8009af8 <UART_SetConfig+0x504>)
 8009ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	f003 020f 	and.w	r2, r3, #15
 8009ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4422      	add	r2, r4
 8009aea:	609a      	str	r2, [r3, #8]
}
 8009aec:	bf00      	nop
 8009aee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009af2:	46bd      	mov	sp, r7
 8009af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009af8:	51eb851f 	.word	0x51eb851f

08009afc <__NVIC_SetPriority>:
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	db0a      	blt.n	8009b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	490c      	ldr	r1, [pc, #48]	@ (8009b48 <__NVIC_SetPriority+0x4c>)
 8009b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b1a:	0112      	lsls	r2, r2, #4
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	440b      	add	r3, r1
 8009b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009b24:	e00a      	b.n	8009b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4908      	ldr	r1, [pc, #32]	@ (8009b4c <__NVIC_SetPriority+0x50>)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	f003 030f 	and.w	r3, r3, #15
 8009b32:	3b04      	subs	r3, #4
 8009b34:	0112      	lsls	r2, r2, #4
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	440b      	add	r3, r1
 8009b3a:	761a      	strb	r2, [r3, #24]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	e000e100 	.word	0xe000e100
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b54:	2100      	movs	r1, #0
 8009b56:	f06f 0004 	mvn.w	r0, #4
 8009b5a:	f7ff ffcf 	bl	8009afc <__NVIC_SetPriority>
#endif
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6a:	f3ef 8305 	mrs	r3, IPSR
 8009b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b76:	f06f 0305 	mvn.w	r3, #5
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	e00c      	b.n	8009b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba8 <osKernelInitialize+0x44>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b86:	4b08      	ldr	r3, [pc, #32]	@ (8009ba8 <osKernelInitialize+0x44>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	607b      	str	r3, [r7, #4]
 8009b90:	e002      	b.n	8009b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295
 8009b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b98:	687b      	ldr	r3, [r7, #4]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	200006d4 	.word	0x200006d4

08009bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bb2:	f3ef 8305 	mrs	r3, IPSR
 8009bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8009bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009bbe:	f06f 0305 	mvn.w	r3, #5
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	e010      	b.n	8009be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf4 <osKernelStart+0x48>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d109      	bne.n	8009be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bce:	f7ff ffbf 	bl	8009b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bd2:	4b08      	ldr	r3, [pc, #32]	@ (8009bf4 <osKernelStart+0x48>)
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009bd8:	f001 ffc2 	bl	800bb60 <vTaskStartScheduler>
      stat = osOK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	607b      	str	r3, [r7, #4]
 8009be0:	e002      	b.n	8009be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295
 8009be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009be8:	687b      	ldr	r3, [r7, #4]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200006d4 	.word	0x200006d4

08009bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	@ 0x38
 8009bfc:	af04      	add	r7, sp, #16
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c04:	2300      	movs	r3, #0
 8009c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c08:	f3ef 8305 	mrs	r3, IPSR
 8009c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d17e      	bne.n	8009d12 <osThreadNew+0x11a>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d07b      	beq.n	8009d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c1a:	2380      	movs	r3, #128	@ 0x80
 8009c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c1e:	2318      	movs	r3, #24
 8009c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009c26:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d045      	beq.n	8009cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <osThreadNew+0x48>
        name = attr->name;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d008      	beq.n	8009c66 <osThreadNew+0x6e>
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	2b38      	cmp	r3, #56	@ 0x38
 8009c58:	d805      	bhi.n	8009c66 <osThreadNew+0x6e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <osThreadNew+0x72>
        return (NULL);
 8009c66:	2300      	movs	r3, #0
 8009c68:	e054      	b.n	8009d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	089b      	lsrs	r3, r3, #2
 8009c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00e      	beq.n	8009ca0 <osThreadNew+0xa8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	2b5b      	cmp	r3, #91	@ 0x5b
 8009c88:	d90a      	bls.n	8009ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <osThreadNew+0xa8>
        mem = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e010      	b.n	8009cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10c      	bne.n	8009cc2 <osThreadNew+0xca>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d108      	bne.n	8009cc2 <osThreadNew+0xca>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d104      	bne.n	8009cc2 <osThreadNew+0xca>
          mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	e001      	b.n	8009cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d110      	bne.n	8009cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cd0:	9202      	str	r2, [sp, #8]
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6a3a      	ldr	r2, [r7, #32]
 8009cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f001 fd62 	bl	800b7a8 <xTaskCreateStatic>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	e013      	b.n	8009d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d110      	bne.n	8009d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	f107 0310 	add.w	r3, r7, #16
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f001 fdb0 	bl	800b868 <xTaskCreate>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d001      	beq.n	8009d12 <osThreadNew+0x11a>
            hTask = NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d12:	693b      	ldr	r3, [r7, #16]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3728      	adds	r7, #40	@ 0x28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d24:	f3ef 8305 	mrs	r3, IPSR
 8009d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <osDelay+0x1c>
    stat = osErrorISR;
 8009d30:	f06f 0305 	mvn.w	r3, #5
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	e007      	b.n	8009d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 fed6 	bl	800baf4 <vTaskDelay>
    }
  }

  return (stat);
 8009d48:	68fb      	ldr	r3, [r7, #12]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b088      	sub	sp, #32
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d64:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d174      	bne.n	8009e54 <osMutexNew+0x102>
    if (attr != NULL) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	61bb      	str	r3, [r7, #24]
 8009d76:	e001      	b.n	8009d7c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <osMutexNew+0x3a>
      rmtx = 1U;
 8009d86:	2301      	movs	r3, #1
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e001      	b.n	8009d90 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f003 0308 	and.w	r3, r3, #8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d15c      	bne.n	8009e54 <osMutexNew+0x102>
      mem = -1;
 8009d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d015      	beq.n	8009dd2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <osMutexNew+0x6a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b4f      	cmp	r3, #79	@ 0x4f
 8009db4:	d902      	bls.n	8009dbc <osMutexNew+0x6a>
          mem = 1;
 8009db6:	2301      	movs	r3, #1
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	e00c      	b.n	8009dd6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d108      	bne.n	8009dd6 <osMutexNew+0x84>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <osMutexNew+0x84>
            mem = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	e001      	b.n	8009dd6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d112      	bne.n	8009e02 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	4619      	mov	r1, r3
 8009de8:	2004      	movs	r0, #4
 8009dea:	f000 fd70 	bl	800a8ce <xQueueCreateMutexStatic>
 8009dee:	61f8      	str	r0, [r7, #28]
 8009df0:	e016      	b.n	8009e20 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	4619      	mov	r1, r3
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f000 fd68 	bl	800a8ce <xQueueCreateMutexStatic>
 8009dfe:	61f8      	str	r0, [r7, #28]
 8009e00:	e00e      	b.n	8009e20 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10b      	bne.n	8009e20 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009e0e:	2004      	movs	r0, #4
 8009e10:	f000 fd45 	bl	800a89e <xQueueCreateMutex>
 8009e14:	61f8      	str	r0, [r7, #28]
 8009e16:	e003      	b.n	8009e20 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009e18:	2001      	movs	r0, #1
 8009e1a:	f000 fd40 	bl	800a89e <xQueueCreateMutex>
 8009e1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00c      	beq.n	8009e40 <osMutexNew+0xee>
        if (attr != NULL) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <osMutexNew+0xe2>
          name = attr->name;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e001      	b.n	8009e38 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009e38:	68f9      	ldr	r1, [r7, #12]
 8009e3a:	69f8      	ldr	r0, [r7, #28]
 8009e3c:	f001 fc2c 	bl	800b698 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <osMutexNew+0x102>
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	f043 0301 	orr.w	r3, r3, #1
 8009e52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009e54:	69fb      	ldr	r3, [r7, #28]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f023 0301 	bic.w	r3, r3, #1
 8009e6e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e7c:	f3ef 8305 	mrs	r3, IPSR
 8009e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e82:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009e88:	f06f 0305 	mvn.w	r3, #5
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e02c      	b.n	8009eea <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d103      	bne.n	8009e9e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009e96:	f06f 0303 	mvn.w	r3, #3
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e025      	b.n	8009eea <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d011      	beq.n	8009ec8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6938      	ldr	r0, [r7, #16]
 8009ea8:	f000 fd61 	bl	800a96e <xQueueTakeMutexRecursive>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d01b      	beq.n	8009eea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009eb8:	f06f 0301 	mvn.w	r3, #1
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e014      	b.n	8009eea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009ec0:	f06f 0302 	mvn.w	r3, #2
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e010      	b.n	8009eea <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6938      	ldr	r0, [r7, #16]
 8009ecc:	f001 f906 	bl	800b0dc <xQueueSemaphoreTake>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d009      	beq.n	8009eea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009edc:	f06f 0301 	mvn.w	r3, #1
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	e002      	b.n	8009eea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009ee4:	f06f 0302 	mvn.w	r3, #2
 8009ee8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009eea:	697b      	ldr	r3, [r7, #20]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f10:	f3ef 8305 	mrs	r3, IPSR
 8009f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f16:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009f1c:	f06f 0305 	mvn.w	r3, #5
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e01f      	b.n	8009f64 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009f2a:	f06f 0303 	mvn.w	r3, #3
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	e018      	b.n	8009f64 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009f38:	6938      	ldr	r0, [r7, #16]
 8009f3a:	f000 fce3 	bl	800a904 <xQueueGiveMutexRecursive>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d00f      	beq.n	8009f64 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009f44:	f06f 0302 	mvn.w	r3, #2
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	e00b      	b.n	8009f64 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2100      	movs	r1, #0
 8009f52:	6938      	ldr	r0, [r7, #16]
 8009f54:	f000 fdb0 	bl	800aab8 <xQueueGenericSend>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d002      	beq.n	8009f64 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009f5e:	f06f 0302 	mvn.w	r3, #2
 8009f62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009f64:	697b      	ldr	r3, [r7, #20]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b08a      	sub	sp, #40	@ 0x28
 8009f72:	af02      	add	r7, sp, #8
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f7e:	f3ef 8305 	mrs	r3, IPSR
 8009f82:	613b      	str	r3, [r7, #16]
  return(result);
 8009f84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d175      	bne.n	800a076 <osSemaphoreNew+0x108>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d072      	beq.n	800a076 <osSemaphoreNew+0x108>
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d86e      	bhi.n	800a076 <osSemaphoreNew+0x108>
    mem = -1;
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d015      	beq.n	8009fd0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d006      	beq.n	8009fba <osSemaphoreNew+0x4c>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b4f      	cmp	r3, #79	@ 0x4f
 8009fb2:	d902      	bls.n	8009fba <osSemaphoreNew+0x4c>
        mem = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e00c      	b.n	8009fd4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <osSemaphoreNew+0x66>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <osSemaphoreNew+0x66>
          mem = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	e001      	b.n	8009fd4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d04c      	beq.n	800a076 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d128      	bne.n	800a034 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d10a      	bne.n	8009ffe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2203      	movs	r2, #3
 8009fee:	9200      	str	r2, [sp, #0]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f000 fb5d 	bl	800a6b4 <xQueueGenericCreateStatic>
 8009ffa:	61f8      	str	r0, [r7, #28]
 8009ffc:	e005      	b.n	800a00a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ffe:	2203      	movs	r2, #3
 800a000:	2100      	movs	r1, #0
 800a002:	2001      	movs	r0, #1
 800a004:	f000 fbd3 	bl	800a7ae <xQueueGenericCreate>
 800a008:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d022      	beq.n	800a056 <osSemaphoreNew+0xe8>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01f      	beq.n	800a056 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a016:	2300      	movs	r3, #0
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	69f8      	ldr	r0, [r7, #28]
 800a01e:	f000 fd4b 	bl	800aab8 <xQueueGenericSend>
 800a022:	4603      	mov	r3, r0
 800a024:	2b01      	cmp	r3, #1
 800a026:	d016      	beq.n	800a056 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a028:	69f8      	ldr	r0, [r7, #28]
 800a02a:	f001 f9e9 	bl	800b400 <vQueueDelete>
            hSemaphore = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	e010      	b.n	800a056 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d108      	bne.n	800a04c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	461a      	mov	r2, r3
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fcca 	bl	800a9dc <xQueueCreateCountingSemaphoreStatic>
 800a048:	61f8      	str	r0, [r7, #28]
 800a04a:	e004      	b.n	800a056 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fcfd 	bl	800aa4e <xQueueCreateCountingSemaphore>
 800a054:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00c      	beq.n	800a076 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <osSemaphoreNew+0xfc>
          name = attr->name;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e001      	b.n	800a06e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a06e:	6979      	ldr	r1, [r7, #20]
 800a070:	69f8      	ldr	r0, [r7, #28]
 800a072:	f001 fb11 	bl	800b698 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a098:	f06f 0303 	mvn.w	r3, #3
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	e039      	b.n	800a114 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a0:	f3ef 8305 	mrs	r3, IPSR
 800a0a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d022      	beq.n	800a0f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a0b2:	f06f 0303 	mvn.w	r3, #3
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e02c      	b.n	800a114 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f001 f918 	bl	800b2fc <xQueueReceiveFromISR>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d003      	beq.n	800a0da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a0d2:	f06f 0302 	mvn.w	r3, #2
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e01c      	b.n	800a114 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d019      	beq.n	800a114 <osSemaphoreAcquire+0x94>
 800a0e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a120 <osSemaphoreAcquire+0xa0>)
 800a0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	e010      	b.n	800a114 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6938      	ldr	r0, [r7, #16]
 800a0f6:	f000 fff1 	bl	800b0dc <xQueueSemaphoreTake>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d009      	beq.n	800a114 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a106:	f06f 0301 	mvn.w	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e002      	b.n	800a114 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a10e:	f06f 0302 	mvn.w	r3, #2
 800a112:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	e000ed04 	.word	0xe000ed04

0800a124 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a13a:	f06f 0303 	mvn.w	r3, #3
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	e02c      	b.n	800a19c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a142:	f3ef 8305 	mrs	r3, IPSR
 800a146:	60fb      	str	r3, [r7, #12]
  return(result);
 800a148:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01a      	beq.n	800a184 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4619      	mov	r1, r3
 800a158:	6938      	ldr	r0, [r7, #16]
 800a15a:	f000 fe4d 	bl	800adf8 <xQueueGiveFromISR>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b01      	cmp	r3, #1
 800a162:	d003      	beq.n	800a16c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a164:	f06f 0302 	mvn.w	r3, #2
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e017      	b.n	800a19c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d014      	beq.n	800a19c <osSemaphoreRelease+0x78>
 800a172:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a8 <osSemaphoreRelease+0x84>)
 800a174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	e00b      	b.n	800a19c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a184:	2300      	movs	r3, #0
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f000 fc94 	bl	800aab8 <xQueueGenericSend>
 800a190:	4603      	mov	r3, r0
 800a192:	2b01      	cmp	r3, #1
 800a194:	d002      	beq.n	800a19c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a196:	f06f 0302 	mvn.w	r3, #2
 800a19a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a19c:	697b      	ldr	r3, [r7, #20]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	@ 0x28
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1bc:	f3ef 8305 	mrs	r3, IPSR
 800a1c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a1c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d15f      	bne.n	800a288 <osMessageQueueNew+0xdc>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d05c      	beq.n	800a288 <osMessageQueueNew+0xdc>
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d059      	beq.n	800a288 <osMessageQueueNew+0xdc>
    mem = -1;
 800a1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d029      	beq.n	800a234 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d012      	beq.n	800a20e <osMessageQueueNew+0x62>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b4f      	cmp	r3, #79	@ 0x4f
 800a1ee:	d90e      	bls.n	800a20e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68b9      	ldr	r1, [r7, #8]
 800a200:	fb01 f303 	mul.w	r3, r1, r3
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <osMessageQueueNew+0x62>
        mem = 1;
 800a208:	2301      	movs	r3, #1
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	e014      	b.n	800a238 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d110      	bne.n	800a238 <osMessageQueueNew+0x8c>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10c      	bne.n	800a238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a222:	2b00      	cmp	r3, #0
 800a224:	d108      	bne.n	800a238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <osMessageQueueNew+0x8c>
          mem = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	e001      	b.n	800a238 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d10b      	bne.n	800a256 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2100      	movs	r1, #0
 800a248:	9100      	str	r1, [sp, #0]
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fa31 	bl	800a6b4 <xQueueGenericCreateStatic>
 800a252:	61f8      	str	r0, [r7, #28]
 800a254:	e008      	b.n	800a268 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a25c:	2200      	movs	r2, #0
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 faa4 	bl	800a7ae <xQueueGenericCreate>
 800a266:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00c      	beq.n	800a288 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	e001      	b.n	800a280 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a280:	6979      	ldr	r1, [r7, #20]
 800a282:	69f8      	ldr	r0, [r7, #28]
 800a284:	f001 fa08 	bl	800b698 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a288:	69fb      	ldr	r3, [r7, #28]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ac:	f3ef 8305 	mrs	r3, IPSR
 800a2b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a2b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d028      	beq.n	800a30a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <osMessageQueuePut+0x36>
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <osMessageQueuePut+0x36>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a2ca:	f06f 0303 	mvn.w	r3, #3
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	e038      	b.n	800a344 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a2d6:	f107 0210 	add.w	r2, r7, #16
 800a2da:	2300      	movs	r3, #0
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	69b8      	ldr	r0, [r7, #24]
 800a2e0:	f000 fcec 	bl	800acbc <xQueueGenericSendFromISR>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d003      	beq.n	800a2f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a2ea:	f06f 0302 	mvn.w	r3, #2
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	e028      	b.n	800a344 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d025      	beq.n	800a344 <osMessageQueuePut+0xb0>
 800a2f8:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <osMessageQueuePut+0xbc>)
 800a2fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	e01c      	b.n	800a344 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <osMessageQueuePut+0x82>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d103      	bne.n	800a31e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a316:	f06f 0303 	mvn.w	r3, #3
 800a31a:	61fb      	str	r3, [r7, #28]
 800a31c:	e012      	b.n	800a344 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a31e:	2300      	movs	r3, #0
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	69b8      	ldr	r0, [r7, #24]
 800a326:	f000 fbc7 	bl	800aab8 <xQueueGenericSend>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d009      	beq.n	800a344 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a336:	f06f 0301 	mvn.w	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	e002      	b.n	800a344 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a33e:	f06f 0302 	mvn.w	r3, #2
 800a342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a344:	69fb      	ldr	r3, [r7, #28]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3720      	adds	r7, #32
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a36a:	f3ef 8305 	mrs	r3, IPSR
 800a36e:	617b      	str	r3, [r7, #20]
  return(result);
 800a370:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a372:	2b00      	cmp	r3, #0
 800a374:	d028      	beq.n	800a3c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d005      	beq.n	800a388 <osMessageQueueGet+0x34>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <osMessageQueueGet+0x34>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a388:	f06f 0303 	mvn.w	r3, #3
 800a38c:	61fb      	str	r3, [r7, #28]
 800a38e:	e037      	b.n	800a400 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a394:	f107 0310 	add.w	r3, r7, #16
 800a398:	461a      	mov	r2, r3
 800a39a:	68b9      	ldr	r1, [r7, #8]
 800a39c:	69b8      	ldr	r0, [r7, #24]
 800a39e:	f000 ffad 	bl	800b2fc <xQueueReceiveFromISR>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d003      	beq.n	800a3b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a3a8:	f06f 0302 	mvn.w	r3, #2
 800a3ac:	61fb      	str	r3, [r7, #28]
 800a3ae:	e027      	b.n	800a400 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d024      	beq.n	800a400 <osMessageQueueGet+0xac>
 800a3b6:	4b15      	ldr	r3, [pc, #84]	@ (800a40c <osMessageQueueGet+0xb8>)
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	e01b      	b.n	800a400 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <osMessageQueueGet+0x80>
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a3d4:	f06f 0303 	mvn.w	r3, #3
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	e011      	b.n	800a400 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f000 fd99 	bl	800af18 <xQueueReceive>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d009      	beq.n	800a400 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a3f2:	f06f 0301 	mvn.w	r3, #1
 800a3f6:	61fb      	str	r3, [r7, #28]
 800a3f8:	e002      	b.n	800a400 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a3fa:	f06f 0302 	mvn.w	r3, #2
 800a3fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a400:	69fb      	ldr	r3, [r7, #28]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a07      	ldr	r2, [pc, #28]	@ (800a43c <vApplicationGetIdleTaskMemory+0x2c>)
 800a420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4a06      	ldr	r2, [pc, #24]	@ (800a440 <vApplicationGetIdleTaskMemory+0x30>)
 800a426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2280      	movs	r2, #128	@ 0x80
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	200006d8 	.word	0x200006d8
 800a440:	20000734 	.word	0x20000734

0800a444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a07      	ldr	r2, [pc, #28]	@ (800a470 <vApplicationGetTimerTaskMemory+0x2c>)
 800a454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a06      	ldr	r2, [pc, #24]	@ (800a474 <vApplicationGetTimerTaskMemory+0x30>)
 800a45a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20000934 	.word	0x20000934
 800a474:	20000990 	.word	0x20000990

0800a478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f103 0208 	add.w	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f04f 32ff 	mov.w	r2, #4294967295
 800a490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f103 0208 	add.w	r2, r3, #8
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f103 0208 	add.w	r2, r3, #8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
}
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d103      	bne.n	800a53a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	e00c      	b.n	800a554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3308      	adds	r3, #8
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e002      	b.n	800a548 <vListInsert+0x2e>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	429a      	cmp	r2, r3
 800a552:	d2f6      	bcs.n	800a542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	601a      	str	r2, [r3, #0]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6892      	ldr	r2, [r2, #8]
 800a5a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6852      	ldr	r2, [r2, #4]
 800a5ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d103      	bne.n	800a5c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	1e5a      	subs	r2, r3, #1
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a60c:	f002 fd74 	bl	800d0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a61c:	fb01 f303 	mul.w	r3, r1, r3
 800a620:	441a      	add	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a63c:	3b01      	subs	r3, #1
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	441a      	add	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	22ff      	movs	r2, #255	@ 0xff
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	22ff      	movs	r2, #255	@ 0xff
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d114      	bne.n	800a68c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01a      	beq.n	800a6a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3310      	adds	r3, #16
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fd04 	bl	800c07c <xTaskRemoveFromEventList>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d012      	beq.n	800a6a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a67a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b0 <xQueueGenericReset+0xd0>)
 800a67c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	e009      	b.n	800a6a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	3310      	adds	r3, #16
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fef1 	bl	800a478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3324      	adds	r3, #36	@ 0x24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff feec 	bl	800a478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6a0:	f002 fd5c 	bl	800d15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6a4:	2301      	movs	r3, #1
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08e      	sub	sp, #56	@ 0x38
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	e7fd      	b.n	800a6dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <xQueueGenericCreateStatic+0x56>
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <xQueueGenericCreateStatic+0x5a>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <xQueueGenericCreateStatic+0x5c>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10b      	bne.n	800a72c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	623b      	str	r3, [r7, #32]
}
 800a726:	bf00      	nop
 800a728:	bf00      	nop
 800a72a:	e7fd      	b.n	800a728 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <xQueueGenericCreateStatic+0x84>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <xQueueGenericCreateStatic+0x88>
 800a738:	2301      	movs	r3, #1
 800a73a:	e000      	b.n	800a73e <xQueueGenericCreateStatic+0x8a>
 800a73c:	2300      	movs	r3, #0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10b      	bne.n	800a75a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	61fb      	str	r3, [r7, #28]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a75a:	2350      	movs	r3, #80	@ 0x50
 800a75c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b50      	cmp	r3, #80	@ 0x50
 800a762:	d00b      	beq.n	800a77c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	61bb      	str	r3, [r7, #24]
}
 800a776:	bf00      	nop
 800a778:	bf00      	nop
 800a77a:	e7fd      	b.n	800a778 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a77c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00d      	beq.n	800a7a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a790:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f840 	bl	800a824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3730      	adds	r7, #48	@ 0x30
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b08a      	sub	sp, #40	@ 0x28
 800a7b2:	af02      	add	r7, sp, #8
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10b      	bne.n	800a7da <xQueueGenericCreate+0x2c>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	613b      	str	r3, [r7, #16]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	fb02 f303 	mul.w	r3, r2, r3
 800a7e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	3350      	adds	r3, #80	@ 0x50
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f002 fda7 	bl	800d33c <pvPortMalloc>
 800a7ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d011      	beq.n	800a81a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	3350      	adds	r3, #80	@ 0x50
 800a7fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a808:	79fa      	ldrb	r2, [r7, #7]
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4613      	mov	r3, r2
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 f805 	bl	800a824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a81a:	69bb      	ldr	r3, [r7, #24]
	}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e002      	b.n	800a846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a852:	2101      	movs	r1, #1
 800a854:	69b8      	ldr	r0, [r7, #24]
 800a856:	f7ff fec3 	bl	800a5e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	78fa      	ldrb	r2, [r7, #3]
 800a85e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00e      	beq.n	800a896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a88a:	2300      	movs	r3, #0
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f911 	bl	800aab8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6939      	ldr	r1, [r7, #16]
 800a8b6:	6978      	ldr	r0, [r7, #20]
 800a8b8:	f7ff ff79 	bl	800a7ae <xQueueGenericCreate>
 800a8bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ffd3 	bl	800a86a <prvInitialiseMutex>

		return xNewQueue;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b088      	sub	sp, #32
 800a8d2:	af02      	add	r7, sp, #8
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	6039      	str	r1, [r7, #0]
 800a8d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	6939      	ldr	r1, [r7, #16]
 800a8ec:	6978      	ldr	r0, [r7, #20]
 800a8ee:	f7ff fee1 	bl	800a6b4 <xQueueGenericCreateStatic>
 800a8f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f7ff ffb8 	bl	800a86a <prvInitialiseMutex>

		return xNewQueue;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
	}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10b      	bne.n	800a92e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60fb      	str	r3, [r7, #12]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	689c      	ldr	r4, [r3, #8]
 800a932:	f001 fd63 	bl	800c3fc <xTaskGetCurrentTaskHandle>
 800a936:	4603      	mov	r3, r0
 800a938:	429c      	cmp	r4, r3
 800a93a:	d111      	bne.n	800a960 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a94e:	2300      	movs	r3, #0
 800a950:	2200      	movs	r2, #0
 800a952:	2100      	movs	r1, #0
 800a954:	6938      	ldr	r0, [r7, #16]
 800a956:	f000 f8af 	bl	800aab8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a95a:	2301      	movs	r3, #1
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	e001      	b.n	800a964 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a960:	2300      	movs	r3, #0
 800a962:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a964:	697b      	ldr	r3, [r7, #20]
	}
 800a966:	4618      	mov	r0, r3
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}

0800a96e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a96e:	b590      	push	{r4, r7, lr}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10b      	bne.n	800a99a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	60fb      	str	r3, [r7, #12]
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	689c      	ldr	r4, [r3, #8]
 800a99e:	f001 fd2d 	bl	800c3fc <xTaskGetCurrentTaskHandle>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d107      	bne.n	800a9b8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	617b      	str	r3, [r7, #20]
 800a9b6:	e00c      	b.n	800a9d2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f000 fb8e 	bl	800b0dc <xQueueSemaphoreTake>
 800a9c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a9d2:	697b      	ldr	r3, [r7, #20]
	}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd90      	pop	{r4, r7, pc}

0800a9dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	@ 0x28
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10b      	bne.n	800aa06 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	61bb      	str	r3, [r7, #24]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d90b      	bls.n	800aa26 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	617b      	str	r3, [r7, #20]
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	e7fd      	b.n	800aa22 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa26:	2302      	movs	r3, #2
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f7ff fe3f 	bl	800a6b4 <xQueueGenericCreateStatic>
 800aa36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa44:	69fb      	ldr	r3, [r7, #28]
	}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b086      	sub	sp, #24
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10b      	bne.n	800aa76 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	613b      	str	r3, [r7, #16]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d90b      	bls.n	800aa96 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	60fb      	str	r3, [r7, #12]
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	e7fd      	b.n	800aa92 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa96:	2202      	movs	r2, #2
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff fe87 	bl	800a7ae <xQueueGenericCreate>
 800aaa0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aaae:	697b      	ldr	r3, [r7, #20]
	}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08e      	sub	sp, #56	@ 0x38
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aac6:	2300      	movs	r3, #0
 800aac8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10b      	bne.n	800aaec <xQueueGenericSend+0x34>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aae6:	bf00      	nop
 800aae8:	bf00      	nop
 800aaea:	e7fd      	b.n	800aae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d103      	bne.n	800aafa <xQueueGenericSend+0x42>
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <xQueueGenericSend+0x46>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <xQueueGenericSend+0x48>
 800aafe:	2300      	movs	r3, #0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10b      	bne.n	800ab1c <xQueueGenericSend+0x64>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d103      	bne.n	800ab2a <xQueueGenericSend+0x72>
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d101      	bne.n	800ab2e <xQueueGenericSend+0x76>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e000      	b.n	800ab30 <xQueueGenericSend+0x78>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <xQueueGenericSend+0x94>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	623b      	str	r3, [r7, #32]
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab4c:	f001 fc66 	bl	800c41c <xTaskGetSchedulerState>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d102      	bne.n	800ab5c <xQueueGenericSend+0xa4>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <xQueueGenericSend+0xa8>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <xQueueGenericSend+0xaa>
 800ab60:	2300      	movs	r3, #0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <xQueueGenericSend+0xc6>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	61fb      	str	r3, [r7, #28]
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab7e:	f002 fabb 	bl	800d0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d302      	bcc.n	800ab94 <xQueueGenericSend+0xdc>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d129      	bne.n	800abe8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab9a:	f000 fc6d 	bl	800b478 <prvCopyDataToQueue>
 800ab9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d010      	beq.n	800abca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	3324      	adds	r3, #36	@ 0x24
 800abac:	4618      	mov	r0, r3
 800abae:	f001 fa65 	bl	800c07c <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d013      	beq.n	800abe0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abb8:	4b3f      	ldr	r3, [pc, #252]	@ (800acb8 <xQueueGenericSend+0x200>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	e00a      	b.n	800abe0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abd0:	4b39      	ldr	r3, [pc, #228]	@ (800acb8 <xQueueGenericSend+0x200>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abe0:	f002 fabc 	bl	800d15c <vPortExitCritical>
				return pdPASS;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e063      	b.n	800acb0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d103      	bne.n	800abf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abee:	f002 fab5 	bl	800d15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	e05c      	b.n	800acb0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abfc:	f107 0314 	add.w	r3, r7, #20
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 fa9f 	bl	800c144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac06:	2301      	movs	r3, #1
 800ac08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac0a:	f002 faa7 	bl	800d15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac0e:	f001 f80f 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac12:	f002 fa71 	bl	800d0f8 <vPortEnterCritical>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac1c:	b25b      	sxtb	r3, r3
 800ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac22:	d103      	bne.n	800ac2c <xQueueGenericSend+0x174>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac32:	b25b      	sxtb	r3, r3
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d103      	bne.n	800ac42 <xQueueGenericSend+0x18a>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac42:	f002 fa8b 	bl	800d15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac46:	1d3a      	adds	r2, r7, #4
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 fa8e 	bl	800c170 <xTaskCheckForTimeOut>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d124      	bne.n	800aca4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac5c:	f000 fd04 	bl	800b668 <prvIsQueueFull>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d018      	beq.n	800ac98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	3310      	adds	r3, #16
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 f9b2 	bl	800bfd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac76:	f000 fc8f 	bl	800b598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac7a:	f000 ffe7 	bl	800bc4c <xTaskResumeAll>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f47f af7c 	bne.w	800ab7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ac86:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <xQueueGenericSend+0x200>)
 800ac88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	e772      	b.n	800ab7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac9a:	f000 fc7d 	bl	800b598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac9e:	f000 ffd5 	bl	800bc4c <xTaskResumeAll>
 800aca2:	e76c      	b.n	800ab7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aca6:	f000 fc77 	bl	800b598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acaa:	f000 ffcf 	bl	800bc4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3738      	adds	r7, #56	@ 0x38
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b090      	sub	sp, #64	@ 0x40
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800acce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10b      	bne.n	800acec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ace6:	bf00      	nop
 800ace8:	bf00      	nop
 800acea:	e7fd      	b.n	800ace8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d103      	bne.n	800acfa <xQueueGenericSendFromISR+0x3e>
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <xQueueGenericSendFromISR+0x42>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <xQueueGenericSendFromISR+0x44>
 800acfe:	2300      	movs	r3, #0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d103      	bne.n	800ad2a <xQueueGenericSendFromISR+0x6e>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <xQueueGenericSendFromISR+0x72>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <xQueueGenericSendFromISR+0x74>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10b      	bne.n	800ad4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	623b      	str	r3, [r7, #32]
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad4c:	f002 fab4 	bl	800d2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad50:	f3ef 8211 	mrs	r2, BASEPRI
 800ad54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	61fa      	str	r2, [r7, #28]
 800ad66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d302      	bcc.n	800ad7e <xQueueGenericSendFromISR+0xc2>
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d12f      	bne.n	800adde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad94:	f000 fb70 	bl	800b478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada0:	d112      	bne.n	800adc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d016      	beq.n	800add8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adac:	3324      	adds	r3, #36	@ 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 f964 	bl	800c07c <xTaskRemoveFromEventList>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00e      	beq.n	800add8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e007      	b.n	800add8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800adcc:	3301      	adds	r3, #1
 800adce:	b2db      	uxtb	r3, r3
 800add0:	b25a      	sxtb	r2, r3
 800add2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800add8:	2301      	movs	r3, #1
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800addc:	e001      	b.n	800ade2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ade2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3740      	adds	r7, #64	@ 0x40
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	@ 0x38
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	623b      	str	r3, [r7, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	61fb      	str	r3, [r7, #28]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <xQueueGiveFromISR+0x5c>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <xQueueGiveFromISR+0x60>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <xQueueGiveFromISR+0x62>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61bb      	str	r3, [r7, #24]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae76:	f002 fa1f 	bl	800d2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800ae7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	617a      	str	r2, [r7, #20]
 800ae90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d22b      	bcs.n	800aefe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aeac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aeb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb2:	1c5a      	adds	r2, r3, #1
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aeb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec0:	d112      	bne.n	800aee8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d016      	beq.n	800aef8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aecc:	3324      	adds	r3, #36	@ 0x24
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 f8d4 	bl	800c07c <xTaskRemoveFromEventList>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00e      	beq.n	800aef8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	e007      	b.n	800aef8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aeec:	3301      	adds	r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	b25a      	sxtb	r2, r3
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aef8:	2301      	movs	r3, #1
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefc:	e001      	b.n	800af02 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
 800af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f383 8811 	msr	BASEPRI, r3
}
 800af0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af10:	4618      	mov	r0, r3
 800af12:	3738      	adds	r7, #56	@ 0x38
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08c      	sub	sp, #48	@ 0x30
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af24:	2300      	movs	r3, #0
 800af26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <xQueueReceive+0x32>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	623b      	str	r3, [r7, #32]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d103      	bne.n	800af58 <xQueueReceive+0x40>
 800af50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <xQueueReceive+0x44>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <xQueueReceive+0x46>
 800af5c:	2300      	movs	r3, #0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10b      	bne.n	800af7a <xQueueReceive+0x62>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	61fb      	str	r3, [r7, #28]
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af7a:	f001 fa4f 	bl	800c41c <xTaskGetSchedulerState>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d102      	bne.n	800af8a <xQueueReceive+0x72>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <xQueueReceive+0x76>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <xQueueReceive+0x78>
 800af8e:	2300      	movs	r3, #0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10b      	bne.n	800afac <xQueueReceive+0x94>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	61bb      	str	r3, [r7, #24]
}
 800afa6:	bf00      	nop
 800afa8:	bf00      	nop
 800afaa:	e7fd      	b.n	800afa8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afac:	f002 f8a4 	bl	800d0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01f      	beq.n	800affc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afbc:	68b9      	ldr	r1, [r7, #8]
 800afbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afc0:	f000 fac4 	bl	800b54c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	1e5a      	subs	r2, r3, #1
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00f      	beq.n	800aff4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd6:	3310      	adds	r3, #16
 800afd8:	4618      	mov	r0, r3
 800afda:	f001 f84f 	bl	800c07c <xTaskRemoveFromEventList>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afe4:	4b3c      	ldr	r3, [pc, #240]	@ (800b0d8 <xQueueReceive+0x1c0>)
 800afe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aff4:	f002 f8b2 	bl	800d15c <vPortExitCritical>
				return pdPASS;
 800aff8:	2301      	movs	r3, #1
 800affa:	e069      	b.n	800b0d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d103      	bne.n	800b00a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b002:	f002 f8ab 	bl	800d15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b006:	2300      	movs	r3, #0
 800b008:	e062      	b.n	800b0d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d106      	bne.n	800b01e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b010:	f107 0310 	add.w	r3, r7, #16
 800b014:	4618      	mov	r0, r3
 800b016:	f001 f895 	bl	800c144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b01e:	f002 f89d 	bl	800d15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b022:	f000 fe05 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b026:	f002 f867 	bl	800d0f8 <vPortEnterCritical>
 800b02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b030:	b25b      	sxtb	r3, r3
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d103      	bne.n	800b040 <xQueueReceive+0x128>
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b046:	b25b      	sxtb	r3, r3
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d103      	bne.n	800b056 <xQueueReceive+0x13e>
 800b04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b056:	f002 f881 	bl	800d15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b05a:	1d3a      	adds	r2, r7, #4
 800b05c:	f107 0310 	add.w	r3, r7, #16
 800b060:	4611      	mov	r1, r2
 800b062:	4618      	mov	r0, r3
 800b064:	f001 f884 	bl	800c170 <xTaskCheckForTimeOut>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d123      	bne.n	800b0b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b06e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b070:	f000 fae4 	bl	800b63c <prvIsQueueEmpty>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d017      	beq.n	800b0aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07c:	3324      	adds	r3, #36	@ 0x24
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f000 ffa8 	bl	800bfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b08a:	f000 fa85 	bl	800b598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b08e:	f000 fddd 	bl	800bc4c <xTaskResumeAll>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d189      	bne.n	800afac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b098:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d8 <xQueueReceive+0x1c0>)
 800b09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	e780      	b.n	800afac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0ac:	f000 fa74 	bl	800b598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0b0:	f000 fdcc 	bl	800bc4c <xTaskResumeAll>
 800b0b4:	e77a      	b.n	800afac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0b8:	f000 fa6e 	bl	800b598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0bc:	f000 fdc6 	bl	800bc4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0c2:	f000 fabb 	bl	800b63c <prvIsQueueEmpty>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f43f af6f 	beq.w	800afac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3730      	adds	r7, #48	@ 0x30
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08e      	sub	sp, #56	@ 0x38
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10b      	bne.n	800b110 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	623b      	str	r3, [r7, #32]
}
 800b10a:	bf00      	nop
 800b10c:	bf00      	nop
 800b10e:	e7fd      	b.n	800b10c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	61fb      	str	r3, [r7, #28]
}
 800b12a:	bf00      	nop
 800b12c:	bf00      	nop
 800b12e:	e7fd      	b.n	800b12c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b130:	f001 f974 	bl	800c41c <xTaskGetSchedulerState>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d102      	bne.n	800b140 <xQueueSemaphoreTake+0x64>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <xQueueSemaphoreTake+0x68>
 800b140:	2301      	movs	r3, #1
 800b142:	e000      	b.n	800b146 <xQueueSemaphoreTake+0x6a>
 800b144:	2300      	movs	r3, #0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10b      	bne.n	800b162 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	61bb      	str	r3, [r7, #24]
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	e7fd      	b.n	800b15e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b162:	f001 ffc9 	bl	800d0f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d024      	beq.n	800b1bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b174:	1e5a      	subs	r2, r3, #1
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b182:	f001 fac5 	bl	800c710 <pvTaskIncrementMutexHeldCount>
 800b186:	4602      	mov	r2, r0
 800b188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00f      	beq.n	800b1b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	3310      	adds	r3, #16
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 ff6f 	bl	800c07c <xTaskRemoveFromEventList>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d007      	beq.n	800b1b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1a4:	4b54      	ldr	r3, [pc, #336]	@ (800b2f8 <xQueueSemaphoreTake+0x21c>)
 800b1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1b4:	f001 ffd2 	bl	800d15c <vPortExitCritical>
				return pdPASS;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e098      	b.n	800b2ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d112      	bne.n	800b1e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	617b      	str	r3, [r7, #20]
}
 800b1da:	bf00      	nop
 800b1dc:	bf00      	nop
 800b1de:	e7fd      	b.n	800b1dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b1e0:	f001 ffbc 	bl	800d15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e082      	b.n	800b2ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1ee:	f107 030c 	add.w	r3, r7, #12
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 ffa6 	bl	800c144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1fc:	f001 ffae 	bl	800d15c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b200:	f000 fd16 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b204:	f001 ff78 	bl	800d0f8 <vPortEnterCritical>
 800b208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d103      	bne.n	800b21e <xQueueSemaphoreTake+0x142>
 800b216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b220:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b224:	b25b      	sxtb	r3, r3
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d103      	bne.n	800b234 <xQueueSemaphoreTake+0x158>
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b234:	f001 ff92 	bl	800d15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b238:	463a      	mov	r2, r7
 800b23a:	f107 030c 	add.w	r3, r7, #12
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ff95 	bl	800c170 <xTaskCheckForTimeOut>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d132      	bne.n	800b2b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b24c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b24e:	f000 f9f5 	bl	800b63c <prvIsQueueEmpty>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d026      	beq.n	800b2a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d109      	bne.n	800b274 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b260:	f001 ff4a 	bl	800d0f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 f8f5 	bl	800c458 <xTaskPriorityInherit>
 800b26e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b270:	f001 ff74 	bl	800d15c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	3324      	adds	r3, #36	@ 0x24
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 feab 	bl	800bfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b282:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b284:	f000 f988 	bl	800b598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b288:	f000 fce0 	bl	800bc4c <xTaskResumeAll>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f47f af67 	bne.w	800b162 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b294:	4b18      	ldr	r3, [pc, #96]	@ (800b2f8 <xQueueSemaphoreTake+0x21c>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	e75d      	b.n	800b162 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b2a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2a8:	f000 f976 	bl	800b598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ac:	f000 fcce 	bl	800bc4c <xTaskResumeAll>
 800b2b0:	e757      	b.n	800b162 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b2b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2b4:	f000 f970 	bl	800b598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2b8:	f000 fcc8 	bl	800bc4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2be:	f000 f9bd 	bl	800b63c <prvIsQueueEmpty>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f43f af4c 	beq.w	800b162 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00d      	beq.n	800b2ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b2d0:	f001 ff12 	bl	800d0f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b2d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2d6:	f000 f8b7 	bl	800b448 <prvGetDisinheritPriorityAfterTimeout>
 800b2da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 f990 	bl	800c608 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b2e8:	f001 ff38 	bl	800d15c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3738      	adds	r7, #56	@ 0x38
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08e      	sub	sp, #56	@ 0x38
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10b      	bne.n	800b32a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	623b      	str	r3, [r7, #32]
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop
 800b328:	e7fd      	b.n	800b326 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <xQueueReceiveFromISR+0x3c>
 800b330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <xQueueReceiveFromISR+0x40>
 800b338:	2301      	movs	r3, #1
 800b33a:	e000      	b.n	800b33e <xQueueReceiveFromISR+0x42>
 800b33c:	2300      	movs	r3, #0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	61fb      	str	r3, [r7, #28]
}
 800b354:	bf00      	nop
 800b356:	bf00      	nop
 800b358:	e7fd      	b.n	800b356 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b35a:	f001 ffad 	bl	800d2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800b35e:	f3ef 8211 	mrs	r2, BASEPRI
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	61ba      	str	r2, [r7, #24]
 800b374:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b376:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b378:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b37e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d02f      	beq.n	800b3e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b38c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b394:	f000 f8da 	bl	800b54c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	1e5a      	subs	r2, r3, #1
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b3a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d112      	bne.n	800b3d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d016      	beq.n	800b3e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fe60 	bl	800c07c <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00e      	beq.n	800b3e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e007      	b.n	800b3e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	b25a      	sxtb	r2, r3
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e4:	e001      	b.n	800b3ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f383 8811 	msr	BASEPRI, r3
}
 800b3f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3738      	adds	r7, #56	@ 0x38
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10b      	bne.n	800b42a <vQueueDelete+0x2a>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	60bb      	str	r3, [r7, #8]
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop
 800b428:	e7fd      	b.n	800b426 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 f95e 	bl	800b6ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b436:	2b00      	cmp	r3, #0
 800b438:	d102      	bne.n	800b440 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f002 f84c 	bl	800d4d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	d006      	beq.n	800b466 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e001      	b.n	800b46a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b46a:	68fb      	ldr	r3, [r7, #12]
	}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10d      	bne.n	800b4b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d14d      	bne.n	800b53a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f001 f840 	bl	800c528 <xTaskPriorityDisinherit>
 800b4a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	e043      	b.n	800b53a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d119      	bne.n	800b4ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6858      	ldr	r0, [r3, #4]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68b9      	ldr	r1, [r7, #8]
 800b4c4:	f002 f998 	bl	800d7f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d0:	441a      	add	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d32b      	bcc.n	800b53a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	e026      	b.n	800b53a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	68d8      	ldr	r0, [r3, #12]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	f002 f97e 	bl	800d7f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b504:	425b      	negs	r3, r3
 800b506:	441a      	add	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d207      	bcs.n	800b528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b520:	425b      	negs	r3, r3
 800b522:	441a      	add	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d105      	bne.n	800b53a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3b01      	subs	r3, #1
 800b538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b542:	697b      	ldr	r3, [r7, #20]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d018      	beq.n	800b590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b566:	441a      	add	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68da      	ldr	r2, [r3, #12]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	429a      	cmp	r2, r3
 800b576:	d303      	bcc.n	800b580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68d9      	ldr	r1, [r3, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b588:	461a      	mov	r2, r3
 800b58a:	6838      	ldr	r0, [r7, #0]
 800b58c:	f002 f934 	bl	800d7f8 <memcpy>
	}
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5a0:	f001 fdaa 	bl	800d0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5ac:	e011      	b.n	800b5d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d012      	beq.n	800b5dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3324      	adds	r3, #36	@ 0x24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 fd5e 	bl	800c07c <xTaskRemoveFromEventList>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5c6:	f000 fe37 	bl	800c238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dce9      	bgt.n	800b5ae <prvUnlockQueue+0x16>
 800b5da:	e000      	b.n	800b5de <prvUnlockQueue+0x46>
					break;
 800b5dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	22ff      	movs	r2, #255	@ 0xff
 800b5e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b5e6:	f001 fdb9 	bl	800d15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5ea:	f001 fd85 	bl	800d0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5f6:	e011      	b.n	800b61c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d012      	beq.n	800b626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3310      	adds	r3, #16
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fd39 	bl	800c07c <xTaskRemoveFromEventList>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b610:	f000 fe12 	bl	800c238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	3b01      	subs	r3, #1
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	dce9      	bgt.n	800b5f8 <prvUnlockQueue+0x60>
 800b624:	e000      	b.n	800b628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	22ff      	movs	r2, #255	@ 0xff
 800b62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b630:	f001 fd94 	bl	800d15c <vPortExitCritical>
}
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b644:	f001 fd58 	bl	800d0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]
 800b654:	e001      	b.n	800b65a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b656:	2300      	movs	r3, #0
 800b658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b65a:	f001 fd7f 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800b65e:	68fb      	ldr	r3, [r7, #12]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b670:	f001 fd42 	bl	800d0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d102      	bne.n	800b686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b680:	2301      	movs	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	e001      	b.n	800b68a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b68a:	f001 fd67 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800b68e:	68fb      	ldr	r3, [r7, #12]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	e014      	b.n	800b6d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b6e8 <vQueueAddToRegistry+0x50>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10b      	bne.n	800b6cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6b4:	490c      	ldr	r1, [pc, #48]	@ (800b6e8 <vQueueAddToRegistry+0x50>)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6be:	4a0a      	ldr	r2, [pc, #40]	@ (800b6e8 <vQueueAddToRegistry+0x50>)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6ca:	e006      	b.n	800b6da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b07      	cmp	r3, #7
 800b6d6:	d9e7      	bls.n	800b6a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20000d90 	.word	0x20000d90

0800b6ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	60fb      	str	r3, [r7, #12]
 800b6f8:	e016      	b.n	800b728 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b6fa:	4a10      	ldr	r2, [pc, #64]	@ (800b73c <vQueueUnregisterQueue+0x50>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	4413      	add	r3, r2
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	429a      	cmp	r2, r3
 800b708:	d10b      	bne.n	800b722 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b70a:	4a0c      	ldr	r2, [pc, #48]	@ (800b73c <vQueueUnregisterQueue+0x50>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2100      	movs	r1, #0
 800b710:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b714:	4a09      	ldr	r2, [pc, #36]	@ (800b73c <vQueueUnregisterQueue+0x50>)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	00db      	lsls	r3, r3, #3
 800b71a:	4413      	add	r3, r2
 800b71c:	2200      	movs	r2, #0
 800b71e:	605a      	str	r2, [r3, #4]
				break;
 800b720:	e006      	b.n	800b730 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b07      	cmp	r3, #7
 800b72c:	d9e5      	bls.n	800b6fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b72e:	bf00      	nop
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	20000d90 	.word	0x20000d90

0800b740 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b750:	f001 fcd2 	bl	800d0f8 <vPortEnterCritical>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b75a:	b25b      	sxtb	r3, r3
 800b75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b760:	d103      	bne.n	800b76a <vQueueWaitForMessageRestricted+0x2a>
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b770:	b25b      	sxtb	r3, r3
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d103      	bne.n	800b780 <vQueueWaitForMessageRestricted+0x40>
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b780:	f001 fcec 	bl	800d15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d106      	bne.n	800b79a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	3324      	adds	r3, #36	@ 0x24
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fc45 	bl	800c024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b79a:	6978      	ldr	r0, [r7, #20]
 800b79c:	f7ff fefc 	bl	800b598 <prvUnlockQueue>
	}
 800b7a0:	bf00      	nop
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	@ 0x38
 800b7ac:	af04      	add	r7, sp, #16
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10b      	bne.n	800b7d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	623b      	str	r3, [r7, #32]
}
 800b7ce:	bf00      	nop
 800b7d0:	bf00      	nop
 800b7d2:	e7fd      	b.n	800b7d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10b      	bne.n	800b7f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	61fb      	str	r3, [r7, #28]
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	e7fd      	b.n	800b7ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7f2:	235c      	movs	r3, #92	@ 0x5c
 800b7f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7fa:	d00b      	beq.n	800b814 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	61bb      	str	r3, [r7, #24]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b814:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01e      	beq.n	800b85a <xTaskCreateStatic+0xb2>
 800b81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01b      	beq.n	800b85a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b82a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b834:	2300      	movs	r3, #0
 800b836:	9303      	str	r3, [sp, #12]
 800b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83a:	9302      	str	r3, [sp, #8]
 800b83c:	f107 0314 	add.w	r3, r7, #20
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f850 	bl	800b8f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b852:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b854:	f000 f8de 	bl	800ba14 <prvAddNewTaskToReadyList>
 800b858:	e001      	b.n	800b85e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b85e:	697b      	ldr	r3, [r7, #20]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	3728      	adds	r7, #40	@ 0x28
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08c      	sub	sp, #48	@ 0x30
 800b86c:	af04      	add	r7, sp, #16
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	603b      	str	r3, [r7, #0]
 800b874:	4613      	mov	r3, r2
 800b876:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 fd5d 	bl	800d33c <pvPortMalloc>
 800b882:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00e      	beq.n	800b8a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b88a:	205c      	movs	r0, #92	@ 0x5c
 800b88c:	f001 fd56 	bl	800d33c <pvPortMalloc>
 800b890:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b89e:	e005      	b.n	800b8ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8a0:	6978      	ldr	r0, [r7, #20]
 800b8a2:	f001 fe19 	bl	800d4d8 <vPortFree>
 800b8a6:	e001      	b.n	800b8ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d017      	beq.n	800b8e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8ba:	88fa      	ldrh	r2, [r7, #6]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	9302      	str	r3, [sp, #8]
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68b9      	ldr	r1, [r7, #8]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 f80e 	bl	800b8f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8d6:	69f8      	ldr	r0, [r7, #28]
 800b8d8:	f000 f89c 	bl	800ba14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	61bb      	str	r3, [r7, #24]
 800b8e0:	e002      	b.n	800b8e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
	}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3720      	adds	r7, #32
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b088      	sub	sp, #32
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
 800b8fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	461a      	mov	r2, r3
 800b90a:	21a5      	movs	r1, #165	@ 0xa5
 800b90c:	f001 ff40 	bl	800d790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b91a:	3b01      	subs	r3, #1
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	f023 0307 	bic.w	r3, r3, #7
 800b928:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	617b      	str	r3, [r7, #20]
}
 800b946:	bf00      	nop
 800b948:	bf00      	nop
 800b94a:	e7fd      	b.n	800b948 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01f      	beq.n	800b992 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b952:	2300      	movs	r3, #0
 800b954:	61fb      	str	r3, [r7, #28]
 800b956:	e012      	b.n	800b97e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	4413      	add	r3, r2
 800b95e:	7819      	ldrb	r1, [r3, #0]
 800b960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	3334      	adds	r3, #52	@ 0x34
 800b968:	460a      	mov	r2, r1
 800b96a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	3301      	adds	r3, #1
 800b97c:	61fb      	str	r3, [r7, #28]
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	2b0f      	cmp	r3, #15
 800b982:	d9e9      	bls.n	800b958 <prvInitialiseNewTask+0x66>
 800b984:	e000      	b.n	800b988 <prvInitialiseNewTask+0x96>
			{
				break;
 800b986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b990:	e003      	b.n	800b99a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99c:	2b37      	cmp	r3, #55	@ 0x37
 800b99e:	d901      	bls.n	800b9a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9a0:	2337      	movs	r3, #55	@ 0x37
 800b9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fd7c 	bl	800a4b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c2:	3318      	adds	r3, #24
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fd77 	bl	800a4b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	68f9      	ldr	r1, [r7, #12]
 800b9f2:	69b8      	ldr	r0, [r7, #24]
 800b9f4:	f001 fa4e 	bl	800ce94 <pxPortInitialiseStack>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba0a:	bf00      	nop
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba1c:	f001 fb6c 	bl	800d0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba20:	4b2d      	ldr	r3, [pc, #180]	@ (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	4a2c      	ldr	r2, [pc, #176]	@ (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba2a:	4b2c      	ldr	r3, [pc, #176]	@ (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d109      	bne.n	800ba46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba32:	4a2a      	ldr	r2, [pc, #168]	@ (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba38:	4b27      	ldr	r3, [pc, #156]	@ (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d110      	bne.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba40:	f000 fc1e 	bl	800c280 <prvInitialiseTaskLists>
 800ba44:	e00d      	b.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba46:	4b26      	ldr	r3, [pc, #152]	@ (800bae0 <prvAddNewTaskToReadyList+0xcc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba4e:	4b23      	ldr	r3, [pc, #140]	@ (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d802      	bhi.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba5c:	4a1f      	ldr	r2, [pc, #124]	@ (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba62:	4b20      	ldr	r3, [pc, #128]	@ (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3301      	adds	r3, #1
 800ba68:	4a1e      	ldr	r2, [pc, #120]	@ (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba6c:	4b1d      	ldr	r3, [pc, #116]	@ (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba78:	4b1b      	ldr	r3, [pc, #108]	@ (800bae8 <prvAddNewTaskToReadyList+0xd4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d903      	bls.n	800ba88 <prvAddNewTaskToReadyList+0x74>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba84:	4a18      	ldr	r2, [pc, #96]	@ (800bae8 <prvAddNewTaskToReadyList+0xd4>)
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4a15      	ldr	r2, [pc, #84]	@ (800baec <prvAddNewTaskToReadyList+0xd8>)
 800ba96:	441a      	add	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f7fe fd17 	bl	800a4d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baa4:	f001 fb5a 	bl	800d15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800baa8:	4b0d      	ldr	r3, [pc, #52]	@ (800bae0 <prvAddNewTaskToReadyList+0xcc>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00e      	beq.n	800bace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bab0:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <prvAddNewTaskToReadyList+0xc8>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baba:	429a      	cmp	r2, r3
 800babc:	d207      	bcs.n	800bace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800babe:	4b0c      	ldr	r3, [pc, #48]	@ (800baf0 <prvAddNewTaskToReadyList+0xdc>)
 800bac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	200012a4 	.word	0x200012a4
 800badc:	20000dd0 	.word	0x20000dd0
 800bae0:	200012b0 	.word	0x200012b0
 800bae4:	200012c0 	.word	0x200012c0
 800bae8:	200012ac 	.word	0x200012ac
 800baec:	20000dd4 	.word	0x20000dd4
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d018      	beq.n	800bb38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb06:	4b14      	ldr	r3, [pc, #80]	@ (800bb58 <vTaskDelay+0x64>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00b      	beq.n	800bb26 <vTaskDelay+0x32>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	60bb      	str	r3, [r7, #8]
}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	e7fd      	b.n	800bb22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb26:	f000 f883 	bl	800bc30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fe03 	bl	800c738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb32:	f000 f88b 	bl	800bc4c <xTaskResumeAll>
 800bb36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d107      	bne.n	800bb4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb3e:	4b07      	ldr	r3, [pc, #28]	@ (800bb5c <vTaskDelay+0x68>)
 800bb40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	200012cc 	.word	0x200012cc
 800bb5c:	e000ed04 	.word	0xe000ed04

0800bb60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08a      	sub	sp, #40	@ 0x28
 800bb64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb6e:	463a      	mov	r2, r7
 800bb70:	1d39      	adds	r1, r7, #4
 800bb72:	f107 0308 	add.w	r3, r7, #8
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe fc4a 	bl	800a410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	9202      	str	r2, [sp, #8]
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	2300      	movs	r3, #0
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	4922      	ldr	r1, [pc, #136]	@ (800bc18 <vTaskStartScheduler+0xb8>)
 800bb90:	4822      	ldr	r0, [pc, #136]	@ (800bc1c <vTaskStartScheduler+0xbc>)
 800bb92:	f7ff fe09 	bl	800b7a8 <xTaskCreateStatic>
 800bb96:	4603      	mov	r3, r0
 800bb98:	4a21      	ldr	r2, [pc, #132]	@ (800bc20 <vTaskStartScheduler+0xc0>)
 800bb9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb9c:	4b20      	ldr	r3, [pc, #128]	@ (800bc20 <vTaskStartScheduler+0xc0>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bba4:	2301      	movs	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
 800bba8:	e001      	b.n	800bbae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d102      	bne.n	800bbba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bbb4:	f000 fe14 	bl	800c7e0 <xTimerCreateTimerTask>
 800bbb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d116      	bne.n	800bbee <vTaskStartScheduler+0x8e>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	613b      	str	r3, [r7, #16]
}
 800bbd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbd4:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <vTaskStartScheduler+0xc4>)
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbdc:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <vTaskStartScheduler+0xc8>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbe2:	4b12      	ldr	r3, [pc, #72]	@ (800bc2c <vTaskStartScheduler+0xcc>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbe8:	f001 f9e2 	bl	800cfb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbec:	e00f      	b.n	800bc0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf4:	d10b      	bne.n	800bc0e <vTaskStartScheduler+0xae>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	60fb      	str	r3, [r7, #12]
}
 800bc08:	bf00      	nop
 800bc0a:	bf00      	nop
 800bc0c:	e7fd      	b.n	800bc0a <vTaskStartScheduler+0xaa>
}
 800bc0e:	bf00      	nop
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	0800e1b8 	.word	0x0800e1b8
 800bc1c:	0800c251 	.word	0x0800c251
 800bc20:	200012c8 	.word	0x200012c8
 800bc24:	200012c4 	.word	0x200012c4
 800bc28:	200012b0 	.word	0x200012b0
 800bc2c:	200012a8 	.word	0x200012a8

0800bc30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc34:	4b04      	ldr	r3, [pc, #16]	@ (800bc48 <vTaskSuspendAll+0x18>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	4a03      	ldr	r2, [pc, #12]	@ (800bc48 <vTaskSuspendAll+0x18>)
 800bc3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc3e:	bf00      	nop
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	200012cc 	.word	0x200012cc

0800bc4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc5a:	4b42      	ldr	r3, [pc, #264]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <xTaskResumeAll+0x2e>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	603b      	str	r3, [r7, #0]
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	e7fd      	b.n	800bc76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc7a:	f001 fa3d 	bl	800d0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc7e:	4b39      	ldr	r3, [pc, #228]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	4a37      	ldr	r2, [pc, #220]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc88:	4b36      	ldr	r3, [pc, #216]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d162      	bne.n	800bd56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc90:	4b35      	ldr	r3, [pc, #212]	@ (800bd68 <xTaskResumeAll+0x11c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d05e      	beq.n	800bd56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc98:	e02f      	b.n	800bcfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc9a:	4b34      	ldr	r3, [pc, #208]	@ (800bd6c <xTaskResumeAll+0x120>)
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3318      	adds	r3, #24
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fc70 	bl	800a58c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe fc6b 	bl	800a58c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcba:	4b2d      	ldr	r3, [pc, #180]	@ (800bd70 <xTaskResumeAll+0x124>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d903      	bls.n	800bcca <xTaskResumeAll+0x7e>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd70 <xTaskResumeAll+0x124>)
 800bcc8:	6013      	str	r3, [r2, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4a27      	ldr	r2, [pc, #156]	@ (800bd74 <xTaskResumeAll+0x128>)
 800bcd8:	441a      	add	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f7fe fbf6 	bl	800a4d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcea:	4b23      	ldr	r3, [pc, #140]	@ (800bd78 <xTaskResumeAll+0x12c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d302      	bcc.n	800bcfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bcf4:	4b21      	ldr	r3, [pc, #132]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcfa:	4b1c      	ldr	r3, [pc, #112]	@ (800bd6c <xTaskResumeAll+0x120>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1cb      	bne.n	800bc9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd08:	f000 fb58 	bl	800c3bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd0c:	4b1c      	ldr	r3, [pc, #112]	@ (800bd80 <xTaskResumeAll+0x134>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d010      	beq.n	800bd3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd18:	f000 f846 	bl	800bda8 <xTaskIncrementTick>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bd22:	4b16      	ldr	r3, [pc, #88]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f1      	bne.n	800bd18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bd34:	4b12      	ldr	r3, [pc, #72]	@ (800bd80 <xTaskResumeAll+0x134>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd3a:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd42:	2301      	movs	r3, #1
 800bd44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd46:	4b0f      	ldr	r3, [pc, #60]	@ (800bd84 <xTaskResumeAll+0x138>)
 800bd48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd56:	f001 fa01 	bl	800d15c <vPortExitCritical>

	return xAlreadyYielded;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	200012cc 	.word	0x200012cc
 800bd68:	200012a4 	.word	0x200012a4
 800bd6c:	20001264 	.word	0x20001264
 800bd70:	200012ac 	.word	0x200012ac
 800bd74:	20000dd4 	.word	0x20000dd4
 800bd78:	20000dd0 	.word	0x20000dd0
 800bd7c:	200012b8 	.word	0x200012b8
 800bd80:	200012b4 	.word	0x200012b4
 800bd84:	e000ed04 	.word	0xe000ed04

0800bd88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd8e:	4b05      	ldr	r3, [pc, #20]	@ (800bda4 <xTaskGetTickCount+0x1c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd94:	687b      	ldr	r3, [r7, #4]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200012a8 	.word	0x200012a8

0800bda8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdb2:	4b4f      	ldr	r3, [pc, #316]	@ (800bef0 <xTaskIncrementTick+0x148>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f040 8090 	bne.w	800bedc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdbc:	4b4d      	ldr	r3, [pc, #308]	@ (800bef4 <xTaskIncrementTick+0x14c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdc4:	4a4b      	ldr	r2, [pc, #300]	@ (800bef4 <xTaskIncrementTick+0x14c>)
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d121      	bne.n	800be14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdd0:	4b49      	ldr	r3, [pc, #292]	@ (800bef8 <xTaskIncrementTick+0x150>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00b      	beq.n	800bdf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	603b      	str	r3, [r7, #0]
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	e7fd      	b.n	800bdee <xTaskIncrementTick+0x46>
 800bdf2:	4b41      	ldr	r3, [pc, #260]	@ (800bef8 <xTaskIncrementTick+0x150>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	4b40      	ldr	r3, [pc, #256]	@ (800befc <xTaskIncrementTick+0x154>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a3e      	ldr	r2, [pc, #248]	@ (800bef8 <xTaskIncrementTick+0x150>)
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	4a3e      	ldr	r2, [pc, #248]	@ (800befc <xTaskIncrementTick+0x154>)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	4b3e      	ldr	r3, [pc, #248]	@ (800bf00 <xTaskIncrementTick+0x158>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	4a3c      	ldr	r2, [pc, #240]	@ (800bf00 <xTaskIncrementTick+0x158>)
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	f000 fad4 	bl	800c3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be14:	4b3b      	ldr	r3, [pc, #236]	@ (800bf04 <xTaskIncrementTick+0x15c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d349      	bcc.n	800beb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be1e:	4b36      	ldr	r3, [pc, #216]	@ (800bef8 <xTaskIncrementTick+0x150>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d104      	bne.n	800be32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be28:	4b36      	ldr	r3, [pc, #216]	@ (800bf04 <xTaskIncrementTick+0x15c>)
 800be2a:	f04f 32ff 	mov.w	r2, #4294967295
 800be2e:	601a      	str	r2, [r3, #0]
					break;
 800be30:	e03f      	b.n	800beb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be32:	4b31      	ldr	r3, [pc, #196]	@ (800bef8 <xTaskIncrementTick+0x150>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	429a      	cmp	r2, r3
 800be48:	d203      	bcs.n	800be52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be4a:	4a2e      	ldr	r2, [pc, #184]	@ (800bf04 <xTaskIncrementTick+0x15c>)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be50:	e02f      	b.n	800beb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3304      	adds	r3, #4
 800be56:	4618      	mov	r0, r3
 800be58:	f7fe fb98 	bl	800a58c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be60:	2b00      	cmp	r3, #0
 800be62:	d004      	beq.n	800be6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	3318      	adds	r3, #24
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe fb8f 	bl	800a58c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be72:	4b25      	ldr	r3, [pc, #148]	@ (800bf08 <xTaskIncrementTick+0x160>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	429a      	cmp	r2, r3
 800be78:	d903      	bls.n	800be82 <xTaskIncrementTick+0xda>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7e:	4a22      	ldr	r2, [pc, #136]	@ (800bf08 <xTaskIncrementTick+0x160>)
 800be80:	6013      	str	r3, [r2, #0]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf0c <xTaskIncrementTick+0x164>)
 800be90:	441a      	add	r2, r3
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	3304      	adds	r3, #4
 800be96:	4619      	mov	r1, r3
 800be98:	4610      	mov	r0, r2
 800be9a:	f7fe fb1a 	bl	800a4d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf10 <xTaskIncrementTick+0x168>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d3b8      	bcc.n	800be1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb0:	e7b5      	b.n	800be1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800beb2:	4b17      	ldr	r3, [pc, #92]	@ (800bf10 <xTaskIncrementTick+0x168>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb8:	4914      	ldr	r1, [pc, #80]	@ (800bf0c <xTaskIncrementTick+0x164>)
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d901      	bls.n	800bece <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800beca:	2301      	movs	r3, #1
 800becc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bece:	4b11      	ldr	r3, [pc, #68]	@ (800bf14 <xTaskIncrementTick+0x16c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d007      	beq.n	800bee6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bed6:	2301      	movs	r3, #1
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e004      	b.n	800bee6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bedc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf18 <xTaskIncrementTick+0x170>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3301      	adds	r3, #1
 800bee2:	4a0d      	ldr	r2, [pc, #52]	@ (800bf18 <xTaskIncrementTick+0x170>)
 800bee4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bee6:	697b      	ldr	r3, [r7, #20]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	200012cc 	.word	0x200012cc
 800bef4:	200012a8 	.word	0x200012a8
 800bef8:	2000125c 	.word	0x2000125c
 800befc:	20001260 	.word	0x20001260
 800bf00:	200012bc 	.word	0x200012bc
 800bf04:	200012c4 	.word	0x200012c4
 800bf08:	200012ac 	.word	0x200012ac
 800bf0c:	20000dd4 	.word	0x20000dd4
 800bf10:	20000dd0 	.word	0x20000dd0
 800bf14:	200012b8 	.word	0x200012b8
 800bf18:	200012b4 	.word	0x200012b4

0800bf1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf22:	4b28      	ldr	r3, [pc, #160]	@ (800bfc4 <vTaskSwitchContext+0xa8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf2a:	4b27      	ldr	r3, [pc, #156]	@ (800bfc8 <vTaskSwitchContext+0xac>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf30:	e042      	b.n	800bfb8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bf32:	4b25      	ldr	r3, [pc, #148]	@ (800bfc8 <vTaskSwitchContext+0xac>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf38:	4b24      	ldr	r3, [pc, #144]	@ (800bfcc <vTaskSwitchContext+0xb0>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	e011      	b.n	800bf64 <vTaskSwitchContext+0x48>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10b      	bne.n	800bf5e <vTaskSwitchContext+0x42>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	607b      	str	r3, [r7, #4]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <vTaskSwitchContext+0x3e>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	491a      	ldr	r1, [pc, #104]	@ (800bfd0 <vTaskSwitchContext+0xb4>)
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	440b      	add	r3, r1
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d0e3      	beq.n	800bf40 <vTaskSwitchContext+0x24>
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4a13      	ldr	r2, [pc, #76]	@ (800bfd0 <vTaskSwitchContext+0xb4>)
 800bf84:	4413      	add	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	605a      	str	r2, [r3, #4]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	3308      	adds	r3, #8
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d104      	bne.n	800bfa8 <vTaskSwitchContext+0x8c>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	605a      	str	r2, [r3, #4]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	4a09      	ldr	r2, [pc, #36]	@ (800bfd4 <vTaskSwitchContext+0xb8>)
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	4a06      	ldr	r2, [pc, #24]	@ (800bfcc <vTaskSwitchContext+0xb0>)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6013      	str	r3, [r2, #0]
}
 800bfb8:	bf00      	nop
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	200012cc 	.word	0x200012cc
 800bfc8:	200012b8 	.word	0x200012b8
 800bfcc:	200012ac 	.word	0x200012ac
 800bfd0:	20000dd4 	.word	0x20000dd4
 800bfd4:	20000dd0 	.word	0x20000dd0

0800bfd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10b      	bne.n	800c000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	60fb      	str	r3, [r7, #12]
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c000:	4b07      	ldr	r3, [pc, #28]	@ (800c020 <vTaskPlaceOnEventList+0x48>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3318      	adds	r3, #24
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7fe fa86 	bl	800a51a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c00e:	2101      	movs	r1, #1
 800c010:	6838      	ldr	r0, [r7, #0]
 800c012:	f000 fb91 	bl	800c738 <prvAddCurrentTaskToDelayedList>
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000dd0 	.word	0x20000dd0

0800c024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10b      	bne.n	800c04e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	617b      	str	r3, [r7, #20]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c04e:	4b0a      	ldr	r3, [pc, #40]	@ (800c078 <vTaskPlaceOnEventListRestricted+0x54>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3318      	adds	r3, #24
 800c054:	4619      	mov	r1, r3
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7fe fa3b 	bl	800a4d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c062:	f04f 33ff 	mov.w	r3, #4294967295
 800c066:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	68b8      	ldr	r0, [r7, #8]
 800c06c:	f000 fb64 	bl	800c738 <prvAddCurrentTaskToDelayedList>
	}
 800c070:	bf00      	nop
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	20000dd0 	.word	0x20000dd0

0800c07c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10b      	bne.n	800c0aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	60fb      	str	r3, [r7, #12]
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop
 800c0a8:	e7fd      	b.n	800c0a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3318      	adds	r3, #24
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fa6c 	bl	800a58c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c12c <xTaskRemoveFromEventList+0xb0>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d11d      	bne.n	800c0f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fe fa63 	bl	800a58c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ca:	4b19      	ldr	r3, [pc, #100]	@ (800c130 <xTaskRemoveFromEventList+0xb4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d903      	bls.n	800c0da <xTaskRemoveFromEventList+0x5e>
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d6:	4a16      	ldr	r2, [pc, #88]	@ (800c130 <xTaskRemoveFromEventList+0xb4>)
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0de:	4613      	mov	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4a13      	ldr	r2, [pc, #76]	@ (800c134 <xTaskRemoveFromEventList+0xb8>)
 800c0e8:	441a      	add	r2, r3
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	f7fe f9ee 	bl	800a4d2 <vListInsertEnd>
 800c0f6:	e005      	b.n	800c104 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	3318      	adds	r3, #24
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	480e      	ldr	r0, [pc, #56]	@ (800c138 <xTaskRemoveFromEventList+0xbc>)
 800c100:	f7fe f9e7 	bl	800a4d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c108:	4b0c      	ldr	r3, [pc, #48]	@ (800c13c <xTaskRemoveFromEventList+0xc0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10e:	429a      	cmp	r2, r3
 800c110:	d905      	bls.n	800c11e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c116:	4b0a      	ldr	r3, [pc, #40]	@ (800c140 <xTaskRemoveFromEventList+0xc4>)
 800c118:	2201      	movs	r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	e001      	b.n	800c122 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c11e:	2300      	movs	r3, #0
 800c120:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c122:	697b      	ldr	r3, [r7, #20]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	200012cc 	.word	0x200012cc
 800c130:	200012ac 	.word	0x200012ac
 800c134:	20000dd4 	.word	0x20000dd4
 800c138:	20001264 	.word	0x20001264
 800c13c:	20000dd0 	.word	0x20000dd0
 800c140:	200012b8 	.word	0x200012b8

0800c144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c14c:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <vTaskInternalSetTimeOutState+0x24>)
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c154:	4b05      	ldr	r3, [pc, #20]	@ (800c16c <vTaskInternalSetTimeOutState+0x28>)
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	605a      	str	r2, [r3, #4]
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	200012bc 	.word	0x200012bc
 800c16c:	200012a8 	.word	0x200012a8

0800c170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	613b      	str	r3, [r7, #16]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c1b6:	f000 ff9f 	bl	800d0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c230 <xTaskCheckForTimeOut+0xc0>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d102      	bne.n	800c1da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	e023      	b.n	800c222 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4b15      	ldr	r3, [pc, #84]	@ (800c234 <xTaskCheckForTimeOut+0xc4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d007      	beq.n	800c1f6 <xTaskCheckForTimeOut+0x86>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d302      	bcc.n	800c1f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	61fb      	str	r3, [r7, #28]
 800c1f4:	e015      	b.n	800c222 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d20b      	bcs.n	800c218 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	1ad2      	subs	r2, r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff ff99 	bl	800c144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c212:	2300      	movs	r3, #0
 800c214:	61fb      	str	r3, [r7, #28]
 800c216:	e004      	b.n	800c222 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c21e:	2301      	movs	r3, #1
 800c220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c222:	f000 ff9b 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800c226:	69fb      	ldr	r3, [r7, #28]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3720      	adds	r7, #32
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200012a8 	.word	0x200012a8
 800c234:	200012bc 	.word	0x200012bc

0800c238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c23c:	4b03      	ldr	r3, [pc, #12]	@ (800c24c <vTaskMissedYield+0x14>)
 800c23e:	2201      	movs	r2, #1
 800c240:	601a      	str	r2, [r3, #0]
}
 800c242:	bf00      	nop
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	200012b8 	.word	0x200012b8

0800c250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c258:	f000 f852 	bl	800c300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c25c:	4b06      	ldr	r3, [pc, #24]	@ (800c278 <prvIdleTask+0x28>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d9f9      	bls.n	800c258 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c264:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <prvIdleTask+0x2c>)
 800c266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c274:	e7f0      	b.n	800c258 <prvIdleTask+0x8>
 800c276:	bf00      	nop
 800c278:	20000dd4 	.word	0x20000dd4
 800c27c:	e000ed04 	.word	0xe000ed04

0800c280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c286:	2300      	movs	r3, #0
 800c288:	607b      	str	r3, [r7, #4]
 800c28a:	e00c      	b.n	800c2a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4a12      	ldr	r2, [pc, #72]	@ (800c2e0 <prvInitialiseTaskLists+0x60>)
 800c298:	4413      	add	r3, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe f8ec 	bl	800a478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	607b      	str	r3, [r7, #4]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b37      	cmp	r3, #55	@ 0x37
 800c2aa:	d9ef      	bls.n	800c28c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2ac:	480d      	ldr	r0, [pc, #52]	@ (800c2e4 <prvInitialiseTaskLists+0x64>)
 800c2ae:	f7fe f8e3 	bl	800a478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2b2:	480d      	ldr	r0, [pc, #52]	@ (800c2e8 <prvInitialiseTaskLists+0x68>)
 800c2b4:	f7fe f8e0 	bl	800a478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2b8:	480c      	ldr	r0, [pc, #48]	@ (800c2ec <prvInitialiseTaskLists+0x6c>)
 800c2ba:	f7fe f8dd 	bl	800a478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2be:	480c      	ldr	r0, [pc, #48]	@ (800c2f0 <prvInitialiseTaskLists+0x70>)
 800c2c0:	f7fe f8da 	bl	800a478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2c4:	480b      	ldr	r0, [pc, #44]	@ (800c2f4 <prvInitialiseTaskLists+0x74>)
 800c2c6:	f7fe f8d7 	bl	800a478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <prvInitialiseTaskLists+0x78>)
 800c2cc:	4a05      	ldr	r2, [pc, #20]	@ (800c2e4 <prvInitialiseTaskLists+0x64>)
 800c2ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <prvInitialiseTaskLists+0x7c>)
 800c2d2:	4a05      	ldr	r2, [pc, #20]	@ (800c2e8 <prvInitialiseTaskLists+0x68>)
 800c2d4:	601a      	str	r2, [r3, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000dd4 	.word	0x20000dd4
 800c2e4:	20001234 	.word	0x20001234
 800c2e8:	20001248 	.word	0x20001248
 800c2ec:	20001264 	.word	0x20001264
 800c2f0:	20001278 	.word	0x20001278
 800c2f4:	20001290 	.word	0x20001290
 800c2f8:	2000125c 	.word	0x2000125c
 800c2fc:	20001260 	.word	0x20001260

0800c300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c306:	e019      	b.n	800c33c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c308:	f000 fef6 	bl	800d0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c30c:	4b10      	ldr	r3, [pc, #64]	@ (800c350 <prvCheckTasksWaitingTermination+0x50>)
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	3304      	adds	r3, #4
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe f937 	bl	800a58c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c31e:	4b0d      	ldr	r3, [pc, #52]	@ (800c354 <prvCheckTasksWaitingTermination+0x54>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3b01      	subs	r3, #1
 800c324:	4a0b      	ldr	r2, [pc, #44]	@ (800c354 <prvCheckTasksWaitingTermination+0x54>)
 800c326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c328:	4b0b      	ldr	r3, [pc, #44]	@ (800c358 <prvCheckTasksWaitingTermination+0x58>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	4a0a      	ldr	r2, [pc, #40]	@ (800c358 <prvCheckTasksWaitingTermination+0x58>)
 800c330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c332:	f000 ff13 	bl	800d15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f810 	bl	800c35c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c33c:	4b06      	ldr	r3, [pc, #24]	@ (800c358 <prvCheckTasksWaitingTermination+0x58>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e1      	bne.n	800c308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20001278 	.word	0x20001278
 800c354:	200012a4 	.word	0x200012a4
 800c358:	2000128c 	.word	0x2000128c

0800c35c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d108      	bne.n	800c380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c372:	4618      	mov	r0, r3
 800c374:	f001 f8b0 	bl	800d4d8 <vPortFree>
				vPortFree( pxTCB );
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f001 f8ad 	bl	800d4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c37e:	e019      	b.n	800c3b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c386:	2b01      	cmp	r3, #1
 800c388:	d103      	bne.n	800c392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 f8a4 	bl	800d4d8 <vPortFree>
	}
 800c390:	e010      	b.n	800c3b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d00b      	beq.n	800c3b4 <prvDeleteTCB+0x58>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60fb      	str	r3, [r7, #12]
}
 800c3ae:	bf00      	nop
 800c3b0:	bf00      	nop
 800c3b2:	e7fd      	b.n	800c3b0 <prvDeleteTCB+0x54>
	}
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f4 <prvResetNextTaskUnblockTime+0x38>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3d4:	e008      	b.n	800c3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d6:	4b07      	ldr	r3, [pc, #28]	@ (800c3f4 <prvResetNextTaskUnblockTime+0x38>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	4a04      	ldr	r2, [pc, #16]	@ (800c3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3e6:	6013      	str	r3, [r2, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	2000125c 	.word	0x2000125c
 800c3f8:	200012c4 	.word	0x200012c4

0800c3fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c402:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <xTaskGetCurrentTaskHandle+0x1c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c408:	687b      	ldr	r3, [r7, #4]
	}
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	20000dd0 	.word	0x20000dd0

0800c41c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c422:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <xTaskGetSchedulerState+0x34>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d102      	bne.n	800c430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c42a:	2301      	movs	r3, #1
 800c42c:	607b      	str	r3, [r7, #4]
 800c42e:	e008      	b.n	800c442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c430:	4b08      	ldr	r3, [pc, #32]	@ (800c454 <xTaskGetSchedulerState+0x38>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d102      	bne.n	800c43e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c438:	2302      	movs	r3, #2
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	e001      	b.n	800c442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c442:	687b      	ldr	r3, [r7, #4]
	}
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	200012b0 	.word	0x200012b0
 800c454:	200012cc 	.word	0x200012cc

0800c458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d051      	beq.n	800c512 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c472:	4b2a      	ldr	r3, [pc, #168]	@ (800c51c <xTaskPriorityInherit+0xc4>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c478:	429a      	cmp	r2, r3
 800c47a:	d241      	bcs.n	800c500 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	2b00      	cmp	r3, #0
 800c482:	db06      	blt.n	800c492 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c484:	4b25      	ldr	r3, [pc, #148]	@ (800c51c <xTaskPriorityInherit+0xc4>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c48a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6959      	ldr	r1, [r3, #20]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c520 <xTaskPriorityInherit+0xc8>)
 800c4a4:	4413      	add	r3, r2
 800c4a6:	4299      	cmp	r1, r3
 800c4a8:	d122      	bne.n	800c4f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe f86c 	bl	800a58c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4b4:	4b19      	ldr	r3, [pc, #100]	@ (800c51c <xTaskPriorityInherit+0xc4>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c2:	4b18      	ldr	r3, [pc, #96]	@ (800c524 <xTaskPriorityInherit+0xcc>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d903      	bls.n	800c4d2 <xTaskPriorityInherit+0x7a>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ce:	4a15      	ldr	r2, [pc, #84]	@ (800c524 <xTaskPriorityInherit+0xcc>)
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4a10      	ldr	r2, [pc, #64]	@ (800c520 <xTaskPriorityInherit+0xc8>)
 800c4e0:	441a      	add	r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	f7fd fff2 	bl	800a4d2 <vListInsertEnd>
 800c4ee:	e004      	b.n	800c4fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c51c <xTaskPriorityInherit+0xc4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e008      	b.n	800c512 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c504:	4b05      	ldr	r3, [pc, #20]	@ (800c51c <xTaskPriorityInherit+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d201      	bcs.n	800c512 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c50e:	2301      	movs	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c512:	68fb      	ldr	r3, [r7, #12]
	}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20000dd0 	.word	0x20000dd0
 800c520:	20000dd4 	.word	0x20000dd4
 800c524:	200012ac 	.word	0x200012ac

0800c528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d058      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c53e:	4b2f      	ldr	r3, [pc, #188]	@ (800c5fc <xTaskPriorityDisinherit+0xd4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	429a      	cmp	r2, r3
 800c546:	d00b      	beq.n	800c560 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	60fb      	str	r3, [r7, #12]
}
 800c55a:	bf00      	nop
 800c55c:	bf00      	nop
 800c55e:	e7fd      	b.n	800c55c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10b      	bne.n	800c580 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	60bb      	str	r3, [r7, #8]
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	e7fd      	b.n	800c57c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c592:	429a      	cmp	r2, r3
 800c594:	d02c      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d128      	bne.n	800c5f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fd fff2 	bl	800a58c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c600 <xTaskPriorityDisinherit+0xd8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d903      	bls.n	800c5d0 <xTaskPriorityDisinherit+0xa8>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c600 <xTaskPriorityDisinherit+0xd8>)
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4a09      	ldr	r2, [pc, #36]	@ (800c604 <xTaskPriorityDisinherit+0xdc>)
 800c5de:	441a      	add	r2, r3
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	f7fd ff73 	bl	800a4d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5f0:	697b      	ldr	r3, [r7, #20]
	}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000dd0 	.word	0x20000dd0
 800c600:	200012ac 	.word	0x200012ac
 800c604:	20000dd4 	.word	0x20000dd4

0800c608 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c616:	2301      	movs	r3, #1
 800c618:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d06c      	beq.n	800c6fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10b      	bne.n	800c640 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	60fb      	str	r3, [r7, #12]
}
 800c63a:	bf00      	nop
 800c63c:	bf00      	nop
 800c63e:	e7fd      	b.n	800c63c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c644:	683a      	ldr	r2, [r7, #0]
 800c646:	429a      	cmp	r2, r3
 800c648:	d902      	bls.n	800c650 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	e002      	b.n	800c656 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c654:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c65a:	69fa      	ldr	r2, [r7, #28]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d04c      	beq.n	800c6fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	429a      	cmp	r2, r3
 800c668:	d147      	bne.n	800c6fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c66a:	4b26      	ldr	r3, [pc, #152]	@ (800c704 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	69ba      	ldr	r2, [r7, #24]
 800c670:	429a      	cmp	r2, r3
 800c672:	d10b      	bne.n	800c68c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	60bb      	str	r3, [r7, #8]
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	e7fd      	b.n	800c688 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	69fa      	ldr	r2, [r7, #28]
 800c696:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	db04      	blt.n	800c6aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	6959      	ldr	r1, [r3, #20]
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4a13      	ldr	r2, [pc, #76]	@ (800c708 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c6ba:	4413      	add	r3, r2
 800c6bc:	4299      	cmp	r1, r3
 800c6be:	d11c      	bne.n	800c6fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fd ff61 	bl	800a58c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c70c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d903      	bls.n	800c6de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6da:	4a0c      	ldr	r2, [pc, #48]	@ (800c70c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4a07      	ldr	r2, [pc, #28]	@ (800c708 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c6ec:	441a      	add	r2, r3
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f7fd feec 	bl	800a4d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6fa:	bf00      	nop
 800c6fc:	3720      	adds	r7, #32
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20000dd0 	.word	0x20000dd0
 800c708:	20000dd4 	.word	0x20000dd4
 800c70c:	200012ac 	.word	0x200012ac

0800c710 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c714:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <pvTaskIncrementMutexHeldCount+0x24>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d004      	beq.n	800c726 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c71c:	4b05      	ldr	r3, [pc, #20]	@ (800c734 <pvTaskIncrementMutexHeldCount+0x24>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c722:	3201      	adds	r2, #1
 800c724:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c726:	4b03      	ldr	r3, [pc, #12]	@ (800c734 <pvTaskIncrementMutexHeldCount+0x24>)
 800c728:	681b      	ldr	r3, [r3, #0]
	}
 800c72a:	4618      	mov	r0, r3
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	20000dd0 	.word	0x20000dd0

0800c738 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c742:	4b21      	ldr	r3, [pc, #132]	@ (800c7c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c748:	4b20      	ldr	r3, [pc, #128]	@ (800c7cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fd ff1c 	bl	800a58c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75a:	d10a      	bne.n	800c772 <prvAddCurrentTaskToDelayedList+0x3a>
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c762:	4b1a      	ldr	r3, [pc, #104]	@ (800c7cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3304      	adds	r3, #4
 800c768:	4619      	mov	r1, r3
 800c76a:	4819      	ldr	r0, [pc, #100]	@ (800c7d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c76c:	f7fd feb1 	bl	800a4d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c770:	e026      	b.n	800c7c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4413      	add	r3, r2
 800c778:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c77a:	4b14      	ldr	r3, [pc, #80]	@ (800c7cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	429a      	cmp	r2, r3
 800c788:	d209      	bcs.n	800c79e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c78a:	4b12      	ldr	r3, [pc, #72]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fd febf 	bl	800a51a <vListInsert>
}
 800c79c:	e010      	b.n	800c7c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c79e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	f7fd feb5 	bl	800a51a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c7dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d202      	bcs.n	800c7c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c7ba:	4a08      	ldr	r2, [pc, #32]	@ (800c7dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	6013      	str	r3, [r2, #0]
}
 800c7c0:	bf00      	nop
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	200012a8 	.word	0x200012a8
 800c7cc:	20000dd0 	.word	0x20000dd0
 800c7d0:	20001290 	.word	0x20001290
 800c7d4:	20001260 	.word	0x20001260
 800c7d8:	2000125c 	.word	0x2000125c
 800c7dc:	200012c4 	.word	0x200012c4

0800c7e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08a      	sub	sp, #40	@ 0x28
 800c7e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7ea:	f000 fb13 	bl	800ce14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c864 <xTimerCreateTimerTask+0x84>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d021      	beq.n	800c83a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7fe:	1d3a      	adds	r2, r7, #4
 800c800:	f107 0108 	add.w	r1, r7, #8
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd fe1b 	bl	800a444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	9202      	str	r2, [sp, #8]
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	2302      	movs	r3, #2
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	2300      	movs	r3, #0
 800c81e:	460a      	mov	r2, r1
 800c820:	4911      	ldr	r1, [pc, #68]	@ (800c868 <xTimerCreateTimerTask+0x88>)
 800c822:	4812      	ldr	r0, [pc, #72]	@ (800c86c <xTimerCreateTimerTask+0x8c>)
 800c824:	f7fe ffc0 	bl	800b7a8 <xTaskCreateStatic>
 800c828:	4603      	mov	r3, r0
 800c82a:	4a11      	ldr	r2, [pc, #68]	@ (800c870 <xTimerCreateTimerTask+0x90>)
 800c82c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c82e:	4b10      	ldr	r3, [pc, #64]	@ (800c870 <xTimerCreateTimerTask+0x90>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c836:	2301      	movs	r3, #1
 800c838:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10b      	bne.n	800c858 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	613b      	str	r3, [r7, #16]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c858:	697b      	ldr	r3, [r7, #20]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3718      	adds	r7, #24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	20001300 	.word	0x20001300
 800c868:	0800e1c0 	.word	0x0800e1c0
 800c86c:	0800c9ad 	.word	0x0800c9ad
 800c870:	20001304 	.word	0x20001304

0800c874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	@ 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c882:	2300      	movs	r3, #0
 800c884:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10b      	bne.n	800c8a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	623b      	str	r3, [r7, #32]
}
 800c89e:	bf00      	nop
 800c8a0:	bf00      	nop
 800c8a2:	e7fd      	b.n	800c8a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8a4:	4b19      	ldr	r3, [pc, #100]	@ (800c90c <xTimerGenericCommand+0x98>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d02a      	beq.n	800c902 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b05      	cmp	r3, #5
 800c8bc:	dc18      	bgt.n	800c8f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8be:	f7ff fdad 	bl	800c41c <xTaskGetSchedulerState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d109      	bne.n	800c8dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c8c8:	4b10      	ldr	r3, [pc, #64]	@ (800c90c <xTimerGenericCommand+0x98>)
 800c8ca:	6818      	ldr	r0, [r3, #0]
 800c8cc:	f107 0110 	add.w	r1, r7, #16
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8d4:	f7fe f8f0 	bl	800aab8 <xQueueGenericSend>
 800c8d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8da:	e012      	b.n	800c902 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c8dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c90c <xTimerGenericCommand+0x98>)
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	f107 0110 	add.w	r1, r7, #16
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f7fe f8e6 	bl	800aab8 <xQueueGenericSend>
 800c8ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8ee:	e008      	b.n	800c902 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c8f0:	4b06      	ldr	r3, [pc, #24]	@ (800c90c <xTimerGenericCommand+0x98>)
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	f107 0110 	add.w	r1, r7, #16
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	f7fe f9de 	bl	800acbc <xQueueGenericSendFromISR>
 800c900:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c904:	4618      	mov	r0, r3
 800c906:	3728      	adds	r7, #40	@ 0x28
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20001300 	.word	0x20001300

0800c910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af02      	add	r7, sp, #8
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c91a:	4b23      	ldr	r3, [pc, #140]	@ (800c9a8 <prvProcessExpiredTimer+0x98>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	3304      	adds	r3, #4
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fd fe2f 	bl	800a58c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d023      	beq.n	800c984 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	699a      	ldr	r2, [r3, #24]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	18d1      	adds	r1, r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	6978      	ldr	r0, [r7, #20]
 800c94a:	f000 f8d5 	bl	800caf8 <prvInsertTimerInActiveList>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d020      	beq.n	800c996 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c954:	2300      	movs	r3, #0
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	2300      	movs	r3, #0
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	2100      	movs	r1, #0
 800c95e:	6978      	ldr	r0, [r7, #20]
 800c960:	f7ff ff88 	bl	800c874 <xTimerGenericCommand>
 800c964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d114      	bne.n	800c996 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	60fb      	str	r3, [r7, #12]
}
 800c97e:	bf00      	nop
 800c980:	bf00      	nop
 800c982:	e7fd      	b.n	800c980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	6978      	ldr	r0, [r7, #20]
 800c99c:	4798      	blx	r3
}
 800c99e:	bf00      	nop
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	200012f8 	.word	0x200012f8

0800c9ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9b4:	f107 0308 	add.w	r3, r7, #8
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f859 	bl	800ca70 <prvGetNextExpireTime>
 800c9be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f805 	bl	800c9d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c9ca:	f000 f8d7 	bl	800cb7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9ce:	bf00      	nop
 800c9d0:	e7f0      	b.n	800c9b4 <prvTimerTask+0x8>
	...

0800c9d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c9de:	f7ff f927 	bl	800bc30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9e2:	f107 0308 	add.w	r3, r7, #8
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 f866 	bl	800cab8 <prvSampleTimeNow>
 800c9ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d130      	bne.n	800ca56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <prvProcessTimerOrBlockTask+0x3c>
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d806      	bhi.n	800ca10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca02:	f7ff f923 	bl	800bc4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca06:	68f9      	ldr	r1, [r7, #12]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff ff81 	bl	800c910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca0e:	e024      	b.n	800ca5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d008      	beq.n	800ca28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca16:	4b13      	ldr	r3, [pc, #76]	@ (800ca64 <prvProcessTimerOrBlockTask+0x90>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <prvProcessTimerOrBlockTask+0x50>
 800ca20:	2301      	movs	r3, #1
 800ca22:	e000      	b.n	800ca26 <prvProcessTimerOrBlockTask+0x52>
 800ca24:	2300      	movs	r3, #0
 800ca26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca28:	4b0f      	ldr	r3, [pc, #60]	@ (800ca68 <prvProcessTimerOrBlockTask+0x94>)
 800ca2a:	6818      	ldr	r0, [r3, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	683a      	ldr	r2, [r7, #0]
 800ca34:	4619      	mov	r1, r3
 800ca36:	f7fe fe83 	bl	800b740 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca3a:	f7ff f907 	bl	800bc4c <xTaskResumeAll>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca44:	4b09      	ldr	r3, [pc, #36]	@ (800ca6c <prvProcessTimerOrBlockTask+0x98>)
 800ca46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	f3bf 8f6f 	isb	sy
}
 800ca54:	e001      	b.n	800ca5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca56:	f7ff f8f9 	bl	800bc4c <xTaskResumeAll>
}
 800ca5a:	bf00      	nop
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	200012fc 	.word	0x200012fc
 800ca68:	20001300 	.word	0x20001300
 800ca6c:	e000ed04 	.word	0xe000ed04

0800ca70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca78:	4b0e      	ldr	r3, [pc, #56]	@ (800cab4 <prvGetNextExpireTime+0x44>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <prvGetNextExpireTime+0x16>
 800ca82:	2201      	movs	r2, #1
 800ca84:	e000      	b.n	800ca88 <prvGetNextExpireTime+0x18>
 800ca86:	2200      	movs	r2, #0
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d105      	bne.n	800caa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca94:	4b07      	ldr	r3, [pc, #28]	@ (800cab4 <prvGetNextExpireTime+0x44>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	e001      	b.n	800caa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800caa4:	68fb      	ldr	r3, [r7, #12]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	200012f8 	.word	0x200012f8

0800cab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cac0:	f7ff f962 	bl	800bd88 <xTaskGetTickCount>
 800cac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cac6:	4b0b      	ldr	r3, [pc, #44]	@ (800caf4 <prvSampleTimeNow+0x3c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d205      	bcs.n	800cadc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cad0:	f000 f93a 	bl	800cd48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	e002      	b.n	800cae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cae2:	4a04      	ldr	r2, [pc, #16]	@ (800caf4 <prvSampleTimeNow+0x3c>)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cae8:	68fb      	ldr	r3, [r7, #12]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	20001308 	.word	0x20001308

0800caf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb06:	2300      	movs	r3, #0
 800cb08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d812      	bhi.n	800cb44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d302      	bcc.n	800cb32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	617b      	str	r3, [r7, #20]
 800cb30:	e01b      	b.n	800cb6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb32:	4b10      	ldr	r3, [pc, #64]	@ (800cb74 <prvInsertTimerInActiveList+0x7c>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3304      	adds	r3, #4
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	f7fd fcec 	bl	800a51a <vListInsert>
 800cb42:	e012      	b.n	800cb6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d206      	bcs.n	800cb5a <prvInsertTimerInActiveList+0x62>
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d302      	bcc.n	800cb5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb54:	2301      	movs	r3, #1
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	e007      	b.n	800cb6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb5a:	4b07      	ldr	r3, [pc, #28]	@ (800cb78 <prvInsertTimerInActiveList+0x80>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4619      	mov	r1, r3
 800cb64:	4610      	mov	r0, r2
 800cb66:	f7fd fcd8 	bl	800a51a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb6a:	697b      	ldr	r3, [r7, #20]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	200012fc 	.word	0x200012fc
 800cb78:	200012f8 	.word	0x200012f8

0800cb7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08e      	sub	sp, #56	@ 0x38
 800cb80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb82:	e0ce      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	da19      	bge.n	800cbbe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb8a:	1d3b      	adds	r3, r7, #4
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10b      	bne.n	800cbae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	61fb      	str	r3, [r7, #28]
}
 800cba8:	bf00      	nop
 800cbaa:	bf00      	nop
 800cbac:	e7fd      	b.n	800cbaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbb4:	6850      	ldr	r0, [r2, #4]
 800cbb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbb8:	6892      	ldr	r2, [r2, #8]
 800cbba:	4611      	mov	r1, r2
 800cbbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f2c0 80ae 	blt.w	800cd22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fd fcd8 	bl	800a58c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbdc:	463b      	mov	r3, r7
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff ff6a 	bl	800cab8 <prvSampleTimeNow>
 800cbe4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b09      	cmp	r3, #9
 800cbea:	f200 8097 	bhi.w	800cd1c <prvProcessReceivedCommands+0x1a0>
 800cbee:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf4 <prvProcessReceivedCommands+0x78>)
 800cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf4:	0800cc1d 	.word	0x0800cc1d
 800cbf8:	0800cc1d 	.word	0x0800cc1d
 800cbfc:	0800cc1d 	.word	0x0800cc1d
 800cc00:	0800cc93 	.word	0x0800cc93
 800cc04:	0800cca7 	.word	0x0800cca7
 800cc08:	0800ccf3 	.word	0x0800ccf3
 800cc0c:	0800cc1d 	.word	0x0800cc1d
 800cc10:	0800cc1d 	.word	0x0800cc1d
 800cc14:	0800cc93 	.word	0x0800cc93
 800cc18:	0800cca7 	.word	0x0800cca7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc22:	f043 0301 	orr.w	r3, r3, #1
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	18d1      	adds	r1, r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc3c:	f7ff ff5c 	bl	800caf8 <prvInsertTimerInActiveList>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d06c      	beq.n	800cd20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d061      	beq.n	800cd20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	441a      	add	r2, r3
 800cc64:	2300      	movs	r3, #0
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc6e:	f7ff fe01 	bl	800c874 <xTimerGenericCommand>
 800cc72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d152      	bne.n	800cd20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	61bb      	str	r3, [r7, #24]
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	e7fd      	b.n	800cc8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc98:	f023 0301 	bic.w	r3, r3, #1
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cca4:	e03d      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccac:	f043 0301 	orr.w	r3, r3, #1
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ccbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	617b      	str	r3, [r7, #20]
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	e7fd      	b.n	800ccda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ccde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce0:	699a      	ldr	r2, [r3, #24]
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	18d1      	adds	r1, r2, r3
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccec:	f7ff ff04 	bl	800caf8 <prvInsertTimerInActiveList>
					break;
 800ccf0:	e017      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ccf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccf8:	f003 0302 	and.w	r3, r3, #2
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d103      	bne.n	800cd08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cd00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd02:	f000 fbe9 	bl	800d4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd06:	e00c      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cd1a:	e002      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cd1c:	bf00      	nop
 800cd1e:	e000      	b.n	800cd22 <prvProcessReceivedCommands+0x1a6>
					break;
 800cd20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd22:	4b08      	ldr	r3, [pc, #32]	@ (800cd44 <prvProcessReceivedCommands+0x1c8>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	1d39      	adds	r1, r7, #4
 800cd28:	2200      	movs	r2, #0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe f8f4 	bl	800af18 <xQueueReceive>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f47f af26 	bne.w	800cb84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd38:	bf00      	nop
 800cd3a:	bf00      	nop
 800cd3c:	3730      	adds	r7, #48	@ 0x30
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20001300 	.word	0x20001300

0800cd48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b088      	sub	sp, #32
 800cd4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd4e:	e049      	b.n	800cde4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd50:	4b2e      	ldr	r3, [pc, #184]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3304      	adds	r3, #4
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fd fc0f 	bl	800a58c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d02f      	beq.n	800cde4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d90e      	bls.n	800cdb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cda2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4610      	mov	r0, r2
 800cdae:	f7fd fbb4 	bl	800a51a <vListInsert>
 800cdb2:	e017      	b.n	800cde4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7ff fd58 	bl	800c874 <xTimerGenericCommand>
 800cdc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10b      	bne.n	800cde4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	603b      	str	r3, [r7, #0]
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	e7fd      	b.n	800cde0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cde4:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1b0      	bne.n	800cd50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cdee:	4b07      	ldr	r3, [pc, #28]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdf4:	4b06      	ldr	r3, [pc, #24]	@ (800ce10 <prvSwitchTimerLists+0xc8>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a04      	ldr	r2, [pc, #16]	@ (800ce0c <prvSwitchTimerLists+0xc4>)
 800cdfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdfc:	4a04      	ldr	r2, [pc, #16]	@ (800ce10 <prvSwitchTimerLists+0xc8>)
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	6013      	str	r3, [r2, #0]
}
 800ce02:	bf00      	nop
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	200012f8 	.word	0x200012f8
 800ce10:	200012fc 	.word	0x200012fc

0800ce14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce1a:	f000 f96d 	bl	800d0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce1e:	4b15      	ldr	r3, [pc, #84]	@ (800ce74 <prvCheckForValidListAndQueue+0x60>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d120      	bne.n	800ce68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce26:	4814      	ldr	r0, [pc, #80]	@ (800ce78 <prvCheckForValidListAndQueue+0x64>)
 800ce28:	f7fd fb26 	bl	800a478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce2c:	4813      	ldr	r0, [pc, #76]	@ (800ce7c <prvCheckForValidListAndQueue+0x68>)
 800ce2e:	f7fd fb23 	bl	800a478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce32:	4b13      	ldr	r3, [pc, #76]	@ (800ce80 <prvCheckForValidListAndQueue+0x6c>)
 800ce34:	4a10      	ldr	r2, [pc, #64]	@ (800ce78 <prvCheckForValidListAndQueue+0x64>)
 800ce36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce38:	4b12      	ldr	r3, [pc, #72]	@ (800ce84 <prvCheckForValidListAndQueue+0x70>)
 800ce3a:	4a10      	ldr	r2, [pc, #64]	@ (800ce7c <prvCheckForValidListAndQueue+0x68>)
 800ce3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	4b11      	ldr	r3, [pc, #68]	@ (800ce88 <prvCheckForValidListAndQueue+0x74>)
 800ce44:	4a11      	ldr	r2, [pc, #68]	@ (800ce8c <prvCheckForValidListAndQueue+0x78>)
 800ce46:	2110      	movs	r1, #16
 800ce48:	200a      	movs	r0, #10
 800ce4a:	f7fd fc33 	bl	800a6b4 <xQueueGenericCreateStatic>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4a08      	ldr	r2, [pc, #32]	@ (800ce74 <prvCheckForValidListAndQueue+0x60>)
 800ce52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce54:	4b07      	ldr	r3, [pc, #28]	@ (800ce74 <prvCheckForValidListAndQueue+0x60>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce5c:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <prvCheckForValidListAndQueue+0x60>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	490b      	ldr	r1, [pc, #44]	@ (800ce90 <prvCheckForValidListAndQueue+0x7c>)
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fc18 	bl	800b698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce68:	f000 f978 	bl	800d15c <vPortExitCritical>
}
 800ce6c:	bf00      	nop
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20001300 	.word	0x20001300
 800ce78:	200012d0 	.word	0x200012d0
 800ce7c:	200012e4 	.word	0x200012e4
 800ce80:	200012f8 	.word	0x200012f8
 800ce84:	200012fc 	.word	0x200012fc
 800ce88:	200013ac 	.word	0x200013ac
 800ce8c:	2000130c 	.word	0x2000130c
 800ce90:	0800e1c8 	.word	0x0800e1c8

0800ce94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3b04      	subs	r3, #4
 800cea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ceac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3b04      	subs	r3, #4
 800ceb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f023 0201 	bic.w	r2, r3, #1
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3b04      	subs	r3, #4
 800cec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cec4:	4a0c      	ldr	r2, [pc, #48]	@ (800cef8 <pxPortInitialiseStack+0x64>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3b14      	subs	r3, #20
 800cece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3b04      	subs	r3, #4
 800ceda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f06f 0202 	mvn.w	r2, #2
 800cee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3b20      	subs	r3, #32
 800cee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ceea:	68fb      	ldr	r3, [r7, #12]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	0800cefd 	.word	0x0800cefd

0800cefc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf06:	4b13      	ldr	r3, [pc, #76]	@ (800cf54 <prvTaskExitError+0x58>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0e:	d00b      	beq.n	800cf28 <prvTaskExitError+0x2c>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	60fb      	str	r3, [r7, #12]
}
 800cf22:	bf00      	nop
 800cf24:	bf00      	nop
 800cf26:	e7fd      	b.n	800cf24 <prvTaskExitError+0x28>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	60bb      	str	r3, [r7, #8]
}
 800cf3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf3c:	bf00      	nop
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0fc      	beq.n	800cf3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	2000000c 	.word	0x2000000c
	...

0800cf60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf60:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <pxCurrentTCBConst2>)
 800cf62:	6819      	ldr	r1, [r3, #0]
 800cf64:	6808      	ldr	r0, [r1, #0]
 800cf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	f380 8809 	msr	PSP, r0
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f380 8811 	msr	BASEPRI, r0
 800cf7a:	4770      	bx	lr
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst2>:
 800cf80:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop

0800cf88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf88:	4808      	ldr	r0, [pc, #32]	@ (800cfac <prvPortStartFirstTask+0x24>)
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	6800      	ldr	r0, [r0, #0]
 800cf8e:	f380 8808 	msr	MSP, r0
 800cf92:	f04f 0000 	mov.w	r0, #0
 800cf96:	f380 8814 	msr	CONTROL, r0
 800cf9a:	b662      	cpsie	i
 800cf9c:	b661      	cpsie	f
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	df00      	svc	0
 800cfa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfaa:	bf00      	nop
 800cfac:	e000ed08 	.word	0xe000ed08

0800cfb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfb6:	4b47      	ldr	r3, [pc, #284]	@ (800d0d4 <xPortStartScheduler+0x124>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a47      	ldr	r2, [pc, #284]	@ (800d0d8 <xPortStartScheduler+0x128>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d10b      	bne.n	800cfd8 <xPortStartScheduler+0x28>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	60fb      	str	r3, [r7, #12]
}
 800cfd2:	bf00      	nop
 800cfd4:	bf00      	nop
 800cfd6:	e7fd      	b.n	800cfd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cfd8:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d4 <xPortStartScheduler+0x124>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a3f      	ldr	r2, [pc, #252]	@ (800d0dc <xPortStartScheduler+0x12c>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d10b      	bne.n	800cffa <xPortStartScheduler+0x4a>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	613b      	str	r3, [r7, #16]
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	e7fd      	b.n	800cff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cffa:	4b39      	ldr	r3, [pc, #228]	@ (800d0e0 <xPortStartScheduler+0x130>)
 800cffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	b2db      	uxtb	r3, r3
 800d004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	22ff      	movs	r2, #255	@ 0xff
 800d00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d014:	78fb      	ldrb	r3, [r7, #3]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	4b31      	ldr	r3, [pc, #196]	@ (800d0e4 <xPortStartScheduler+0x134>)
 800d020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d022:	4b31      	ldr	r3, [pc, #196]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d024:	2207      	movs	r2, #7
 800d026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d028:	e009      	b.n	800d03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d02a:	4b2f      	ldr	r3, [pc, #188]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3b01      	subs	r3, #1
 800d030:	4a2d      	ldr	r2, [pc, #180]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	b2db      	uxtb	r3, r3
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	b2db      	uxtb	r3, r3
 800d042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d046:	2b80      	cmp	r3, #128	@ 0x80
 800d048:	d0ef      	beq.n	800d02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d04a:	4b27      	ldr	r3, [pc, #156]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f1c3 0307 	rsb	r3, r3, #7
 800d052:	2b04      	cmp	r3, #4
 800d054:	d00b      	beq.n	800d06e <xPortStartScheduler+0xbe>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	60bb      	str	r3, [r7, #8]
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	e7fd      	b.n	800d06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d06e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	021b      	lsls	r3, r3, #8
 800d074:	4a1c      	ldr	r2, [pc, #112]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d078:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d080:	4a19      	ldr	r2, [pc, #100]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	b2da      	uxtb	r2, r3
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d08c:	4b17      	ldr	r3, [pc, #92]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a16      	ldr	r2, [pc, #88]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d098:	4b14      	ldr	r3, [pc, #80]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a13      	ldr	r2, [pc, #76]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0a4:	f000 f8da 	bl	800d25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0a8:	4b11      	ldr	r3, [pc, #68]	@ (800d0f0 <xPortStartScheduler+0x140>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0ae:	f000 f8f9 	bl	800d2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0b2:	4b10      	ldr	r3, [pc, #64]	@ (800d0f4 <xPortStartScheduler+0x144>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f4 <xPortStartScheduler+0x144>)
 800d0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0be:	f7ff ff63 	bl	800cf88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0c2:	f7fe ff2b 	bl	800bf1c <vTaskSwitchContext>
	prvTaskExitError();
 800d0c6:	f7ff ff19 	bl	800cefc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	e000ed00 	.word	0xe000ed00
 800d0d8:	410fc271 	.word	0x410fc271
 800d0dc:	410fc270 	.word	0x410fc270
 800d0e0:	e000e400 	.word	0xe000e400
 800d0e4:	200013fc 	.word	0x200013fc
 800d0e8:	20001400 	.word	0x20001400
 800d0ec:	e000ed20 	.word	0xe000ed20
 800d0f0:	2000000c 	.word	0x2000000c
 800d0f4:	e000ef34 	.word	0xe000ef34

0800d0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	607b      	str	r3, [r7, #4]
}
 800d110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d112:	4b10      	ldr	r3, [pc, #64]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3301      	adds	r3, #1
 800d118:	4a0e      	ldr	r2, [pc, #56]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d11c:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d110      	bne.n	800d146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d124:	4b0c      	ldr	r3, [pc, #48]	@ (800d158 <vPortEnterCritical+0x60>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00b      	beq.n	800d146 <vPortEnterCritical+0x4e>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	603b      	str	r3, [r7, #0]
}
 800d140:	bf00      	nop
 800d142:	bf00      	nop
 800d144:	e7fd      	b.n	800d142 <vPortEnterCritical+0x4a>
	}
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	2000000c 	.word	0x2000000c
 800d158:	e000ed04 	.word	0xe000ed04

0800d15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d162:	4b12      	ldr	r3, [pc, #72]	@ (800d1ac <vPortExitCritical+0x50>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10b      	bne.n	800d182 <vPortExitCritical+0x26>
	__asm volatile
 800d16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	607b      	str	r3, [r7, #4]
}
 800d17c:	bf00      	nop
 800d17e:	bf00      	nop
 800d180:	e7fd      	b.n	800d17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d182:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ac <vPortExitCritical+0x50>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3b01      	subs	r3, #1
 800d188:	4a08      	ldr	r2, [pc, #32]	@ (800d1ac <vPortExitCritical+0x50>)
 800d18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d18c:	4b07      	ldr	r3, [pc, #28]	@ (800d1ac <vPortExitCritical+0x50>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d105      	bne.n	800d1a0 <vPortExitCritical+0x44>
 800d194:	2300      	movs	r3, #0
 800d196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	f383 8811 	msr	BASEPRI, r3
}
 800d19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	2000000c 	.word	0x2000000c

0800d1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1b0:	f3ef 8009 	mrs	r0, PSP
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	4b15      	ldr	r3, [pc, #84]	@ (800d210 <pxCurrentTCBConst>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	f01e 0f10 	tst.w	lr, #16
 800d1c0:	bf08      	it	eq
 800d1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ca:	6010      	str	r0, [r2, #0]
 800d1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d1d4:	f380 8811 	msr	BASEPRI, r0
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f7fe fe9c 	bl	800bf1c <vTaskSwitchContext>
 800d1e4:	f04f 0000 	mov.w	r0, #0
 800d1e8:	f380 8811 	msr	BASEPRI, r0
 800d1ec:	bc09      	pop	{r0, r3}
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	6808      	ldr	r0, [r1, #0]
 800d1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f6:	f01e 0f10 	tst.w	lr, #16
 800d1fa:	bf08      	it	eq
 800d1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d200:	f380 8809 	msr	PSP, r0
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	f3af 8000 	nop.w

0800d210 <pxCurrentTCBConst>:
 800d210:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop

0800d218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	607b      	str	r3, [r7, #4]
}
 800d230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d232:	f7fe fdb9 	bl	800bda8 <xTaskIncrementTick>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d23c:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <xPortSysTickHandler+0x40>)
 800d23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	2300      	movs	r3, #0
 800d246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	f383 8811 	msr	BASEPRI, r3
}
 800d24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	e000ed04 	.word	0xe000ed04

0800d25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d25c:	b480      	push	{r7}
 800d25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d260:	4b0b      	ldr	r3, [pc, #44]	@ (800d290 <vPortSetupTimerInterrupt+0x34>)
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d266:	4b0b      	ldr	r3, [pc, #44]	@ (800d294 <vPortSetupTimerInterrupt+0x38>)
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d26c:	4b0a      	ldr	r3, [pc, #40]	@ (800d298 <vPortSetupTimerInterrupt+0x3c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0a      	ldr	r2, [pc, #40]	@ (800d29c <vPortSetupTimerInterrupt+0x40>)
 800d272:	fba2 2303 	umull	r2, r3, r2, r3
 800d276:	099b      	lsrs	r3, r3, #6
 800d278:	4a09      	ldr	r2, [pc, #36]	@ (800d2a0 <vPortSetupTimerInterrupt+0x44>)
 800d27a:	3b01      	subs	r3, #1
 800d27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d27e:	4b04      	ldr	r3, [pc, #16]	@ (800d290 <vPortSetupTimerInterrupt+0x34>)
 800d280:	2207      	movs	r2, #7
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	e000e010 	.word	0xe000e010
 800d294:	e000e018 	.word	0xe000e018
 800d298:	20000000 	.word	0x20000000
 800d29c:	10624dd3 	.word	0x10624dd3
 800d2a0:	e000e014 	.word	0xe000e014

0800d2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d2b4 <vPortEnableVFP+0x10>
 800d2a8:	6801      	ldr	r1, [r0, #0]
 800d2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d2ae:	6001      	str	r1, [r0, #0]
 800d2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2b2:	bf00      	nop
 800d2b4:	e000ed88 	.word	0xe000ed88

0800d2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2be:	f3ef 8305 	mrs	r3, IPSR
 800d2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b0f      	cmp	r3, #15
 800d2c8:	d915      	bls.n	800d2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2ca:	4a18      	ldr	r2, [pc, #96]	@ (800d32c <vPortValidateInterruptPriority+0x74>)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2d4:	4b16      	ldr	r3, [pc, #88]	@ (800d330 <vPortValidateInterruptPriority+0x78>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	7afa      	ldrb	r2, [r7, #11]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d20b      	bcs.n	800d2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	607b      	str	r3, [r7, #4]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d334 <vPortValidateInterruptPriority+0x7c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d338 <vPortValidateInterruptPriority+0x80>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	429a      	cmp	r2, r3
 800d304:	d90b      	bls.n	800d31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	603b      	str	r3, [r7, #0]
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	e7fd      	b.n	800d31a <vPortValidateInterruptPriority+0x62>
	}
 800d31e:	bf00      	nop
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	e000e3f0 	.word	0xe000e3f0
 800d330:	200013fc 	.word	0x200013fc
 800d334:	e000ed0c 	.word	0xe000ed0c
 800d338:	20001400 	.word	0x20001400

0800d33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	@ 0x28
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d344:	2300      	movs	r3, #0
 800d346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d348:	f7fe fc72 	bl	800bc30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d34c:	4b5c      	ldr	r3, [pc, #368]	@ (800d4c0 <pvPortMalloc+0x184>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d354:	f000 f924 	bl	800d5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d358:	4b5a      	ldr	r3, [pc, #360]	@ (800d4c4 <pvPortMalloc+0x188>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4013      	ands	r3, r2
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 8095 	bne.w	800d490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01e      	beq.n	800d3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d36c:	2208      	movs	r2, #8
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d015      	beq.n	800d3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f023 0307 	bic.w	r3, r3, #7
 800d384:	3308      	adds	r3, #8
 800d386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00b      	beq.n	800d3aa <pvPortMalloc+0x6e>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	617b      	str	r3, [r7, #20]
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	e7fd      	b.n	800d3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d06f      	beq.n	800d490 <pvPortMalloc+0x154>
 800d3b0:	4b45      	ldr	r3, [pc, #276]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d86a      	bhi.n	800d490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3ba:	4b44      	ldr	r3, [pc, #272]	@ (800d4cc <pvPortMalloc+0x190>)
 800d3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3be:	4b43      	ldr	r3, [pc, #268]	@ (800d4cc <pvPortMalloc+0x190>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3c4:	e004      	b.n	800d3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d903      	bls.n	800d3e2 <pvPortMalloc+0xa6>
 800d3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1f1      	bne.n	800d3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3e2:	4b37      	ldr	r3, [pc, #220]	@ (800d4c0 <pvPortMalloc+0x184>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d051      	beq.n	800d490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	4413      	add	r3, r2
 800d3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	6a3b      	ldr	r3, [r7, #32]
 800d3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	1ad2      	subs	r2, r2, r3
 800d406:	2308      	movs	r3, #8
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d920      	bls.n	800d450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4413      	add	r3, r2
 800d414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	f003 0307 	and.w	r3, r3, #7
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <pvPortMalloc+0xfc>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	613b      	str	r3, [r7, #16]
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	1ad2      	subs	r2, r2, r3
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d44a:	69b8      	ldr	r0, [r7, #24]
 800d44c:	f000 f90a 	bl	800d664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d450:	4b1d      	ldr	r3, [pc, #116]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	4a1b      	ldr	r2, [pc, #108]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d45e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d0 <pvPortMalloc+0x194>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d203      	bcs.n	800d472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d46a:	4b17      	ldr	r3, [pc, #92]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a18      	ldr	r2, [pc, #96]	@ (800d4d0 <pvPortMalloc+0x194>)
 800d470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	4b13      	ldr	r3, [pc, #76]	@ (800d4c4 <pvPortMalloc+0x188>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d486:	4b13      	ldr	r3, [pc, #76]	@ (800d4d4 <pvPortMalloc+0x198>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3301      	adds	r3, #1
 800d48c:	4a11      	ldr	r2, [pc, #68]	@ (800d4d4 <pvPortMalloc+0x198>)
 800d48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d490:	f7fe fbdc 	bl	800bc4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00b      	beq.n	800d4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	60fb      	str	r3, [r7, #12]
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	e7fd      	b.n	800d4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3728      	adds	r7, #40	@ 0x28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	2000500c 	.word	0x2000500c
 800d4c4:	20005020 	.word	0x20005020
 800d4c8:	20005010 	.word	0x20005010
 800d4cc:	20005004 	.word	0x20005004
 800d4d0:	20005014 	.word	0x20005014
 800d4d4:	20005018 	.word	0x20005018

0800d4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d04f      	beq.n	800d58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d4ea:	2308      	movs	r3, #8
 800d4ec:	425b      	negs	r3, r3
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	4b25      	ldr	r3, [pc, #148]	@ (800d594 <vPortFree+0xbc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4013      	ands	r3, r2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10b      	bne.n	800d51e <vPortFree+0x46>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	60fb      	str	r3, [r7, #12]
}
 800d518:	bf00      	nop
 800d51a:	bf00      	nop
 800d51c:	e7fd      	b.n	800d51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00b      	beq.n	800d53e <vPortFree+0x66>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	60bb      	str	r3, [r7, #8]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <vPortFree+0xbc>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4013      	ands	r3, r2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01e      	beq.n	800d58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d11a      	bne.n	800d58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <vPortFree+0xbc>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	43db      	mvns	r3, r3
 800d55e:	401a      	ands	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d564:	f7fe fb64 	bl	800bc30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <vPortFree+0xc0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4413      	add	r3, r2
 800d572:	4a09      	ldr	r2, [pc, #36]	@ (800d598 <vPortFree+0xc0>)
 800d574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d576:	6938      	ldr	r0, [r7, #16]
 800d578:	f000 f874 	bl	800d664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d57c:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <vPortFree+0xc4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	4a06      	ldr	r2, [pc, #24]	@ (800d59c <vPortFree+0xc4>)
 800d584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d586:	f7fe fb61 	bl	800bc4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d58a:	bf00      	nop
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20005020 	.word	0x20005020
 800d598:	20005010 	.word	0x20005010
 800d59c:	2000501c 	.word	0x2000501c

0800d5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d5aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5ac:	4b27      	ldr	r3, [pc, #156]	@ (800d64c <prvHeapInit+0xac>)
 800d5ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00c      	beq.n	800d5d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3307      	adds	r3, #7
 800d5be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f023 0307 	bic.w	r3, r3, #7
 800d5c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d64c <prvHeapInit+0xac>)
 800d5d0:	4413      	add	r3, r2
 800d5d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d650 <prvHeapInit+0xb0>)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5de:	4b1c      	ldr	r3, [pc, #112]	@ (800d650 <prvHeapInit+0xb0>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5ec:	2208      	movs	r2, #8
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0307 	bic.w	r3, r3, #7
 800d5fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4a15      	ldr	r2, [pc, #84]	@ (800d654 <prvHeapInit+0xb4>)
 800d600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d602:	4b14      	ldr	r3, [pc, #80]	@ (800d654 <prvHeapInit+0xb4>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2200      	movs	r2, #0
 800d608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d60a:	4b12      	ldr	r3, [pc, #72]	@ (800d654 <prvHeapInit+0xb4>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2200      	movs	r2, #0
 800d610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	1ad2      	subs	r2, r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d620:	4b0c      	ldr	r3, [pc, #48]	@ (800d654 <prvHeapInit+0xb4>)
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	4a0a      	ldr	r2, [pc, #40]	@ (800d658 <prvHeapInit+0xb8>)
 800d62e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	4a09      	ldr	r2, [pc, #36]	@ (800d65c <prvHeapInit+0xbc>)
 800d636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d638:	4b09      	ldr	r3, [pc, #36]	@ (800d660 <prvHeapInit+0xc0>)
 800d63a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d63e:	601a      	str	r2, [r3, #0]
}
 800d640:	bf00      	nop
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	20001404 	.word	0x20001404
 800d650:	20005004 	.word	0x20005004
 800d654:	2000500c 	.word	0x2000500c
 800d658:	20005014 	.word	0x20005014
 800d65c:	20005010 	.word	0x20005010
 800d660:	20005020 	.word	0x20005020

0800d664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d66c:	4b28      	ldr	r3, [pc, #160]	@ (800d710 <prvInsertBlockIntoFreeList+0xac>)
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	e002      	b.n	800d678 <prvInsertBlockIntoFreeList+0x14>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d8f7      	bhi.n	800d672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	4413      	add	r3, r2
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d108      	bne.n	800d6a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	441a      	add	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d118      	bne.n	800d6ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b15      	ldr	r3, [pc, #84]	@ (800d714 <prvInsertBlockIntoFreeList+0xb0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d00d      	beq.n	800d6e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	685a      	ldr	r2, [r3, #4]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	441a      	add	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e008      	b.n	800d6f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d714 <prvInsertBlockIntoFreeList+0xb0>)
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	601a      	str	r2, [r3, #0]
 800d6ea:	e003      	b.n	800d6f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6f4:	68fa      	ldr	r2, [r7, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d002      	beq.n	800d702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d702:	bf00      	nop
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	20005004 	.word	0x20005004
 800d714:	2000500c 	.word	0x2000500c

0800d718 <_vsniprintf_r>:
 800d718:	b530      	push	{r4, r5, lr}
 800d71a:	4614      	mov	r4, r2
 800d71c:	2c00      	cmp	r4, #0
 800d71e:	b09b      	sub	sp, #108	@ 0x6c
 800d720:	4605      	mov	r5, r0
 800d722:	461a      	mov	r2, r3
 800d724:	da05      	bge.n	800d732 <_vsniprintf_r+0x1a>
 800d726:	238b      	movs	r3, #139	@ 0x8b
 800d728:	6003      	str	r3, [r0, #0]
 800d72a:	f04f 30ff 	mov.w	r0, #4294967295
 800d72e:	b01b      	add	sp, #108	@ 0x6c
 800d730:	bd30      	pop	{r4, r5, pc}
 800d732:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d736:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	9319      	str	r3, [sp, #100]	@ 0x64
 800d740:	bf14      	ite	ne
 800d742:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d746:	4623      	moveq	r3, r4
 800d748:	9302      	str	r3, [sp, #8]
 800d74a:	9305      	str	r3, [sp, #20]
 800d74c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d750:	9100      	str	r1, [sp, #0]
 800d752:	9104      	str	r1, [sp, #16]
 800d754:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d758:	4669      	mov	r1, sp
 800d75a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d75c:	f000 f9ae 	bl	800dabc <_svfiprintf_r>
 800d760:	1c43      	adds	r3, r0, #1
 800d762:	bfbc      	itt	lt
 800d764:	238b      	movlt	r3, #139	@ 0x8b
 800d766:	602b      	strlt	r3, [r5, #0]
 800d768:	2c00      	cmp	r4, #0
 800d76a:	d0e0      	beq.n	800d72e <_vsniprintf_r+0x16>
 800d76c:	9b00      	ldr	r3, [sp, #0]
 800d76e:	2200      	movs	r2, #0
 800d770:	701a      	strb	r2, [r3, #0]
 800d772:	e7dc      	b.n	800d72e <_vsniprintf_r+0x16>

0800d774 <vsniprintf>:
 800d774:	b507      	push	{r0, r1, r2, lr}
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	4613      	mov	r3, r2
 800d77a:	460a      	mov	r2, r1
 800d77c:	4601      	mov	r1, r0
 800d77e:	4803      	ldr	r0, [pc, #12]	@ (800d78c <vsniprintf+0x18>)
 800d780:	6800      	ldr	r0, [r0, #0]
 800d782:	f7ff ffc9 	bl	800d718 <_vsniprintf_r>
 800d786:	b003      	add	sp, #12
 800d788:	f85d fb04 	ldr.w	pc, [sp], #4
 800d78c:	20000010 	.word	0x20000010

0800d790 <memset>:
 800d790:	4402      	add	r2, r0
 800d792:	4603      	mov	r3, r0
 800d794:	4293      	cmp	r3, r2
 800d796:	d100      	bne.n	800d79a <memset+0xa>
 800d798:	4770      	bx	lr
 800d79a:	f803 1b01 	strb.w	r1, [r3], #1
 800d79e:	e7f9      	b.n	800d794 <memset+0x4>

0800d7a0 <__errno>:
 800d7a0:	4b01      	ldr	r3, [pc, #4]	@ (800d7a8 <__errno+0x8>)
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	20000010 	.word	0x20000010

0800d7ac <__libc_init_array>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	4d0d      	ldr	r5, [pc, #52]	@ (800d7e4 <__libc_init_array+0x38>)
 800d7b0:	4c0d      	ldr	r4, [pc, #52]	@ (800d7e8 <__libc_init_array+0x3c>)
 800d7b2:	1b64      	subs	r4, r4, r5
 800d7b4:	10a4      	asrs	r4, r4, #2
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	42a6      	cmp	r6, r4
 800d7ba:	d109      	bne.n	800d7d0 <__libc_init_array+0x24>
 800d7bc:	4d0b      	ldr	r5, [pc, #44]	@ (800d7ec <__libc_init_array+0x40>)
 800d7be:	4c0c      	ldr	r4, [pc, #48]	@ (800d7f0 <__libc_init_array+0x44>)
 800d7c0:	f000 fc64 	bl	800e08c <_init>
 800d7c4:	1b64      	subs	r4, r4, r5
 800d7c6:	10a4      	asrs	r4, r4, #2
 800d7c8:	2600      	movs	r6, #0
 800d7ca:	42a6      	cmp	r6, r4
 800d7cc:	d105      	bne.n	800d7da <__libc_init_array+0x2e>
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7d4:	4798      	blx	r3
 800d7d6:	3601      	adds	r6, #1
 800d7d8:	e7ee      	b.n	800d7b8 <__libc_init_array+0xc>
 800d7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7de:	4798      	blx	r3
 800d7e0:	3601      	adds	r6, #1
 800d7e2:	e7f2      	b.n	800d7ca <__libc_init_array+0x1e>
 800d7e4:	0800e36c 	.word	0x0800e36c
 800d7e8:	0800e36c 	.word	0x0800e36c
 800d7ec:	0800e36c 	.word	0x0800e36c
 800d7f0:	0800e370 	.word	0x0800e370

0800d7f4 <__retarget_lock_acquire_recursive>:
 800d7f4:	4770      	bx	lr

0800d7f6 <__retarget_lock_release_recursive>:
 800d7f6:	4770      	bx	lr

0800d7f8 <memcpy>:
 800d7f8:	440a      	add	r2, r1
 800d7fa:	4291      	cmp	r1, r2
 800d7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d800:	d100      	bne.n	800d804 <memcpy+0xc>
 800d802:	4770      	bx	lr
 800d804:	b510      	push	{r4, lr}
 800d806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d80e:	4291      	cmp	r1, r2
 800d810:	d1f9      	bne.n	800d806 <memcpy+0xe>
 800d812:	bd10      	pop	{r4, pc}

0800d814 <_free_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4605      	mov	r5, r0
 800d818:	2900      	cmp	r1, #0
 800d81a:	d041      	beq.n	800d8a0 <_free_r+0x8c>
 800d81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d820:	1f0c      	subs	r4, r1, #4
 800d822:	2b00      	cmp	r3, #0
 800d824:	bfb8      	it	lt
 800d826:	18e4      	addlt	r4, r4, r3
 800d828:	f000 f8e0 	bl	800d9ec <__malloc_lock>
 800d82c:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a4 <_free_r+0x90>)
 800d82e:	6813      	ldr	r3, [r2, #0]
 800d830:	b933      	cbnz	r3, 800d840 <_free_r+0x2c>
 800d832:	6063      	str	r3, [r4, #4]
 800d834:	6014      	str	r4, [r2, #0]
 800d836:	4628      	mov	r0, r5
 800d838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d83c:	f000 b8dc 	b.w	800d9f8 <__malloc_unlock>
 800d840:	42a3      	cmp	r3, r4
 800d842:	d908      	bls.n	800d856 <_free_r+0x42>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	1821      	adds	r1, r4, r0
 800d848:	428b      	cmp	r3, r1
 800d84a:	bf01      	itttt	eq
 800d84c:	6819      	ldreq	r1, [r3, #0]
 800d84e:	685b      	ldreq	r3, [r3, #4]
 800d850:	1809      	addeq	r1, r1, r0
 800d852:	6021      	streq	r1, [r4, #0]
 800d854:	e7ed      	b.n	800d832 <_free_r+0x1e>
 800d856:	461a      	mov	r2, r3
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	b10b      	cbz	r3, 800d860 <_free_r+0x4c>
 800d85c:	42a3      	cmp	r3, r4
 800d85e:	d9fa      	bls.n	800d856 <_free_r+0x42>
 800d860:	6811      	ldr	r1, [r2, #0]
 800d862:	1850      	adds	r0, r2, r1
 800d864:	42a0      	cmp	r0, r4
 800d866:	d10b      	bne.n	800d880 <_free_r+0x6c>
 800d868:	6820      	ldr	r0, [r4, #0]
 800d86a:	4401      	add	r1, r0
 800d86c:	1850      	adds	r0, r2, r1
 800d86e:	4283      	cmp	r3, r0
 800d870:	6011      	str	r1, [r2, #0]
 800d872:	d1e0      	bne.n	800d836 <_free_r+0x22>
 800d874:	6818      	ldr	r0, [r3, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	6053      	str	r3, [r2, #4]
 800d87a:	4408      	add	r0, r1
 800d87c:	6010      	str	r0, [r2, #0]
 800d87e:	e7da      	b.n	800d836 <_free_r+0x22>
 800d880:	d902      	bls.n	800d888 <_free_r+0x74>
 800d882:	230c      	movs	r3, #12
 800d884:	602b      	str	r3, [r5, #0]
 800d886:	e7d6      	b.n	800d836 <_free_r+0x22>
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	1821      	adds	r1, r4, r0
 800d88c:	428b      	cmp	r3, r1
 800d88e:	bf04      	itt	eq
 800d890:	6819      	ldreq	r1, [r3, #0]
 800d892:	685b      	ldreq	r3, [r3, #4]
 800d894:	6063      	str	r3, [r4, #4]
 800d896:	bf04      	itt	eq
 800d898:	1809      	addeq	r1, r1, r0
 800d89a:	6021      	streq	r1, [r4, #0]
 800d89c:	6054      	str	r4, [r2, #4]
 800d89e:	e7ca      	b.n	800d836 <_free_r+0x22>
 800d8a0:	bd38      	pop	{r3, r4, r5, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20005168 	.word	0x20005168

0800d8a8 <sbrk_aligned>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	4e0f      	ldr	r6, [pc, #60]	@ (800d8e8 <sbrk_aligned+0x40>)
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	6831      	ldr	r1, [r6, #0]
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	b911      	cbnz	r1, 800d8ba <sbrk_aligned+0x12>
 800d8b4:	f000 fba4 	bl	800e000 <_sbrk_r>
 800d8b8:	6030      	str	r0, [r6, #0]
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f000 fb9f 	bl	800e000 <_sbrk_r>
 800d8c2:	1c43      	adds	r3, r0, #1
 800d8c4:	d103      	bne.n	800d8ce <sbrk_aligned+0x26>
 800d8c6:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
 800d8ce:	1cc4      	adds	r4, r0, #3
 800d8d0:	f024 0403 	bic.w	r4, r4, #3
 800d8d4:	42a0      	cmp	r0, r4
 800d8d6:	d0f8      	beq.n	800d8ca <sbrk_aligned+0x22>
 800d8d8:	1a21      	subs	r1, r4, r0
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f000 fb90 	bl	800e000 <_sbrk_r>
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	d1f2      	bne.n	800d8ca <sbrk_aligned+0x22>
 800d8e4:	e7ef      	b.n	800d8c6 <sbrk_aligned+0x1e>
 800d8e6:	bf00      	nop
 800d8e8:	20005164 	.word	0x20005164

0800d8ec <_malloc_r>:
 800d8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f0:	1ccd      	adds	r5, r1, #3
 800d8f2:	f025 0503 	bic.w	r5, r5, #3
 800d8f6:	3508      	adds	r5, #8
 800d8f8:	2d0c      	cmp	r5, #12
 800d8fa:	bf38      	it	cc
 800d8fc:	250c      	movcc	r5, #12
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	4606      	mov	r6, r0
 800d902:	db01      	blt.n	800d908 <_malloc_r+0x1c>
 800d904:	42a9      	cmp	r1, r5
 800d906:	d904      	bls.n	800d912 <_malloc_r+0x26>
 800d908:	230c      	movs	r3, #12
 800d90a:	6033      	str	r3, [r6, #0]
 800d90c:	2000      	movs	r0, #0
 800d90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9e8 <_malloc_r+0xfc>
 800d916:	f000 f869 	bl	800d9ec <__malloc_lock>
 800d91a:	f8d8 3000 	ldr.w	r3, [r8]
 800d91e:	461c      	mov	r4, r3
 800d920:	bb44      	cbnz	r4, 800d974 <_malloc_r+0x88>
 800d922:	4629      	mov	r1, r5
 800d924:	4630      	mov	r0, r6
 800d926:	f7ff ffbf 	bl	800d8a8 <sbrk_aligned>
 800d92a:	1c43      	adds	r3, r0, #1
 800d92c:	4604      	mov	r4, r0
 800d92e:	d158      	bne.n	800d9e2 <_malloc_r+0xf6>
 800d930:	f8d8 4000 	ldr.w	r4, [r8]
 800d934:	4627      	mov	r7, r4
 800d936:	2f00      	cmp	r7, #0
 800d938:	d143      	bne.n	800d9c2 <_malloc_r+0xd6>
 800d93a:	2c00      	cmp	r4, #0
 800d93c:	d04b      	beq.n	800d9d6 <_malloc_r+0xea>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	4639      	mov	r1, r7
 800d942:	4630      	mov	r0, r6
 800d944:	eb04 0903 	add.w	r9, r4, r3
 800d948:	f000 fb5a 	bl	800e000 <_sbrk_r>
 800d94c:	4581      	cmp	r9, r0
 800d94e:	d142      	bne.n	800d9d6 <_malloc_r+0xea>
 800d950:	6821      	ldr	r1, [r4, #0]
 800d952:	1a6d      	subs	r5, r5, r1
 800d954:	4629      	mov	r1, r5
 800d956:	4630      	mov	r0, r6
 800d958:	f7ff ffa6 	bl	800d8a8 <sbrk_aligned>
 800d95c:	3001      	adds	r0, #1
 800d95e:	d03a      	beq.n	800d9d6 <_malloc_r+0xea>
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	442b      	add	r3, r5
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	f8d8 3000 	ldr.w	r3, [r8]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	bb62      	cbnz	r2, 800d9c8 <_malloc_r+0xdc>
 800d96e:	f8c8 7000 	str.w	r7, [r8]
 800d972:	e00f      	b.n	800d994 <_malloc_r+0xa8>
 800d974:	6822      	ldr	r2, [r4, #0]
 800d976:	1b52      	subs	r2, r2, r5
 800d978:	d420      	bmi.n	800d9bc <_malloc_r+0xd0>
 800d97a:	2a0b      	cmp	r2, #11
 800d97c:	d917      	bls.n	800d9ae <_malloc_r+0xc2>
 800d97e:	1961      	adds	r1, r4, r5
 800d980:	42a3      	cmp	r3, r4
 800d982:	6025      	str	r5, [r4, #0]
 800d984:	bf18      	it	ne
 800d986:	6059      	strne	r1, [r3, #4]
 800d988:	6863      	ldr	r3, [r4, #4]
 800d98a:	bf08      	it	eq
 800d98c:	f8c8 1000 	streq.w	r1, [r8]
 800d990:	5162      	str	r2, [r4, r5]
 800d992:	604b      	str	r3, [r1, #4]
 800d994:	4630      	mov	r0, r6
 800d996:	f000 f82f 	bl	800d9f8 <__malloc_unlock>
 800d99a:	f104 000b 	add.w	r0, r4, #11
 800d99e:	1d23      	adds	r3, r4, #4
 800d9a0:	f020 0007 	bic.w	r0, r0, #7
 800d9a4:	1ac2      	subs	r2, r0, r3
 800d9a6:	bf1c      	itt	ne
 800d9a8:	1a1b      	subne	r3, r3, r0
 800d9aa:	50a3      	strne	r3, [r4, r2]
 800d9ac:	e7af      	b.n	800d90e <_malloc_r+0x22>
 800d9ae:	6862      	ldr	r2, [r4, #4]
 800d9b0:	42a3      	cmp	r3, r4
 800d9b2:	bf0c      	ite	eq
 800d9b4:	f8c8 2000 	streq.w	r2, [r8]
 800d9b8:	605a      	strne	r2, [r3, #4]
 800d9ba:	e7eb      	b.n	800d994 <_malloc_r+0xa8>
 800d9bc:	4623      	mov	r3, r4
 800d9be:	6864      	ldr	r4, [r4, #4]
 800d9c0:	e7ae      	b.n	800d920 <_malloc_r+0x34>
 800d9c2:	463c      	mov	r4, r7
 800d9c4:	687f      	ldr	r7, [r7, #4]
 800d9c6:	e7b6      	b.n	800d936 <_malloc_r+0x4a>
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	42a3      	cmp	r3, r4
 800d9ce:	d1fb      	bne.n	800d9c8 <_malloc_r+0xdc>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	6053      	str	r3, [r2, #4]
 800d9d4:	e7de      	b.n	800d994 <_malloc_r+0xa8>
 800d9d6:	230c      	movs	r3, #12
 800d9d8:	6033      	str	r3, [r6, #0]
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f000 f80c 	bl	800d9f8 <__malloc_unlock>
 800d9e0:	e794      	b.n	800d90c <_malloc_r+0x20>
 800d9e2:	6005      	str	r5, [r0, #0]
 800d9e4:	e7d6      	b.n	800d994 <_malloc_r+0xa8>
 800d9e6:	bf00      	nop
 800d9e8:	20005168 	.word	0x20005168

0800d9ec <__malloc_lock>:
 800d9ec:	4801      	ldr	r0, [pc, #4]	@ (800d9f4 <__malloc_lock+0x8>)
 800d9ee:	f7ff bf01 	b.w	800d7f4 <__retarget_lock_acquire_recursive>
 800d9f2:	bf00      	nop
 800d9f4:	20005160 	.word	0x20005160

0800d9f8 <__malloc_unlock>:
 800d9f8:	4801      	ldr	r0, [pc, #4]	@ (800da00 <__malloc_unlock+0x8>)
 800d9fa:	f7ff befc 	b.w	800d7f6 <__retarget_lock_release_recursive>
 800d9fe:	bf00      	nop
 800da00:	20005160 	.word	0x20005160

0800da04 <__ssputs_r>:
 800da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	688e      	ldr	r6, [r1, #8]
 800da0a:	461f      	mov	r7, r3
 800da0c:	42be      	cmp	r6, r7
 800da0e:	680b      	ldr	r3, [r1, #0]
 800da10:	4682      	mov	sl, r0
 800da12:	460c      	mov	r4, r1
 800da14:	4690      	mov	r8, r2
 800da16:	d82d      	bhi.n	800da74 <__ssputs_r+0x70>
 800da18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da20:	d026      	beq.n	800da70 <__ssputs_r+0x6c>
 800da22:	6965      	ldr	r5, [r4, #20]
 800da24:	6909      	ldr	r1, [r1, #16]
 800da26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da2a:	eba3 0901 	sub.w	r9, r3, r1
 800da2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da32:	1c7b      	adds	r3, r7, #1
 800da34:	444b      	add	r3, r9
 800da36:	106d      	asrs	r5, r5, #1
 800da38:	429d      	cmp	r5, r3
 800da3a:	bf38      	it	cc
 800da3c:	461d      	movcc	r5, r3
 800da3e:	0553      	lsls	r3, r2, #21
 800da40:	d527      	bpl.n	800da92 <__ssputs_r+0x8e>
 800da42:	4629      	mov	r1, r5
 800da44:	f7ff ff52 	bl	800d8ec <_malloc_r>
 800da48:	4606      	mov	r6, r0
 800da4a:	b360      	cbz	r0, 800daa6 <__ssputs_r+0xa2>
 800da4c:	6921      	ldr	r1, [r4, #16]
 800da4e:	464a      	mov	r2, r9
 800da50:	f7ff fed2 	bl	800d7f8 <memcpy>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	6126      	str	r6, [r4, #16]
 800da62:	6165      	str	r5, [r4, #20]
 800da64:	444e      	add	r6, r9
 800da66:	eba5 0509 	sub.w	r5, r5, r9
 800da6a:	6026      	str	r6, [r4, #0]
 800da6c:	60a5      	str	r5, [r4, #8]
 800da6e:	463e      	mov	r6, r7
 800da70:	42be      	cmp	r6, r7
 800da72:	d900      	bls.n	800da76 <__ssputs_r+0x72>
 800da74:	463e      	mov	r6, r7
 800da76:	6820      	ldr	r0, [r4, #0]
 800da78:	4632      	mov	r2, r6
 800da7a:	4641      	mov	r1, r8
 800da7c:	f000 faa6 	bl	800dfcc <memmove>
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	1b9b      	subs	r3, r3, r6
 800da84:	60a3      	str	r3, [r4, #8]
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	4433      	add	r3, r6
 800da8a:	6023      	str	r3, [r4, #0]
 800da8c:	2000      	movs	r0, #0
 800da8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da92:	462a      	mov	r2, r5
 800da94:	f000 fac4 	bl	800e020 <_realloc_r>
 800da98:	4606      	mov	r6, r0
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d1e0      	bne.n	800da60 <__ssputs_r+0x5c>
 800da9e:	6921      	ldr	r1, [r4, #16]
 800daa0:	4650      	mov	r0, sl
 800daa2:	f7ff feb7 	bl	800d814 <_free_r>
 800daa6:	230c      	movs	r3, #12
 800daa8:	f8ca 3000 	str.w	r3, [sl]
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dab2:	81a3      	strh	r3, [r4, #12]
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295
 800dab8:	e7e9      	b.n	800da8e <__ssputs_r+0x8a>
	...

0800dabc <_svfiprintf_r>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	4698      	mov	r8, r3
 800dac2:	898b      	ldrh	r3, [r1, #12]
 800dac4:	061b      	lsls	r3, r3, #24
 800dac6:	b09d      	sub	sp, #116	@ 0x74
 800dac8:	4607      	mov	r7, r0
 800daca:	460d      	mov	r5, r1
 800dacc:	4614      	mov	r4, r2
 800dace:	d510      	bpl.n	800daf2 <_svfiprintf_r+0x36>
 800dad0:	690b      	ldr	r3, [r1, #16]
 800dad2:	b973      	cbnz	r3, 800daf2 <_svfiprintf_r+0x36>
 800dad4:	2140      	movs	r1, #64	@ 0x40
 800dad6:	f7ff ff09 	bl	800d8ec <_malloc_r>
 800dada:	6028      	str	r0, [r5, #0]
 800dadc:	6128      	str	r0, [r5, #16]
 800dade:	b930      	cbnz	r0, 800daee <_svfiprintf_r+0x32>
 800dae0:	230c      	movs	r3, #12
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b01d      	add	sp, #116	@ 0x74
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	2340      	movs	r3, #64	@ 0x40
 800daf0:	616b      	str	r3, [r5, #20]
 800daf2:	2300      	movs	r3, #0
 800daf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800daf6:	2320      	movs	r3, #32
 800daf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800db00:	2330      	movs	r3, #48	@ 0x30
 800db02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dca0 <_svfiprintf_r+0x1e4>
 800db06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db0a:	f04f 0901 	mov.w	r9, #1
 800db0e:	4623      	mov	r3, r4
 800db10:	469a      	mov	sl, r3
 800db12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db16:	b10a      	cbz	r2, 800db1c <_svfiprintf_r+0x60>
 800db18:	2a25      	cmp	r2, #37	@ 0x25
 800db1a:	d1f9      	bne.n	800db10 <_svfiprintf_r+0x54>
 800db1c:	ebba 0b04 	subs.w	fp, sl, r4
 800db20:	d00b      	beq.n	800db3a <_svfiprintf_r+0x7e>
 800db22:	465b      	mov	r3, fp
 800db24:	4622      	mov	r2, r4
 800db26:	4629      	mov	r1, r5
 800db28:	4638      	mov	r0, r7
 800db2a:	f7ff ff6b 	bl	800da04 <__ssputs_r>
 800db2e:	3001      	adds	r0, #1
 800db30:	f000 80a7 	beq.w	800dc82 <_svfiprintf_r+0x1c6>
 800db34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db36:	445a      	add	r2, fp
 800db38:	9209      	str	r2, [sp, #36]	@ 0x24
 800db3a:	f89a 3000 	ldrb.w	r3, [sl]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 809f 	beq.w	800dc82 <_svfiprintf_r+0x1c6>
 800db44:	2300      	movs	r3, #0
 800db46:	f04f 32ff 	mov.w	r2, #4294967295
 800db4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db4e:	f10a 0a01 	add.w	sl, sl, #1
 800db52:	9304      	str	r3, [sp, #16]
 800db54:	9307      	str	r3, [sp, #28]
 800db56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800db5c:	4654      	mov	r4, sl
 800db5e:	2205      	movs	r2, #5
 800db60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db64:	484e      	ldr	r0, [pc, #312]	@ (800dca0 <_svfiprintf_r+0x1e4>)
 800db66:	f7f2 fb5b 	bl	8000220 <memchr>
 800db6a:	9a04      	ldr	r2, [sp, #16]
 800db6c:	b9d8      	cbnz	r0, 800dba6 <_svfiprintf_r+0xea>
 800db6e:	06d0      	lsls	r0, r2, #27
 800db70:	bf44      	itt	mi
 800db72:	2320      	movmi	r3, #32
 800db74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db78:	0711      	lsls	r1, r2, #28
 800db7a:	bf44      	itt	mi
 800db7c:	232b      	movmi	r3, #43	@ 0x2b
 800db7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db82:	f89a 3000 	ldrb.w	r3, [sl]
 800db86:	2b2a      	cmp	r3, #42	@ 0x2a
 800db88:	d015      	beq.n	800dbb6 <_svfiprintf_r+0xfa>
 800db8a:	9a07      	ldr	r2, [sp, #28]
 800db8c:	4654      	mov	r4, sl
 800db8e:	2000      	movs	r0, #0
 800db90:	f04f 0c0a 	mov.w	ip, #10
 800db94:	4621      	mov	r1, r4
 800db96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db9a:	3b30      	subs	r3, #48	@ 0x30
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d94b      	bls.n	800dc38 <_svfiprintf_r+0x17c>
 800dba0:	b1b0      	cbz	r0, 800dbd0 <_svfiprintf_r+0x114>
 800dba2:	9207      	str	r2, [sp, #28]
 800dba4:	e014      	b.n	800dbd0 <_svfiprintf_r+0x114>
 800dba6:	eba0 0308 	sub.w	r3, r0, r8
 800dbaa:	fa09 f303 	lsl.w	r3, r9, r3
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	46a2      	mov	sl, r4
 800dbb4:	e7d2      	b.n	800db5c <_svfiprintf_r+0xa0>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	1d19      	adds	r1, r3, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	9103      	str	r1, [sp, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	bfbb      	ittet	lt
 800dbc2:	425b      	neglt	r3, r3
 800dbc4:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc8:	9307      	strge	r3, [sp, #28]
 800dbca:	9307      	strlt	r3, [sp, #28]
 800dbcc:	bfb8      	it	lt
 800dbce:	9204      	strlt	r2, [sp, #16]
 800dbd0:	7823      	ldrb	r3, [r4, #0]
 800dbd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbd4:	d10a      	bne.n	800dbec <_svfiprintf_r+0x130>
 800dbd6:	7863      	ldrb	r3, [r4, #1]
 800dbd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbda:	d132      	bne.n	800dc42 <_svfiprintf_r+0x186>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	1d1a      	adds	r2, r3, #4
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	9203      	str	r2, [sp, #12]
 800dbe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbe8:	3402      	adds	r4, #2
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcb0 <_svfiprintf_r+0x1f4>
 800dbf0:	7821      	ldrb	r1, [r4, #0]
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	f7f2 fb13 	bl	8000220 <memchr>
 800dbfa:	b138      	cbz	r0, 800dc0c <_svfiprintf_r+0x150>
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	eba0 000a 	sub.w	r0, r0, sl
 800dc02:	2240      	movs	r2, #64	@ 0x40
 800dc04:	4082      	lsls	r2, r0
 800dc06:	4313      	orrs	r3, r2
 800dc08:	3401      	adds	r4, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc10:	4824      	ldr	r0, [pc, #144]	@ (800dca4 <_svfiprintf_r+0x1e8>)
 800dc12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc16:	2206      	movs	r2, #6
 800dc18:	f7f2 fb02 	bl	8000220 <memchr>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d036      	beq.n	800dc8e <_svfiprintf_r+0x1d2>
 800dc20:	4b21      	ldr	r3, [pc, #132]	@ (800dca8 <_svfiprintf_r+0x1ec>)
 800dc22:	bb1b      	cbnz	r3, 800dc6c <_svfiprintf_r+0x1b0>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	3307      	adds	r3, #7
 800dc28:	f023 0307 	bic.w	r3, r3, #7
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc32:	4433      	add	r3, r6
 800dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc36:	e76a      	b.n	800db0e <_svfiprintf_r+0x52>
 800dc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	2001      	movs	r0, #1
 800dc40:	e7a8      	b.n	800db94 <_svfiprintf_r+0xd8>
 800dc42:	2300      	movs	r3, #0
 800dc44:	3401      	adds	r4, #1
 800dc46:	9305      	str	r3, [sp, #20]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	f04f 0c0a 	mov.w	ip, #10
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc54:	3a30      	subs	r2, #48	@ 0x30
 800dc56:	2a09      	cmp	r2, #9
 800dc58:	d903      	bls.n	800dc62 <_svfiprintf_r+0x1a6>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0c6      	beq.n	800dbec <_svfiprintf_r+0x130>
 800dc5e:	9105      	str	r1, [sp, #20]
 800dc60:	e7c4      	b.n	800dbec <_svfiprintf_r+0x130>
 800dc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc66:	4604      	mov	r4, r0
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7f0      	b.n	800dc4e <_svfiprintf_r+0x192>
 800dc6c:	ab03      	add	r3, sp, #12
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	462a      	mov	r2, r5
 800dc72:	4b0e      	ldr	r3, [pc, #56]	@ (800dcac <_svfiprintf_r+0x1f0>)
 800dc74:	a904      	add	r1, sp, #16
 800dc76:	4638      	mov	r0, r7
 800dc78:	f3af 8000 	nop.w
 800dc7c:	1c42      	adds	r2, r0, #1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	d1d6      	bne.n	800dc30 <_svfiprintf_r+0x174>
 800dc82:	89ab      	ldrh	r3, [r5, #12]
 800dc84:	065b      	lsls	r3, r3, #25
 800dc86:	f53f af2d 	bmi.w	800dae4 <_svfiprintf_r+0x28>
 800dc8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc8c:	e72c      	b.n	800dae8 <_svfiprintf_r+0x2c>
 800dc8e:	ab03      	add	r3, sp, #12
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	462a      	mov	r2, r5
 800dc94:	4b05      	ldr	r3, [pc, #20]	@ (800dcac <_svfiprintf_r+0x1f0>)
 800dc96:	a904      	add	r1, sp, #16
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f000 f879 	bl	800dd90 <_printf_i>
 800dc9e:	e7ed      	b.n	800dc7c <_svfiprintf_r+0x1c0>
 800dca0:	0800e330 	.word	0x0800e330
 800dca4:	0800e33a 	.word	0x0800e33a
 800dca8:	00000000 	.word	0x00000000
 800dcac:	0800da05 	.word	0x0800da05
 800dcb0:	0800e336 	.word	0x0800e336

0800dcb4 <_printf_common>:
 800dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb8:	4616      	mov	r6, r2
 800dcba:	4698      	mov	r8, r3
 800dcbc:	688a      	ldr	r2, [r1, #8]
 800dcbe:	690b      	ldr	r3, [r1, #16]
 800dcc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	bfb8      	it	lt
 800dcc8:	4613      	movlt	r3, r2
 800dcca:	6033      	str	r3, [r6, #0]
 800dccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	b10a      	cbz	r2, 800dcda <_printf_common+0x26>
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	6033      	str	r3, [r6, #0]
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	0699      	lsls	r1, r3, #26
 800dcde:	bf42      	ittt	mi
 800dce0:	6833      	ldrmi	r3, [r6, #0]
 800dce2:	3302      	addmi	r3, #2
 800dce4:	6033      	strmi	r3, [r6, #0]
 800dce6:	6825      	ldr	r5, [r4, #0]
 800dce8:	f015 0506 	ands.w	r5, r5, #6
 800dcec:	d106      	bne.n	800dcfc <_printf_common+0x48>
 800dcee:	f104 0a19 	add.w	sl, r4, #25
 800dcf2:	68e3      	ldr	r3, [r4, #12]
 800dcf4:	6832      	ldr	r2, [r6, #0]
 800dcf6:	1a9b      	subs	r3, r3, r2
 800dcf8:	42ab      	cmp	r3, r5
 800dcfa:	dc26      	bgt.n	800dd4a <_printf_common+0x96>
 800dcfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd00:	6822      	ldr	r2, [r4, #0]
 800dd02:	3b00      	subs	r3, #0
 800dd04:	bf18      	it	ne
 800dd06:	2301      	movne	r3, #1
 800dd08:	0692      	lsls	r2, r2, #26
 800dd0a:	d42b      	bmi.n	800dd64 <_printf_common+0xb0>
 800dd0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd10:	4641      	mov	r1, r8
 800dd12:	4638      	mov	r0, r7
 800dd14:	47c8      	blx	r9
 800dd16:	3001      	adds	r0, #1
 800dd18:	d01e      	beq.n	800dd58 <_printf_common+0xa4>
 800dd1a:	6823      	ldr	r3, [r4, #0]
 800dd1c:	6922      	ldr	r2, [r4, #16]
 800dd1e:	f003 0306 	and.w	r3, r3, #6
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	bf02      	ittt	eq
 800dd26:	68e5      	ldreq	r5, [r4, #12]
 800dd28:	6833      	ldreq	r3, [r6, #0]
 800dd2a:	1aed      	subeq	r5, r5, r3
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	bf0c      	ite	eq
 800dd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd34:	2500      	movne	r5, #0
 800dd36:	4293      	cmp	r3, r2
 800dd38:	bfc4      	itt	gt
 800dd3a:	1a9b      	subgt	r3, r3, r2
 800dd3c:	18ed      	addgt	r5, r5, r3
 800dd3e:	2600      	movs	r6, #0
 800dd40:	341a      	adds	r4, #26
 800dd42:	42b5      	cmp	r5, r6
 800dd44:	d11a      	bne.n	800dd7c <_printf_common+0xc8>
 800dd46:	2000      	movs	r0, #0
 800dd48:	e008      	b.n	800dd5c <_printf_common+0xa8>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	4652      	mov	r2, sl
 800dd4e:	4641      	mov	r1, r8
 800dd50:	4638      	mov	r0, r7
 800dd52:	47c8      	blx	r9
 800dd54:	3001      	adds	r0, #1
 800dd56:	d103      	bne.n	800dd60 <_printf_common+0xac>
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd60:	3501      	adds	r5, #1
 800dd62:	e7c6      	b.n	800dcf2 <_printf_common+0x3e>
 800dd64:	18e1      	adds	r1, r4, r3
 800dd66:	1c5a      	adds	r2, r3, #1
 800dd68:	2030      	movs	r0, #48	@ 0x30
 800dd6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd6e:	4422      	add	r2, r4
 800dd70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd78:	3302      	adds	r3, #2
 800dd7a:	e7c7      	b.n	800dd0c <_printf_common+0x58>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	4622      	mov	r2, r4
 800dd80:	4641      	mov	r1, r8
 800dd82:	4638      	mov	r0, r7
 800dd84:	47c8      	blx	r9
 800dd86:	3001      	adds	r0, #1
 800dd88:	d0e6      	beq.n	800dd58 <_printf_common+0xa4>
 800dd8a:	3601      	adds	r6, #1
 800dd8c:	e7d9      	b.n	800dd42 <_printf_common+0x8e>
	...

0800dd90 <_printf_i>:
 800dd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd94:	7e0f      	ldrb	r7, [r1, #24]
 800dd96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd98:	2f78      	cmp	r7, #120	@ 0x78
 800dd9a:	4691      	mov	r9, r2
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	469a      	mov	sl, r3
 800dda2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dda6:	d807      	bhi.n	800ddb8 <_printf_i+0x28>
 800dda8:	2f62      	cmp	r7, #98	@ 0x62
 800ddaa:	d80a      	bhi.n	800ddc2 <_printf_i+0x32>
 800ddac:	2f00      	cmp	r7, #0
 800ddae:	f000 80d1 	beq.w	800df54 <_printf_i+0x1c4>
 800ddb2:	2f58      	cmp	r7, #88	@ 0x58
 800ddb4:	f000 80b8 	beq.w	800df28 <_printf_i+0x198>
 800ddb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ddc0:	e03a      	b.n	800de38 <_printf_i+0xa8>
 800ddc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ddc6:	2b15      	cmp	r3, #21
 800ddc8:	d8f6      	bhi.n	800ddb8 <_printf_i+0x28>
 800ddca:	a101      	add	r1, pc, #4	@ (adr r1, 800ddd0 <_printf_i+0x40>)
 800ddcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddd0:	0800de29 	.word	0x0800de29
 800ddd4:	0800de3d 	.word	0x0800de3d
 800ddd8:	0800ddb9 	.word	0x0800ddb9
 800dddc:	0800ddb9 	.word	0x0800ddb9
 800dde0:	0800ddb9 	.word	0x0800ddb9
 800dde4:	0800ddb9 	.word	0x0800ddb9
 800dde8:	0800de3d 	.word	0x0800de3d
 800ddec:	0800ddb9 	.word	0x0800ddb9
 800ddf0:	0800ddb9 	.word	0x0800ddb9
 800ddf4:	0800ddb9 	.word	0x0800ddb9
 800ddf8:	0800ddb9 	.word	0x0800ddb9
 800ddfc:	0800df3b 	.word	0x0800df3b
 800de00:	0800de67 	.word	0x0800de67
 800de04:	0800def5 	.word	0x0800def5
 800de08:	0800ddb9 	.word	0x0800ddb9
 800de0c:	0800ddb9 	.word	0x0800ddb9
 800de10:	0800df5d 	.word	0x0800df5d
 800de14:	0800ddb9 	.word	0x0800ddb9
 800de18:	0800de67 	.word	0x0800de67
 800de1c:	0800ddb9 	.word	0x0800ddb9
 800de20:	0800ddb9 	.word	0x0800ddb9
 800de24:	0800defd 	.word	0x0800defd
 800de28:	6833      	ldr	r3, [r6, #0]
 800de2a:	1d1a      	adds	r2, r3, #4
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	6032      	str	r2, [r6, #0]
 800de30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de38:	2301      	movs	r3, #1
 800de3a:	e09c      	b.n	800df76 <_printf_i+0x1e6>
 800de3c:	6833      	ldr	r3, [r6, #0]
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	1d19      	adds	r1, r3, #4
 800de42:	6031      	str	r1, [r6, #0]
 800de44:	0606      	lsls	r6, r0, #24
 800de46:	d501      	bpl.n	800de4c <_printf_i+0xbc>
 800de48:	681d      	ldr	r5, [r3, #0]
 800de4a:	e003      	b.n	800de54 <_printf_i+0xc4>
 800de4c:	0645      	lsls	r5, r0, #25
 800de4e:	d5fb      	bpl.n	800de48 <_printf_i+0xb8>
 800de50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de54:	2d00      	cmp	r5, #0
 800de56:	da03      	bge.n	800de60 <_printf_i+0xd0>
 800de58:	232d      	movs	r3, #45	@ 0x2d
 800de5a:	426d      	negs	r5, r5
 800de5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de60:	4858      	ldr	r0, [pc, #352]	@ (800dfc4 <_printf_i+0x234>)
 800de62:	230a      	movs	r3, #10
 800de64:	e011      	b.n	800de8a <_printf_i+0xfa>
 800de66:	6821      	ldr	r1, [r4, #0]
 800de68:	6833      	ldr	r3, [r6, #0]
 800de6a:	0608      	lsls	r0, r1, #24
 800de6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800de70:	d402      	bmi.n	800de78 <_printf_i+0xe8>
 800de72:	0649      	lsls	r1, r1, #25
 800de74:	bf48      	it	mi
 800de76:	b2ad      	uxthmi	r5, r5
 800de78:	2f6f      	cmp	r7, #111	@ 0x6f
 800de7a:	4852      	ldr	r0, [pc, #328]	@ (800dfc4 <_printf_i+0x234>)
 800de7c:	6033      	str	r3, [r6, #0]
 800de7e:	bf14      	ite	ne
 800de80:	230a      	movne	r3, #10
 800de82:	2308      	moveq	r3, #8
 800de84:	2100      	movs	r1, #0
 800de86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de8a:	6866      	ldr	r6, [r4, #4]
 800de8c:	60a6      	str	r6, [r4, #8]
 800de8e:	2e00      	cmp	r6, #0
 800de90:	db05      	blt.n	800de9e <_printf_i+0x10e>
 800de92:	6821      	ldr	r1, [r4, #0]
 800de94:	432e      	orrs	r6, r5
 800de96:	f021 0104 	bic.w	r1, r1, #4
 800de9a:	6021      	str	r1, [r4, #0]
 800de9c:	d04b      	beq.n	800df36 <_printf_i+0x1a6>
 800de9e:	4616      	mov	r6, r2
 800dea0:	fbb5 f1f3 	udiv	r1, r5, r3
 800dea4:	fb03 5711 	mls	r7, r3, r1, r5
 800dea8:	5dc7      	ldrb	r7, [r0, r7]
 800deaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800deae:	462f      	mov	r7, r5
 800deb0:	42bb      	cmp	r3, r7
 800deb2:	460d      	mov	r5, r1
 800deb4:	d9f4      	bls.n	800dea0 <_printf_i+0x110>
 800deb6:	2b08      	cmp	r3, #8
 800deb8:	d10b      	bne.n	800ded2 <_printf_i+0x142>
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	07df      	lsls	r7, r3, #31
 800debe:	d508      	bpl.n	800ded2 <_printf_i+0x142>
 800dec0:	6923      	ldr	r3, [r4, #16]
 800dec2:	6861      	ldr	r1, [r4, #4]
 800dec4:	4299      	cmp	r1, r3
 800dec6:	bfde      	ittt	le
 800dec8:	2330      	movle	r3, #48	@ 0x30
 800deca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dece:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ded2:	1b92      	subs	r2, r2, r6
 800ded4:	6122      	str	r2, [r4, #16]
 800ded6:	f8cd a000 	str.w	sl, [sp]
 800deda:	464b      	mov	r3, r9
 800dedc:	aa03      	add	r2, sp, #12
 800dede:	4621      	mov	r1, r4
 800dee0:	4640      	mov	r0, r8
 800dee2:	f7ff fee7 	bl	800dcb4 <_printf_common>
 800dee6:	3001      	adds	r0, #1
 800dee8:	d14a      	bne.n	800df80 <_printf_i+0x1f0>
 800deea:	f04f 30ff 	mov.w	r0, #4294967295
 800deee:	b004      	add	sp, #16
 800def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	f043 0320 	orr.w	r3, r3, #32
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	4832      	ldr	r0, [pc, #200]	@ (800dfc8 <_printf_i+0x238>)
 800defe:	2778      	movs	r7, #120	@ 0x78
 800df00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	6831      	ldr	r1, [r6, #0]
 800df08:	061f      	lsls	r7, r3, #24
 800df0a:	f851 5b04 	ldr.w	r5, [r1], #4
 800df0e:	d402      	bmi.n	800df16 <_printf_i+0x186>
 800df10:	065f      	lsls	r7, r3, #25
 800df12:	bf48      	it	mi
 800df14:	b2ad      	uxthmi	r5, r5
 800df16:	6031      	str	r1, [r6, #0]
 800df18:	07d9      	lsls	r1, r3, #31
 800df1a:	bf44      	itt	mi
 800df1c:	f043 0320 	orrmi.w	r3, r3, #32
 800df20:	6023      	strmi	r3, [r4, #0]
 800df22:	b11d      	cbz	r5, 800df2c <_printf_i+0x19c>
 800df24:	2310      	movs	r3, #16
 800df26:	e7ad      	b.n	800de84 <_printf_i+0xf4>
 800df28:	4826      	ldr	r0, [pc, #152]	@ (800dfc4 <_printf_i+0x234>)
 800df2a:	e7e9      	b.n	800df00 <_printf_i+0x170>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	f023 0320 	bic.w	r3, r3, #32
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	e7f6      	b.n	800df24 <_printf_i+0x194>
 800df36:	4616      	mov	r6, r2
 800df38:	e7bd      	b.n	800deb6 <_printf_i+0x126>
 800df3a:	6833      	ldr	r3, [r6, #0]
 800df3c:	6825      	ldr	r5, [r4, #0]
 800df3e:	6961      	ldr	r1, [r4, #20]
 800df40:	1d18      	adds	r0, r3, #4
 800df42:	6030      	str	r0, [r6, #0]
 800df44:	062e      	lsls	r6, r5, #24
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	d501      	bpl.n	800df4e <_printf_i+0x1be>
 800df4a:	6019      	str	r1, [r3, #0]
 800df4c:	e002      	b.n	800df54 <_printf_i+0x1c4>
 800df4e:	0668      	lsls	r0, r5, #25
 800df50:	d5fb      	bpl.n	800df4a <_printf_i+0x1ba>
 800df52:	8019      	strh	r1, [r3, #0]
 800df54:	2300      	movs	r3, #0
 800df56:	6123      	str	r3, [r4, #16]
 800df58:	4616      	mov	r6, r2
 800df5a:	e7bc      	b.n	800ded6 <_printf_i+0x146>
 800df5c:	6833      	ldr	r3, [r6, #0]
 800df5e:	1d1a      	adds	r2, r3, #4
 800df60:	6032      	str	r2, [r6, #0]
 800df62:	681e      	ldr	r6, [r3, #0]
 800df64:	6862      	ldr	r2, [r4, #4]
 800df66:	2100      	movs	r1, #0
 800df68:	4630      	mov	r0, r6
 800df6a:	f7f2 f959 	bl	8000220 <memchr>
 800df6e:	b108      	cbz	r0, 800df74 <_printf_i+0x1e4>
 800df70:	1b80      	subs	r0, r0, r6
 800df72:	6060      	str	r0, [r4, #4]
 800df74:	6863      	ldr	r3, [r4, #4]
 800df76:	6123      	str	r3, [r4, #16]
 800df78:	2300      	movs	r3, #0
 800df7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df7e:	e7aa      	b.n	800ded6 <_printf_i+0x146>
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	4632      	mov	r2, r6
 800df84:	4649      	mov	r1, r9
 800df86:	4640      	mov	r0, r8
 800df88:	47d0      	blx	sl
 800df8a:	3001      	adds	r0, #1
 800df8c:	d0ad      	beq.n	800deea <_printf_i+0x15a>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	079b      	lsls	r3, r3, #30
 800df92:	d413      	bmi.n	800dfbc <_printf_i+0x22c>
 800df94:	68e0      	ldr	r0, [r4, #12]
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	4298      	cmp	r0, r3
 800df9a:	bfb8      	it	lt
 800df9c:	4618      	movlt	r0, r3
 800df9e:	e7a6      	b.n	800deee <_printf_i+0x15e>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	47d0      	blx	sl
 800dfaa:	3001      	adds	r0, #1
 800dfac:	d09d      	beq.n	800deea <_printf_i+0x15a>
 800dfae:	3501      	adds	r5, #1
 800dfb0:	68e3      	ldr	r3, [r4, #12]
 800dfb2:	9903      	ldr	r1, [sp, #12]
 800dfb4:	1a5b      	subs	r3, r3, r1
 800dfb6:	42ab      	cmp	r3, r5
 800dfb8:	dcf2      	bgt.n	800dfa0 <_printf_i+0x210>
 800dfba:	e7eb      	b.n	800df94 <_printf_i+0x204>
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	f104 0619 	add.w	r6, r4, #25
 800dfc2:	e7f5      	b.n	800dfb0 <_printf_i+0x220>
 800dfc4:	0800e341 	.word	0x0800e341
 800dfc8:	0800e352 	.word	0x0800e352

0800dfcc <memmove>:
 800dfcc:	4288      	cmp	r0, r1
 800dfce:	b510      	push	{r4, lr}
 800dfd0:	eb01 0402 	add.w	r4, r1, r2
 800dfd4:	d902      	bls.n	800dfdc <memmove+0x10>
 800dfd6:	4284      	cmp	r4, r0
 800dfd8:	4623      	mov	r3, r4
 800dfda:	d807      	bhi.n	800dfec <memmove+0x20>
 800dfdc:	1e43      	subs	r3, r0, #1
 800dfde:	42a1      	cmp	r1, r4
 800dfe0:	d008      	beq.n	800dff4 <memmove+0x28>
 800dfe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfea:	e7f8      	b.n	800dfde <memmove+0x12>
 800dfec:	4402      	add	r2, r0
 800dfee:	4601      	mov	r1, r0
 800dff0:	428a      	cmp	r2, r1
 800dff2:	d100      	bne.n	800dff6 <memmove+0x2a>
 800dff4:	bd10      	pop	{r4, pc}
 800dff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dffe:	e7f7      	b.n	800dff0 <memmove+0x24>

0800e000 <_sbrk_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d06      	ldr	r5, [pc, #24]	@ (800e01c <_sbrk_r+0x1c>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	f7f3 fe94 	bl	8001d38 <_sbrk>
 800e010:	1c43      	adds	r3, r0, #1
 800e012:	d102      	bne.n	800e01a <_sbrk_r+0x1a>
 800e014:	682b      	ldr	r3, [r5, #0]
 800e016:	b103      	cbz	r3, 800e01a <_sbrk_r+0x1a>
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	bd38      	pop	{r3, r4, r5, pc}
 800e01c:	2000515c 	.word	0x2000515c

0800e020 <_realloc_r>:
 800e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e024:	4607      	mov	r7, r0
 800e026:	4614      	mov	r4, r2
 800e028:	460d      	mov	r5, r1
 800e02a:	b921      	cbnz	r1, 800e036 <_realloc_r+0x16>
 800e02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e030:	4611      	mov	r1, r2
 800e032:	f7ff bc5b 	b.w	800d8ec <_malloc_r>
 800e036:	b92a      	cbnz	r2, 800e044 <_realloc_r+0x24>
 800e038:	f7ff fbec 	bl	800d814 <_free_r>
 800e03c:	4625      	mov	r5, r4
 800e03e:	4628      	mov	r0, r5
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	f000 f81a 	bl	800e07c <_malloc_usable_size_r>
 800e048:	4284      	cmp	r4, r0
 800e04a:	4606      	mov	r6, r0
 800e04c:	d802      	bhi.n	800e054 <_realloc_r+0x34>
 800e04e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e052:	d8f4      	bhi.n	800e03e <_realloc_r+0x1e>
 800e054:	4621      	mov	r1, r4
 800e056:	4638      	mov	r0, r7
 800e058:	f7ff fc48 	bl	800d8ec <_malloc_r>
 800e05c:	4680      	mov	r8, r0
 800e05e:	b908      	cbnz	r0, 800e064 <_realloc_r+0x44>
 800e060:	4645      	mov	r5, r8
 800e062:	e7ec      	b.n	800e03e <_realloc_r+0x1e>
 800e064:	42b4      	cmp	r4, r6
 800e066:	4622      	mov	r2, r4
 800e068:	4629      	mov	r1, r5
 800e06a:	bf28      	it	cs
 800e06c:	4632      	movcs	r2, r6
 800e06e:	f7ff fbc3 	bl	800d7f8 <memcpy>
 800e072:	4629      	mov	r1, r5
 800e074:	4638      	mov	r0, r7
 800e076:	f7ff fbcd 	bl	800d814 <_free_r>
 800e07a:	e7f1      	b.n	800e060 <_realloc_r+0x40>

0800e07c <_malloc_usable_size_r>:
 800e07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e080:	1f18      	subs	r0, r3, #4
 800e082:	2b00      	cmp	r3, #0
 800e084:	bfbc      	itt	lt
 800e086:	580b      	ldrlt	r3, [r1, r0]
 800e088:	18c0      	addlt	r0, r0, r3
 800e08a:	4770      	bx	lr

0800e08c <_init>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	bf00      	nop
 800e090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e092:	bc08      	pop	{r3}
 800e094:	469e      	mov	lr, r3
 800e096:	4770      	bx	lr

0800e098 <_fini>:
 800e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09a:	bf00      	nop
 800e09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e09e:	bc08      	pop	{r3}
 800e0a0:	469e      	mov	lr, r3
 800e0a2:	4770      	bx	lr

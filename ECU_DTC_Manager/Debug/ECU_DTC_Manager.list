
ECU_DTC_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800d064  0800d064  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d264  0800d264  0000f010  2**0
                  CONTENTS
  4 .ARM          00000008  0800d264  0800d264  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d26c  0800d26c  0000f010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d26c  0800d26c  0000e26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d270  0800d270  0000e270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d274  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb8  20000010  0800d284  0000f010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ec8  0800d284  0000fec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d49f  00000000  00000000  0000f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426b  00000000  00000000  0002c4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001283  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255cb  00000000  00000000  00033183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8e5  00000000  00000000  0005874e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e28fc  00000000  00000000  00076033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015892f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c8  00000000  00000000  00158974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015ec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d04c 	.word	0x0800d04c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800d04c 	.word	0x0800d04c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <EEPROM_CS_LOW>:
#include "eeprom_25lc256.h"

extern SPI_HandleTypeDef hspi1;
osSemaphoreId_t spi_dma_semaphore;

static void EEPROM_CS_LOW(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <EEPROM_CS_LOW+0x14>)
 8000556:	f003 fecf 	bl	80042f8 <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020400 	.word	0x40020400

08000564 <EEPROM_CS_HIGH>:

static void EEPROM_CS_HIGH(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	4802      	ldr	r0, [pc, #8]	@ (8000578 <EEPROM_CS_HIGH+0x14>)
 800056e:	f003 fec3 	bl	80042f8 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020400 	.word	0x40020400

0800057c <EEPROM_WriteEnable>:

/* EEPROM에 데이터를 쓰기 전에 
 * 쓰기 활성화 명령을 전송해야 한다. 
 */
static void EEPROM_WriteEnable(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 8000582:	2306      	movs	r3, #6
 8000584:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_LOW();
 8000586:	f7ff ffe1 	bl	800054c <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800058a:	1df9      	adds	r1, r7, #7
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	2201      	movs	r2, #1
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <EEPROM_WriteEnable+0x28>)
 8000592:	f006 fe98 	bl	80072c6 <HAL_SPI_Transmit>
    EEPROM_CS_HIGH();
 8000596:	f7ff ffe5 	bl	8000564 <EEPROM_CS_HIGH>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200002c8 	.word	0x200002c8

080005a8 <EEPROM_WaitForWriteInProgress>:
/* 
 * EEPROM에 데이터 저장 시간을 고려하여
 * EEPROM의 상태 레지스터를 계속 확인하고
 * 내부 쓰기 작업이 끝나면 다음 명령을 보내기 위함
 */
static void EEPROM_WaitForWriteInProgress(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_RDSR;
 80005ae:	2305      	movs	r3, #5
 80005b0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    EEPROM_CS_LOW();
 80005b2:	f7ff ffcb 	bl	800054c <EEPROM_CS_LOW>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80005b6:	1df9      	adds	r1, r7, #7
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <EEPROM_WaitForWriteInProgress+0x3c>)
 80005be:	f006 fe82 	bl	80072c6 <HAL_SPI_Transmit>
    do {
        HAL_SPI_Receive(&hspi1, &status, 1, 100);
 80005c2:	1db9      	adds	r1, r7, #6
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <EEPROM_WaitForWriteInProgress+0x3c>)
 80005ca:	f006 ffb8 	bl	800753e <HAL_SPI_Receive>
    } while (status & 0x01); // 상태 레지스터의 WIP(Write-In-Progress) 비트가 0이 될 때까지 대기
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f4      	bne.n	80005c2 <EEPROM_WaitForWriteInProgress+0x1a>
    EEPROM_CS_HIGH();
 80005d8:	f7ff ffc4 	bl	8000564 <EEPROM_CS_HIGH>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200002c8 	.word	0x200002c8

080005e8 <EEPROM_Init>:

void EEPROM_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    // DMA 콜백 함수에서 Release
    spi_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2001      	movs	r0, #1
 80005f2:	f009 f91c 	bl	800982e <osSemaphoreNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <EEPROM_Init+0x24>)
 80005fa:	6013      	str	r3, [r2, #0]
    if (spi_dma_semaphore == NULL) {
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <EEPROM_Init+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <EEPROM_Init+0x20>
        Error_Handler();
 8000604:	f000 fc1c 	bl	8000e40 <Error_Handler>
    }
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000002c 	.word	0x2000002c

08000610 <EEPROM_Write_DTC>:

HAL_StatusTypeDef EEPROM_Write_DTC(uint16_t address, uint8_t* pData, uint16_t size) {
 8000610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4613      	mov	r3, r2
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	466b      	mov	r3, sp
 8000624:	461e      	mov	r6, r3
    EEPROM_WaitForWriteInProgress();
 8000626:	f7ff ffbf 	bl	80005a8 <EEPROM_WaitForWriteInProgress>
    EEPROM_WriteEnable();
 800062a:	f7ff ffa7 	bl	800057c <EEPROM_WriteEnable>

    uint8_t tx_buffer[size + 3];          // 명령어(1) + 데이터 저장할 주소(2) + 데이터(size) 저장
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	1cd9      	adds	r1, r3, #3
 8000632:	1e4b      	subs	r3, r1, #1
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	460a      	mov	r2, r1
 8000638:	2300      	movs	r3, #0
 800063a:	4690      	mov	r8, r2
 800063c:	4699      	mov	r9, r3
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800064a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800064e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000652:	460a      	mov	r2, r1
 8000654:	2300      	movs	r3, #0
 8000656:	4614      	mov	r4, r2
 8000658:	461d      	mov	r5, r3
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	00eb      	lsls	r3, r5, #3
 8000664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000668:	00e2      	lsls	r2, r4, #3
 800066a:	460b      	mov	r3, r1
 800066c:	3307      	adds	r3, #7
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	ebad 0d03 	sub.w	sp, sp, r3
 8000676:	466b      	mov	r3, sp
 8000678:	3300      	adds	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
    tx_buffer[0] = EEPROM_CMD_WRITE;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2202      	movs	r2, #2
 8000680:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = (address >> 8) & 0xFF; // 주소 상위 바이트
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2da      	uxtb	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = address & 0xFF;        // 주소 하위 바이트
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	709a      	strb	r2, [r3, #2]
    memcpy(&tx_buffer[3], pData, size);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3303      	adds	r3, #3
 800069a:	88ba      	ldrh	r2, [r7, #4]
 800069c:	6839      	ldr	r1, [r7, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f00c fcc6 	bl	800d030 <memcpy>

    EEPROM_CS_LOW();
 80006a4:	f7ff ff52 	bl	800054c <EEPROM_CS_LOW>
    if (HAL_SPI_Transmit_DMA(&hspi1, tx_buffer, size + 3) != HAL_OK) {
 80006a8:	88bb      	ldrh	r3, [r7, #4]
 80006aa:	3303      	adds	r3, #3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <EEPROM_Write_DTC+0xe4>)
 80006b4:	f007 f9f6 	bl	8007aa4 <HAL_SPI_Transmit_DMA>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <EEPROM_Write_DTC+0xb6>
        EEPROM_CS_HIGH();
 80006be:	f7ff ff51 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00f      	b.n	80006e6 <EEPROM_Write_DTC+0xd6>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <EEPROM_Write_DTC+0xe8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2164      	movs	r1, #100	@ 0x64
 80006cc:	4618      	mov	r0, r3
 80006ce:	f009 f937 	bl	8009940 <osSemaphoreAcquire>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <EEPROM_Write_DTC+0xd0>
        EEPROM_CS_HIGH();
 80006d8:	f7ff ff44 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 80006dc:	2303      	movs	r3, #3
 80006de:	e002      	b.n	80006e6 <EEPROM_Write_DTC+0xd6>
    }

    EEPROM_CS_HIGH();
 80006e0:	f7ff ff40 	bl	8000564 <EEPROM_CS_HIGH>
    return HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	46b5      	mov	sp, r6
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006f2:	bf00      	nop
 80006f4:	200002c8 	.word	0x200002c8
 80006f8:	2000002c 	.word	0x2000002c

080006fc <EEPROM_Read_DTCs>:

HAL_StatusTypeDef EEPROM_Read_DTCs(uint16_t address, uint8_t* pData, uint16_t size) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	4613      	mov	r3, r2
 800070a:	80bb      	strh	r3, [r7, #4]
    EEPROM_WaitForWriteInProgress();
 800070c:	f7ff ff4c 	bl	80005a8 <EEPROM_WaitForWriteInProgress>

    uint8_t tx_buffer[3]; // 명령어(1) + 주소(2)
    tx_buffer[0] = EEPROM_CMD_READ;
 8000710:	2303      	movs	r3, #3
 8000712:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = (address >> 8) & 0xFF;
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	737b      	strb	r3, [r7, #13]
    tx_buffer[2] = address & 0xFF;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_LOW();
 8000724:	f7ff ff12 	bl	800054c <EEPROM_CS_LOW>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, pData, size + 3) != HAL_OK) {
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3303      	adds	r3, #3
 800072c:	b29b      	uxth	r3, r3
 800072e:	f107 010c 	add.w	r1, r7, #12
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	480e      	ldr	r0, [pc, #56]	@ (8000770 <EEPROM_Read_DTCs+0x74>)
 8000736:	f007 fa6b 	bl	8007c10 <HAL_SPI_TransmitReceive_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <EEPROM_Read_DTCs+0x4c>
        EEPROM_CS_HIGH();
 8000740:	f7ff ff10 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	e00f      	b.n	8000768 <EEPROM_Read_DTCs+0x6c>
    }

    // DMA 완료 신호를 받을 때까지 Blocked
    if (osSemaphoreAcquire(spi_dma_semaphore, 100) != osOK) {
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <EEPROM_Read_DTCs+0x78>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2164      	movs	r1, #100	@ 0x64
 800074e:	4618      	mov	r0, r3
 8000750:	f009 f8f6 	bl	8009940 <osSemaphoreAcquire>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <EEPROM_Read_DTCs+0x66>
        EEPROM_CS_HIGH();
 800075a:	f7ff ff03 	bl	8000564 <EEPROM_CS_HIGH>
        return HAL_TIMEOUT;
 800075e:	2303      	movs	r3, #3
 8000760:	e002      	b.n	8000768 <EEPROM_Read_DTCs+0x6c>
    }

    EEPROM_CS_HIGH();
 8000762:	f7ff feff 	bl	8000564 <EEPROM_CS_HIGH>
    return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200002c8 	.word	0x200002c8
 8000774:	2000002c 	.word	0x2000002c

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f001 fce0 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f8a8 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fae2 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fa7a 	bl	8000c80 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 f900 	bl	8000990 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000790:	f000 f950 	bl	8000a34 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000794:	f000 f982 	bl	8000a9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000798:	f000 f9ae 	bl	8000af8 <MX_I2C2_Init>
  MX_SPI1_Init();
 800079c:	f000 f9da 	bl	8000b54 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007a0:	f000 fa0e 	bl	8000bc0 <MX_SPI2_Init>
  MX_UART4_Init();
 80007a4:	f000 fa42 	bl	8000c2c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PMIC_Init();
 80007a8:	f000 fb50 	bl	8000e4c <PMIC_Init>
  EEPROM_Init();
 80007ac:	f7ff ff1c 	bl	80005e8 <EEPROM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b0:	f008 fe38 	bl	8009424 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 80007b4:	482b      	ldr	r0, [pc, #172]	@ (8000864 <main+0xec>)
 80007b6:	f008 ff2c 	bl	8009612 <osMutexNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000868 <main+0xf0>)
 80007be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  EepromMutexHandle = osMutexNew(&EepromMutex_attributes);
 80007c0:	482a      	ldr	r0, [pc, #168]	@ (800086c <main+0xf4>)
 80007c2:	f008 ff26 	bl	8009612 <osMutexNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a29      	ldr	r2, [pc, #164]	@ (8000870 <main+0xf8>)
 80007ca:	6013      	str	r3, [r2, #0]
  /* Create the queue(s) */
  /* creation of CanQueue */
  
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  CanQueueHandle = osMessageQueueNew (8, sizeof(CAN_Message_t), &CanQueue_attributes);
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <main+0xfc>)
 80007ce:	2124      	movs	r1, #36	@ 0x24
 80007d0:	2008      	movs	r0, #8
 80007d2:	f009 f94b 	bl	8009a6c <osMessageQueueNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a27      	ldr	r2, [pc, #156]	@ (8000878 <main+0x100>)
 80007da:	6013      	str	r3, [r2, #0]
  DTC_RequestQueueHandle = osMessageQueueNew(16, sizeof(DTC_RequestMessage_t), &DTC_RequestQueue_attributes);
 80007dc:	4a27      	ldr	r2, [pc, #156]	@ (800087c <main+0x104>)
 80007de:	2104      	movs	r1, #4
 80007e0:	2010      	movs	r0, #16
 80007e2:	f009 f943 	bl	8009a6c <osMessageQueueNew>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a25      	ldr	r2, [pc, #148]	@ (8000880 <main+0x108>)
 80007ea:	6013      	str	r3, [r2, #0]
  DTC_ResponseQueueHandle = osMessageQueueNew(1, sizeof(DTC_ResponseMessage_t), &DTC_ResponseQueue_attributes);
 80007ec:	4a25      	ldr	r2, [pc, #148]	@ (8000884 <main+0x10c>)
 80007ee:	2122      	movs	r1, #34	@ 0x22
 80007f0:	2001      	movs	r0, #1
 80007f2:	f009 f93b 	bl	8009a6c <osMessageQueueNew>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <main+0x110>)
 80007fa:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fc:	4a23      	ldr	r2, [pc, #140]	@ (800088c <main+0x114>)
 80007fe:	2100      	movs	r1, #0
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <main+0x118>)
 8000802:	f008 fe59 	bl	80094b8 <osThreadNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <main+0x11c>)
 800080a:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 800080c:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <main+0x120>)
 800080e:	2100      	movs	r1, #0
 8000810:	4822      	ldr	r0, [pc, #136]	@ (800089c <main+0x124>)
 8000812:	f008 fe51 	bl	80094b8 <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <main+0x128>)
 800081a:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <main+0x12c>)
 800081e:	2100      	movs	r1, #0
 8000820:	4821      	ldr	r0, [pc, #132]	@ (80008a8 <main+0x130>)
 8000822:	f008 fe49 	bl	80094b8 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <main+0x134>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 800082c:	4a20      	ldr	r2, [pc, #128]	@ (80008b0 <main+0x138>)
 800082e:	2100      	movs	r1, #0
 8000830:	4820      	ldr	r0, [pc, #128]	@ (80008b4 <main+0x13c>)
 8000832:	f008 fe41 	bl	80094b8 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <main+0x140>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 800083c:	4a1f      	ldr	r2, [pc, #124]	@ (80008bc <main+0x144>)
 800083e:	2100      	movs	r1, #0
 8000840:	481f      	ldr	r0, [pc, #124]	@ (80008c0 <main+0x148>)
 8000842:	f008 fe39 	bl	80094b8 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <main+0x14c>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 800084c:	4a1e      	ldr	r2, [pc, #120]	@ (80008c8 <main+0x150>)
 800084e:	2100      	movs	r1, #0
 8000850:	481e      	ldr	r0, [pc, #120]	@ (80008cc <main+0x154>)
 8000852:	f008 fe31 	bl	80094b8 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a1d      	ldr	r2, [pc, #116]	@ (80008d0 <main+0x158>)
 800085a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800085c:	f008 fe06 	bl	800946c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <main+0xe8>
 8000864:	0800d1f4 	.word	0x0800d1f4
 8000868:	20000558 	.word	0x20000558
 800086c:	0800d234 	.word	0x0800d234
 8000870:	20000564 	.word	0x20000564
 8000874:	0800d1dc 	.word	0x0800d1dc
 8000878:	20000554 	.word	0x20000554
 800087c:	0800d204 	.word	0x0800d204
 8000880:	2000055c 	.word	0x2000055c
 8000884:	0800d21c 	.word	0x0800d21c
 8000888:	20000560 	.word	0x20000560
 800088c:	0800d104 	.word	0x0800d104
 8000890:	08001feb 	.word	0x08001feb
 8000894:	2000053c 	.word	0x2000053c
 8000898:	0800d128 	.word	0x0800d128
 800089c:	08001945 	.word	0x08001945
 80008a0:	20000540 	.word	0x20000540
 80008a4:	0800d14c 	.word	0x0800d14c
 80008a8:	08001bad 	.word	0x08001bad
 80008ac:	20000544 	.word	0x20000544
 80008b0:	0800d170 	.word	0x0800d170
 80008b4:	08001d5d 	.word	0x08001d5d
 80008b8:	20000548 	.word	0x20000548
 80008bc:	0800d194 	.word	0x0800d194
 80008c0:	08001f21 	.word	0x08001f21
 80008c4:	2000054c 	.word	0x2000054c
 80008c8:	0800d1b8 	.word	0x0800d1b8
 80008cc:	08001fd9 	.word	0x08001fd9
 80008d0:	20000550 	.word	0x20000550

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f00c fb78 	bl	800cfd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SystemClock_Config+0xb4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <SystemClock_Config+0xb4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <SystemClock_Config+0xb4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <SystemClock_Config+0xb8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <SystemClock_Config+0xb8>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <SystemClock_Config+0xb8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4618      	mov	r0, r3
 8000946:	f006 f9b1 	bl	8006cac <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000950:	f000 fa76 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 ffbc 	bl	80068ec <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800097a:	f000 fa61 	bl	8000e40 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_ADC1_Init+0xa0>)
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009dc:	2201      	movs	r2, #1
 80009de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009f0:	f001 fc18 	bl	8002224 <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fa21 	bl	8000e40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_ADC1_Init+0x98>)
 8000a10:	f001 fdcc 	bl	80025ac <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 fa11 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <MX_CAN1_Init+0x64>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_CAN1_Init+0x60>)
 8000a82:	f001 ffc1 	bl	8002a08 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 f9d8 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000078 	.word	0x20000078
 8000a98:	40006400 	.word	0x40006400

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f003 fc27 	bl	800432c <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f9ac 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000a0 	.word	0x200000a0
 8000af0:	40005400 	.word	0x40005400
 8000af4:	000186a0 	.word	0x000186a0

08000af8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C2_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C2_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b36:	f003 fbf9 	bl	800432c <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f97e 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000f4 	.word	0x200000f4
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <MX_SPI1_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba6:	f006 fb05 	bl	80071b4 <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f000 f946 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200002c8 	.word	0x200002c8
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	@ (8000c28 <MX_SPI2_Init+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_SPI2_Init+0x64>)
 8000c12:	f006 facf 	bl	80071b4 <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f000 f910 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000320 	.word	0x20000320
 8000c28:	40003800 	.word	0x40003800

08000c2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_UART4_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_UART4_Init+0x4c>)
 8000c64:	f007 fc86 	bl	8008574 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f8e7 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200004f8 	.word	0x200004f8
 8000c7c:	40004c00 	.word	0x40004c00

08000c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <MX_DMA_Init+0xc8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f002 fd31 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cc8:	200b      	movs	r0, #11
 8000cca:	f002 fd4a 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	200d      	movs	r0, #13
 8000cd4:	f002 fd29 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cd8:	200d      	movs	r0, #13
 8000cda:	f002 fd42 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	200e      	movs	r0, #14
 8000ce4:	f002 fd21 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce8:	200e      	movs	r0, #14
 8000cea:	f002 fd3a 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f002 fd19 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f002 fd32 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2011      	movs	r0, #17
 8000d04:	f002 fd11 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d08:	2011      	movs	r0, #17
 8000d0a:	f002 fd2a 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	202f      	movs	r0, #47	@ 0x2f
 8000d14:	f002 fd09 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d18:	202f      	movs	r0, #47	@ 0x2f
 8000d1a:	f002 fd22 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	2038      	movs	r0, #56	@ 0x38
 8000d24:	f002 fd01 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d28:	2038      	movs	r0, #56	@ 0x38
 8000d2a:	f002 fd1a 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	203b      	movs	r0, #59	@ 0x3b
 8000d34:	f002 fcf9 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d38:	203b      	movs	r0, #59	@ 0x3b
 8000d3a:	f002 fd12 	bl	8003762 <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a33      	ldr	r2, [pc, #204]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a2c      	ldr	r2, [pc, #176]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a25      	ldr	r2, [pc, #148]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_GPIO_Init+0xec>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2107      	movs	r1, #7
 8000df2:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_GPIO_Init+0xf0>)
 8000df4:	f003 fa80 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <MX_GPIO_Init+0xf0>)
 8000e10:	f003 f8de 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e14:	2304      	movs	r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e18:	2311      	movs	r3, #17
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_GPIO_Init+0xf0>)
 8000e2c:	f003 f8d0 	bl	8003fd0 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <Error_Handler+0x8>

08000e4c <PMIC_Init>:

/*
 * PMIC 드라이버 초기화
 * RTOS 세마포어 생성
 */
void PMIC_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    // 바이너리 세마포어 생성
    i2c_dma_semaphore = osSemaphoreNew(1, 0, NULL);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	f008 fcea 	bl	800982e <osSemaphoreNew>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <PMIC_Init+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
    if (i2c_dma_semaphore == NULL) {
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <PMIC_Init+0x24>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <PMIC_Init+0x20>
        // 세마포어 생성 실패 처리
        Error_Handler();
 8000e68:	f7ff ffea 	bl	8000e40 <Error_Handler>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000568 	.word	0x20000568

08000e74 <PMIC_Read_Faults>:

/**
 * DMA를 사용하여 PMIC의 Fault 관련 레지스터들을 연속으로 read
 */
HAL_StatusTypeDef PMIC_Read_Faults(uint8_t* pData, uint16_t Size) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
    // HAL_I2C_Mem_Read_DMA 함수를 호출하여 Non-Blocking I2C 읽기 시작
    // FSM_STATE_REG(0x05) 레지스터부터 Size 바이트만큼 read
    if (HAL_I2C_Mem_Read_DMA(&hi2c1, MP5475_I2C_SLAVE_ADDR, FSM_STATE_REG, I2C_MEMADD_SIZE_8BIT, pData, Size) != HAL_OK) {
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	21c0      	movs	r1, #192	@ 0xc0
 8000e8e:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <PMIC_Read_Faults+0x4c>)
 8000e90:	f003 fb90 	bl	80045b4 <HAL_I2C_Mem_Read_DMA>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <PMIC_Read_Faults+0x2a>
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00b      	b.n	8000eb6 <PMIC_Read_Faults+0x42>
    }

    // DMA 전송이 완료될 때까지 세마포어 대기 (Blocked)
    if (osSemaphoreAcquire(i2c_dma_semaphore, 100) == osOK) {
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <PMIC_Read_Faults+0x50>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2164      	movs	r1, #100	@ 0x64
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fd4b 	bl	8009940 <osSemaphoreAcquire>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <PMIC_Read_Faults+0x40>
        return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e000      	b.n	8000eb6 <PMIC_Read_Faults+0x42>
    } else {
        return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
    }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000a0 	.word	0x200000a0
 8000ec4:	20000568 	.word	0x20000568

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_MspInit+0x54>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	210f      	movs	r1, #15
 8000f0a:	f06f 0001 	mvn.w	r0, #1
 8000f0e:	f002 fc0c 	bl	800372a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_ADC_MspInit+0x7c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d127      	bne.n	8000f92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_ADC_MspInit+0x80>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_ADC_MspInit+0x84>)
 8000f8e:	f003 f81f 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <HAL_CAN_MspInit+0xa4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d13b      	bne.n	8001042 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000fd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_CAN_MspInit+0xa8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001002:	2303      	movs	r3, #3
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001012:	2309      	movs	r3, #9
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <HAL_CAN_MspInit+0xac>)
 800101e:	f002 ffd7 	bl	8003fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	2013      	movs	r0, #19
 8001028:	f002 fb7f 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800102c:	2013      	movs	r0, #19
 800102e:	f002 fb98 	bl	8003762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	2014      	movs	r0, #20
 8001038:	f002 fb77 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800103c:	2014      	movs	r0, #20
 800103e:	f002 fb90 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40006400 	.word	0x40006400
 8001050:	40023800 	.word	0x40023800
 8001054:	40021800 	.word	0x40021800

08001058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	@ 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a9c      	ldr	r2, [pc, #624]	@ (80012e8 <HAL_I2C_MspInit+0x290>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 809b 	bne.w	80011b2 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	4b9a      	ldr	r3, [pc, #616]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a99      	ldr	r2, [pc, #612]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b97      	ldr	r3, [pc, #604]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001098:	23c0      	movs	r3, #192	@ 0xc0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a8:	2304      	movs	r3, #4
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	488f      	ldr	r0, [pc, #572]	@ (80012f0 <HAL_I2C_MspInit+0x298>)
 80010b4:	f002 ff8c 	bl	8003fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4b8b      	ldr	r3, [pc, #556]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	4a8a      	ldr	r2, [pc, #552]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80010c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c8:	4b88      	ldr	r3, [pc, #544]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010d4:	4b87      	ldr	r3, [pc, #540]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010d6:	4a88      	ldr	r2, [pc, #544]	@ (80012f8 <HAL_I2C_MspInit+0x2a0>)
 80010d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010da:	4b86      	ldr	r3, [pc, #536]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b84      	ldr	r3, [pc, #528]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b82      	ldr	r3, [pc, #520]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b81      	ldr	r3, [pc, #516]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b7f      	ldr	r3, [pc, #508]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b7d      	ldr	r3, [pc, #500]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001102:	4b7c      	ldr	r3, [pc, #496]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001108:	4b7a      	ldr	r3, [pc, #488]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 800110a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001116:	4877      	ldr	r0, [pc, #476]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 8001118:	f002 fb3e 	bl	8003798 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001122:	f7ff fe8d 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a72      	ldr	r2, [pc, #456]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
 800112c:	4a71      	ldr	r2, [pc, #452]	@ (80012f4 <HAL_I2C_MspInit+0x29c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001132:	4b72      	ldr	r3, [pc, #456]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001134:	4a72      	ldr	r2, [pc, #456]	@ (8001300 <HAL_I2C_MspInit+0x2a8>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001138:	4b70      	ldr	r3, [pc, #448]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 800113a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800113e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001140:	4b6e      	ldr	r3, [pc, #440]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001142:	2240      	movs	r2, #64	@ 0x40
 8001144:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b6d      	ldr	r3, [pc, #436]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b6b      	ldr	r3, [pc, #428]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 800114e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001152:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b69      	ldr	r3, [pc, #420]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b68      	ldr	r3, [pc, #416]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001160:	4b66      	ldr	r3, [pc, #408]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001166:	4b65      	ldr	r3, [pc, #404]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001168:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800116c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b63      	ldr	r3, [pc, #396]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001174:	4861      	ldr	r0, [pc, #388]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001176:	f002 fb0f 	bl	8003798 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001180:	f7ff fe5e 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a5d      	ldr	r2, [pc, #372]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 8001188:	635a      	str	r2, [r3, #52]	@ 0x34
 800118a:	4a5c      	ldr	r2, [pc, #368]	@ (80012fc <HAL_I2C_MspInit+0x2a4>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	201f      	movs	r0, #31
 8001196:	f002 fac8 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800119a:	201f      	movs	r0, #31
 800119c:	f002 fae1 	bl	8003762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	2020      	movs	r0, #32
 80011a6:	f002 fac0 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011aa:	2020      	movs	r0, #32
 80011ac:	f002 fad9 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011b0:	e095      	b.n	80012de <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a53      	ldr	r2, [pc, #332]	@ (8001304 <HAL_I2C_MspInit+0x2ac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	f040 8090 	bne.w	80012de <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b4a      	ldr	r3, [pc, #296]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011da:	2303      	movs	r3, #3
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ea:	2304      	movs	r3, #4
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4844      	ldr	r0, [pc, #272]	@ (8001308 <HAL_I2C_MspInit+0x2b0>)
 80011f6:	f002 feeb 	bl	8003fd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a3a      	ldr	r2, [pc, #232]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 8001204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <HAL_I2C_MspInit+0x294>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001218:	4a3d      	ldr	r2, [pc, #244]	@ (8001310 <HAL_I2C_MspInit+0x2b8>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800121c:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800121e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001222:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b36      	ldr	r3, [pc, #216]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001236:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001250:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001256:	482d      	ldr	r0, [pc, #180]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 8001258:	f002 fa9e 	bl	8003798 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8001262:	f7ff fded 	bl	8000e40 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a28      	ldr	r2, [pc, #160]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800126a:	639a      	str	r2, [r3, #56]	@ 0x38
 800126c:	4a27      	ldr	r2, [pc, #156]	@ (800130c <HAL_I2C_MspInit+0x2b4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 8001274:	4a28      	ldr	r2, [pc, #160]	@ (8001318 <HAL_I2C_MspInit+0x2c0>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 800127a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800127e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012b4:	f002 fa70 	bl	8003798 <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80012be:	f7ff fdbf 	bl	8000e40 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_I2C_MspInit+0x2bc>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2021      	movs	r0, #33	@ 0x21
 80012d4:	f002 fa29 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012d8:	2021      	movs	r0, #33	@ 0x21
 80012da:	f002 fa42 	bl	8003762 <HAL_NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	@ 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400
 80012f4:	20000148 	.word	0x20000148
 80012f8:	40026010 	.word	0x40026010
 80012fc:	200001a8 	.word	0x200001a8
 8001300:	400260a0 	.word	0x400260a0
 8001304:	40005800 	.word	0x40005800
 8001308:	40021400 	.word	0x40021400
 800130c:	20000208 	.word	0x20000208
 8001310:	40026040 	.word	0x40026040
 8001314:	20000268 	.word	0x20000268
 8001318:	400260b8 	.word	0x400260b8

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	@ 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a4a      	ldr	r2, [pc, #296]	@ (8001464 <HAL_SPI_MspInit+0x148>)
 800133a:	4293      	cmp	r3, r2
 800133c:	f040 80a0 	bne.w	8001480 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	4b48      	ldr	r3, [pc, #288]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	4a47      	ldr	r2, [pc, #284]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 800134a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800134e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001350:	4b45      	ldr	r3, [pc, #276]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a40      	ldr	r2, [pc, #256]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <HAL_SPI_MspInit+0x14c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001378:	23e0      	movs	r3, #224	@ 0xe0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001388:	2305      	movs	r3, #5
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4836      	ldr	r0, [pc, #216]	@ (800146c <HAL_SPI_MspInit+0x150>)
 8001394:	f002 fe1c 	bl	8003fd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 800139a:	4a36      	ldr	r2, [pc, #216]	@ (8001474 <HAL_SPI_MspInit+0x158>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a6:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ac:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d2:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013d8:	4825      	ldr	r0, [pc, #148]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013da:	f002 f9dd 	bl	8003798 <HAL_DMA_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013e4:	f7ff fd2c 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013ee:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <HAL_SPI_MspInit+0x154>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_SPI_MspInit+0x160>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 80013fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001400:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001414:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001434:	4810      	ldr	r0, [pc, #64]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001436:	f002 f9af 	bl	8003798 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001440:	f7ff fcfe 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 8001448:	649a      	str	r2, [r3, #72]	@ 0x48
 800144a:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_SPI_MspInit+0x15c>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2105      	movs	r1, #5
 8001454:	2023      	movs	r0, #35	@ 0x23
 8001456:	f002 f968 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800145a:	2023      	movs	r0, #35	@ 0x23
 800145c:	f002 f981 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001460:	e0c1      	b.n	80015e6 <HAL_SPI_MspInit+0x2ca>
 8001462:	bf00      	nop
 8001464:	40013000 	.word	0x40013000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	20000378 	.word	0x20000378
 8001474:	40026410 	.word	0x40026410
 8001478:	200003d8 	.word	0x200003d8
 800147c:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a5a      	ldr	r2, [pc, #360]	@ (80015f0 <HAL_SPI_MspInit+0x2d4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f040 80ad 	bne.w	80015e6 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	4b58      	ldr	r3, [pc, #352]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	4a57      	ldr	r2, [pc, #348]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
 800149c:	4b55      	ldr	r3, [pc, #340]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a50      	ldr	r2, [pc, #320]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b4e      	ldr	r3, [pc, #312]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	4a49      	ldr	r2, [pc, #292]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d4:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_SPI_MspInit+0x2d8>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014e0:	230c      	movs	r3, #12
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f0:	2305      	movs	r3, #5
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	483f      	ldr	r0, [pc, #252]	@ (80015f8 <HAL_SPI_MspInit+0x2dc>)
 80014fc:	f002 fd68 	bl	8003fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001512:	2305      	movs	r3, #5
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4837      	ldr	r0, [pc, #220]	@ (80015fc <HAL_SPI_MspInit+0x2e0>)
 800151e:	f002 fd57 	bl	8003fd0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001524:	4a37      	ldr	r2, [pc, #220]	@ (8001604 <HAL_SPI_MspInit+0x2e8>)
 8001526:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 800153c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001554:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001560:	4827      	ldr	r0, [pc, #156]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001562:	f002 f919 	bl	8003798 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 800156c:	f7ff fc68 	bl	8000e40 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001574:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001576:	4a22      	ldr	r2, [pc, #136]	@ (8001600 <HAL_SPI_MspInit+0x2e4>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_SPI_MspInit+0x2f0>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 800158a:	2240      	movs	r2, #64	@ 0x40
 800158c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 8001596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80015ba:	4813      	ldr	r0, [pc, #76]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015bc:	f002 f8ec 	bl	8003798 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 80015c6:	f7ff fc3b 	bl	8000e40 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015ce:	649a      	str	r2, [r3, #72]	@ 0x48
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <HAL_SPI_MspInit+0x2ec>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2105      	movs	r1, #5
 80015da:	2024      	movs	r0, #36	@ 0x24
 80015dc:	f002 f8a5 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015e0:	2024      	movs	r0, #36	@ 0x24
 80015e2:	f002 f8be 	bl	8003762 <HAL_NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	@ 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40003800 	.word	0x40003800
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020400 	.word	0x40020400
 8001600:	20000438 	.word	0x20000438
 8001604:	40026058 	.word	0x40026058
 8001608:	20000498 	.word	0x20000498
 800160c:	40026070 	.word	0x40026070

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	@ (80016c4 <HAL_UART_MspInit+0xb4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d144      	bne.n	80016bc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 800163c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_UART_MspInit+0xb8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <HAL_UART_MspInit+0xbc>)
 8001686:	f002 fca3 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800168a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 800169c:	230b      	movs	r3, #11
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4809      	ldr	r0, [pc, #36]	@ (80016cc <HAL_UART_MspInit+0xbc>)
 80016a8:	f002 fc92 	bl	8003fd0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2034      	movs	r0, #52	@ 0x34
 80016b2:	f002 f83a 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016b6:	2034      	movs	r0, #52	@ 0x34
 80016b8:	f002 f853 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004c00 	.word	0x40004c00
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 fd6b 	bl	80021e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800170e:	f00a fae5 	bl	800bcdc <xTaskGetSchedulerState>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d001      	beq.n	800171c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001718:	f00b f9de 	bl	800cad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA1_Stream0_IRQHandler+0x10>)
 8001726:	f002 f9cf 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000148 	.word	0x20000148

08001734 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA1_Stream2_IRQHandler+0x10>)
 800173a:	f002 f9c5 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000208 	.word	0x20000208

08001748 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Stream3_IRQHandler+0x10>)
 800174e:	f002 f9bb 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000438 	.word	0x20000438

0800175c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Stream4_IRQHandler+0x10>)
 8001762:	f002 f9b1 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000498 	.word	0x20000498

08001770 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream6_IRQHandler+0x10>)
 8001776:	f002 f9a7 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001a8 	.word	0x200001a8

08001784 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <CAN1_TX_IRQHandler+0x10>)
 800178a:	f001 fcc4 	bl	8003116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000078 	.word	0x20000078

08001798 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <CAN1_RX0_IRQHandler+0x10>)
 800179e:	f001 fcba 	bl	8003116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000078 	.word	0x20000078

080017ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <I2C1_EV_IRQHandler+0x10>)
 80017b2:	f003 f893 	bl	80048dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200000a0 	.word	0x200000a0

080017c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <I2C1_ER_IRQHandler+0x10>)
 80017c6:	f003 f9fa 	bl	8004bbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000a0 	.word	0x200000a0

080017d4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <I2C2_EV_IRQHandler+0x10>)
 80017da:	f003 f87f 	bl	80048dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000f4 	.word	0x200000f4

080017e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <SPI1_IRQHandler+0x10>)
 80017ee:	f006 fb11 	bl	8007e14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002c8 	.word	0x200002c8

080017fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <SPI2_IRQHandler+0x10>)
 8001802:	f006 fb07 	bl	8007e14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000320 	.word	0x20000320

08001810 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <DMA1_Stream7_IRQHandler+0x10>)
 8001816:	f002 f957 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000268 	.word	0x20000268

08001824 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <UART4_IRQHandler+0x10>)
 800182a:	f006 fef1 	bl	8008610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200004f8 	.word	0x200004f8

08001838 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA2_Stream0_IRQHandler+0x10>)
 800183e:	f002 f943 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000378 	.word	0x20000378

0800184c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <DMA2_Stream3_IRQHandler+0x10>)
 8001852:	f002 f939 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003d8 	.word	0x200003d8

08001860 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

/* PMIC Fault Read Callback */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_I2C_MemRxCpltCallback+0x24>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d104      	bne.n	800187c <HAL_I2C_MemRxCpltCallback+0x1c>
    // Blocked I2CTask를 깨우기 위해 세마포어 반납
    osSemaphoreRelease(i2c_dma_semaphore);
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f008 f8b4 	bl	80099e4 <osSemaphoreRelease>
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	20000568 	.word	0x20000568

0800188c <HAL_SPI_TxCpltCallback>:

/* EEPROM Write Callback */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <HAL_SPI_TxCpltCallback+0x24>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d104      	bne.n	80018a8 <HAL_SPI_TxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_SPI_TxCpltCallback+0x28>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 f89e 	bl	80099e4 <osSemaphoreRelease>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013000 	.word	0x40013000
 80018b4:	2000002c 	.word	0x2000002c

080018b8 <HAL_SPI_TxRxCpltCallback>:

/* EEPROM Read Callback */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <HAL_SPI_TxRxCpltCallback+0x24>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d104      	bne.n	80018d4 <HAL_SPI_TxRxCpltCallback+0x1c>
    osSemaphoreRelease(spi_dma_semaphore);
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_SPI_TxRxCpltCallback+0x28>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f008 f888 	bl	80099e4 <osSemaphoreRelease>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40013000 	.word	0x40013000
 80018e0:	2000002c 	.word	0x2000002c

080018e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN 수신 FIFO 0에 메시지가 도착했을 때 호출되는 콜백 함수 */
extern osMessageQueueId_t CanQueueHandle;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	@ 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    CAN_Message_t rx_msg;

    // 1. 수신된 CAN 메시지를 하드웨어 버퍼에서 읽어온다. 
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_msg.header, rx_msg.data) == HAL_OK) {
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	331c      	adds	r3, #28
 80018f2:	f107 020c 	add.w	r2, r7, #12
 80018f6:	2100      	movs	r1, #0
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 fad4 	bl	8002ea6 <HAL_CAN_GetRxMessage>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        // 2. 읽어온 메시지를 CanQueueHandle 메시지 큐로 전송한다.
        //    ISR에서는 타임아웃을 0으로 설정하여 절대 대기하지 않는다.
        osMessageQueuePut(CanQueueHandle, &rx_msg, 0, 0);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f107 010c 	add.w	r1, r7, #12
 800190c:	2300      	movs	r3, #0
 800190e:	2200      	movs	r2, #0
 8001910:	f008 f920 	bl	8009b54 <osMessageQueuePut>
    }
}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	@ 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000554 	.word	0x20000554

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <StartI2CTask>:

/**
 * I2CTask는 1ms 주기로 PMIC의 Fault 상태를 확인하여,
 * 새롭게 발생한 Fault가 있으면 SPITask로 DTC 이벤트 큐를 전송한다.
 */
void StartI2CTask(void *argument) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	@ 0x30
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  static uint8_t previous_faults[5] = {0};   // 이전 Fault 상태를 저장하기 위한 static 변수
  static bool is_i2c_com_failed = false;      // I2C 통신 실패 상태 추적 플래그

  for(;;)
  {
    osDelay(1);
 800194c:	2001      	movs	r0, #1
 800194e:	f007 fe45 	bl	80095dc <osDelay>

    if (PMIC_Read_Faults(current_faults, 5) == HAL_OK) {
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	2105      	movs	r1, #5
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa8b 	bl	8000e74 <PMIC_Read_Faults>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 80fe 	bne.w	8001b62 <StartI2CTask+0x21e>

      MP5475_Reg07_Status* pCurReg07 = (MP5475_Reg07_Status*)&current_faults[2];
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	3302      	adds	r3, #2
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      MP5475_Reg08_Status* pCurReg08 = (MP5475_Reg08_Status*)&current_faults[3];
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	3303      	adds	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
      MP5475_Reg09_Status* pCurReg09 = (MP5475_Reg09_Status*)&current_faults[4];
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	3304      	adds	r3, #4
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24

      MP5475_Reg07_Status* pPrevReg07 = (MP5475_Reg07_Status*)&previous_faults[2];
 800197e:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <StartI2CTask+0x250>)
 8001980:	623b      	str	r3, [r7, #32]
      MP5475_Reg08_Status* pPrevReg08 = (MP5475_Reg08_Status*)&previous_faults[3];
 8001982:	4b85      	ldr	r3, [pc, #532]	@ (8001b98 <StartI2CTask+0x254>)
 8001984:	61fb      	str	r3, [r7, #28]
      MP5475_Reg09_Status* pPrevReg09 = (MP5475_Reg09_Status*)&previous_faults[4];
 8001986:	4b85      	ldr	r3, [pc, #532]	@ (8001b9c <StartI2CTask+0x258>)
 8001988:	61bb      	str	r3, [r7, #24]

      DTC_RequestMessage_t msg;
      msg.type = SAVE_DTC_REQUEST;
 800198a:	2300      	movs	r3, #0
 800198c:	733b      	strb	r3, [r7, #12]

      /* 0x07 레지스터: UV Fault 상태 확인 */
      if (pCurReg07->bits.bucka_uv && !pPrevReg07->bits.bucka_uv) {
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <StartI2CTask+0x7c>
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <StartI2CTask+0x7c>
        msg.dtc_code = DTC_C1221_BUCK_A_UV; 
 80019aa:	f241 2321 	movw	r3, #4641	@ 0x1221
 80019ae:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 80019b0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba0 <StartI2CTask+0x25c>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f107 010c 	add.w	r1, r7, #12
 80019b8:	2300      	movs	r3, #0
 80019ba:	2200      	movs	r2, #0
 80019bc:	f008 f8ca 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckb_uv && !pPrevReg07->bits.buckb_uv) {
 80019c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d011      	beq.n	80019f2 <StartI2CTask+0xae>
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <StartI2CTask+0xae>
        msg.dtc_code = DTC_C1222_BUCK_B_UV; 
 80019dc:	f241 2322 	movw	r3, #4642	@ 0x1222
 80019e0:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 80019e2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <StartI2CTask+0x25c>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f107 010c 	add.w	r1, r7, #12
 80019ea:	2300      	movs	r3, #0
 80019ec:	2200      	movs	r2, #0
 80019ee:	f008 f8b1 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckc_uv && !pPrevReg07->bits.buckc_uv) {
 80019f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d011      	beq.n	8001a24 <StartI2CTask+0xe0>
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <StartI2CTask+0xe0>
        msg.dtc_code = DTC_C1242_BUCK_C_UV; 
 8001a0e:	f241 2342 	movw	r3, #4674	@ 0x1242
 8001a12:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a14:	4b62      	ldr	r3, [pc, #392]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f107 010c 	add.w	r1, r7, #12
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f008 f898 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg07->bits.buckd_uv && !pPrevReg07->bits.buckd_uv) {
 8001a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d011      	beq.n	8001a56 <StartI2CTask+0x112>
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <StartI2CTask+0x112>
        msg.dtc_code = DTC_C0577_BUCK_D_UV; 
 8001a40:	f240 5377 	movw	r3, #1399	@ 0x577
 8001a44:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a46:	4b56      	ldr	r3, [pc, #344]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f107 010c 	add.w	r1, r7, #12
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2200      	movs	r2, #0
 8001a52:	f008 f87f 	bl	8009b54 <osMessageQueuePut>
      }

      /* 0x08 레지스터: OC Fault 상태 확인 */
      if (pCurReg08->bits.bucka_oc && !pPrevReg08->bits.bucka_oc) {
 8001a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d011      	beq.n	8001a88 <StartI2CTask+0x144>
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <StartI2CTask+0x144>
        msg.dtc_code = DTC_C1232_BUCK_A_OC; 
 8001a72:	f241 2332 	movw	r3, #4658	@ 0x1232
 8001a76:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001a78:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 010c 	add.w	r1, r7, #12
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	f008 f866 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckb_oc && !pPrevReg08->bits.buckb_oc) {
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d011      	beq.n	8001aba <StartI2CTask+0x176>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <StartI2CTask+0x176>
        msg.dtc_code = DTC_C1233_BUCK_B_OC; 
 8001aa4:	f241 2333 	movw	r3, #4659	@ 0x1233
 8001aa8:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f008 f84d 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckc_oc && !pPrevReg08->bits.buckc_oc) {
 8001aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d011      	beq.n	8001aec <StartI2CTask+0x1a8>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <StartI2CTask+0x1a8>
        msg.dtc_code = DTC_C1217_BUCK_C_OC; 
 8001ad6:	f241 2317 	movw	r3, #4631	@ 0x1217
 8001ada:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001adc:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f107 010c 	add.w	r1, r7, #12
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f008 f834 	bl	8009b54 <osMessageQueuePut>
      }
      if (pCurReg08->bits.buckd_oc && !pPrevReg08->bits.buckd_oc) {
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d011      	beq.n	8001b1e <StartI2CTask+0x1da>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <StartI2CTask+0x1da>
        msg.dtc_code = DTC_C0121_BUCK_D_OC; 
 8001b08:	f240 1321 	movw	r3, #289	@ 0x121
 8001b0c:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f107 010c 	add.w	r1, r7, #12
 8001b16:	2300      	movs	r3, #0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f008 f81b 	bl	8009b54 <osMessageQueuePut>
      }

      /* 0x09 레지스터: 시스템 Fault 상태 확인 */
      if (pCurReg09->bits.pmic_high_temp_shutdown && !pPrevReg09->bits.pmic_high_temp_shutdown) {
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d011      	beq.n	8001b50 <StartI2CTask+0x20c>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <StartI2CTask+0x20c>
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL; 
 8001b3a:	f240 1321 	movw	r3, #289	@ 0x121
 8001b3e:	81fb      	strh	r3, [r7, #14]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 010c 	add.w	r1, r7, #12
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f008 f802 	bl	8009b54 <osMessageQueuePut>
      }

      memcpy(previous_faults, current_faults, 5);
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <StartI2CTask+0x260>)
 8001b52:	f107 0210 	add.w	r2, r7, #16
 8001b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5a:	6018      	str	r0, [r3, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	7019      	strb	r1, [r3, #0]
 8001b60:	e6f4      	b.n	800194c <StartI2CTask+0x8>

    } else {
      // 이전에 통신 실패 상태가 아니었을 때만 DTC를 한 번 전송하여 중복 방지
      if (!is_i2c_com_failed) {
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <StartI2CTask+0x264>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f43f aeed 	beq.w	800194c <StartI2CTask+0x8>
        is_i2c_com_failed = true; // 통신 실패 상태로 설정
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <StartI2CTask+0x264>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
        DTC_RequestMessage_t msg;
        msg.type = SAVE_DTC_REQUEST;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	723b      	strb	r3, [r7, #8]
        // PMIC와 통신이 두절된 것은 브레이크 시스템 전체와의 통신 두절로 간주
        msg.dtc_code = DTC_U0121_SYSTEM_FAIL;
 8001b7c:	f240 1321 	movw	r3, #289	@ 0x121
 8001b80:	817b      	strh	r3, [r7, #10]
        osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <StartI2CTask+0x25c>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f107 0108 	add.w	r1, r7, #8
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f007 ffe1 	bl	8009b54 <osMessageQueuePut>
    osDelay(1);
 8001b92:	e6db      	b.n	800194c <StartI2CTask+0x8>
 8001b94:	2000056e 	.word	0x2000056e
 8001b98:	2000056f 	.word	0x2000056f
 8001b9c:	20000570 	.word	0x20000570
 8001ba0:	2000055c 	.word	0x2000055c
 8001ba4:	2000056c 	.word	0x2000056c
 8001ba8:	20000571 	.word	0x20000571

08001bac <StartSPITask>:
}

/*
 * SPITask는 DTC 관련 요청을 받아 EEPROM에 읽고 쓰는 역할을 전담한다.
 */
void StartSPITask(void *argument) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	@ 0x48
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  DTC_RequestMessage_t request_msg;
  osStatus_t status;

  for(;;) {
    // DTC_RequestQueueHandle에 메시지가 도착할 때까지 Blocked
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 8001bb4:	4b66      	ldr	r3, [pc, #408]	@ (8001d50 <StartSPITask+0x1a4>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f008 f827 	bl	8009c14 <osMessageQueueGet>
 8001bc6:	6378      	str	r0, [r7, #52]	@ 0x34

    if (status == osOK) {
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f2      	bne.n	8001bb4 <StartSPITask+0x8>
      // EEPROM 접근을 위해 뮤텍스를 점유
      if (osMutexAcquire(EepromMutexHandle, 100) == osOK) {
 8001bce:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <StartSPITask+0x1a8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2164      	movs	r1, #100	@ 0x64
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f007 fda2 	bl	800971e <osMutexAcquire>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <StartSPITask+0x8>
        switch (request_msg.type) {
 8001be0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f000 809c 	beq.w	8001d22 <StartSPITask+0x176>
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f300 80aa 	bgt.w	8001d44 <StartSPITask+0x198>
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <StartSPITask+0x4e>
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d05c      	beq.n	8001cb2 <StartSPITask+0x106>
 8001bf8:	e0a4      	b.n	8001d44 <StartSPITask+0x198>
          case SAVE_DTC_REQUEST:
          {
            // 1. 현재 저장된 DTC 목록을 EEPROM에서 읽어온다. 
            DTC_Code_t stored_dtcs[MAX_DTC_COUNT] = {0};
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	2220      	movs	r2, #32
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00b f9e8 	bl	800cfd8 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)stored_dtcs, sizeof(stored_dtcs));
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c14:	f7fe fd72 	bl	80006fc <EEPROM_Read_DTCs>

            // 2. 이미 저장된 DTC인지, 빈 공간이 있는지 확인한다.
            bool already_exists = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            int empty_slot = -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c28:	e027      	b.n	8001c7a <StartSPITask+0xce>
              if (stored_dtcs[i] == request_msg.dtc_code) {
 8001c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	3348      	adds	r3, #72	@ 0x48
 8001c30:	443b      	add	r3, r7
 8001c32:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 8001c36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d103      	bne.n	8001c44 <StartSPITask+0x98>
                already_exists = true;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8001c42:	e01d      	b.n	8001c80 <StartSPITask+0xd4>
              }
              if ((stored_dtcs[i] == 0x0000 || stored_dtcs[i] == 0xFFFF) && empty_slot == -1) {
 8001c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	3348      	adds	r3, #72	@ 0x48
 8001c4a:	443b      	add	r3, r7
 8001c4c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <StartSPITask+0xbc>
 8001c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	3348      	adds	r3, #72	@ 0x48
 8001c5a:	443b      	add	r3, r7
 8001c5c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d105      	bne.n	8001c74 <StartSPITask+0xc8>
 8001c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d101      	bne.n	8001c74 <StartSPITask+0xc8>
                empty_slot = i;
 8001c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c76:	3301      	adds	r3, #1
 8001c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	ddd4      	ble.n	8001c2a <StartSPITask+0x7e>
              }
            }

            // 3. 중복되지 않았고, 빈 공간이 있으면 새로운 DTC를 추가하고 EEPROM에 쓴다.
            if (!already_exists && empty_slot != -1) {
 8001c80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d059      	beq.n	8001d42 <StartSPITask+0x196>
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d055      	beq.n	8001d42 <StartSPITask+0x196>
              uint16_t write_address = DTC_STORAGE_START_ADDRESS + (empty_slot * DTC_ENTRY_SIZE);
 8001c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c98:	3380      	adds	r3, #128	@ 0x80
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	867b      	strh	r3, [r7, #50]	@ 0x32
              EEPROM_Write_DTC(write_address, (uint8_t*)&request_msg.dtc_code, DTC_ENTRY_SIZE);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca4:	1c99      	adds	r1, r3, #2
 8001ca6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fcb0 	bl	8000610 <EEPROM_Write_DTC>
            }
            break;
 8001cb0:	e047      	b.n	8001d42 <StartSPITask+0x196>
          }

          case READ_ALL_DTCS_REQUEST:
          {
            DTC_ResponseMessage_t response_msg = {0};
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	2222      	movs	r2, #34	@ 0x22
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00b f98c 	bl	800cfd8 <memset>
            EEPROM_Read_DTCs(DTC_STORAGE_START_ADDRESS, (uint8_t*)response_msg.dtc_list, sizeof(response_msg.dtc_list));
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001cce:	f7fe fd15 	bl	80006fc <EEPROM_Read_DTCs>

            // 유효한 DTC 개수 카운트
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd6:	e018      	b.n	8001d0a <StartSPITask+0x15e>
              if (response_msg.dtc_list[i] != 0x0000 && response_msg.dtc_list[i] != 0xFFFF) {
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	3348      	adds	r3, #72	@ 0x48
 8001cde:	443b      	add	r3, r7
 8001ce0:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <StartSPITask+0x158>
 8001ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3348      	adds	r3, #72	@ 0x48
 8001cee:	443b      	add	r3, r7
 8001cf0:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8001cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <StartSPITask+0x158>
                response_msg.dtc_count++;
 8001cfc:	7a3b      	ldrb	r3, [r7, #8]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	723b      	strb	r3, [r7, #8]
            for (int i = 0; i < MAX_DTC_COUNT; i++) {
 8001d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d06:	3301      	adds	r3, #1
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	dde3      	ble.n	8001cd8 <StartSPITask+0x12c>
              }
            }
            // CANTask로 응답 전송
            osMessageQueuePut(DTC_ResponseQueueHandle, &response_msg, 0, 10);
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <StartSPITask+0x1ac>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f107 0108 	add.w	r1, r7, #8
 8001d18:	230a      	movs	r3, #10
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f007 ff1a 	bl	8009b54 <osMessageQueuePut>
            break;
 8001d20:	e010      	b.n	8001d44 <StartSPITask+0x198>
          }

          case CLEAR_ALL_DTCS_REQUEST:
          {
            uint8_t clear_buffer[MAX_DTC_COUNT * DTC_ENTRY_SIZE];
            memset(clear_buffer, 0xFF, sizeof(clear_buffer)); // EEPROM은 보통 0xFF로 지움
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2220      	movs	r2, #32
 8001d28:	21ff      	movs	r1, #255	@ 0xff
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00b f954 	bl	800cfd8 <memset>
            EEPROM_Write_DTC(DTC_STORAGE_START_ADDRESS, clear_buffer, sizeof(clear_buffer));
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	2220      	movs	r2, #32
 8001d36:	4619      	mov	r1, r3
 8001d38:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d3c:	f7fe fc68 	bl	8000610 <EEPROM_Write_DTC>
            break;
 8001d40:	e000      	b.n	8001d44 <StartSPITask+0x198>
            break;
 8001d42:	bf00      	nop
          }
        }
        // 작업이 끝났으므로 뮤텍스를 반드시 해제한다.
        osMutexRelease(EepromMutexHandle);
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <StartSPITask+0x1a8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fd33 	bl	80097b4 <osMutexRelease>
    status = osMessageQueueGet(DTC_RequestQueueHandle, &request_msg, NULL, osWaitForever);
 8001d4e:	e731      	b.n	8001bb4 <StartSPITask+0x8>
 8001d50:	2000055c 	.word	0x2000055c
 8001d54:	20000564 	.word	0x20000564
 8001d58:	20000560 	.word	0x20000560

08001d5c <StartCANTask>:

/* 
 * CAN 메시지 수신을 기다리다가, 진단 요청이 오면 처리한다. 
 */
void StartCANTask(void *argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	@ 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  CAN_Message_t rx_msg;
  osStatus_t status;

  // CAN 드라이버 초기화 및 인터럽트 활성화
  CAN_Init();
 8001d64:	f000 f984 	bl	8002070 <CAN_Init>

  for(;;)
  {
    // CanQueueHandle에 메시지가 도착할 때까지 Blocked
    status = osMessageQueueGet(CanQueueHandle, &rx_msg, NULL, osWaitForever);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <StartCANTask+0x3c>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f107 0108 	add.w	r1, r7, #8
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	2200      	movs	r2, #0
 8001d76:	f007 ff4d 	bl	8009c14 <osMessageQueueGet>
 8001d7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status == osOK) {
 8001d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f2      	bne.n	8001d68 <StartCANTask+0xc>
      // 수신된 메시지 ID가 진단 요청 ID(0x7DF)일 경우에만 처리
      if (rx_msg.header.StdId == CAN_ID_DIAG_REQUEST) {
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f240 72df 	movw	r2, #2015	@ 0x7df
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d1ed      	bne.n	8001d68 <StartCANTask+0xc>
        Process_CAN_Response(&rx_msg);
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f803 	bl	8001d9c <Process_CAN_Response>
    status = osMessageQueueGet(CanQueueHandle, &rx_msg, NULL, osWaitForever);
 8001d96:	e7e7      	b.n	8001d68 <StartCANTask+0xc>
 8001d98:	20000554 	.word	0x20000554

08001d9c <Process_CAN_Response>:
/**
 * 수신된 UDS 진단 요청 메시지를 파싱하고 처리한다.
 * rx_msg: 수신된 CAN 메시지 데이터
 */
static void Process_CAN_Response(CAN_Message_t* rx_msg)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	@ 0x50
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint8_t sid = rx_msg->data[1]; // Service ID
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f5b      	ldrb	r3, [r3, #29]
 8001da8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  switch (sid) {
 8001dac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001db0:	2b14      	cmp	r3, #20
 8001db2:	f000 8092 	beq.w	8001eda <Process_CAN_Response+0x13e>
 8001db6:	2b19      	cmp	r3, #25
 8001db8:	f040 80aa 	bne.w	8001f10 <Process_CAN_Response+0x174>

    case SID_READ_DTC_INFO: // 0x19 - DTC 정보 읽기 요청
    {
      // 1. SPITask에게 "모든 DTC를 읽어달라"고 요청
      DTC_RequestMessage_t request_to_spi;
      request_to_spi.type = READ_ALL_DTCS_REQUEST;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
      osMessageQueuePut(DTC_RequestQueueHandle, &request_to_spi, 0, 10);
 8001dc2:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <Process_CAN_Response+0x17c>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001dca:	230a      	movs	r3, #10
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f007 fec1 	bl	8009b54 <osMessageQueuePut>

      // 2. SPITask로부터 응답이 올 때까지 잠시 Blocked
      DTC_ResponseMessage_t response_from_spi;
      if (osMessageQueueGet(DTC_ResponseQueueHandle, &response_from_spi, NULL, 100) == osOK) {
 8001dd2:	4b52      	ldr	r3, [pc, #328]	@ (8001f1c <Process_CAN_Response+0x180>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f107 010c 	add.w	r1, r7, #12
 8001dda:	2364      	movs	r3, #100	@ 0x64
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f007 ff19 	bl	8009c14 <osMessageQueueGet>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8092 	bne.w	8001f0e <Process_CAN_Response+0x172>
        // 3. UDS 프로토콜에 맞춰 응답 메시지 포맷팅
        uint8_t tx_data[8] = {0};
 8001dea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
        uint8_t valid_dtc_count = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // 유효한 DTC만 필터링하여 응답 데이터 구성
        for (int i = 0; i < MAX_DTC_COUNT && valid_dtc_count < 2; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dfe:	e049      	b.n	8001e94 <Process_CAN_Response+0xf8>
            if (response_from_spi.dtc_list[i] != 0x0000 && response_from_spi.dtc_list[i] != 0xFFFF) {
 8001e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	3350      	adds	r3, #80	@ 0x50
 8001e06:	443b      	add	r3, r7
 8001e08:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03e      	beq.n	8001e8e <Process_CAN_Response+0xf2>
 8001e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	3350      	adds	r3, #80	@ 0x50
 8001e16:	443b      	add	r3, r7
 8001e18:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d034      	beq.n	8001e8e <Process_CAN_Response+0xf2>
                if (valid_dtc_count == 0) { // 첫 번째 DTC
 8001e24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d117      	bne.n	8001e5c <Process_CAN_Response+0xc0>
                    tx_data[3] = (response_from_spi.dtc_list[i] >> 8) & 0xFF; // DTC High Byte
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	3350      	adds	r3, #80	@ 0x50
 8001e32:	443b      	add	r3, r7
 8001e34:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                    tx_data[4] = response_from_spi.dtc_list[i] & 0xFF;        // DTC Low Byte
 8001e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	3350      	adds	r3, #80	@ 0x50
 8001e48:	443b      	add	r3, r7
 8001e4a:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    tx_data[5] = 0x09; // DTC Status (exmple)
 8001e54:	2309      	movs	r3, #9
 8001e56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001e5a:	e013      	b.n	8001e84 <Process_CAN_Response+0xe8>
                } else { // 두 번째 DTC
                    tx_data[6] = (response_from_spi.dtc_list[i] >> 8) & 0xFF;
 8001e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	3350      	adds	r3, #80	@ 0x50
 8001e62:	443b      	add	r3, r7
 8001e64:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                    tx_data[7] = response_from_spi.dtc_list[i] & 0xFF;
 8001e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	3350      	adds	r3, #80	@ 0x50
 8001e78:	443b      	add	r3, r7
 8001e7a:	f833 3c42 	ldrh.w	r3, [r3, #-66]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                }
                valid_dtc_count++;
 8001e84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        for (int i = 0; i < MAX_DTC_COUNT && valid_dtc_count < 2; i++) {
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e90:	3301      	adds	r3, #1
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	dc03      	bgt.n	8001ea2 <Process_CAN_Response+0x106>
 8001e9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d9ae      	bls.n	8001e00 <Process_CAN_Response+0x64>
            }
        }

        // PCI 및 SID, Sub-function 설정
        tx_data[0] = 1 + (valid_dtc_count * 3); // PCI: SID + SubFunc + DTCs
 8001ea2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	0052      	lsls	r2, r2, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        tx_data[1] = SID_READ_DTC_INFO | SID_POSITIVE_RESPONSE_MASK; // 0x59
 8001eb6:	2359      	movs	r3, #89	@ 0x59
 8001eb8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        tx_data[2] = SUB_FUNC_DTC_BY_STATUS_MASK; // 0x02
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

        // 4. 진단기로 최종 응답 전송
        CAN_SendMessage(CAN_ID_DIAG_RESPONSE, tx_data, tx_data[0] + 1);
 8001ec2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8001ed4:	f000 f8e4 	bl	80020a0 <CAN_SendMessage>
      }
      break;
 8001ed8:	e019      	b.n	8001f0e <Process_CAN_Response+0x172>

    case SID_CLEAR_DIAG_INFO: // 0x14 - DTC 삭제 요청
    {
      // 1. SPITask에게 "모든 DTC를 삭제해달라"고 요청
      DTC_RequestMessage_t request_to_spi;
      request_to_spi.type = CLEAR_ALL_DTCS_REQUEST;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      osMessageQueuePut(DTC_RequestQueueHandle, &request_to_spi, 0, 10);
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <Process_CAN_Response+0x17c>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001ee8:	230a      	movs	r3, #10
 8001eea:	2200      	movs	r2, #0
 8001eec:	f007 fe32 	bl	8009b54 <osMessageQueuePut>

      // 2. UDS 프로토콜에 맞춰 긍정 응답 메시지 포맷팅
      uint8_t tx_data[2];
      tx_data[0] = 0x01; // PCI
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
      tx_data[1] = SID_CLEAR_DIAG_INFO | SID_POSITIVE_RESPONSE_MASK; // 0x54
 8001ef6:	2354      	movs	r3, #84	@ 0x54
 8001ef8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

      // 3. 진단기로 최종 응답 전송
      CAN_SendMessage(CAN_ID_DIAG_RESPONSE, tx_data, 2);
 8001efc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f00:	2202      	movs	r2, #2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8001f08:	f000 f8ca 	bl	80020a0 <CAN_SendMessage>
      break;
 8001f0c:	e000      	b.n	8001f10 <Process_CAN_Response+0x174>
      break;
 8001f0e:	bf00      	nop
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3750      	adds	r7, #80	@ 0x50
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000055c 	.word	0x2000055c
 8001f1c:	20000560 	.word	0x20000560

08001f20 <StartADCTask>:

/**
 * ADCTask는 5ms 주기로 PMIC BUCK D 채널의 전압을 모니터링하고,
 * 임계값을 벗어나면 SPITask로 DTC 저장 요청을 보낸다.
 */
void StartADCTask(void *argument) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    static bool is_voltage_low = false;
    static bool is_voltage_high = false;

    for(;;) {
        // 5ms 주기를 만들기 위해 5ms 대기
        osDelay(5);
 8001f28:	2005      	movs	r0, #5
 8001f2a:	f007 fb57 	bl	80095dc <osDelay>

        measured_voltage = ADC_GetVoltage();
 8001f2e:	f000 f865 	bl	8001ffc <ADC_GetVoltage>
 8001f32:	ed87 0a03 	vstr	s0, [r7, #12]

        DTC_RequestMessage_t msg;
        msg.type = SAVE_DTC_REQUEST;
 8001f36:	2300      	movs	r3, #0
 8001f38:	723b      	strb	r3, [r7, #8]

        /* 저전압 상태 확인 */
        if (measured_voltage < VOLTAGE_THRESHOLD_LOW) {
 8001f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f3e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001fc4 <StartADCTask+0xa4>
 8001f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	d515      	bpl.n	8001f78 <StartADCTask+0x58>
            // 이전에 저전압 상태가 아니었을 때만 DTC를 한 번 전송
            if (!is_voltage_low) {
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <StartADCTask+0xa8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <StartADCTask+0x5e>
                is_voltage_low = true; // 저전압 상태로 설정
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <StartADCTask+0xa8>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
                msg.dtc_code = DTC_C1236_VOLTAGE_LOW;
 8001f60:	f241 2336 	movw	r3, #4662	@ 0x1236
 8001f64:	817b      	strh	r3, [r7, #10]
                osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <StartADCTask+0xac>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f107 0108 	add.w	r1, r7, #8
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2200      	movs	r2, #0
 8001f72:	f007 fdef 	bl	8009b54 <osMessageQueuePut>
 8001f76:	e002      	b.n	8001f7e <StartADCTask+0x5e>
            }
        } else {
            // 전압이 정상으로 돌아오면 상태 플래그 리셋
            is_voltage_low = false;
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <StartADCTask+0xa8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
        }

        /* 과전압 상태 확인 */
        if (measured_voltage > VOLTAGE_THRESHOLD_HIGH) {
 8001f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f82:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001fd0 <StartADCTask+0xb0>
 8001f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	dd15      	ble.n	8001fbc <StartADCTask+0x9c>
            // 이전에 과전압 상태가 아니었을 때만 DTC를 한 번 전송
            if (!is_voltage_high) {
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <StartADCTask+0xb4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f083 0301 	eor.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0c4      	beq.n	8001f28 <StartADCTask+0x8>
                is_voltage_high = true; // 과전압 상태로 설정
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <StartADCTask+0xb4>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
                msg.dtc_code = DTC_C1237_VOLTAGE_HIGH;
 8001fa4:	f241 2337 	movw	r3, #4663	@ 0x1237
 8001fa8:	817b      	strh	r3, [r7, #10]
                osMessageQueuePut(DTC_RequestQueueHandle, &msg, 0, 0);
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <StartADCTask+0xac>)
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	f107 0108 	add.w	r1, r7, #8
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f007 fdcd 	bl	8009b54 <osMessageQueuePut>
 8001fba:	e7b5      	b.n	8001f28 <StartADCTask+0x8>
            }
        } else {
            // 전압이 정상으로 돌아오면 상태 플래그 리셋
            is_voltage_high = false;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <StartADCTask+0xb4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
    for(;;) {
 8001fc2:	e7b1      	b.n	8001f28 <StartADCTask+0x8>
 8001fc4:	3fb851ec 	.word	0x3fb851ec
 8001fc8:	20000572 	.word	0x20000572
 8001fcc:	2000055c 	.word	0x2000055c
 8001fd0:	400a3d71 	.word	0x400a3d71
 8001fd4:	20000573 	.word	0x20000573

08001fd8 <StartUARTTask>:
        }
    }
}

void StartUARTTask(void *argument)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe4:	f007 fafa 	bl	80095dc <osDelay>
 8001fe8:	e7fa      	b.n	8001fe0 <StartUARTTask+0x8>

08001fea <StartDefaultTask>:
  }
}

void StartDefaultTask(void *argument)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1000);
 8001ff2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ff6:	f007 faf1 	bl	80095dc <osDelay>
 8001ffa:	e7fa      	b.n	8001ff2 <StartDefaultTask+0x8>

08001ffc <ADC_GetVoltage>:
#include "yj_adc.h"

extern ADC_HandleTypeDef hadc1;

float ADC_GetVoltage(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
    uint32_t raw_value = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
    float voltage = 0.0f;
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	607b      	str	r3, [r7, #4]

    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 800200c:	4815      	ldr	r0, [pc, #84]	@ (8002064 <ADC_GetVoltage+0x68>)
 800200e:	f000 f94d 	bl	80022ac <HAL_ADC_Start>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d119      	bne.n	800204c <ADC_GetVoltage+0x50>
        // 변환이 완료될 때까지 대기 (Blocking 방식, 10ms 타임아웃)
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8002018:	210a      	movs	r1, #10
 800201a:	4812      	ldr	r0, [pc, #72]	@ (8002064 <ADC_GetVoltage+0x68>)
 800201c:	f000 fa2d 	bl	800247a <HAL_ADC_PollForConversion>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d112      	bne.n	800204c <ADC_GetVoltage+0x50>

            raw_value = HAL_ADC_GetValue(&hadc1);
 8002026:	480f      	ldr	r0, [pc, #60]	@ (8002064 <ADC_GetVoltage+0x68>)
 8002028:	f000 fab2 	bl	8002590 <HAL_ADC_GetValue>
 800202c:	6038      	str	r0, [r7, #0]
            voltage = (raw_value / ADC_RESOLUTION) * ADC_VREF;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002038:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002068 <ADC_GetVoltage+0x6c>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800206c <ADC_GetVoltage+0x70>
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	edc7 7a01 	vstr	s15, [r7, #4]
        }
    }
    HAL_ADC_Stop(&hadc1);
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <ADC_GetVoltage+0x68>)
 800204e:	f000 f9e1 	bl	8002414 <HAL_ADC_Stop>

    return voltage;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000030 	.word	0x20000030
 8002068:	457ff000 	.word	0x457ff000
 800206c:	40533333 	.word	0x40533333

08002070 <CAN_Init>:
#include "yj_can.h"

extern CAN_HandleTypeDef hcan1;

HAL_StatusTypeDef CAN_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    // CAN 수신 FIFO 0에 메시지가 도착하면 인터럽트가 발생하도록 설정
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002074:	2102      	movs	r1, #2
 8002076:	4809      	ldr	r0, [pc, #36]	@ (800209c <CAN_Init+0x2c>)
 8002078:	f001 f827 	bl	80030ca <HAL_CAN_ActivateNotification>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <CAN_Init+0x16>
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e008      	b.n	8002098 <CAN_Init+0x28>
    }

    // CAN 컨트롤러 시작
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <CAN_Init+0x2c>)
 8002088:	f000 fdb9 	bl	8002bfe <HAL_CAN_Start>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <CAN_Init+0x26>
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <CAN_Init+0x28>
    }
    return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000078 	.word	0x20000078

080020a0 <CAN_SendMessage>:

/* ID와 uds 프로토콜 기반 데이터를 실제 CAN 버스에 전송한다. */
HAL_StatusTypeDef CAN_SendMessage(uint32_t id, uint8_t* pData, uint8_t len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	@ 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;

    tx_header.StdId = id;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
    tx_header.IDE = CAN_ID_STD;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    tx_header.RTR = CAN_RTR_DATA;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.DLC = len;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 비어있는 CAN 송신 메일박스가 있을 때까지 최대 10ms 대기
    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 80020be:	480a      	ldr	r0, [pc, #40]	@ (80020e8 <CAN_SendMessage+0x48>)
 80020c0:	f000 febc 	bl	8002e3c <HAL_CAN_GetTxMailboxesFreeLevel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <CAN_SendMessage+0x3e>
        return HAL_CAN_AddTxMessage(&hcan1, &tx_header, pData, &tx_mailbox);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	f107 0118 	add.w	r1, r7, #24
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <CAN_SendMessage+0x48>)
 80020d6:	f000 fdd6 	bl	8002c86 <HAL_CAN_AddTxMessage>
 80020da:	4603      	mov	r3, r0
 80020dc:	e000      	b.n	80020e0 <CAN_SendMessage+0x40>
    }
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	4618      	mov	r0, r3
 80020e2:	3730      	adds	r7, #48	@ 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000078 	.word	0x20000078

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020f2:	490e      	ldr	r1, [pc, #56]	@ (800212c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002108:	4c0b      	ldr	r4, [pc, #44]	@ (8002138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002116:	f7ff fc03 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f00a ff65 	bl	800cfe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe fb2b 	bl	8000778 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002130:	0800d274 	.word	0x0800d274
  ldr r2, =_sbss
 8002134:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002138:	20004ec8 	.word	0x20004ec8

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <HAL_Init+0x40>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <HAL_Init+0x40>)
 8002156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_Init+0x40>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f001 fad3 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7fe fea8 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 faeb 	bl	800377e <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f001 fab3 	bl	800372a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	20000574 	.word	0x20000574

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000574 	.word	0x20000574

08002224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e033      	b.n	80022a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fe6c 	bl	8000f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 faca 	bl	8002810 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
 8002292:	e001      	b.n	8002298 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Start+0x1a>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e097      	b.n	80023f6 <HAL_ADC_Start+0x14a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d018      	beq.n	800230e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ec:	4b45      	ldr	r3, [pc, #276]	@ (8002404 <HAL_ADC_Start+0x158>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a45      	ldr	r2, [pc, #276]	@ (8002408 <HAL_ADC_Start+0x15c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9a      	lsrs	r2, r3, #18
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d15f      	bne.n	80023dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002346:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235a:	d106      	bne.n	800236a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f023 0206 	bic.w	r2, r3, #6
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
 8002368:	e002      	b.n	8002370 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_ADC_Start+0x160>)
 800237a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002384:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d129      	bne.n	80023f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e020      	b.n	80023f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a16      	ldr	r2, [pc, #88]	@ (8002410 <HAL_ADC_Start+0x164>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d11b      	bne.n	80023f4 <HAL_ADC_Start+0x148>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d114      	bne.n	80023f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	e00b      	b.n	80023f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000
 8002408:	431bde83 	.word	0x431bde83
 800240c:	40012300 	.word	0x40012300
 8002410:	40012000 	.word	0x40012000

08002414 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_Stop+0x16>
 8002426:	2302      	movs	r3, #2
 8002428:	e021      	b.n	800246e <HAL_ADC_Stop+0x5a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d113      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a6:	d10b      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e063      	b.n	8002588 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024c0:	f7ff fea4 	bl	800220c <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c6:	e021      	b.n	800250c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d01d      	beq.n	800250c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_ADC_PollForConversion+0x6c>
 80024d6:	f7ff fe99 	bl	800220c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d212      	bcs.n	800250c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d00b      	beq.n	800250c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e03d      	b.n	8002588 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d1d6      	bne.n	80024c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0212 	mvn.w	r2, #18
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d123      	bne.n	8002586 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11f      	bne.n	8002586 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d111      	bne.n	8002586 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e113      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x244>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d925      	bls.n	8002624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43da      	mvns	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	400a      	ands	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68d9      	ldr	r1, [r3, #12]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	4603      	mov	r3, r0
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4403      	add	r3, r0
 8002616:	3b1e      	subs	r3, #30
 8002618:	409a      	lsls	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	e022      	b.n	800266a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	2207      	movs	r2, #7
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	4603      	mov	r3, r0
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4403      	add	r3, r0
 8002660:	409a      	lsls	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b06      	cmp	r3, #6
 8002670:	d824      	bhi.n	80026bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3b05      	subs	r3, #5
 8002684:	221f      	movs	r2, #31
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b05      	subs	r3, #5
 80026ae:	fa00 f203 	lsl.w	r2, r0, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ba:	e04c      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d824      	bhi.n	800270e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b23      	subs	r3, #35	@ 0x23
 80026d6:	221f      	movs	r2, #31
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43da      	mvns	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	400a      	ands	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b23      	subs	r3, #35	@ 0x23
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
 800270c:	e023      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b41      	subs	r3, #65	@ 0x41
 8002720:	221f      	movs	r2, #31
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	400a      	ands	r2, r1
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b41      	subs	r3, #65	@ 0x41
 800274a:	fa00 f203 	lsl.w	r2, r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002756:	4b29      	ldr	r3, [pc, #164]	@ (80027fc <HAL_ADC_ConfigChannel+0x250>)
 8002758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <HAL_ADC_ConfigChannel+0x254>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10f      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_ADC_ConfigChannel+0x254>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1c      	ldr	r2, [pc, #112]	@ (8002804 <HAL_ADC_ConfigChannel+0x258>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b11      	cmp	r3, #17
 800279e:	d122      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a11      	ldr	r2, [pc, #68]	@ (8002804 <HAL_ADC_ConfigChannel+0x258>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_ADC_ConfigChannel+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a11      	ldr	r2, [pc, #68]	@ (800280c <HAL_ADC_ConfigChannel+0x260>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9a      	lsrs	r2, r3, #18
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012300 	.word	0x40012300
 8002800:	40012000 	.word	0x40012000
 8002804:	10000012 	.word	0x10000012
 8002808:	20000000 	.word	0x20000000
 800280c:	431bde83 	.word	0x431bde83

08002810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002818:	4b79      	ldr	r3, [pc, #484]	@ (8002a00 <ADC_Init+0x1f0>)
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <ADC_Init+0x1f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e00f      	b.n	800290e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0202 	bic.w	r2, r2, #2
 800291c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
 8002928:	005a      	lsls	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800294a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800295a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	3b01      	subs	r3, #1
 8002968:	035a      	lsls	r2, r3, #13
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e007      	b.n	8002984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	3b01      	subs	r3, #1
 80029a0:	051a      	lsls	r2, r3, #20
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029c6:	025a      	lsls	r2, r3, #9
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	029a      	lsls	r2, r3, #10
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40012300 	.word	0x40012300
 8002a04:	0f000001 	.word	0x0f000001

08002a08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0ed      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe fabe 	bl	8000fa8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a3c:	f7ff fbe6 	bl	800220c <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a42:	e012      	b.n	8002a6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a44:	f7ff fbe2 	bl	800220c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d90b      	bls.n	8002a6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0c5      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0e5      	beq.n	8002a44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0202 	bic.w	r2, r2, #2
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a88:	f7ff fbc0 	bl	800220c <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a8e:	e012      	b.n	8002ab6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a90:	f7ff fbbc 	bl	800220c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b0a      	cmp	r3, #10
 8002a9c:	d90b      	bls.n	8002ab6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e09f      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e1b      	ldrb	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e007      	b.n	8002aee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7e5b      	ldrb	r3, [r3, #25]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e9b      	ldrb	r3, [r3, #26]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e007      	b.n	8002b42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0220 	bic.w	r2, r2, #32
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7edb      	ldrb	r3, [r3, #27]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0210 	bic.w	r2, r2, #16
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e007      	b.n	8002b6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0210 	orr.w	r2, r2, #16
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7f1b      	ldrb	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7f5b      	ldrb	r3, [r3, #29]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0204 	orr.w	r2, r2, #4
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	ea42 0103 	orr.w	r1, r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d12e      	bne.n	8002c70 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c2a:	f7ff faef 	bl	800220c <HAL_GetTick>
 8002c2e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c30:	e012      	b.n	8002c58 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c32:	f7ff faeb 	bl	800220c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	d90b      	bls.n	8002c58 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2205      	movs	r2, #5
 8002c50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e012      	b.n	8002c7e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e5      	bne.n	8002c32 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e006      	b.n	8002c7e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b089      	sub	sp, #36	@ 0x24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ca4:	7ffb      	ldrb	r3, [r7, #31]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <HAL_CAN_AddTxMessage+0x2c>
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	f040 80b8 	bne.w	8002e22 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a0 	beq.w	8002e12 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	0e1b      	lsrs	r3, r3, #24
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d907      	bls.n	8002cf2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09e      	b.n	8002e30 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	6809      	ldr	r1, [r1, #0]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3318      	adds	r3, #24
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	440b      	add	r3, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e00f      	b.n	8002d40 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3318      	adds	r3, #24
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	440b      	add	r3, r1
 8002d3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3318      	adds	r3, #24
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	440b      	add	r3, r1
 8002d50:	3304      	adds	r3, #4
 8002d52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	7d1b      	ldrb	r3, [r3, #20]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d111      	bne.n	8002d80 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3318      	adds	r3, #24
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	3304      	adds	r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6811      	ldr	r1, [r2, #0]
 8002d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3318      	adds	r3, #24
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3307      	adds	r3, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	061a      	lsls	r2, r3, #24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3306      	adds	r3, #6
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3305      	adds	r3, #5
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	3204      	adds	r2, #4
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	4610      	mov	r0, r2
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	ea43 0200 	orr.w	r2, r3, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	440b      	add	r3, r1
 8002db2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002db6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3303      	adds	r3, #3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	061a      	lsls	r2, r3, #24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	4610      	mov	r0, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	ea43 0200 	orr.w	r2, r3, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	440b      	add	r3, r1
 8002de8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002dec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3318      	adds	r3, #24
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3318      	adds	r3, #24
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	440b      	add	r3, r1
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e00e      	b.n	8002e30 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e006      	b.n	8002e30 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3724      	adds	r7, #36	@ 0x24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d002      	beq.n	8002e5c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d11d      	bne.n	8002e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002e98:	68fb      	ldr	r3, [r7, #12]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b087      	sub	sp, #28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d003      	beq.n	8002eca <HAL_CAN_GetRxMessage+0x24>
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f040 80f3 	bne.w	80030b0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10e      	bne.n	8002eee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0e7      	b.n	80030be <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0d8      	b.n	80030be <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	331b      	adds	r3, #27
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0204 	and.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	331b      	adds	r3, #27
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	4413      	add	r3, r2
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0d5b      	lsrs	r3, r3, #21
 8002f3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	331b      	adds	r3, #27
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0202 	and.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	331b      	adds	r3, #27
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	331b      	adds	r3, #27
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	331b      	adds	r3, #27
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0a1a      	lsrs	r2, r3, #8
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0c1a      	lsrs	r2, r3, #16
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	3302      	adds	r3, #2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e1a      	lsrs	r2, r3, #24
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	3303      	adds	r3, #3
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4413      	add	r3, r2
 8003040:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0a1a      	lsrs	r2, r3, #8
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3305      	adds	r3, #5
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	4413      	add	r3, r2
 800305a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0c1a      	lsrs	r2, r3, #16
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	3306      	adds	r3, #6
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	4413      	add	r3, r2
 8003074:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e1a      	lsrs	r2, r3, #24
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	3307      	adds	r3, #7
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e007      	b.n	80030ac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0220 	orr.w	r2, r2, #32
 80030aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e006      	b.n	80030be <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d002      	beq.n	80030e8 <HAL_CAN_ActivateNotification+0x1e>
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d109      	bne.n	80030fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6959      	ldr	r1, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e006      	b.n	800310a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08a      	sub	sp, #40	@ 0x28
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d07c      	beq.n	8003256 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d023      	beq.n	80031ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2201      	movs	r2, #1
 800316c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f983 	bl	8003484 <HAL_CAN_TxMailbox0CompleteCallback>
 800317e:	e016      	b.n	80031ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
 8003192:	e00c      	b.n	80031ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a6:	e002      	b.n	80031ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f989 	bl	80034c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d024      	beq.n	8003202 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f963 	bl	8003498 <HAL_CAN_TxMailbox1CompleteCallback>
 80031d2:	e016      	b.n	8003202 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	e00c      	b.n	8003202 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	e002      	b.n	8003202 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f969 	bl	80034d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d024      	beq.n	8003256 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003214:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f943 	bl	80034ac <HAL_CAN_TxMailbox2CompleteCallback>
 8003226:	e016      	b.n	8003256 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
 800323a:	e00c      	b.n	8003256 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
 800324e:	e002      	b.n	8003256 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f949 	bl	80034e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00c      	beq.n	800327a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f930 	bl	80034fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7fe fb15 	bl	80018e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00c      	beq.n	80032de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2210      	movs	r2, #16
 80032dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2208      	movs	r2, #8
 80032f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f912 	bl	8003524 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8f9 	bl	8003510 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8fc 	bl	8003538 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8f5 	bl	800354c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d07b      	beq.n	8003464 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d072      	beq.n	800345c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d03e      	beq.n	800345c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e4:	2b60      	cmp	r3, #96	@ 0x60
 80033e6:	d02b      	beq.n	8003440 <HAL_CAN_IRQHandler+0x32a>
 80033e8:	2b60      	cmp	r3, #96	@ 0x60
 80033ea:	d82e      	bhi.n	800344a <HAL_CAN_IRQHandler+0x334>
 80033ec:	2b50      	cmp	r3, #80	@ 0x50
 80033ee:	d022      	beq.n	8003436 <HAL_CAN_IRQHandler+0x320>
 80033f0:	2b50      	cmp	r3, #80	@ 0x50
 80033f2:	d82a      	bhi.n	800344a <HAL_CAN_IRQHandler+0x334>
 80033f4:	2b40      	cmp	r3, #64	@ 0x40
 80033f6:	d019      	beq.n	800342c <HAL_CAN_IRQHandler+0x316>
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d826      	bhi.n	800344a <HAL_CAN_IRQHandler+0x334>
 80033fc:	2b30      	cmp	r3, #48	@ 0x30
 80033fe:	d010      	beq.n	8003422 <HAL_CAN_IRQHandler+0x30c>
 8003400:	2b30      	cmp	r3, #48	@ 0x30
 8003402:	d822      	bhi.n	800344a <HAL_CAN_IRQHandler+0x334>
 8003404:	2b10      	cmp	r3, #16
 8003406:	d002      	beq.n	800340e <HAL_CAN_IRQHandler+0x2f8>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d005      	beq.n	8003418 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800340c:	e01d      	b.n	800344a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	f043 0308 	orr.w	r3, r3, #8
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003416:	e019      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	f043 0310 	orr.w	r3, r3, #16
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003420:	e014      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	f043 0320 	orr.w	r3, r3, #32
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800342a:	e00f      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003434:	e00a      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800343e:	e005      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003448:	e000      	b.n	800344c <HAL_CAN_IRQHandler+0x336>
            break;
 800344a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800345a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2204      	movs	r2, #4
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f872 	bl	8003560 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800347c:	bf00      	nop
 800347e:	3728      	adds	r7, #40	@ 0x28
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	@ (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	@ (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	@ (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	@ 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	@ 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800373c:	f7ff ff3e 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff8e 	bl	8003668 <NVIC_EncodePriority>
 800374c:	4602      	mov	r2, r0
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff5d 	bl	8003614 <__NVIC_SetPriority>
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff31 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ffa2 	bl	80036d0 <SysTick_Config>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7fe fd32 	bl	800220c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e099      	b.n	80038e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d4:	e00f      	b.n	80037f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d6:	f7fe fd19 	bl	800220c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d908      	bls.n	80037f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2203      	movs	r2, #3
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e078      	b.n	80038e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e8      	bne.n	80037d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <HAL_DMA_Init+0x158>)
 8003810:	4013      	ands	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2b04      	cmp	r3, #4
 800384e:	d107      	bne.n	8003860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	4313      	orrs	r3, r2
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0307 	bic.w	r3, r3, #7
 8003876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	2b04      	cmp	r3, #4
 8003888:	d117      	bne.n	80038ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fb1b 	bl	8003ed8 <DMA_CheckFifoParam>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2240      	movs	r2, #64	@ 0x40
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038b6:	2301      	movs	r3, #1
 80038b8:	e016      	b.n	80038e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fad2 	bl	8003e6c <DMA_CalcBaseAndBitshift>
 80038c8:	4603      	mov	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d0:	223f      	movs	r2, #63	@ 0x3f
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	e010803f 	.word	0xe010803f

080038f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_DMA_Start_IT+0x26>
 8003916:	2302      	movs	r3, #2
 8003918:	e040      	b.n	800399c <HAL_DMA_Start_IT+0xa8>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d12f      	bne.n	800398e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fa64 	bl	8003e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	223f      	movs	r2, #63	@ 0x3f
 800394e:	409a      	lsls	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0216 	orr.w	r2, r2, #22
 8003962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e005      	b.n	800399a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039b2:	f7fe fc2b 	bl	800220c <HAL_GetTick>
 80039b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d008      	beq.n	80039d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2280      	movs	r2, #128	@ 0x80
 80039c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e052      	b.n	8003a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0216 	bic.w	r2, r2, #22
 80039e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_DMA_Abort+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0208 	bic.w	r2, r2, #8
 8003a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	e013      	b.n	8003a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a28:	f7fe fbf0 	bl	800220c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d90c      	bls.n	8003a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e015      	b.n	8003a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e4      	bne.n	8003a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	223f      	movs	r2, #63	@ 0x3f
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d004      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00c      	b.n	8003abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8003d10 <HAL_DMA_IRQHandler+0x248>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a8e      	ldr	r2, [pc, #568]	@ (8003d14 <HAL_DMA_IRQHandler+0x24c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	2208      	movs	r2, #8
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	e01f      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0208 	bic.w	r2, r2, #8
 8003c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 808f 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8087 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	2220      	movs	r2, #32
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d136      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x1da>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	223f      	movs	r2, #63	@ 0x3f
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07e      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
        }
        return;
 8003cde:	e079      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01d      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e02c      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000
 8003d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e01e      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0210 	bic.w	r2, r2, #16
 8003d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d032      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d307      	bcc.n	8003db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f2      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x2cc>
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
 8003dd2:	e000      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dd4:	bf00      	nop
    }
  }
}
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d108      	bne.n	8003e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e4e:	e007      	b.n	8003e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3b10      	subs	r3, #16
 8003e7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e86:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d909      	bls.n	8003eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eac:	e007      	b.n	8003ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	aaaaaaab 	.word	0xaaaaaaab
 8003ed4:	0800d25c 	.word	0x0800d25c

08003ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11f      	bne.n	8003f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d856      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xce>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <DMA_CheckFifoParam+0x28>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f11 	.word	0x08003f11
 8003f0c:	08003fa7 	.word	0x08003fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d046      	beq.n	8003faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f20:	e043      	b.n	8003faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f2a:	d140      	bne.n	8003fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e03d      	b.n	8003fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	d121      	bne.n	8003f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d837      	bhi.n	8003fb2 <DMA_CheckFifoParam+0xda>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <DMA_CheckFifoParam+0x70>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f5f 	.word	0x08003f5f
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003f71 	.word	0x08003f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e030      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d025      	beq.n	8003fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6e:	e022      	b.n	8003fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f7e:	e01c      	b.n	8003fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d903      	bls.n	8003f8e <DMA_CheckFifoParam+0xb6>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d003      	beq.n	8003f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f8c:	e018      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      break;
 8003f92:	e015      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e00b      	b.n	8003fbe <DMA_CheckFifoParam+0xe6>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e00a      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e008      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e006      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e004      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	@ 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e165      	b.n	80042b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 8154 	bne.w	80042b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d005      	beq.n	8004022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401e:	2b02      	cmp	r3, #2
 8004020:	d130      	bne.n	8004084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0201 	and.w	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b03      	cmp	r3, #3
 800408e:	d017      	beq.n	80040c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80ae 	beq.w	80042b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	4a5c      	ldr	r2, [pc, #368]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004164:	6453      	str	r3, [r2, #68]	@ 0x44
 8004166:	4b5a      	ldr	r3, [pc, #360]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <HAL_GPIO_Init+0x304>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4f      	ldr	r2, [pc, #316]	@ (80042d8 <HAL_GPIO_Init+0x308>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d025      	beq.n	80041ea <HAL_GPIO_Init+0x21a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4e      	ldr	r2, [pc, #312]	@ (80042dc <HAL_GPIO_Init+0x30c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <HAL_GPIO_Init+0x216>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4d      	ldr	r2, [pc, #308]	@ (80042e0 <HAL_GPIO_Init+0x310>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_GPIO_Init+0x212>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4c      	ldr	r2, [pc, #304]	@ (80042e4 <HAL_GPIO_Init+0x314>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_GPIO_Init+0x20e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4b      	ldr	r2, [pc, #300]	@ (80042e8 <HAL_GPIO_Init+0x318>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00d      	beq.n	80041da <HAL_GPIO_Init+0x20a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_GPIO_Init+0x31c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <HAL_GPIO_Init+0x206>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a49      	ldr	r2, [pc, #292]	@ (80042f0 <HAL_GPIO_Init+0x320>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_GPIO_Init+0x202>
 80041ce:	2306      	movs	r3, #6
 80041d0:	e00c      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041d2:	2307      	movs	r3, #7
 80041d4:	e00a      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041da:	2304      	movs	r3, #4
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fc:	4935      	ldr	r1, [pc, #212]	@ (80042d4 <HAL_GPIO_Init+0x304>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800420a:	4b3a      	ldr	r3, [pc, #232]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800422e:	4a31      	ldr	r2, [pc, #196]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004234:	4b2f      	ldr	r3, [pc, #188]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004258:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800425e:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004282:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ac:	4a11      	ldr	r2, [pc, #68]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f ae96 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40021400 	.word	0x40021400
 80042f0:	40021800 	.word	0x40021800
 80042f4:	40013c00 	.word	0x40013c00

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e12b      	b.n	8004596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fe80 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004390:	f002 fc64 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8004394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a81      	ldr	r2, [pc, #516]	@ (80045a0 <HAL_I2C_Init+0x274>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d807      	bhi.n	80043b0 <HAL_I2C_Init+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a80      	ldr	r2, [pc, #512]	@ (80045a4 <HAL_I2C_Init+0x278>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bf94      	ite	ls
 80043a8:	2301      	movls	r3, #1
 80043aa:	2300      	movhi	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e006      	b.n	80043be <HAL_I2C_Init+0x92>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a7d      	ldr	r2, [pc, #500]	@ (80045a8 <HAL_I2C_Init+0x27c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bf94      	ite	ls
 80043b8:	2301      	movls	r3, #1
 80043ba:	2300      	movhi	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0e7      	b.n	8004596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a78      	ldr	r2, [pc, #480]	@ (80045ac <HAL_I2C_Init+0x280>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0c9b      	lsrs	r3, r3, #18
 80043d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <HAL_I2C_Init+0x274>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d802      	bhi.n	8004400 <HAL_I2C_Init+0xd4>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3301      	adds	r3, #1
 80043fe:	e009      	b.n	8004414 <HAL_I2C_Init+0xe8>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	4a69      	ldr	r2, [pc, #420]	@ (80045b0 <HAL_I2C_Init+0x284>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	3301      	adds	r3, #1
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	430b      	orrs	r3, r1
 800441a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004426:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	495c      	ldr	r1, [pc, #368]	@ (80045a0 <HAL_I2C_Init+0x274>)
 8004430:	428b      	cmp	r3, r1
 8004432:	d819      	bhi.n	8004468 <HAL_I2C_Init+0x13c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e59      	subs	r1, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004448:	400b      	ands	r3, r1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_I2C_Init+0x138>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e59      	subs	r1, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fbb1 f3f3 	udiv	r3, r1, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004462:	e051      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 8004464:	2304      	movs	r3, #4
 8004466:	e04f      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d111      	bne.n	8004494 <HAL_I2C_Init+0x168>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	440b      	add	r3, r1
 800447e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e012      	b.n	80044ba <HAL_I2C_Init+0x18e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1e58      	subs	r0, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	0099      	lsls	r1, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Init+0x196>
 80044be:	2301      	movs	r3, #1
 80044c0:	e022      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10e      	bne.n	80044e8 <HAL_I2C_Init+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e58      	subs	r0, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6859      	ldr	r1, [r3, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	440b      	add	r3, r1
 80044d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e6:	e00f      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e58      	subs	r0, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	0099      	lsls	r1, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	6809      	ldr	r1, [r1, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6911      	ldr	r1, [r2, #16]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	430b      	orrs	r3, r1
 800454a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	000186a0 	.word	0x000186a0
 80045a4:	001e847f 	.word	0x001e847f
 80045a8:	003d08ff 	.word	0x003d08ff
 80045ac:	431bde83 	.word	0x431bde83
 80045b0:	10624dd3 	.word	0x10624dd3

080045b4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	@ 0x30
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	817b      	strh	r3, [r7, #10]
 80045c6:	460b      	mov	r3, r1
 80045c8:	813b      	strh	r3, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ce:	f7fd fe1d 	bl	800220c <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	f040 8176 	bne.w	80048d2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045e6:	4b95      	ldr	r3, [pc, #596]	@ (800483c <HAL_I2C_Mem_Read_DMA+0x288>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	4a94      	ldr	r2, [pc, #592]	@ (8004840 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0a1a      	lsrs	r2, r3, #8
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3b01      	subs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d116      	bne.n	800463a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e14c      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d0db      	beq.n	8004600 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004652:	2302      	movs	r3, #2
 8004654:	e13e      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2222      	movs	r2, #34	@ 0x22
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	@ 0x40
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a62      	ldr	r2, [pc, #392]	@ (8004844 <HAL_I2C_Mem_Read_DMA+0x290>)
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80046be:	897a      	ldrh	r2, [r7, #10]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80046c4:	893a      	ldrh	r2, [r7, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80cc 	beq.w	8004878 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02d      	beq.n	8004744 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	4a56      	ldr	r2, [pc, #344]	@ (8004848 <HAL_I2C_Mem_Read_DMA+0x294>)
 80046ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	4a55      	ldr	r2, [pc, #340]	@ (800484c <HAL_I2C_Mem_Read_DMA+0x298>)
 80046f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	2200      	movs	r2, #0
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	2200      	movs	r2, #0
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	2200      	movs	r2, #0
 800470e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	2200      	movs	r2, #0
 8004716:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3310      	adds	r3, #16
 8004722:	4619      	mov	r1, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	461a      	mov	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472e:	f7ff f8e1 	bl	80038f4 <HAL_DMA_Start_IT>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004738:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 8087 	bne.w	8004850 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004742:	e013      	b.n	800476c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0b3      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800476c:	88f8      	ldrh	r0, [r7, #6]
 800476e:	893a      	ldrh	r2, [r7, #8]
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	2323      	movs	r3, #35	@ 0x23
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f001 fc7f 	bl	8006080 <I2C_RequestMemoryRead>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f979 	bl	8003a84 <HAL_DMA_Abort_IT>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	2200      	movs	r2, #0
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e081      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e007      	b.n	80047fa <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004826:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004836:	605a      	str	r2, [r3, #4]
 8004838:	e049      	b.n	80048ce <HAL_I2C_Mem_Read_DMA+0x31a>
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000
 8004840:	14f8b589 	.word	0x14f8b589
 8004844:	ffff0000 	.word	0xffff0000
 8004848:	08006251 	.word	0x08006251
 800484c:	080063fb 	.word	0x080063fb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02d      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004878:	88f8      	ldrh	r0, [r7, #6]
 800487a:	893a      	ldrh	r2, [r7, #8]
 800487c:	8979      	ldrh	r1, [r7, #10]
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	2323      	movs	r3, #35	@ 0x23
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4603      	mov	r3, r0
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f001 fbf9 	bl	8006080 <I2C_RequestMemoryRead>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e01d      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	@ 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004904:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d003      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x38>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	f040 80c1 	bne.w	8004a96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <HAL_I2C_EV_IRQHandler+0x6e>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004934:	d003      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x62>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800493c:	d101      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x66>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_I2C_EV_IRQHandler+0x68>
 8004942:	2300      	movs	r3, #0
 8004944:	2b01      	cmp	r3, #1
 8004946:	f000 8132 	beq.w	8004bae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x92>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	0a5b      	lsrs	r3, r3, #9
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f001 ffa8 	bl	80068b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fd6f 	bl	800544a <I2C_Master_SB>
 800496c:	e092      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0xb2>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0a5b      	lsrs	r3, r3, #9
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fde5 	bl	8005556 <I2C_Master_ADD10>
 800498c:	e082      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0xd2>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a5b      	lsrs	r3, r3, #9
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fdff 	bl	80055aa <I2C_Master_ADDR>
 80049ac:	e072      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03b      	beq.n	8004a32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c8:	f000 80f3 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	09db      	lsrs	r3, r3, #7
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d009      	beq.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9e9 	bl	8004dc8 <I2C_MasterTransmit_TXE>
 80049f6:	e04d      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80d6 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	0a5b      	lsrs	r3, r3, #9
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80cf 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b21      	cmp	r3, #33	@ 0x21
 8004a18:	d103      	bne.n	8004a22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa70 	bl	8004f00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a20:	e0c7      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b40      	cmp	r3, #64	@ 0x40
 8004a26:	f040 80c4 	bne.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fade 	bl	8004fec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a30:	e0bf      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a40:	f000 80b7 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00f      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb53 	bl	8005114 <I2C_MasterReceive_RXNE>
 8004a6e:	e011      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 809a 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	0a5b      	lsrs	r3, r3, #9
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8093 	beq.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fbf2 	bl	8005276 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a92:	e08e      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a94:	e08d      	b.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e007      	b.n	8004ab8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x20e>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 ffb0 	bl	8005a48 <I2C_Slave_ADDR>
 8004ae8:	e066      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x22e>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 ffea 	bl	8005adc <I2C_Slave_STOPF>
 8004b08:	e056      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	2b21      	cmp	r3, #33	@ 0x21
 8004b0e:	d002      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x23a>
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	2b29      	cmp	r3, #41	@ 0x29
 8004b14:	d125      	bne.n	8004b62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00f      	beq.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0a9b      	lsrs	r3, r3, #10
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fec6 	bl	80058cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b40:	e039      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d033      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d02d      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fef3 	bl	8005946 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b60:	e029      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00f      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	0a9b      	lsrs	r3, r3, #10
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fefe 	bl	8005988 <I2C_SlaveReceive_RXNE>
 8004b8c:	e014      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	0a5b      	lsrs	r3, r3, #9
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 ff2c 	bl	8005a04 <I2C_SlaveReceive_BTF>
 8004bac:	e004      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08a      	sub	sp, #40	@ 0x28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004be0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <HAL_I2C_ER_IRQHandler+0x4e>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	0a5b      	lsrs	r3, r3, #9
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00e      	beq.n	8004c36 <HAL_I2C_ER_IRQHandler+0x78>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004c34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	0a9b      	lsrs	r3, r3, #10
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d03f      	beq.n	8004cc2 <HAL_I2C_ER_IRQHandler+0x104>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d039      	beq.n	8004cc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004c4e:	7efb      	ldrb	r3, [r7, #27]
 8004c50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c68:	7ebb      	ldrb	r3, [r7, #26]
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d112      	bne.n	8004c94 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b21      	cmp	r3, #33	@ 0x21
 8004c78:	d008      	beq.n	8004c8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b29      	cmp	r3, #41	@ 0x29
 8004c7e:	d005      	beq.n	8004c8c <HAL_I2C_ER_IRQHandler+0xce>
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b28      	cmp	r3, #40	@ 0x28
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b21      	cmp	r3, #33	@ 0x21
 8004c8a:	d103      	bne.n	8004c94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 f855 	bl	8005d3c <I2C_Slave_AF>
 8004c92:	e016      	b.n	8004cc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ca6:	7efb      	ldrb	r3, [r7, #27]
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d002      	beq.n	8004cb2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004cac:	7efb      	ldrb	r3, [r7, #27]
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d107      	bne.n	8004cc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	0adb      	lsrs	r3, r3, #11
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <HAL_I2C_ER_IRQHandler+0x12e>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004cea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f88c 	bl	8005e1c <I2C_ITError>
  }
}
 8004d04:	bf00      	nop
 8004d06:	3728      	adds	r7, #40	@ 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d150      	bne.n	8004e90 <I2C_MasterTransmit_TXE+0xc8>
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b21      	cmp	r3, #33	@ 0x21
 8004df2:	d14d      	bne.n	8004e90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d01d      	beq.n	8004e36 <I2C_MasterTransmit_TXE+0x6e>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d01a      	beq.n	8004e36 <I2C_MasterTransmit_TXE+0x6e>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e06:	d016      	beq.n	8004e36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2211      	movs	r2, #17
 8004e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff6c 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e34:	e060      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b40      	cmp	r3, #64	@ 0x40
 8004e6e:	d107      	bne.n	8004e80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff87 	bl	8004d8c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e7e:	e03b      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff3f 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e8e:	e033      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b21      	cmp	r3, #33	@ 0x21
 8004e94:	d005      	beq.n	8004ea2 <I2C_MasterTransmit_TXE+0xda>
 8004e96:	7bbb      	ldrb	r3, [r7, #14]
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d12d      	bne.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b22      	cmp	r3, #34	@ 0x22
 8004ea0:	d12a      	bne.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ebc:	e01c      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d103      	bne.n	8004ed2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f88e 	bl	8004fec <I2C_MemoryTransmit_TXE_BTF>
}
 8004ed0:	e012      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004ef6:	e7ff      	b.n	8004ef8 <I2C_MasterTransmit_TXE+0x130>
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b21      	cmp	r3, #33	@ 0x21
 8004f18:	d164      	bne.n	8004fe4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f48:	e04c      	b.n	8004fe4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d01d      	beq.n	8004f8c <I2C_MasterTransmit_BTF+0x8c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d01a      	beq.n	8004f8c <I2C_MasterTransmit_BTF+0x8c>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f5c:	d016      	beq.n	8004f8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2211      	movs	r2, #17
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fec1 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
}
 8004f8a:	e02b      	b.n	8004fe4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004faa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	d107      	bne.n	8004fd6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fedc 	bl	8004d8c <HAL_I2C_MemTxCpltCallback>
}
 8004fd4:	e006      	b.n	8004fe4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fe94 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11d      	bne.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10b      	bne.n	8005024 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005022:	e073      	b.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005028:	b29b      	uxth	r3, r3
 800502a:	121b      	asrs	r3, r3, #8
 800502c:	b2da      	uxtb	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800503e:	e065      	b.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10b      	bne.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800505e:	e055      	b.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005064:	2b02      	cmp	r3, #2
 8005066:	d151      	bne.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b22      	cmp	r3, #34	@ 0x22
 800506c:	d10d      	bne.n	800508a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800507c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005088:	e040      	b.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b21      	cmp	r3, #33	@ 0x21
 8005098:	d112      	bne.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050be:	e025      	b.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d120      	bne.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b21      	cmp	r3, #33	@ 0x21
 80050ce:	d11d      	bne.n	800510c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fe40 	bl	8004d8c <HAL_I2C_MemTxCpltCallback>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b22      	cmp	r3, #34	@ 0x22
 8005126:	f040 80a2 	bne.w	800526e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d921      	bls.n	800517c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b03      	cmp	r3, #3
 8005166:	f040 8082 	bne.w	800526e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005178:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800517a:	e078      	b.n	800526e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	2b02      	cmp	r3, #2
 8005182:	d074      	beq.n	800526e <I2C_MasterReceive_RXNE+0x15a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d002      	beq.n	8005190 <I2C_MasterReceive_RXNE+0x7c>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d16e      	bne.n	800526e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 fb2f 	bl	80067f4 <I2C_WaitOnSTOPRequestThroughIT>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d142      	bne.n	8005222 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	d10a      	bne.n	800520c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fc fb2b 	bl	8001860 <HAL_I2C_MemRxCpltCallback>
}
 800520a:	e030      	b.n	800526e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2212      	movs	r2, #18
 8005218:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fd80 	bl	8004d20 <HAL_I2C_MasterRxCpltCallback>
}
 8005220:	e025      	b.n	800526e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005230:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fd99 	bl	8004da0 <HAL_I2C_ErrorCallback>
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b04      	cmp	r3, #4
 800528c:	d11b      	bne.n	80052c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052c4:	e0bd      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d129      	bne.n	8005324 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00a      	beq.n	80052fc <I2C_MasterReceive_BTF+0x86>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d007      	beq.n	80052fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005322:	e08e      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d176      	bne.n	800541c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d002      	beq.n	800533a <I2C_MasterReceive_BTF+0xc4>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b10      	cmp	r3, #16
 8005338:	d108      	bne.n	800534c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e019      	b.n	8005380 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d002      	beq.n	8005358 <I2C_MasterReceive_BTF+0xe2>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d108      	bne.n	800536a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e00a      	b.n	8005380 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d007      	beq.n	8005380 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d10a      	bne.n	8005406 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc fa2e 	bl	8001860 <HAL_I2C_MemRxCpltCallback>
}
 8005404:	e01d      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2212      	movs	r2, #18
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fc83 	bl	8004d20 <HAL_I2C_MasterRxCpltCallback>
}
 800541a:	e012      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d117      	bne.n	800548e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005476:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005478:	e067      	b.n	800554a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]
}
 800548c:	e05d      	b.n	800554a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005496:	d133      	bne.n	8005500 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b21      	cmp	r3, #33	@ 0x21
 80054a2:	d109      	bne.n	80054b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	e008      	b.n	80054ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <I2C_Master_SB+0x92>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d032      	beq.n	800554a <I2C_Master_SB+0x100>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02d      	beq.n	800554a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fc:	605a      	str	r2, [r3, #4]
}
 80054fe:	e024      	b.n	800554a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10e      	bne.n	8005526 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550c:	b29b      	uxth	r3, r3
 800550e:	11db      	asrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f063 030f 	orn	r3, r3, #15
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]
}
 8005524:	e011      	b.n	800554a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10d      	bne.n	800554a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	b29b      	uxth	r3, r3
 8005534:	11db      	asrs	r3, r3, #7
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0306 	and.w	r3, r3, #6
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f063 030e 	orn	r3, r3, #14
 8005542:	b2da      	uxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	b2da      	uxtb	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <I2C_Master_ADD10+0x26>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00c      	beq.n	800559e <I2C_Master_ADD10+0x48>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800559c:	605a      	str	r2, [r3, #4]
  }
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b091      	sub	sp, #68	@ 0x44
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b22      	cmp	r3, #34	@ 0x22
 80055d2:	f040 8169 	bne.w	80058a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10f      	bne.n	80055fe <I2C_Master_ADDR+0x54>
 80055de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055e2:	2b40      	cmp	r3, #64	@ 0x40
 80055e4:	d10b      	bne.n	80055fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	e160      	b.n	80058c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11d      	bne.n	8005642 <I2C_Master_ADDR+0x98>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800560e:	d118      	bne.n	8005642 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005634:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005640:	e13e      	b.n	80058c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d113      	bne.n	8005674 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564c:	2300      	movs	r3, #0
 800564e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e115      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	f040 808a 	bne.w	8005794 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005686:	d137      	bne.n	80056f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005696:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a6:	d113      	bne.n	80056d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	e0e7      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	623b      	str	r3, [r7, #32]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e0d3      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d02e      	beq.n	800575c <I2C_Master_ADDR+0x1b2>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2b20      	cmp	r3, #32
 8005702:	d02b      	beq.n	800575c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	2b12      	cmp	r3, #18
 8005708:	d102      	bne.n	8005710 <I2C_Master_ADDR+0x166>
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	2b01      	cmp	r3, #1
 800570e:	d125      	bne.n	800575c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	2b04      	cmp	r3, #4
 8005714:	d00e      	beq.n	8005734 <I2C_Master_ADDR+0x18a>
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	2b02      	cmp	r3, #2
 800571a:	d00b      	beq.n	8005734 <I2C_Master_ADDR+0x18a>
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	2b10      	cmp	r3, #16
 8005720:	d008      	beq.n	8005734 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e007      	b.n	8005744 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005742:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	e0a1      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576c:	2300      	movs	r3, #0
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e085      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d14d      	bne.n	800583a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d016      	beq.n	80057d2 <I2C_Master_ADDR+0x228>
 80057a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d013      	beq.n	80057d2 <I2C_Master_ADDR+0x228>
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d010      	beq.n	80057d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e007      	b.n	80057e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f0:	d117      	bne.n	8005822 <I2C_Master_ADDR+0x278>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057f8:	d00b      	beq.n	8005812 <I2C_Master_ADDR+0x268>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d008      	beq.n	8005812 <I2C_Master_ADDR+0x268>
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	2b08      	cmp	r3, #8
 8005804:	d005      	beq.n	8005812 <I2C_Master_ADDR+0x268>
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	2b10      	cmp	r3, #16
 800580a:	d002      	beq.n	8005812 <I2C_Master_ADDR+0x268>
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	2b20      	cmp	r3, #32
 8005810:	d107      	bne.n	8005822 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005820:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	e032      	b.n	80058a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005848:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005858:	d117      	bne.n	800588a <I2C_Master_ADDR+0x2e0>
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005860:	d00b      	beq.n	800587a <I2C_Master_ADDR+0x2d0>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	2b01      	cmp	r3, #1
 8005866:	d008      	beq.n	800587a <I2C_Master_ADDR+0x2d0>
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	2b08      	cmp	r3, #8
 800586c:	d005      	beq.n	800587a <I2C_Master_ADDR+0x2d0>
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	2b10      	cmp	r3, #16
 8005872:	d002      	beq.n	800587a <I2C_Master_ADDR+0x2d0>
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	2b20      	cmp	r3, #32
 8005878:	d107      	bne.n	800588a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005888:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058a6:	e00b      	b.n	80058c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	e7ff      	b.n	80058c0 <I2C_Master_ADDR+0x316>
 80058c0:	bf00      	nop
 80058c2:	3744      	adds	r7, #68	@ 0x44
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d02b      	beq.n	800593e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d114      	bne.n	800593e <I2C_SlaveTransmit_TXE+0x72>
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b29      	cmp	r3, #41	@ 0x29
 8005918:	d111      	bne.n	800593e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005928:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2221      	movs	r2, #33	@ 0x21
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2228      	movs	r2, #40	@ 0x28
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff f9fb 	bl	8004d34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	781a      	ldrb	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005996:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d02c      	beq.n	80059fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d114      	bne.n	80059fc <I2C_SlaveReceive_RXNE+0x74>
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059d6:	d111      	bne.n	80059fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2222      	movs	r2, #34	@ 0x22
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2228      	movs	r2, #40	@ 0x28
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff f9a6 	bl	8004d48 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a62:	2b28      	cmp	r3, #40	@ 0x28
 8005a64:	d127      	bne.n	8005ab6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	089b      	lsrs	r3, r3, #2
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	81bb      	strh	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005aa8:	89ba      	ldrh	r2, [r7, #12]
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff f954 	bl	8004d5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ab4:	e00e      	b.n	8005ad4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005afa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b38:	d172      	bne.n	8005c20 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	2b22      	cmp	r3, #34	@ 0x22
 8005b3e:	d002      	beq.n	8005b46 <I2C_Slave_STOPF+0x6a>
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b44:	d135      	bne.n	8005bb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	f043 0204 	orr.w	r2, r3, #4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe f92c 	bl	8003ddc <HAL_DMA_GetState>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d049      	beq.n	8005c1e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	4a69      	ldr	r2, [pc, #420]	@ (8005d34 <I2C_Slave_STOPF+0x258>)
 8005b90:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd ff74 	bl	8003a84 <HAL_DMA_Abort_IT>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03d      	beq.n	8005c1e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bb0:	e035      	b.n	8005c1e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f043 0204 	orr.w	r2, r3, #4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f8f6 	bl	8003ddc <HAL_DMA_GetState>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d014      	beq.n	8005c20 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfa:	4a4e      	ldr	r2, [pc, #312]	@ (8005d34 <I2C_Slave_STOPF+0x258>)
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd ff3e 	bl	8003a84 <HAL_DMA_Abort_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
 8005c1c:	e000      	b.n	8005c20 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c1e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03e      	beq.n	8005ca8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d112      	bne.n	8005c5e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b40      	cmp	r3, #64	@ 0x40
 8005c6a:	d112      	bne.n	8005c92 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	f043 0204 	orr.w	r2, r3, #4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8b3 	bl	8005e1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005cb6:	e039      	b.n	8005d2c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cbc:	d109      	bne.n	8005cd2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2228      	movs	r2, #40	@ 0x28
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff f83b 	bl	8004d48 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b28      	cmp	r3, #40	@ 0x28
 8005cdc:	d111      	bne.n	8005d02 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	@ (8005d38 <I2C_Slave_STOPF+0x25c>)
 8005ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff f83c 	bl	8004d78 <HAL_I2C_ListenCpltCallback>
}
 8005d00:	e014      	b.n	8005d2c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	2b22      	cmp	r3, #34	@ 0x22
 8005d08:	d002      	beq.n	8005d10 <I2C_Slave_STOPF+0x234>
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b22      	cmp	r3, #34	@ 0x22
 8005d0e:	d10d      	bne.n	8005d2c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff f80e 	bl	8004d48 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08006475 	.word	0x08006475
 8005d38:	ffff0000 	.word	0xffff0000

08005d3c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d002      	beq.n	8005d5e <I2C_Slave_AF+0x22>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d129      	bne.n	8005db2 <I2C_Slave_AF+0x76>
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b28      	cmp	r3, #40	@ 0x28
 8005d62:	d126      	bne.n	8005db2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <I2C_Slave_AF+0xdc>)
 8005d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d78:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d82:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d92:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fe ffe4 	bl	8004d78 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005db0:	e02e      	b.n	8005e10 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b21      	cmp	r3, #33	@ 0x21
 8005db6:	d126      	bne.n	8005e06 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a17      	ldr	r2, [pc, #92]	@ (8005e18 <I2C_Slave_AF+0xdc>)
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2221      	movs	r2, #33	@ 0x21
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fe ff98 	bl	8004d34 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e04:	e004      	b.n	8005e10 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e0e:	615a      	str	r2, [r3, #20]
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	ffff0000 	.word	0xffff0000

08005e1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d002      	beq.n	8005e40 <I2C_ITError+0x24>
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d10a      	bne.n	8005e56 <I2C_ITError+0x3a>
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b22      	cmp	r3, #34	@ 0x22
 8005e44:	d107      	bne.n	8005e56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e5c:	2b28      	cmp	r3, #40	@ 0x28
 8005e5e:	d107      	bne.n	8005e70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2228      	movs	r2, #40	@ 0x28
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e6e:	e015      	b.n	8005e9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e7e:	d00a      	beq.n	8005e96 <I2C_ITError+0x7a>
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b60      	cmp	r3, #96	@ 0x60
 8005e84:	d007      	beq.n	8005e96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eaa:	d162      	bne.n	8005f72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d020      	beq.n	8005f0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ece:	4a6a      	ldr	r2, [pc, #424]	@ (8006078 <I2C_ITError+0x25c>)
 8005ed0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fd fdd4 	bl	8003a84 <HAL_DMA_Abort_IT>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8089 	beq.w	8005ff6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f06:	4610      	mov	r0, r2
 8005f08:	4798      	blx	r3
 8005f0a:	e074      	b.n	8005ff6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	4a59      	ldr	r2, [pc, #356]	@ (8006078 <I2C_ITError+0x25c>)
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fd fdb3 	bl	8003a84 <HAL_DMA_Abort_IT>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d068      	beq.n	8005ff6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d10b      	bne.n	8005f4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	e041      	b.n	8005ff6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b60      	cmp	r3, #96	@ 0x60
 8005f7c:	d125      	bne.n	8005fca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d10b      	bne.n	8005fb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fe fef6 	bl	8004db4 <HAL_I2C_AbortCpltCallback>
 8005fc8:	e015      	b.n	8005ff6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d10b      	bne.n	8005ff0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fe fed5 	bl	8004da0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10e      	bne.n	8006024 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006032:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d113      	bne.n	8006070 <I2C_ITError+0x254>
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b28      	cmp	r3, #40	@ 0x28
 800604c:	d110      	bne.n	8006070 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <I2C_ITError+0x260>)
 8006052:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe fe84 	bl	8004d78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	08006475 	.word	0x08006475
 800607c:	ffff0000 	.word	0xffff0000

08006080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fa7c 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e0:	d103      	bne.n	80060ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0aa      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ee:	897b      	ldrh	r3, [r7, #10]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	4952      	ldr	r1, [pc, #328]	@ (800624c <I2C_RequestMemoryRead+0x1cc>)
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fab4 	bl	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e097      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fb1e 	bl	8006770 <I2C_WaitOnTXEFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	2b04      	cmp	r3, #4
 8006140:	d107      	bne.n	8006152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e076      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d105      	bne.n	8006168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	e021      	b.n	80061ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006178:	6a39      	ldr	r1, [r7, #32]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 faf8 	bl	8006770 <I2C_WaitOnTXEFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	2b04      	cmp	r3, #4
 800618c:	d107      	bne.n	800619e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800619c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e050      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061a2:	893b      	ldrh	r3, [r7, #8]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	6a39      	ldr	r1, [r7, #32]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fadd 	bl	8006770 <I2C_WaitOnTXEFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d107      	bne.n	80061d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e035      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f9e5 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800620e:	d103      	bne.n	8006218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e013      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800621c:	897b      	ldrh	r3, [r7, #10]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	4906      	ldr	r1, [pc, #24]	@ (800624c <I2C_RequestMemoryRead+0x1cc>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fa1d 	bl	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	00010002 	.word	0x00010002

08006250 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006264:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800626c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006282:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006290:	2200      	movs	r2, #0
 8006292:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	2200      	movs	r2, #0
 80062a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80062aa:	2b21      	cmp	r3, #33	@ 0x21
 80062ac:	d007      	beq.n	80062be <I2C_DMAXferCplt+0x6e>
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80062b4:	2b22      	cmp	r3, #34	@ 0x22
 80062b6:	d131      	bne.n	800631c <I2C_DMAXferCplt+0xcc>
 80062b8:	7cbb      	ldrb	r3, [r7, #18]
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d12e      	bne.n	800631c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	2b29      	cmp	r3, #41	@ 0x29
 80062d8:	d10a      	bne.n	80062f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2221      	movs	r2, #33	@ 0x21
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2228      	movs	r2, #40	@ 0x28
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062e8:	6978      	ldr	r0, [r7, #20]
 80062ea:	f7fe fd23 	bl	8004d34 <HAL_I2C_SlaveTxCpltCallback>
 80062ee:	e00c      	b.n	800630a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f4:	d109      	bne.n	800630a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2222      	movs	r2, #34	@ 0x22
 80062fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2228      	movs	r2, #40	@ 0x28
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7fe fd1f 	bl	8004d48 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006318:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800631a:	e06a      	b.n	80063f2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d064      	beq.n	80063f2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	d107      	bne.n	8006342 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006340:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006350:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006358:	d009      	beq.n	800636e <I2C_DMAXferCplt+0x11e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d006      	beq.n	800636e <I2C_DMAXferCplt+0x11e>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006366:	d002      	beq.n	800636e <I2C_DMAXferCplt+0x11e>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b20      	cmp	r3, #32
 800636c:	d107      	bne.n	800637e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800637c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800638c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800639c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f7fe fcf7 	bl	8004da0 <HAL_I2C_ErrorCallback>
}
 80063b2:	e01e      	b.n	80063f2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b40      	cmp	r3, #64	@ 0x40
 80063c6:	d10a      	bne.n	80063de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7fb fa42 	bl	8001860 <HAL_I2C_MemRxCpltCallback>
}
 80063dc:	e009      	b.n	80063f2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2212      	movs	r2, #18
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80063ec:	6978      	ldr	r0, [r7, #20]
 80063ee:	f7fe fc97 	bl	8004d20 <HAL_I2C_MasterRxCpltCallback>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	2200      	movs	r2, #0
 8006416:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	2200      	movs	r2, #0
 8006426:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fd fce5 	bl	8003df8 <HAL_DMA_GetError>
 800642e:	4603      	mov	r3, r0
 8006430:	2b02      	cmp	r3, #2
 8006432:	d01b      	beq.n	800646c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006442:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f043 0210 	orr.w	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7fe fc9a 	bl	8004da0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800648e:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <I2C_DMAAbort+0x148>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	4a4a      	ldr	r2, [pc, #296]	@ (80065c0 <I2C_DMAAbort+0x14c>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0a1a      	lsrs	r2, r3, #8
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	00da      	lsls	r2, r3, #3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80064ba:	e00a      	b.n	80064d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b01      	subs	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d0:	d0ea      	beq.n	80064a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	2200      	movs	r2, #0
 80064e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	2200      	movs	r2, #0
 80064f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006500:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	2200      	movs	r2, #0
 8006516:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b60      	cmp	r3, #96	@ 0x60
 8006542:	d10e      	bne.n	8006562 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800655a:	6978      	ldr	r0, [r7, #20]
 800655c:	f7fe fc2a 	bl	8004db4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006560:	e027      	b.n	80065b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006568:	2b28      	cmp	r3, #40	@ 0x28
 800656a:	d117      	bne.n	800659c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800658a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2228      	movs	r2, #40	@ 0x28
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800659a:	e007      	b.n	80065ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065ac:	6978      	ldr	r0, [r7, #20]
 80065ae:	f7fe fbf7 	bl	8004da0 <HAL_I2C_ErrorCallback>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000000 	.word	0x20000000
 80065c0:	14f8b589 	.word	0x14f8b589

080065c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d4:	e025      	b.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d021      	beq.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fb fe15 	bl	800220c <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d116      	bne.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	f043 0220 	orr.w	r2, r3, #32
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e023      	b.n	800666a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d10d      	bne.n	8006648 <I2C_WaitOnFlagUntilTimeout+0x84>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	43da      	mvns	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	bf0c      	ite	eq
 800663e:	2301      	moveq	r3, #1
 8006640:	2300      	movne	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	e00c      	b.n	8006662 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	43da      	mvns	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d0b6      	beq.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006680:	e051      	b.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800668c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006690:	d123      	bne.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	f043 0204 	orr.w	r2, r3, #4
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e046      	b.n	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d021      	beq.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e2:	f7fb fd93 	bl	800220c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d116      	bne.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e020      	b.n	8006768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10c      	bne.n	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	43da      	mvns	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	e00b      	b.n	8006762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	43da      	mvns	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d18d      	bne.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677c:	e02d      	b.n	80067da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f86a 	bl	8006858 <I2C_IsAcknowledgeFailed>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e02d      	b.n	80067ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d021      	beq.n	80067da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006796:	f7fb fd39 	bl	800220c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d116      	bne.n	80067da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	f043 0220 	orr.w	r2, r3, #32
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e007      	b.n	80067ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b80      	cmp	r3, #128	@ 0x80
 80067e6:	d1ca      	bne.n	800677e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006800:	4b13      	ldr	r3, [pc, #76]	@ (8006850 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	4a13      	ldr	r2, [pc, #76]	@ (8006854 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	0a1a      	lsrs	r2, r3, #8
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b01      	subs	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d107      	bne.n	8006832 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e008      	b.n	8006844 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800683c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006840:	d0e9      	beq.n	8006816 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20000000 	.word	0x20000000
 8006854:	14f8b589 	.word	0x14f8b589

08006858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686e:	d11b      	bne.n	80068a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	f043 0204 	orr.w	r2, r3, #4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80068c6:	d103      	bne.n	80068d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068ce:	e007      	b.n	80068e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80068d8:	d102      	bne.n	80068e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2208      	movs	r2, #8
 80068de:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0cc      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006900:	4b68      	ldr	r3, [pc, #416]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d90c      	bls.n	8006928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800690e:	4b65      	ldr	r3, [pc, #404]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006916:	4b63      	ldr	r3, [pc, #396]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d001      	beq.n	8006928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0b8      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d020      	beq.n	8006976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006940:	4b59      	ldr	r3, [pc, #356]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	4a58      	ldr	r2, [pc, #352]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800694a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006958:	4b53      	ldr	r3, [pc, #332]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4a52      	ldr	r2, [pc, #328]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006964:	4b50      	ldr	r3, [pc, #320]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	494d      	ldr	r1, [pc, #308]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d044      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698a:	4b47      	ldr	r3, [pc, #284]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d119      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e07f      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d003      	beq.n	80069aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069aa:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e06f      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ba:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e067      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ca:	4b37      	ldr	r3, [pc, #220]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f023 0203 	bic.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4934      	ldr	r1, [pc, #208]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069dc:	f7fb fc16 	bl	800220c <HAL_GetTick>
 80069e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e4:	f7fb fc12 	bl	800220c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e04f      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fa:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 020c 	and.w	r2, r3, #12
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d1eb      	bne.n	80069e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b25      	ldr	r3, [pc, #148]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d20c      	bcs.n	8006a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b22      	ldr	r3, [pc, #136]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a22:	4b20      	ldr	r3, [pc, #128]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d001      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e032      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a40:	4b19      	ldr	r3, [pc, #100]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	4916      	ldr	r1, [pc, #88]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a5e:	4b12      	ldr	r3, [pc, #72]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	490e      	ldr	r1, [pc, #56]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a72:	f000 f821 	bl	8006ab8 <HAL_RCC_GetSysClockFreq>
 8006a76:	4602      	mov	r2, r0
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	490a      	ldr	r1, [pc, #40]	@ (8006aac <HAL_RCC_ClockConfig+0x1c0>)
 8006a84:	5ccb      	ldrb	r3, [r1, r3]
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	4a09      	ldr	r2, [pc, #36]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a8e:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fb fb76 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40023c00 	.word	0x40023c00
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	0800d244 	.word	0x0800d244
 8006ab0:	20000000 	.word	0x20000000
 8006ab4:	20000004 	.word	0x20000004

08006ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006abc:	b090      	sub	sp, #64	@ 0x40
 8006abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ac8:	2300      	movs	r3, #0
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ad0:	4b59      	ldr	r3, [pc, #356]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d00d      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x40>
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	f200 80a1 	bhi.w	8006c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_RCC_GetSysClockFreq+0x34>
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aea:	e09b      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b53      	ldr	r3, [pc, #332]	@ (8006c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006aee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006af0:	e09b      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006af2:	4b53      	ldr	r3, [pc, #332]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006af6:	e098      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006af8:	4b4f      	ldr	r3, [pc, #316]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b02:	4b4d      	ldr	r3, [pc, #308]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d028      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	099b      	lsrs	r3, r3, #6
 8006b14:	2200      	movs	r2, #0
 8006b16:	623b      	str	r3, [r7, #32]
 8006b18:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b20:	2100      	movs	r1, #0
 8006b22:	4b47      	ldr	r3, [pc, #284]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b24:	fb03 f201 	mul.w	r2, r3, r1
 8006b28:	2300      	movs	r3, #0
 8006b2a:	fb00 f303 	mul.w	r3, r0, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	4a43      	ldr	r2, [pc, #268]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b32:	fba0 1202 	umull	r1, r2, r0, r2
 8006b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b38:	460a      	mov	r2, r1
 8006b3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b3e:	4413      	add	r3, r2
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b44:	2200      	movs	r2, #0
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	61fa      	str	r2, [r7, #28]
 8006b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006b52:	f7f9 fb65 	bl	8000220 <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5e:	e053      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b60:	4b35      	ldr	r3, [pc, #212]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	099b      	lsrs	r3, r3, #6
 8006b66:	2200      	movs	r2, #0
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	617a      	str	r2, [r7, #20]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b72:	f04f 0b00 	mov.w	fp, #0
 8006b76:	4652      	mov	r2, sl
 8006b78:	465b      	mov	r3, fp
 8006b7a:	f04f 0000 	mov.w	r0, #0
 8006b7e:	f04f 0100 	mov.w	r1, #0
 8006b82:	0159      	lsls	r1, r3, #5
 8006b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b88:	0150      	lsls	r0, r2, #5
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8006b92:	eb63 090b 	sbc.w	r9, r3, fp
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006baa:	ebb2 0408 	subs.w	r4, r2, r8
 8006bae:	eb63 0509 	sbc.w	r5, r3, r9
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	00eb      	lsls	r3, r5, #3
 8006bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc0:	00e2      	lsls	r2, r4, #3
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	461d      	mov	r5, r3
 8006bc6:	eb14 030a 	adds.w	r3, r4, sl
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	eb45 030b 	adc.w	r3, r5, fp
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bde:	4629      	mov	r1, r5
 8006be0:	028b      	lsls	r3, r1, #10
 8006be2:	4621      	mov	r1, r4
 8006be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be8:	4621      	mov	r1, r4
 8006bea:	028a      	lsls	r2, r1, #10
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	60fa      	str	r2, [r7, #12]
 8006bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bfc:	f7f9 fb10 	bl	8000220 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4613      	mov	r3, r2
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c08:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	3301      	adds	r3, #1
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006c18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c24:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006c26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3740      	adds	r7, #64	@ 0x40
 8006c30:	46bd      	mov	sp, r7
 8006c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	017d7840 	.word	0x017d7840

08006c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c48:	4b03      	ldr	r3, [pc, #12]	@ (8006c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000000 	.word	0x20000000

08006c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c60:	f7ff fff0 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0a9b      	lsrs	r3, r3, #10
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4903      	ldr	r1, [pc, #12]	@ (8006c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	0800d254 	.word	0x0800d254

08006c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c88:	f7ff ffdc 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	0b5b      	lsrs	r3, r3, #13
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	4903      	ldr	r1, [pc, #12]	@ (8006ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c9a:	5ccb      	ldrb	r3, [r1, r3]
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	0800d254 	.word	0x0800d254

08006cac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e273      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d075      	beq.n	8006db6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cca:	4b88      	ldr	r3, [pc, #544]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cd6:	4b85      	ldr	r3, [pc, #532]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d112      	bne.n	8006d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ce2:	4b82      	ldr	r3, [pc, #520]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cee:	d10b      	bne.n	8006d08 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d05b      	beq.n	8006db4 <HAL_RCC_OscConfig+0x108>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d157      	bne.n	8006db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e24e      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d10:	d106      	bne.n	8006d20 <HAL_RCC_OscConfig+0x74>
 8006d12:	4b76      	ldr	r3, [pc, #472]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a75      	ldr	r2, [pc, #468]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e01d      	b.n	8006d5c <HAL_RCC_OscConfig+0xb0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d28:	d10c      	bne.n	8006d44 <HAL_RCC_OscConfig+0x98>
 8006d2a:	4b70      	ldr	r3, [pc, #448]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4b6d      	ldr	r3, [pc, #436]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e00b      	b.n	8006d5c <HAL_RCC_OscConfig+0xb0>
 8006d44:	4b69      	ldr	r3, [pc, #420]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a68      	ldr	r2, [pc, #416]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	4b66      	ldr	r3, [pc, #408]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a65      	ldr	r2, [pc, #404]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d64:	f7fb fa52 	bl	800220c <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d6c:	f7fb fa4e 	bl	800220c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b64      	cmp	r3, #100	@ 0x64
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e213      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0xc0>
 8006d8a:	e014      	b.n	8006db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fb fa3e 	bl	800220c <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d94:	f7fb fa3a 	bl	800220c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b64      	cmp	r3, #100	@ 0x64
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e1ff      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006da6:	4b51      	ldr	r3, [pc, #324]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0xe8>
 8006db2:	e000      	b.n	8006db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d063      	beq.n	8006e8a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dce:	4b47      	ldr	r3, [pc, #284]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d11c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dda:	4b44      	ldr	r3, [pc, #272]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d116      	bne.n	8006e14 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de6:	4b41      	ldr	r3, [pc, #260]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_RCC_OscConfig+0x152>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d001      	beq.n	8006dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e1d3      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4937      	ldr	r1, [pc, #220]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e12:	e03a      	b.n	8006e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d020      	beq.n	8006e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e1c:	4b34      	ldr	r3, [pc, #208]	@ (8006ef0 <HAL_RCC_OscConfig+0x244>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e22:	f7fb f9f3 	bl	800220c <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e2a:	f7fb f9ef 	bl	800220c <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e1b4      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e48:	4b28      	ldr	r3, [pc, #160]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4925      	ldr	r1, [pc, #148]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	600b      	str	r3, [r1, #0]
 8006e5c:	e015      	b.n	8006e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5e:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <HAL_RCC_OscConfig+0x244>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fb f9d2 	bl	800220c <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e6c:	f7fb f9ce 	bl	800220c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e193      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d036      	beq.n	8006f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d016      	beq.n	8006ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <HAL_RCC_OscConfig+0x248>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fb f9b2 	bl	800220c <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eac:	f7fb f9ae 	bl	800220c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e173      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f0      	beq.n	8006eac <HAL_RCC_OscConfig+0x200>
 8006eca:	e01b      	b.n	8006f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ecc:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <HAL_RCC_OscConfig+0x248>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed2:	f7fb f99b 	bl	800220c <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ed8:	e00e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eda:	f7fb f997 	bl	800220c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d907      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e15c      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	42470000 	.word	0x42470000
 8006ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ea      	bne.n	8006eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8097 	beq.w	8007040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f16:	4b83      	ldr	r3, [pc, #524]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	4b7f      	ldr	r3, [pc, #508]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f32:	4b7c      	ldr	r3, [pc, #496]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	60bb      	str	r3, [r7, #8]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f42:	4b79      	ldr	r3, [pc, #484]	@ (8007128 <HAL_RCC_OscConfig+0x47c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d118      	bne.n	8006f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f4e:	4b76      	ldr	r3, [pc, #472]	@ (8007128 <HAL_RCC_OscConfig+0x47c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a75      	ldr	r2, [pc, #468]	@ (8007128 <HAL_RCC_OscConfig+0x47c>)
 8006f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5a:	f7fb f957 	bl	800220c <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f62:	f7fb f953 	bl	800220c <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e118      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f74:	4b6c      	ldr	r3, [pc, #432]	@ (8007128 <HAL_RCC_OscConfig+0x47c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f0      	beq.n	8006f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d106      	bne.n	8006f96 <HAL_RCC_OscConfig+0x2ea>
 8006f88:	4b66      	ldr	r3, [pc, #408]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8c:	4a65      	ldr	r2, [pc, #404]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f94:	e01c      	b.n	8006fd0 <HAL_RCC_OscConfig+0x324>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x30c>
 8006f9e:	4b61      	ldr	r3, [pc, #388]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa2:	4a60      	ldr	r2, [pc, #384]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fa4:	f043 0304 	orr.w	r3, r3, #4
 8006fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006faa:	4b5e      	ldr	r3, [pc, #376]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fae:	4a5d      	ldr	r2, [pc, #372]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fb6:	e00b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x324>
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fbc:	4a59      	ldr	r2, [pc, #356]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc4:	4b57      	ldr	r3, [pc, #348]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc8:	4a56      	ldr	r2, [pc, #344]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006fca:	f023 0304 	bic.w	r3, r3, #4
 8006fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd8:	f7fb f918 	bl	800220c <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe0:	f7fb f914 	bl	800220c <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e0d7      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ee      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x334>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007004:	f7fb f902 	bl	800220c <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700a:	e00a      	b.n	8007022 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700c:	f7fb f8fe 	bl	800220c <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e0c1      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007022:	4b40      	ldr	r3, [pc, #256]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1ee      	bne.n	800700c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d105      	bne.n	8007040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007034:	4b3b      	ldr	r3, [pc, #236]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8007036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007038:	4a3a      	ldr	r2, [pc, #232]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 800703a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800703e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80ad 	beq.w	80071a4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800704a:	4b36      	ldr	r3, [pc, #216]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b08      	cmp	r3, #8
 8007054:	d060      	beq.n	8007118 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d145      	bne.n	80070ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800705e:	4b33      	ldr	r3, [pc, #204]	@ (800712c <HAL_RCC_OscConfig+0x480>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fb f8d2 	bl	800220c <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800706c:	f7fb f8ce 	bl	800220c <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e093      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707e:	4b29      	ldr	r3, [pc, #164]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	3b01      	subs	r3, #1
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	061b      	lsls	r3, r3, #24
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	071b      	lsls	r3, r3, #28
 80070b6:	491b      	ldr	r1, [pc, #108]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070bc:	4b1b      	ldr	r3, [pc, #108]	@ (800712c <HAL_RCC_OscConfig+0x480>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fb f8a3 	bl	800220c <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ca:	f7fb f89f 	bl	800220c <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e064      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x41e>
 80070e8:	e05c      	b.n	80071a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <HAL_RCC_OscConfig+0x480>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f0:	f7fb f88c 	bl	800220c <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fb f888 	bl	800220c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e04d      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <HAL_RCC_OscConfig+0x478>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x44c>
 8007116:	e045      	b.n	80071a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e040      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
 8007124:	40023800 	.word	0x40023800
 8007128:	40007000 	.word	0x40007000
 800712c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007130:	4b1f      	ldr	r3, [pc, #124]	@ (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d030      	beq.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007148:	429a      	cmp	r2, r3
 800714a:	d129      	bne.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007156:	429a      	cmp	r2, r3
 8007158:	d122      	bne.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007168:	4293      	cmp	r3, r2
 800716a:	d119      	bne.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	3b01      	subs	r3, #1
 800717a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800717c:	429a      	cmp	r2, r3
 800717e:	d10f      	bne.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800718c:	429a      	cmp	r2, r3
 800718e:	d107      	bne.n	80071a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800719c:	429a      	cmp	r2, r3
 800719e:	d001      	beq.n	80071a4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40023800 	.word	0x40023800

080071b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e07b      	b.n	80072be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d108      	bne.n	80071e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071d6:	d009      	beq.n	80071ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	61da      	str	r2, [r3, #28]
 80071de:	e005      	b.n	80071ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa f888 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007270:	ea42 0103 	orr.w	r1, r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	f003 0104 	and.w	r1, r3, #4
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007292:	f003 0210 	and.w	r2, r3, #16
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_SPI_Transmit+0x22>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e126      	b.n	8007536 <HAL_SPI_Transmit+0x270>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f0:	f7fa ff8c 	bl	800220c <HAL_GetTick>
 80072f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d002      	beq.n	800730c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007306:	2302      	movs	r3, #2
 8007308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800730a:	e10b      	b.n	8007524 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_Transmit+0x52>
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800731c:	e102      	b.n	8007524 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2203      	movs	r2, #3
 8007322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007364:	d10f      	bne.n	8007386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d007      	beq.n	80073a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ac:	d14b      	bne.n	8007446 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <HAL_SPI_Transmit+0xf6>
 80073b6:	8afb      	ldrh	r3, [r7, #22]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d13e      	bne.n	800743a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	881a      	ldrh	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073cc:	1c9a      	adds	r2, r3, #2
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073e0:	e02b      	b.n	800743a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d112      	bne.n	8007416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	881a      	ldrh	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	1c9a      	adds	r2, r3, #2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007414:	e011      	b.n	800743a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007416:	f7fa fef9 	bl	800220c <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d803      	bhi.n	800742e <HAL_SPI_Transmit+0x168>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d102      	bne.n	8007434 <HAL_SPI_Transmit+0x16e>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007438:	e074      	b.n	8007524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800743e:	b29b      	uxth	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ce      	bne.n	80073e2 <HAL_SPI_Transmit+0x11c>
 8007444:	e04c      	b.n	80074e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <HAL_SPI_Transmit+0x18e>
 800744e:	8afb      	ldrh	r3, [r7, #22]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d140      	bne.n	80074d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	7812      	ldrb	r2, [r2, #0]
 8007460:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800747a:	e02c      	b.n	80074d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d113      	bne.n	80074b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074b0:	e011      	b.n	80074d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b2:	f7fa feab 	bl	800220c <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d803      	bhi.n	80074ca <HAL_SPI_Transmit+0x204>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_Transmit+0x20a>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074d4:	e026      	b.n	8007524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1cd      	bne.n	800747c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 f803 	bl	80084f0 <SPI_EndRxTxTransaction>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e000      	b.n	8007524 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007534:	7ffb      	ldrb	r3, [r7, #31]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af02      	add	r7, sp, #8
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755a:	d112      	bne.n	8007582 <HAL_SPI_Receive+0x44>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10e      	bne.n	8007582 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2204      	movs	r2, #4
 8007568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4613      	mov	r3, r2
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f8f1 	bl	8007760 <HAL_SPI_TransmitReceive>
 800757e:	4603      	mov	r3, r0
 8007580:	e0ea      	b.n	8007758 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_SPI_Receive+0x52>
 800758c:	2302      	movs	r3, #2
 800758e:	e0e3      	b.n	8007758 <HAL_SPI_Receive+0x21a>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007598:	f7fa fe38 	bl	800220c <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d002      	beq.n	80075b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075aa:	2302      	movs	r3, #2
 80075ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ae:	e0ca      	b.n	8007746 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_Receive+0x7e>
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075c0:	e0c1      	b.n	8007746 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2204      	movs	r2, #4
 80075c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007608:	d10f      	bne.n	800762a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007634:	2b40      	cmp	r3, #64	@ 0x40
 8007636:	d007      	beq.n	8007648 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007646:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d162      	bne.n	8007716 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007650:	e02e      	b.n	80076b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b01      	cmp	r3, #1
 800765e:	d115      	bne.n	800768c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f103 020c 	add.w	r2, r3, #12
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800768a:	e011      	b.n	80076b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768c:	f7fa fdbe 	bl	800220c <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d803      	bhi.n	80076a4 <HAL_SPI_Receive+0x166>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d102      	bne.n	80076aa <HAL_SPI_Receive+0x16c>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076ae:	e04a      	b.n	8007746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1cb      	bne.n	8007652 <HAL_SPI_Receive+0x114>
 80076ba:	e031      	b.n	8007720 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d113      	bne.n	80076f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	b292      	uxth	r2, r2
 80076d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076f0:	e011      	b.n	8007716 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f2:	f7fa fd8b 	bl	800220c <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d803      	bhi.n	800770a <HAL_SPI_Receive+0x1cc>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d102      	bne.n	8007710 <HAL_SPI_Receive+0x1d2>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007714:	e017      	b.n	8007746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1cd      	bne.n	80076bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 fe7d 	bl	8008424 <SPI_EndRxTransaction>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
 8007742:	e000      	b.n	8007746 <HAL_SPI_Receive+0x208>
  }

error :
 8007744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	@ 0x30
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800776e:	2301      	movs	r3, #1
 8007770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x26>
 8007782:	2302      	movs	r3, #2
 8007784:	e18a      	b.n	8007a9c <HAL_SPI_TransmitReceive+0x33c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800778e:	f7fa fd3d 	bl	800220c <HAL_GetTick>
 8007792:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d00f      	beq.n	80077d0 <HAL_SPI_TransmitReceive+0x70>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b6:	d107      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x68>
 80077c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d003      	beq.n	80077d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077ce:	e15b      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x82>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x82>
 80077dc:	887b      	ldrh	r3, [r7, #2]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077e8:	e14e      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d003      	beq.n	80077fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2205      	movs	r2, #5
 80077fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	887a      	ldrh	r2, [r7, #2]
 800780e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	887a      	ldrh	r2, [r7, #2]
 8007814:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	887a      	ldrh	r2, [r7, #2]
 8007820:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	887a      	ldrh	r2, [r7, #2]
 8007826:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d007      	beq.n	8007852 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800785a:	d178      	bne.n	800794e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <HAL_SPI_TransmitReceive+0x10a>
 8007864:	8b7b      	ldrh	r3, [r7, #26]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d166      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	881a      	ldrh	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800788e:	e053      	b.n	8007938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d11b      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x176>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d016      	beq.n	80078d6 <HAL_SPI_TransmitReceive+0x176>
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d113      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	881a      	ldrh	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	1c9a      	adds	r2, r3, #2
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d119      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x1b8>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	b292      	uxth	r2, r2
 80078fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007900:	1c9a      	adds	r2, r3, #2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007914:	2301      	movs	r3, #1
 8007916:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007918:	f7fa fc78 	bl	800220c <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007924:	429a      	cmp	r2, r3
 8007926:	d807      	bhi.n	8007938 <HAL_SPI_TransmitReceive+0x1d8>
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d003      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007936:	e0a7      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1a6      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x130>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1a1      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x130>
 800794c:	e07c      	b.n	8007a48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_SPI_TransmitReceive+0x1fc>
 8007956:	8b7b      	ldrh	r3, [r7, #26]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d16b      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007982:	e057      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d11c      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x26c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d017      	beq.n	80079cc <HAL_SPI_TransmitReceive+0x26c>
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d114      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330c      	adds	r3, #12
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d119      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x2ae>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d014      	beq.n	8007a0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a0e:	f7fa fbfd 	bl	800220c <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d803      	bhi.n	8007a26 <HAL_SPI_TransmitReceive+0x2c6>
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d102      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x2cc>
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007a32:	e029      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1a2      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x224>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d19d      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fd4f 	bl	80084f0 <SPI_EndRxTxTransaction>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d006      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007a64:	e010      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	e000      	b.n	8007a88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3730      	adds	r7, #48	@ 0x30
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_SPI_Transmit_DMA+0x20>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e09b      	b.n	8007bfc <HAL_SPI_Transmit_DMA+0x158>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007adc:	e089      	b.n	8007bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Transmit_DMA+0x46>
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aee:	e080      	b.n	8007bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2203      	movs	r2, #3
 8007af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	88fa      	ldrh	r2, [r7, #6]
 8007b0e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b36:	d10f      	bne.n	8007b58 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5c:	4a29      	ldr	r2, [pc, #164]	@ (8007c04 <HAL_SPI_Transmit_DMA+0x160>)
 8007b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b64:	4a28      	ldr	r2, [pc, #160]	@ (8007c08 <HAL_SPI_Transmit_DMA+0x164>)
 8007b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b6c:	4a27      	ldr	r2, [pc, #156]	@ (8007c0c <HAL_SPI_Transmit_DMA+0x168>)
 8007b6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b74:	2200      	movs	r2, #0
 8007b76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b80:	4619      	mov	r1, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b90:	f7fb feb0 	bl	80038f4 <HAL_DMA_Start_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9e:	f043 0210 	orr.w	r2, r3, #16
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007bb2:	e01e      	b.n	8007bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d007      	beq.n	8007bd2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bd0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0220 	orr.w	r2, r2, #32
 8007be0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0202 	orr.w	r2, r2, #2
 8007bf0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	08008259 	.word	0x08008259
 8007c08:	08008079 	.word	0x08008079
 8007c0c:	080082ad 	.word	0x080082ad

08007c10 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e0e3      	b.n	8007df8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007c46:	7dbb      	ldrb	r3, [r7, #22]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d00d      	beq.n	8007c68 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c52:	d106      	bne.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <HAL_SPI_TransmitReceive_DMA+0x52>
 8007c5c:	7dbb      	ldrb	r3, [r7, #22]
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d002      	beq.n	8007c68 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
 8007c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c66:	e0c2      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c7e:	e0b6      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d003      	beq.n	8007c94 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	887a      	ldrh	r2, [r7, #2]
 8007ca4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	887a      	ldrh	r2, [r7, #2]
 8007caa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	887a      	ldrh	r2, [r7, #2]
 8007cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	887a      	ldrh	r2, [r7, #2]
 8007cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d108      	bne.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cda:	4a49      	ldr	r2, [pc, #292]	@ (8007e00 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007cdc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce2:	4a48      	ldr	r2, [pc, #288]	@ (8007e04 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ce6:	e007      	b.n	8007cf8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cec:	4a46      	ldr	r2, [pc, #280]	@ (8007e08 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007cee:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf4:	4a45      	ldr	r2, [pc, #276]	@ (8007e0c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfc:	4a44      	ldr	r2, [pc, #272]	@ (8007e10 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007cfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d04:	2200      	movs	r2, #0
 8007d06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	4619      	mov	r1, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007d20:	f7fb fde8 	bl	80038f4 <HAL_DMA_Start_IT>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2e:	f043 0210 	orr.w	r2, r3, #16
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007d42:	e054      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d58:	2200      	movs	r2, #0
 8007d5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d60:	2200      	movs	r2, #0
 8007d62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d68:	2200      	movs	r2, #0
 8007d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d70:	2200      	movs	r2, #0
 8007d72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d8c:	f7fb fdb2 	bl	80038f4 <HAL_DMA_Start_IT>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	f043 0210 	orr.w	r2, r3, #16
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007dae:	e01e      	b.n	8007dee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d007      	beq.n	8007dce <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dcc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0220 	orr.w	r2, r2, #32
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0202 	orr.w	r2, r2, #2
 8007dec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	08008275 	.word	0x08008275
 8007e04:	08008121 	.word	0x08008121
 8007e08:	08008291 	.word	0x08008291
 8007e0c:	080081c9 	.word	0x080081c9
 8007e10:	080082ad 	.word	0x080082ad

08007e14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	099b      	lsrs	r3, r3, #6
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10f      	bne.n	8007e58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	099b      	lsrs	r3, r3, #6
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
    return;
 8007e56:	e0d7      	b.n	8008008 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <HAL_SPI_IRQHandler+0x66>
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	09db      	lsrs	r3, r3, #7
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    return;
 8007e78:	e0c6      	b.n	8008008 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10c      	bne.n	8007ea0 <HAL_SPI_IRQHandler+0x8c>
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	099b      	lsrs	r3, r3, #6
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d106      	bne.n	8007ea0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 80b4 	beq.w	8008008 <HAL_SPI_IRQHandler+0x1f4>
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80ad 	beq.w	8008008 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d023      	beq.n	8007f02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d011      	beq.n	8007eea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eca:	f043 0204 	orr.w	r2, r3, #4
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	e00b      	b.n	8007f02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eea:	2300      	movs	r3, #0
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	693b      	ldr	r3, [r7, #16]
        return;
 8007f00:	e082      	b.n	8008008 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d014      	beq.n	8007f38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f12:	f043 0201 	orr.w	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00c      	beq.n	8007f5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f48:	f043 0208 	orr.w	r2, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f50:	2300      	movs	r3, #0
 8007f52:	60bb      	str	r3, [r7, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60bb      	str	r3, [r7, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d04f      	beq.n	8008006 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <HAL_SPI_IRQHandler+0x17e>
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d034      	beq.n	8007ffc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0203 	bic.w	r2, r2, #3
 8007fa0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d011      	beq.n	8007fce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	4a18      	ldr	r2, [pc, #96]	@ (8008010 <HAL_SPI_IRQHandler+0x1fc>)
 8007fb0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fb fd64 	bl	8003a84 <HAL_DMA_Abort_IT>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d016      	beq.n	8008004 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fda:	4a0d      	ldr	r2, [pc, #52]	@ (8008010 <HAL_SPI_IRQHandler+0x1fc>)
 8007fdc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fb fd4e 	bl	8003a84 <HAL_DMA_Abort_IT>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007ffa:	e003      	b.n	8008004 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f831 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008002:	e000      	b.n	8008006 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008004:	bf00      	nop
    return;
 8008006:	bf00      	nop
  }
}
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	080082ed 	.word	0x080082ed

08008014 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008086:	f7fa f8c1 	bl	800220c <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809a:	d03b      	beq.n	8008114 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0220 	bic.w	r2, r2, #32
 80080aa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0202 	bic.w	r2, r2, #2
 80080ba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	2164      	movs	r1, #100	@ 0x64
 80080c0:	6978      	ldr	r0, [r7, #20]
 80080c2:	f000 fa15 	bl	80084f0 <SPI_EndRxTxTransaction>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d0:	f043 0220 	orr.w	r2, r3, #32
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800810c:	6978      	ldr	r0, [r7, #20]
 800810e:	f7ff ffa9 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008112:	e002      	b.n	800811a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008114:	6978      	ldr	r0, [r7, #20]
 8008116:	f7f9 fbb9 	bl	800188c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800812e:	f7fa f86d 	bl	800220c <HAL_GetTick>
 8008132:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008142:	d03b      	beq.n	80081bc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0220 	bic.w	r2, r2, #32
 8008152:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10d      	bne.n	8008178 <SPI_DMAReceiveCplt+0x58>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008164:	d108      	bne.n	8008178 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0203 	bic.w	r2, r2, #3
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	e007      	b.n	8008188 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	2164      	movs	r1, #100	@ 0x64
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f949 	bl	8008424 <SPI_EndRxTransaction>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7ff ff55 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80081ba:	e002      	b.n	80081c2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff ff29 	bl	8008014 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d6:	f7fa f819 	bl	800220c <HAL_GetTick>
 80081da:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ea:	d02f      	beq.n	800824c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0220 	bic.w	r2, r2, #32
 80081fa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	2164      	movs	r1, #100	@ 0x64
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f975 	bl	80084f0 <SPI_EndRxTxTransaction>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0203 	bic.w	r2, r2, #3
 8008226:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff0d 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800824a:	e002      	b.n	8008252 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7f9 fb33 	bl	80018b8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fede 	bl	8008028 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff feda 	bl	800803c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fed6 	bl	8008050 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0203 	bic.w	r2, r2, #3
 80082c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ce:	f043 0210 	orr.w	r2, r3, #16
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fec0 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7ff feac 	bl	8008064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008324:	f7f9 ff72 	bl	800220c <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	4413      	add	r3, r2
 8008332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008334:	f7f9 ff6a 	bl	800220c <HAL_GetTick>
 8008338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800833a:	4b39      	ldr	r3, [pc, #228]	@ (8008420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	015b      	lsls	r3, r3, #5
 8008340:	0d1b      	lsrs	r3, r3, #20
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	fb02 f303 	mul.w	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800834a:	e054      	b.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008352:	d050      	beq.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008354:	f7f9 ff5a 	bl	800220c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	429a      	cmp	r2, r3
 8008362:	d902      	bls.n	800836a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d13d      	bne.n	80083e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008382:	d111      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800838c:	d004      	beq.n	8008398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008396:	d107      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b0:	d10f      	bne.n	80083d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e017      	b.n	8008416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4013      	ands	r3, r2
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	429a      	cmp	r2, r3
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	429a      	cmp	r2, r3
 8008412:	d19b      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000000 	.word	0x20000000

08008424 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008438:	d111      	bne.n	800845e <SPI_EndRxTransaction+0x3a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008442:	d004      	beq.n	800844e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800844c:	d107      	bne.n	800845e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800845c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008466:	d12a      	bne.n	80084be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008470:	d012      	beq.n	8008498 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	2180      	movs	r1, #128	@ 0x80
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff ff49 	bl	8008314 <SPI_WaitFlagStateUntilTimeout>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02d      	beq.n	80084e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848c:	f043 0220 	orr.w	r2, r3, #32
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e026      	b.n	80084e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	2101      	movs	r1, #1
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff ff36 	bl	8008314 <SPI_WaitFlagStateUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01a      	beq.n	80084e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e013      	b.n	80084e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2101      	movs	r1, #1
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff ff23 	bl	8008314 <SPI_WaitFlagStateUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d8:	f043 0220 	orr.w	r2, r3, #32
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e000      	b.n	80084e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084fc:	4b1b      	ldr	r3, [pc, #108]	@ (800856c <SPI_EndRxTxTransaction+0x7c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1b      	ldr	r2, [pc, #108]	@ (8008570 <SPI_EndRxTxTransaction+0x80>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	0d5b      	lsrs	r3, r3, #21
 8008508:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800850c:	fb02 f303 	mul.w	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800851a:	d112      	bne.n	8008542 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	2180      	movs	r1, #128	@ 0x80
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fef4 	bl	8008314 <SPI_WaitFlagStateUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d016      	beq.n	8008560 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008536:	f043 0220 	orr.w	r2, r3, #32
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e00f      	b.n	8008562 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	3b01      	subs	r3, #1
 800854c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008558:	2b80      	cmp	r3, #128	@ 0x80
 800855a:	d0f2      	beq.n	8008542 <SPI_EndRxTxTransaction+0x52>
 800855c:	e000      	b.n	8008560 <SPI_EndRxTxTransaction+0x70>
        break;
 800855e:	bf00      	nop
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000000 	.word	0x20000000
 8008570:	165e9f81 	.word	0x165e9f81

08008574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e03f      	b.n	8008606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7f9 f838 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2224      	movs	r2, #36	@ 0x24
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc7b 	bl	8008eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695a      	ldr	r2, [r3, #20]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b0ba      	sub	sp, #232	@ 0xe8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800863c:	2300      	movs	r3, #0
 800863e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800864e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10f      	bne.n	8008676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_UART_IRQHandler+0x66>
 8008662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb65 	bl	8008d3e <UART_Receive_IT>
      return;
 8008674:	e256      	b.n	8008b24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80de 	beq.w	800883c <HAL_UART_IRQHandler+0x22c>
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800868c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008690:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80d1 	beq.w	800883c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_UART_IRQHandler+0xae>
 80086a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b6:	f043 0201 	orr.w	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <HAL_UART_IRQHandler+0xd2>
 80086ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086da:	f043 0202 	orr.w	r2, r3, #2
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <HAL_UART_IRQHandler+0xf6>
 80086ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f043 0204 	orr.w	r2, r3, #4
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d011      	beq.n	8008736 <HAL_UART_IRQHandler+0x126>
 8008712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800871e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	f043 0208 	orr.w	r2, r3, #8
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 81ed 	beq.w	8008b1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x14e>
 800874c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 faf0 	bl	8008d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008768:	2b40      	cmp	r3, #64	@ 0x40
 800876a:	bf0c      	ite	eq
 800876c:	2301      	moveq	r3, #1
 800876e:	2300      	movne	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <HAL_UART_IRQHandler+0x17a>
 8008782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d04f      	beq.n	800882a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9f8 	bl	8008b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879a:	2b40      	cmp	r3, #64	@ 0x40
 800879c:	d141      	bne.n	8008822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3314      	adds	r3, #20
 80087a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1d9      	bne.n	800879e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d013      	beq.n	800881a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f6:	4a7d      	ldr	r2, [pc, #500]	@ (80089ec <HAL_UART_IRQHandler+0x3dc>)
 80087f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fb f940 	bl	8003a84 <HAL_DMA_Abort_IT>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008818:	e00e      	b.n	8008838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f99a 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	e00a      	b.n	8008838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f996 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e006      	b.n	8008838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f992 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008836:	e170      	b.n	8008b1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008838:	bf00      	nop
    return;
 800883a:	e16e      	b.n	8008b1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	2b01      	cmp	r3, #1
 8008842:	f040 814a 	bne.w	8008ada <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884a:	f003 0310 	and.w	r3, r3, #16
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8143 	beq.w	8008ada <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 813c 	beq.w	8008ada <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008882:	2b40      	cmp	r3, #64	@ 0x40
 8008884:	f040 80b4 	bne.w	80089f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8140 	beq.w	8008b1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088a6:	429a      	cmp	r2, r3
 80088a8:	f080 8139 	bcs.w	8008b1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	f000 8088 	beq.w	80089d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	330c      	adds	r3, #12
 80088ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80088ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80088f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1d9      	bne.n	80088c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3314      	adds	r3, #20
 8008914:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800891e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3314      	adds	r3, #20
 800892e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008932:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008936:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800893a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e1      	bne.n	800890e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3314      	adds	r3, #20
 8008950:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800895a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800895c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800896e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008970:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800897c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e3      	bne.n	800894a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089a2:	f023 0310 	bic.w	r3, r3, #16
 80089a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80089b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80089b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e3      	bne.n	8008990 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fa ffe9 	bl	80039a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089da:	b29b      	uxth	r3, r3
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f8c0 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089e8:	e099      	b.n	8008b1e <HAL_UART_IRQHandler+0x50e>
 80089ea:	bf00      	nop
 80089ec:	08008c47 	.word	0x08008c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 808b 	beq.w	8008b22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 8086 	beq.w	8008b22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e3      	bne.n	8008a16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	f023 0301 	bic.w	r3, r3, #1
 8008a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e3      	bne.n	8008a4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0310 	bic.w	r3, r3, #16
 8008aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330c      	adds	r3, #12
 8008ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ab8:	61fa      	str	r2, [r7, #28]
 8008aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e3      	bne.n	8008a94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f848 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ad8:	e023      	b.n	8008b22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d009      	beq.n	8008afa <HAL_UART_IRQHandler+0x4ea>
 8008ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8bb 	bl	8008c6e <UART_Transmit_IT>
    return;
 8008af8:	e014      	b.n	8008b24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00e      	beq.n	8008b24 <HAL_UART_IRQHandler+0x514>
 8008b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8fb 	bl	8008d0e <UART_EndTransmit_IT>
    return;
 8008b18:	e004      	b.n	8008b24 <HAL_UART_IRQHandler+0x514>
    return;
 8008b1a:	bf00      	nop
 8008b1c:	e002      	b.n	8008b24 <HAL_UART_IRQHandler+0x514>
      return;
 8008b1e:	bf00      	nop
 8008b20:	e000      	b.n	8008b24 <HAL_UART_IRQHandler+0x514>
      return;
 8008b22:	bf00      	nop
  }
}
 8008b24:	37e8      	adds	r7, #232	@ 0xe8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b095      	sub	sp, #84	@ 0x54
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3314      	adds	r3, #20
 8008bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d119      	bne.n	8008c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	330c      	adds	r3, #12
 8008bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f023 0310 	bic.w	r3, r3, #16
 8008c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	330c      	adds	r3, #12
 8008c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c18:	61ba      	str	r2, [r7, #24]
 8008c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6979      	ldr	r1, [r7, #20]
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	613b      	str	r3, [r7, #16]
   return(result);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e5      	bne.n	8008bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c3a:	bf00      	nop
 8008c3c:	3754      	adds	r7, #84	@ 0x54
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7ff ff77 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b21      	cmp	r3, #33	@ 0x21
 8008c80:	d13e      	bne.n	8008d00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c8a:	d114      	bne.n	8008cb6 <UART_Transmit_IT+0x48>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d110      	bne.n	8008cb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ca8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	1c9a      	adds	r2, r3, #2
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	621a      	str	r2, [r3, #32]
 8008cb4:	e008      	b.n	8008cc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	1c59      	adds	r1, r3, #1
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6211      	str	r1, [r2, #32]
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10f      	bne.n	8008cfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e000      	b.n	8008d02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d00:	2302      	movs	r3, #2
  }
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fefc 	bl	8008b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b08c      	sub	sp, #48	@ 0x30
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b22      	cmp	r3, #34	@ 0x22
 8008d50:	f040 80ab 	bne.w	8008eaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d5c:	d117      	bne.n	8008d8e <UART_Receive_IT+0x50>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d113      	bne.n	8008d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	1c9a      	adds	r2, r3, #2
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d8c:	e026      	b.n	8008ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008da0:	d007      	beq.n	8008db2 <UART_Receive_IT+0x74>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <UART_Receive_IT+0x82>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e008      	b.n	8008dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4619      	mov	r1, r3
 8008dea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d15a      	bne.n	8008ea6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0220 	bic.w	r2, r2, #32
 8008dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695a      	ldr	r2, [r3, #20]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d135      	bne.n	8008e9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	613b      	str	r3, [r7, #16]
   return(result);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f023 0310 	bic.w	r3, r3, #16
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	330c      	adds	r3, #12
 8008e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e56:	623a      	str	r2, [r7, #32]
 8008e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	69f9      	ldr	r1, [r7, #28]
 8008e5c:	6a3a      	ldr	r2, [r7, #32]
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e5      	bne.n	8008e36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	d10a      	bne.n	8008e8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff fe67 	bl	8008b68 <HAL_UARTEx_RxEventCallback>
 8008e9a:	e002      	b.n	8008ea2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fe4f 	bl	8008b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e002      	b.n	8008eac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e000      	b.n	8008eac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3730      	adds	r7, #48	@ 0x30
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eb8:	b0c0      	sub	sp, #256	@ 0x100
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed0:	68d9      	ldr	r1, [r3, #12]
 8008ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	ea40 0301 	orr.w	r3, r0, r1
 8008edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f0c:	f021 010c 	bic.w	r1, r1, #12
 8008f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f2e:	6999      	ldr	r1, [r3, #24]
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	ea40 0301 	orr.w	r3, r0, r1
 8008f3a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b95      	ldr	r3, [pc, #596]	@ (8009198 <UART_SetConfig+0x2e4>)
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d011      	beq.n	8008f6c <UART_SetConfig+0xb8>
 8008f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b93      	ldr	r3, [pc, #588]	@ (800919c <UART_SetConfig+0x2e8>)
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d00b      	beq.n	8008f6c <UART_SetConfig+0xb8>
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b91      	ldr	r3, [pc, #580]	@ (80091a0 <UART_SetConfig+0x2ec>)
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d005      	beq.n	8008f6c <UART_SetConfig+0xb8>
 8008f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b8f      	ldr	r3, [pc, #572]	@ (80091a4 <UART_SetConfig+0x2f0>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d104      	bne.n	8008f76 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f6c:	f7fd fe8a 	bl	8006c84 <HAL_RCC_GetPCLK2Freq>
 8008f70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f74:	e003      	b.n	8008f7e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f76:	f7fd fe71 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8008f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f88:	f040 8110 	bne.w	80091ac <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	1891      	adds	r1, r2, r2
 8008fa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008fa6:	415b      	adcs	r3, r3
 8008fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008fae:	4621      	mov	r1, r4
 8008fb0:	eb12 0801 	adds.w	r8, r2, r1
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	eb43 0901 	adc.w	r9, r3, r1
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fce:	4690      	mov	r8, r2
 8008fd0:	4699      	mov	r9, r3
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	eb18 0303 	adds.w	r3, r8, r3
 8008fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fdc:	462b      	mov	r3, r5
 8008fde:	eb49 0303 	adc.w	r3, r9, r3
 8008fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	18db      	adds	r3, r3, r3
 8008ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009000:	4613      	mov	r3, r2
 8009002:	eb42 0303 	adc.w	r3, r2, r3
 8009006:	657b      	str	r3, [r7, #84]	@ 0x54
 8009008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800900c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009010:	f7f7 f906 	bl	8000220 <__aeabi_uldivmod>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4b63      	ldr	r3, [pc, #396]	@ (80091a8 <UART_SetConfig+0x2f4>)
 800901a:	fba3 2302 	umull	r2, r3, r3, r2
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	011c      	lsls	r4, r3, #4
 8009022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009026:	2200      	movs	r2, #0
 8009028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800902c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009034:	4642      	mov	r2, r8
 8009036:	464b      	mov	r3, r9
 8009038:	1891      	adds	r1, r2, r2
 800903a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800903c:	415b      	adcs	r3, r3
 800903e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009044:	4641      	mov	r1, r8
 8009046:	eb12 0a01 	adds.w	sl, r2, r1
 800904a:	4649      	mov	r1, r9
 800904c:	eb43 0b01 	adc.w	fp, r3, r1
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800905c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009064:	4692      	mov	sl, r2
 8009066:	469b      	mov	fp, r3
 8009068:	4643      	mov	r3, r8
 800906a:	eb1a 0303 	adds.w	r3, sl, r3
 800906e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009072:	464b      	mov	r3, r9
 8009074:	eb4b 0303 	adc.w	r3, fp, r3
 8009078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009088:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800908c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009090:	460b      	mov	r3, r1
 8009092:	18db      	adds	r3, r3, r3
 8009094:	643b      	str	r3, [r7, #64]	@ 0x40
 8009096:	4613      	mov	r3, r2
 8009098:	eb42 0303 	adc.w	r3, r2, r3
 800909c:	647b      	str	r3, [r7, #68]	@ 0x44
 800909e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80090a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80090a6:	f7f7 f8bb 	bl	8000220 <__aeabi_uldivmod>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	4b3d      	ldr	r3, [pc, #244]	@ (80091a8 <UART_SetConfig+0x2f4>)
 80090b2:	fba3 2301 	umull	r2, r3, r3, r1
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2264      	movs	r2, #100	@ 0x64
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	1acb      	subs	r3, r1, r3
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80090c6:	4b38      	ldr	r3, [pc, #224]	@ (80091a8 <UART_SetConfig+0x2f4>)
 80090c8:	fba3 2302 	umull	r2, r3, r3, r2
 80090cc:	095b      	lsrs	r3, r3, #5
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80090d4:	441c      	add	r4, r3
 80090d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80090e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	1891      	adds	r1, r2, r2
 80090ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090f0:	415b      	adcs	r3, r3
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80090f8:	4641      	mov	r1, r8
 80090fa:	1851      	adds	r1, r2, r1
 80090fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80090fe:	4649      	mov	r1, r9
 8009100:	414b      	adcs	r3, r1
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009110:	4659      	mov	r1, fp
 8009112:	00cb      	lsls	r3, r1, #3
 8009114:	4651      	mov	r1, sl
 8009116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800911a:	4651      	mov	r1, sl
 800911c:	00ca      	lsls	r2, r1, #3
 800911e:	4610      	mov	r0, r2
 8009120:	4619      	mov	r1, r3
 8009122:	4603      	mov	r3, r0
 8009124:	4642      	mov	r2, r8
 8009126:	189b      	adds	r3, r3, r2
 8009128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800912c:	464b      	mov	r3, r9
 800912e:	460a      	mov	r2, r1
 8009130:	eb42 0303 	adc.w	r3, r2, r3
 8009134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009144:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800914c:	460b      	mov	r3, r1
 800914e:	18db      	adds	r3, r3, r3
 8009150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009152:	4613      	mov	r3, r2
 8009154:	eb42 0303 	adc.w	r3, r2, r3
 8009158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800915a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800915e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009162:	f7f7 f85d 	bl	8000220 <__aeabi_uldivmod>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4b0f      	ldr	r3, [pc, #60]	@ (80091a8 <UART_SetConfig+0x2f4>)
 800916c:	fba3 1302 	umull	r1, r3, r3, r2
 8009170:	095b      	lsrs	r3, r3, #5
 8009172:	2164      	movs	r1, #100	@ 0x64
 8009174:	fb01 f303 	mul.w	r3, r1, r3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	3332      	adds	r3, #50	@ 0x32
 800917e:	4a0a      	ldr	r2, [pc, #40]	@ (80091a8 <UART_SetConfig+0x2f4>)
 8009180:	fba2 2303 	umull	r2, r3, r2, r3
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	f003 0207 	and.w	r2, r3, #7
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4422      	add	r2, r4
 8009192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009194:	e10a      	b.n	80093ac <UART_SetConfig+0x4f8>
 8009196:	bf00      	nop
 8009198:	40011000 	.word	0x40011000
 800919c:	40011400 	.word	0x40011400
 80091a0:	40011800 	.word	0x40011800
 80091a4:	40011c00 	.word	0x40011c00
 80091a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80091b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80091ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80091be:	4642      	mov	r2, r8
 80091c0:	464b      	mov	r3, r9
 80091c2:	1891      	adds	r1, r2, r2
 80091c4:	6239      	str	r1, [r7, #32]
 80091c6:	415b      	adcs	r3, r3
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091ce:	4641      	mov	r1, r8
 80091d0:	1854      	adds	r4, r2, r1
 80091d2:	4649      	mov	r1, r9
 80091d4:	eb43 0501 	adc.w	r5, r3, r1
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	00eb      	lsls	r3, r5, #3
 80091e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091e6:	00e2      	lsls	r2, r4, #3
 80091e8:	4614      	mov	r4, r2
 80091ea:	461d      	mov	r5, r3
 80091ec:	4643      	mov	r3, r8
 80091ee:	18e3      	adds	r3, r4, r3
 80091f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091f4:	464b      	mov	r3, r9
 80091f6:	eb45 0303 	adc.w	r3, r5, r3
 80091fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800920a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	f04f 0300 	mov.w	r3, #0
 8009216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800921a:	4629      	mov	r1, r5
 800921c:	008b      	lsls	r3, r1, #2
 800921e:	4621      	mov	r1, r4
 8009220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009224:	4621      	mov	r1, r4
 8009226:	008a      	lsls	r2, r1, #2
 8009228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800922c:	f7f6 fff8 	bl	8000220 <__aeabi_uldivmod>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4b60      	ldr	r3, [pc, #384]	@ (80093b8 <UART_SetConfig+0x504>)
 8009236:	fba3 2302 	umull	r2, r3, r3, r2
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	011c      	lsls	r4, r3, #4
 800923e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009242:	2200      	movs	r2, #0
 8009244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800924c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	1891      	adds	r1, r2, r2
 8009256:	61b9      	str	r1, [r7, #24]
 8009258:	415b      	adcs	r3, r3
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009260:	4641      	mov	r1, r8
 8009262:	1851      	adds	r1, r2, r1
 8009264:	6139      	str	r1, [r7, #16]
 8009266:	4649      	mov	r1, r9
 8009268:	414b      	adcs	r3, r1
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009278:	4659      	mov	r1, fp
 800927a:	00cb      	lsls	r3, r1, #3
 800927c:	4651      	mov	r1, sl
 800927e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009282:	4651      	mov	r1, sl
 8009284:	00ca      	lsls	r2, r1, #3
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	4603      	mov	r3, r0
 800928c:	4642      	mov	r2, r8
 800928e:	189b      	adds	r3, r3, r2
 8009290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009294:	464b      	mov	r3, r9
 8009296:	460a      	mov	r2, r1
 8009298:	eb42 0303 	adc.w	r3, r2, r3
 800929c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80092b8:	4649      	mov	r1, r9
 80092ba:	008b      	lsls	r3, r1, #2
 80092bc:	4641      	mov	r1, r8
 80092be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092c2:	4641      	mov	r1, r8
 80092c4:	008a      	lsls	r2, r1, #2
 80092c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80092ca:	f7f6 ffa9 	bl	8000220 <__aeabi_uldivmod>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	4b38      	ldr	r3, [pc, #224]	@ (80093b8 <UART_SetConfig+0x504>)
 80092d6:	fba3 2301 	umull	r2, r3, r3, r1
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	2264      	movs	r2, #100	@ 0x64
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	1acb      	subs	r3, r1, r3
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	3332      	adds	r3, #50	@ 0x32
 80092e8:	4a33      	ldr	r2, [pc, #204]	@ (80093b8 <UART_SetConfig+0x504>)
 80092ea:	fba2 2303 	umull	r2, r3, r2, r3
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092f4:	441c      	add	r4, r3
 80092f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092fa:	2200      	movs	r2, #0
 80092fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80092fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009304:	4642      	mov	r2, r8
 8009306:	464b      	mov	r3, r9
 8009308:	1891      	adds	r1, r2, r2
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	415b      	adcs	r3, r3
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009314:	4641      	mov	r1, r8
 8009316:	1851      	adds	r1, r2, r1
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	4649      	mov	r1, r9
 800931c:	414b      	adcs	r3, r1
 800931e:	607b      	str	r3, [r7, #4]
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800932c:	4659      	mov	r1, fp
 800932e:	00cb      	lsls	r3, r1, #3
 8009330:	4651      	mov	r1, sl
 8009332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009336:	4651      	mov	r1, sl
 8009338:	00ca      	lsls	r2, r1, #3
 800933a:	4610      	mov	r0, r2
 800933c:	4619      	mov	r1, r3
 800933e:	4603      	mov	r3, r0
 8009340:	4642      	mov	r2, r8
 8009342:	189b      	adds	r3, r3, r2
 8009344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009346:	464b      	mov	r3, r9
 8009348:	460a      	mov	r2, r1
 800934a:	eb42 0303 	adc.w	r3, r2, r3
 800934e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	663b      	str	r3, [r7, #96]	@ 0x60
 800935a:	667a      	str	r2, [r7, #100]	@ 0x64
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009368:	4649      	mov	r1, r9
 800936a:	008b      	lsls	r3, r1, #2
 800936c:	4641      	mov	r1, r8
 800936e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009372:	4641      	mov	r1, r8
 8009374:	008a      	lsls	r2, r1, #2
 8009376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800937a:	f7f6 ff51 	bl	8000220 <__aeabi_uldivmod>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <UART_SetConfig+0x504>)
 8009384:	fba3 1302 	umull	r1, r3, r3, r2
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	2164      	movs	r1, #100	@ 0x64
 800938c:	fb01 f303 	mul.w	r3, r1, r3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	3332      	adds	r3, #50	@ 0x32
 8009396:	4a08      	ldr	r2, [pc, #32]	@ (80093b8 <UART_SetConfig+0x504>)
 8009398:	fba2 2303 	umull	r2, r3, r2, r3
 800939c:	095b      	lsrs	r3, r3, #5
 800939e:	f003 020f 	and.w	r2, r3, #15
 80093a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4422      	add	r2, r4
 80093aa:	609a      	str	r2, [r3, #8]
}
 80093ac:	bf00      	nop
 80093ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80093b2:	46bd      	mov	sp, r7
 80093b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093b8:	51eb851f 	.word	0x51eb851f

080093bc <__NVIC_SetPriority>:
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	db0a      	blt.n	80093e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	490c      	ldr	r1, [pc, #48]	@ (8009408 <__NVIC_SetPriority+0x4c>)
 80093d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093da:	0112      	lsls	r2, r2, #4
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	440b      	add	r3, r1
 80093e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80093e4:	e00a      	b.n	80093fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4908      	ldr	r1, [pc, #32]	@ (800940c <__NVIC_SetPriority+0x50>)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	3b04      	subs	r3, #4
 80093f4:	0112      	lsls	r2, r2, #4
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	440b      	add	r3, r1
 80093fa:	761a      	strb	r2, [r3, #24]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	e000e100 	.word	0xe000e100
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009414:	2100      	movs	r1, #0
 8009416:	f06f 0004 	mvn.w	r0, #4
 800941a:	f7ff ffcf 	bl	80093bc <__NVIC_SetPriority>
#endif
}
 800941e:	bf00      	nop
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800942a:	f3ef 8305 	mrs	r3, IPSR
 800942e:	603b      	str	r3, [r7, #0]
  return(result);
 8009430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009436:	f06f 0305 	mvn.w	r3, #5
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	e00c      	b.n	8009458 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800943e:	4b0a      	ldr	r3, [pc, #40]	@ (8009468 <osKernelInitialize+0x44>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d105      	bne.n	8009452 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009446:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <osKernelInitialize+0x44>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800944c:	2300      	movs	r3, #0
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	e002      	b.n	8009458 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009458:	687b      	ldr	r3, [r7, #4]
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000578 	.word	0x20000578

0800946c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009472:	f3ef 8305 	mrs	r3, IPSR
 8009476:	603b      	str	r3, [r7, #0]
  return(result);
 8009478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <osKernelStart+0x1a>
    stat = osErrorISR;
 800947e:	f06f 0305 	mvn.w	r3, #5
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	e010      	b.n	80094a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <osKernelStart+0x48>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d109      	bne.n	80094a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800948e:	f7ff ffbf 	bl	8009410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009492:	4b08      	ldr	r3, [pc, #32]	@ (80094b4 <osKernelStart+0x48>)
 8009494:	2202      	movs	r2, #2
 8009496:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009498:	f001 ffc2 	bl	800b420 <vTaskStartScheduler>
      stat = osOK;
 800949c:	2300      	movs	r3, #0
 800949e:	607b      	str	r3, [r7, #4]
 80094a0:	e002      	b.n	80094a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094a8:	687b      	ldr	r3, [r7, #4]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20000578 	.word	0x20000578

080094b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08e      	sub	sp, #56	@ 0x38
 80094bc:	af04      	add	r7, sp, #16
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c8:	f3ef 8305 	mrs	r3, IPSR
 80094cc:	617b      	str	r3, [r7, #20]
  return(result);
 80094ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d17e      	bne.n	80095d2 <osThreadNew+0x11a>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d07b      	beq.n	80095d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094da:	2380      	movs	r3, #128	@ 0x80
 80094dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094de:	2318      	movs	r3, #24
 80094e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80094e6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d045      	beq.n	800957e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <osThreadNew+0x48>
        name = attr->name;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d008      	beq.n	8009526 <osThreadNew+0x6e>
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b38      	cmp	r3, #56	@ 0x38
 8009518:	d805      	bhi.n	8009526 <osThreadNew+0x6e>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <osThreadNew+0x72>
        return (NULL);
 8009526:	2300      	movs	r3, #0
 8009528:	e054      	b.n	80095d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <osThreadNew+0xa8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b5b      	cmp	r3, #91	@ 0x5b
 8009548:	d90a      	bls.n	8009560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <osThreadNew+0xa8>
        mem = 1;
 800955a:	2301      	movs	r3, #1
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e010      	b.n	8009582 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10c      	bne.n	8009582 <osThreadNew+0xca>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <osThreadNew+0xca>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <osThreadNew+0xca>
          mem = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	e001      	b.n	8009582 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d110      	bne.n	80095aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009590:	9202      	str	r2, [sp, #8]
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6a3a      	ldr	r2, [r7, #32]
 800959c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 fd62 	bl	800b068 <xTaskCreateStatic>
 80095a4:	4603      	mov	r3, r0
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	e013      	b.n	80095d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d110      	bne.n	80095d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fdb0 	bl	800b128 <xTaskCreate>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d001      	beq.n	80095d2 <osThreadNew+0x11a>
            hTask = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095d2:	693b      	ldr	r3, [r7, #16]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3728      	adds	r7, #40	@ 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095e4:	f3ef 8305 	mrs	r3, IPSR
 80095e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80095ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <osDelay+0x1c>
    stat = osErrorISR;
 80095f0:	f06f 0305 	mvn.w	r3, #5
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	e007      	b.n	8009608 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fed6 	bl	800b3b4 <vTaskDelay>
    }
  }

  return (stat);
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009612:	b580      	push	{r7, lr}
 8009614:	b088      	sub	sp, #32
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800961e:	f3ef 8305 	mrs	r3, IPSR
 8009622:	60bb      	str	r3, [r7, #8]
  return(result);
 8009624:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009626:	2b00      	cmp	r3, #0
 8009628:	d174      	bne.n	8009714 <osMutexNew+0x102>
    if (attr != NULL) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	e001      	b.n	800963c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <osMutexNew+0x3a>
      rmtx = 1U;
 8009646:	2301      	movs	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e001      	b.n	8009650 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d15c      	bne.n	8009714 <osMutexNew+0x102>
      mem = -1;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295
 800965e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d015      	beq.n	8009692 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <osMutexNew+0x6a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	2b4f      	cmp	r3, #79	@ 0x4f
 8009674:	d902      	bls.n	800967c <osMutexNew+0x6a>
          mem = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	e00c      	b.n	8009696 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d108      	bne.n	8009696 <osMutexNew+0x84>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <osMutexNew+0x84>
            mem = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	e001      	b.n	8009696 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d112      	bne.n	80096c2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	4619      	mov	r1, r3
 80096a8:	2004      	movs	r0, #4
 80096aa:	f000 fd70 	bl	800a18e <xQueueCreateMutexStatic>
 80096ae:	61f8      	str	r0, [r7, #28]
 80096b0:	e016      	b.n	80096e0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	4619      	mov	r1, r3
 80096b8:	2001      	movs	r0, #1
 80096ba:	f000 fd68 	bl	800a18e <xQueueCreateMutexStatic>
 80096be:	61f8      	str	r0, [r7, #28]
 80096c0:	e00e      	b.n	80096e0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80096ce:	2004      	movs	r0, #4
 80096d0:	f000 fd45 	bl	800a15e <xQueueCreateMutex>
 80096d4:	61f8      	str	r0, [r7, #28]
 80096d6:	e003      	b.n	80096e0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80096d8:	2001      	movs	r0, #1
 80096da:	f000 fd40 	bl	800a15e <xQueueCreateMutex>
 80096de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <osMutexNew+0xee>
        if (attr != NULL) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <osMutexNew+0xe2>
          name = attr->name;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e001      	b.n	80096f8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80096f8:	68f9      	ldr	r1, [r7, #12]
 80096fa:	69f8      	ldr	r0, [r7, #28]
 80096fc:	f001 fc2c 	bl	800af58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <osMutexNew+0x102>
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009714:	69fb      	ldr	r3, [r7, #28]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973c:	f3ef 8305 	mrs	r3, IPSR
 8009740:	60bb      	str	r3, [r7, #8]
  return(result);
 8009742:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009748:	f06f 0305 	mvn.w	r3, #5
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e02c      	b.n	80097aa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009756:	f06f 0303 	mvn.w	r3, #3
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e025      	b.n	80097aa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d011      	beq.n	8009788 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6938      	ldr	r0, [r7, #16]
 8009768:	f000 fd61 	bl	800a22e <xQueueTakeMutexRecursive>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d01b      	beq.n	80097aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d003      	beq.n	8009780 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009778:	f06f 0301 	mvn.w	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e014      	b.n	80097aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009780:	f06f 0302 	mvn.w	r3, #2
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	e010      	b.n	80097aa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6938      	ldr	r0, [r7, #16]
 800978c:	f001 f906 	bl	800a99c <xQueueSemaphoreTake>
 8009790:	4603      	mov	r3, r0
 8009792:	2b01      	cmp	r3, #1
 8009794:	d009      	beq.n	80097aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800979c:	f06f 0301 	mvn.w	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e002      	b.n	80097aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80097a4:	f06f 0302 	mvn.w	r3, #2
 80097a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80097aa:	697b      	ldr	r3, [r7, #20]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f023 0301 	bic.w	r3, r3, #1
 80097c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d0:	f3ef 8305 	mrs	r3, IPSR
 80097d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80097d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80097dc:	f06f 0305 	mvn.w	r3, #5
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e01f      	b.n	8009824 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80097ea:	f06f 0303 	mvn.w	r3, #3
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e018      	b.n	8009824 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80097f8:	6938      	ldr	r0, [r7, #16]
 80097fa:	f000 fce3 	bl	800a1c4 <xQueueGiveMutexRecursive>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b01      	cmp	r3, #1
 8009802:	d00f      	beq.n	8009824 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009804:	f06f 0302 	mvn.w	r3, #2
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e00b      	b.n	8009824 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800980c:	2300      	movs	r3, #0
 800980e:	2200      	movs	r2, #0
 8009810:	2100      	movs	r1, #0
 8009812:	6938      	ldr	r0, [r7, #16]
 8009814:	f000 fdb0 	bl	800a378 <xQueueGenericSend>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d002      	beq.n	8009824 <osMutexRelease+0x70>
        stat = osErrorResource;
 800981e:	f06f 0302 	mvn.w	r3, #2
 8009822:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009824:	697b      	ldr	r3, [r7, #20]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800982e:	b580      	push	{r7, lr}
 8009830:	b08a      	sub	sp, #40	@ 0x28
 8009832:	af02      	add	r7, sp, #8
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983e:	f3ef 8305 	mrs	r3, IPSR
 8009842:	613b      	str	r3, [r7, #16]
  return(result);
 8009844:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009846:	2b00      	cmp	r3, #0
 8009848:	d175      	bne.n	8009936 <osSemaphoreNew+0x108>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d072      	beq.n	8009936 <osSemaphoreNew+0x108>
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d86e      	bhi.n	8009936 <osSemaphoreNew+0x108>
    mem = -1;
 8009858:	f04f 33ff 	mov.w	r3, #4294967295
 800985c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d015      	beq.n	8009890 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d006      	beq.n	800987a <osSemaphoreNew+0x4c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	2b4f      	cmp	r3, #79	@ 0x4f
 8009872:	d902      	bls.n	800987a <osSemaphoreNew+0x4c>
        mem = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e00c      	b.n	8009894 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d108      	bne.n	8009894 <osSemaphoreNew+0x66>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <osSemaphoreNew+0x66>
          mem = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	e001      	b.n	8009894 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d04c      	beq.n	8009936 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d128      	bne.n	80098f4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d10a      	bne.n	80098be <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	2203      	movs	r2, #3
 80098ae:	9200      	str	r2, [sp, #0]
 80098b0:	2200      	movs	r2, #0
 80098b2:	2100      	movs	r1, #0
 80098b4:	2001      	movs	r0, #1
 80098b6:	f000 fb5d 	bl	8009f74 <xQueueGenericCreateStatic>
 80098ba:	61f8      	str	r0, [r7, #28]
 80098bc:	e005      	b.n	80098ca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80098be:	2203      	movs	r2, #3
 80098c0:	2100      	movs	r1, #0
 80098c2:	2001      	movs	r0, #1
 80098c4:	f000 fbd3 	bl	800a06e <xQueueGenericCreate>
 80098c8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d022      	beq.n	8009916 <osSemaphoreNew+0xe8>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d01f      	beq.n	8009916 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80098d6:	2300      	movs	r3, #0
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	69f8      	ldr	r0, [r7, #28]
 80098de:	f000 fd4b 	bl	800a378 <xQueueGenericSend>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d016      	beq.n	8009916 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80098e8:	69f8      	ldr	r0, [r7, #28]
 80098ea:	f001 f9e9 	bl	800acc0 <vQueueDelete>
            hSemaphore = NULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	e010      	b.n	8009916 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d108      	bne.n	800990c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	461a      	mov	r2, r3
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fcca 	bl	800a29c <xQueueCreateCountingSemaphoreStatic>
 8009908:	61f8      	str	r0, [r7, #28]
 800990a:	e004      	b.n	8009916 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 fcfd 	bl	800a30e <xQueueCreateCountingSemaphore>
 8009914:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00c      	beq.n	8009936 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e001      	b.n	800992e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	69f8      	ldr	r0, [r7, #28]
 8009932:	f001 fb11 	bl	800af58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009936:	69fb      	ldr	r3, [r7, #28]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3720      	adds	r7, #32
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009958:	f06f 0303 	mvn.w	r3, #3
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e039      	b.n	80099d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009960:	f3ef 8305 	mrs	r3, IPSR
 8009964:	60fb      	str	r3, [r7, #12]
  return(result);
 8009966:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009968:	2b00      	cmp	r3, #0
 800996a:	d022      	beq.n	80099b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009972:	f06f 0303 	mvn.w	r3, #3
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e02c      	b.n	80099d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800997a:	2300      	movs	r3, #0
 800997c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800997e:	f107 0308 	add.w	r3, r7, #8
 8009982:	461a      	mov	r2, r3
 8009984:	2100      	movs	r1, #0
 8009986:	6938      	ldr	r0, [r7, #16]
 8009988:	f001 f918 	bl	800abbc <xQueueReceiveFromISR>
 800998c:	4603      	mov	r3, r0
 800998e:	2b01      	cmp	r3, #1
 8009990:	d003      	beq.n	800999a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009992:	f06f 0302 	mvn.w	r3, #2
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	e01c      	b.n	80099d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d019      	beq.n	80099d4 <osSemaphoreAcquire+0x94>
 80099a0:	4b0f      	ldr	r3, [pc, #60]	@ (80099e0 <osSemaphoreAcquire+0xa0>)
 80099a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	e010      	b.n	80099d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6938      	ldr	r0, [r7, #16]
 80099b6:	f000 fff1 	bl	800a99c <xQueueSemaphoreTake>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d009      	beq.n	80099d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80099c6:	f06f 0301 	mvn.w	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e002      	b.n	80099d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80099ce:	f06f 0302 	mvn.w	r3, #2
 80099d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80099d4:	697b      	ldr	r3, [r7, #20]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000ed04 	.word	0xe000ed04

080099e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80099fa:	f06f 0303 	mvn.w	r3, #3
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e02c      	b.n	8009a5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a02:	f3ef 8305 	mrs	r3, IPSR
 8009a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01a      	beq.n	8009a44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4619      	mov	r1, r3
 8009a18:	6938      	ldr	r0, [r7, #16]
 8009a1a:	f000 fe4d 	bl	800a6b8 <xQueueGiveFromISR>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d003      	beq.n	8009a2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009a24:	f06f 0302 	mvn.w	r3, #2
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e017      	b.n	8009a5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d014      	beq.n	8009a5c <osSemaphoreRelease+0x78>
 8009a32:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <osSemaphoreRelease+0x84>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	e00b      	b.n	8009a5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a44:	2300      	movs	r3, #0
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6938      	ldr	r0, [r7, #16]
 8009a4c:	f000 fc94 	bl	800a378 <xQueueGenericSend>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d002      	beq.n	8009a5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009a56:	f06f 0302 	mvn.w	r3, #2
 8009a5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009a5c:	697b      	ldr	r3, [r7, #20]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7c:	f3ef 8305 	mrs	r3, IPSR
 8009a80:	613b      	str	r3, [r7, #16]
  return(result);
 8009a82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d15f      	bne.n	8009b48 <osMessageQueueNew+0xdc>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d05c      	beq.n	8009b48 <osMessageQueueNew+0xdc>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d059      	beq.n	8009b48 <osMessageQueueNew+0xdc>
    mem = -1;
 8009a94:	f04f 33ff 	mov.w	r3, #4294967295
 8009a98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d029      	beq.n	8009af4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d012      	beq.n	8009ace <osMessageQueueNew+0x62>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b4f      	cmp	r3, #79	@ 0x4f
 8009aae:	d90e      	bls.n	8009ace <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00a      	beq.n	8009ace <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	695a      	ldr	r2, [r3, #20]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	fb01 f303 	mul.w	r3, r1, r3
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d302      	bcc.n	8009ace <osMessageQueueNew+0x62>
        mem = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	e014      	b.n	8009af8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d110      	bne.n	8009af8 <osMessageQueueNew+0x8c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10c      	bne.n	8009af8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d108      	bne.n	8009af8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <osMessageQueueNew+0x8c>
          mem = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	e001      	b.n	8009af8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d10b      	bne.n	8009b16 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	2100      	movs	r1, #0
 8009b08:	9100      	str	r1, [sp, #0]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fa31 	bl	8009f74 <xQueueGenericCreateStatic>
 8009b12:	61f8      	str	r0, [r7, #28]
 8009b14:	e008      	b.n	8009b28 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d105      	bne.n	8009b28 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 faa4 	bl	800a06e <xQueueGenericCreate>
 8009b26:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00c      	beq.n	8009b48 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e001      	b.n	8009b40 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	69f8      	ldr	r0, [r7, #28]
 8009b44:	f001 fa08 	bl	800af58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b48:	69fb      	ldr	r3, [r7, #28]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3720      	adds	r7, #32
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	4613      	mov	r3, r2
 8009b62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6c:	f3ef 8305 	mrs	r3, IPSR
 8009b70:	617b      	str	r3, [r7, #20]
  return(result);
 8009b72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d028      	beq.n	8009bca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <osMessageQueuePut+0x36>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <osMessageQueuePut+0x36>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009b8a:	f06f 0303 	mvn.w	r3, #3
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	e038      	b.n	8009c04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b96:	f107 0210 	add.w	r2, r7, #16
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	69b8      	ldr	r0, [r7, #24]
 8009ba0:	f000 fcec 	bl	800a57c <xQueueGenericSendFromISR>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d003      	beq.n	8009bb2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009baa:	f06f 0302 	mvn.w	r3, #2
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	e028      	b.n	8009c04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d025      	beq.n	8009c04 <osMessageQueuePut+0xb0>
 8009bb8:	4b15      	ldr	r3, [pc, #84]	@ (8009c10 <osMessageQueuePut+0xbc>)
 8009bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	e01c      	b.n	8009c04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <osMessageQueuePut+0x82>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009bd6:	f06f 0303 	mvn.w	r3, #3
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e012      	b.n	8009c04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009bde:	2300      	movs	r3, #0
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	69b8      	ldr	r0, [r7, #24]
 8009be6:	f000 fbc7 	bl	800a378 <xQueueGenericSend>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d009      	beq.n	8009c04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009bf6:	f06f 0301 	mvn.w	r3, #1
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	e002      	b.n	8009c04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009bfe:	f06f 0302 	mvn.w	r3, #2
 8009c02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c04:	69fb      	ldr	r3, [r7, #28]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3720      	adds	r7, #32
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c2a:	f3ef 8305 	mrs	r3, IPSR
 8009c2e:	617b      	str	r3, [r7, #20]
  return(result);
 8009c30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d028      	beq.n	8009c88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <osMessageQueueGet+0x34>
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <osMessageQueueGet+0x34>
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009c48:	f06f 0303 	mvn.w	r3, #3
 8009c4c:	61fb      	str	r3, [r7, #28]
 8009c4e:	e037      	b.n	8009cc0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c54:	f107 0310 	add.w	r3, r7, #16
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	69b8      	ldr	r0, [r7, #24]
 8009c5e:	f000 ffad 	bl	800abbc <xQueueReceiveFromISR>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d003      	beq.n	8009c70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009c68:	f06f 0302 	mvn.w	r3, #2
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	e027      	b.n	8009cc0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d024      	beq.n	8009cc0 <osMessageQueueGet+0xac>
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <osMessageQueueGet+0xb8>)
 8009c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	e01b      	b.n	8009cc0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <osMessageQueueGet+0x80>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009c94:	f06f 0303 	mvn.w	r3, #3
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	e011      	b.n	8009cc0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	69b8      	ldr	r0, [r7, #24]
 8009ca2:	f000 fd99 	bl	800a7d8 <xQueueReceive>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d009      	beq.n	8009cc0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009cb2:	f06f 0301 	mvn.w	r3, #1
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	e002      	b.n	8009cc0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009cba:	f06f 0302 	mvn.w	r3, #2
 8009cbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cc0:	69fb      	ldr	r3, [r7, #28]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a07      	ldr	r2, [pc, #28]	@ (8009cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4a06      	ldr	r2, [pc, #24]	@ (8009d00 <vApplicationGetIdleTaskMemory+0x30>)
 8009ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2280      	movs	r2, #128	@ 0x80
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	bf00      	nop
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	2000057c 	.word	0x2000057c
 8009d00:	200005d8 	.word	0x200005d8

08009d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a07      	ldr	r2, [pc, #28]	@ (8009d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a06      	ldr	r2, [pc, #24]	@ (8009d34 <vApplicationGetTimerTaskMemory+0x30>)
 8009d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	200007d8 	.word	0x200007d8
 8009d34:	20000834 	.word	0x20000834

08009d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f103 0208 	add.w	r2, r3, #8
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f103 0208 	add.w	r2, r3, #8
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0208 	add.w	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d103      	bne.n	8009dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e00c      	b.n	8009e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <vListInsert+0x2e>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d2f6      	bcs.n	8009e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6892      	ldr	r2, [r2, #8]
 8009e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6852      	ldr	r2, [r2, #4]
 8009e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d103      	bne.n	8009e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ecc:	f002 fd74 	bl	800c9b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009efc:	3b01      	subs	r3, #1
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	22ff      	movs	r2, #255	@ 0xff
 8009f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	22ff      	movs	r2, #255	@ 0xff
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d114      	bne.n	8009f4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01a      	beq.n	8009f60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3310      	adds	r3, #16
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 fd04 	bl	800b93c <xTaskRemoveFromEventList>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d012      	beq.n	8009f60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f70 <xQueueGenericReset+0xd0>)
 8009f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	e009      	b.n	8009f60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3310      	adds	r3, #16
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fef1 	bl	8009d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3324      	adds	r3, #36	@ 0x24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff feec 	bl	8009d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f60:	f002 fd5c 	bl	800ca1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f64:	2301      	movs	r3, #1
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08e      	sub	sp, #56	@ 0x38
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10b      	bne.n	8009fa0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	e7fd      	b.n	8009f9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10b      	bne.n	8009fbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fb8:	bf00      	nop
 8009fba:	bf00      	nop
 8009fbc:	e7fd      	b.n	8009fba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <xQueueGenericCreateStatic+0x56>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <xQueueGenericCreateStatic+0x5a>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <xQueueGenericCreateStatic+0x5c>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10b      	bne.n	8009fec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	623b      	str	r3, [r7, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
 8009fea:	e7fd      	b.n	8009fe8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <xQueueGenericCreateStatic+0x84>
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <xQueueGenericCreateStatic+0x88>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <xQueueGenericCreateStatic+0x8a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	61fb      	str	r3, [r7, #28]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a01a:	2350      	movs	r3, #80	@ 0x50
 800a01c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b50      	cmp	r3, #80	@ 0x50
 800a022:	d00b      	beq.n	800a03c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	61bb      	str	r3, [r7, #24]
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	e7fd      	b.n	800a038 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a03c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00d      	beq.n	800a064 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a050:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4613      	mov	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f840 	bl	800a0e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a066:	4618      	mov	r0, r3
 800a068:	3730      	adds	r7, #48	@ 0x30
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b08a      	sub	sp, #40	@ 0x28
 800a072:	af02      	add	r7, sp, #8
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	4613      	mov	r3, r2
 800a07a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <xQueueGenericCreate+0x2c>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	613b      	str	r3, [r7, #16]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	3350      	adds	r3, #80	@ 0x50
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 fda7 	bl	800cbfc <pvPortMalloc>
 800a0ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	3350      	adds	r3, #80	@ 0x50
 800a0be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0c8:	79fa      	ldrb	r2, [r7, #7]
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f805 	bl	800a0e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0da:	69bb      	ldr	r3, [r7, #24]
	}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d103      	bne.n	800a100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e002      	b.n	800a106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a112:	2101      	movs	r1, #1
 800a114:	69b8      	ldr	r0, [r7, #24]
 800a116:	f7ff fec3 	bl	8009ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a122:	bf00      	nop
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a14a:	2300      	movs	r3, #0
 800a14c:	2200      	movs	r2, #0
 800a14e:	2100      	movs	r1, #0
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f911 	bl	800a378 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	4603      	mov	r3, r0
 800a166:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a168:	2301      	movs	r3, #1
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	461a      	mov	r2, r3
 800a174:	6939      	ldr	r1, [r7, #16]
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f7ff ff79 	bl	800a06e <xQueueGenericCreate>
 800a17c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ffd3 	bl	800a12a <prvInitialiseMutex>

		return xNewQueue;
 800a184:	68fb      	ldr	r3, [r7, #12]
	}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b088      	sub	sp, #32
 800a192:	af02      	add	r7, sp, #8
 800a194:	4603      	mov	r3, r0
 800a196:	6039      	str	r1, [r7, #0]
 800a198:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a19a:	2301      	movs	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	6939      	ldr	r1, [r7, #16]
 800a1ac:	6978      	ldr	r0, [r7, #20]
 800a1ae:	f7ff fee1 	bl	8009f74 <xQueueGenericCreateStatic>
 800a1b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ffb8 	bl	800a12a <prvInitialiseMutex>

		return xNewQueue;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
	}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60fb      	str	r3, [r7, #12]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	689c      	ldr	r4, [r3, #8]
 800a1f2:	f001 fd63 	bl	800bcbc <xTaskGetCurrentTaskHandle>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d111      	bne.n	800a220 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	1e5a      	subs	r2, r3, #1
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a20e:	2300      	movs	r3, #0
 800a210:	2200      	movs	r2, #0
 800a212:	2100      	movs	r1, #0
 800a214:	6938      	ldr	r0, [r7, #16]
 800a216:	f000 f8af 	bl	800a378 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a21a:	2301      	movs	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e001      	b.n	800a224 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a224:	697b      	ldr	r3, [r7, #20]
	}
 800a226:	4618      	mov	r0, r3
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd90      	pop	{r4, r7, pc}

0800a22e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a22e:	b590      	push	{r4, r7, lr}
 800a230:	b087      	sub	sp, #28
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	689c      	ldr	r4, [r3, #8]
 800a25e:	f001 fd2d 	bl	800bcbc <xTaskGetCurrentTaskHandle>
 800a262:	4603      	mov	r3, r0
 800a264:	429c      	cmp	r4, r3
 800a266:	d107      	bne.n	800a278 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a272:	2301      	movs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	e00c      	b.n	800a292 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6938      	ldr	r0, [r7, #16]
 800a27c:	f000 fb8e 	bl	800a99c <xQueueSemaphoreTake>
 800a280:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a292:	697b      	ldr	r3, [r7, #20]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd90      	pop	{r4, r7, pc}

0800a29c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	@ 0x28
 800a2a0:	af02      	add	r7, sp, #8
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	61bb      	str	r3, [r7, #24]
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	e7fd      	b.n	800a2c2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d90b      	bls.n	800a2e6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	617b      	str	r3, [r7, #20]
}
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
 800a2e4:	e7fd      	b.n	800a2e2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fe3f 	bl	8009f74 <xQueueGenericCreateStatic>
 800a2f6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a304:	69fb      	ldr	r3, [r7, #28]
	}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	613b      	str	r3, [r7, #16]
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	e7fd      	b.n	800a332 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d90b      	bls.n	800a356 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a356:	2202      	movs	r2, #2
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff fe87 	bl	800a06e <xQueueGenericCreate>
 800a360:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a36e:	697b      	ldr	r3, [r7, #20]
	}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08e      	sub	sp, #56	@ 0x38
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a386:	2300      	movs	r3, #0
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <xQueueGenericSend+0x34>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	e7fd      	b.n	800a3a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <xQueueGenericSend+0x42>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <xQueueGenericSend+0x46>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <xQueueGenericSend+0x48>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10b      	bne.n	800a3dc <xQueueGenericSend+0x64>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d103      	bne.n	800a3ea <xQueueGenericSend+0x72>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <xQueueGenericSend+0x76>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e000      	b.n	800a3f0 <xQueueGenericSend+0x78>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10b      	bne.n	800a40c <xQueueGenericSend+0x94>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	623b      	str	r3, [r7, #32]
}
 800a406:	bf00      	nop
 800a408:	bf00      	nop
 800a40a:	e7fd      	b.n	800a408 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a40c:	f001 fc66 	bl	800bcdc <xTaskGetSchedulerState>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <xQueueGenericSend+0xa4>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <xQueueGenericSend+0xa8>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <xQueueGenericSend+0xaa>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <xQueueGenericSend+0xc6>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	61fb      	str	r3, [r7, #28]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a43e:	f002 fabb 	bl	800c9b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d302      	bcc.n	800a454 <xQueueGenericSend+0xdc>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d129      	bne.n	800a4a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	68b9      	ldr	r1, [r7, #8]
 800a458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45a:	f000 fc6d 	bl	800ad38 <prvCopyDataToQueue>
 800a45e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	d010      	beq.n	800a48a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	3324      	adds	r3, #36	@ 0x24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 fa65 	bl	800b93c <xTaskRemoveFromEventList>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d013      	beq.n	800a4a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a478:	4b3f      	ldr	r3, [pc, #252]	@ (800a578 <xQueueGenericSend+0x200>)
 800a47a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	e00a      	b.n	800a4a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d007      	beq.n	800a4a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a490:	4b39      	ldr	r3, [pc, #228]	@ (800a578 <xQueueGenericSend+0x200>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4a0:	f002 fabc 	bl	800ca1c <vPortExitCritical>
				return pdPASS;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e063      	b.n	800a570 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d103      	bne.n	800a4b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4ae:	f002 fab5 	bl	800ca1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e05c      	b.n	800a570 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4bc:	f107 0314 	add.w	r3, r7, #20
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 fa9f 	bl	800ba04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4ca:	f002 faa7 	bl	800ca1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ce:	f001 f80f 	bl	800b4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4d2:	f002 fa71 	bl	800c9b8 <vPortEnterCritical>
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4dc:	b25b      	sxtb	r3, r3
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d103      	bne.n	800a4ec <xQueueGenericSend+0x174>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f2:	b25b      	sxtb	r3, r3
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d103      	bne.n	800a502 <xQueueGenericSend+0x18a>
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a502:	f002 fa8b 	bl	800ca1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a506:	1d3a      	adds	r2, r7, #4
 800a508:	f107 0314 	add.w	r3, r7, #20
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 fa8e 	bl	800ba30 <xTaskCheckForTimeOut>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d124      	bne.n	800a564 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a51a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a51c:	f000 fd04 	bl	800af28 <prvIsQueueFull>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d018      	beq.n	800a558 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	3310      	adds	r3, #16
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 f9b2 	bl	800b898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a536:	f000 fc8f 	bl	800ae58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a53a:	f000 ffe7 	bl	800b50c <xTaskResumeAll>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f47f af7c 	bne.w	800a43e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a546:	4b0c      	ldr	r3, [pc, #48]	@ (800a578 <xQueueGenericSend+0x200>)
 800a548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	e772      	b.n	800a43e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a55a:	f000 fc7d 	bl	800ae58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a55e:	f000 ffd5 	bl	800b50c <xTaskResumeAll>
 800a562:	e76c      	b.n	800a43e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a566:	f000 fc77 	bl	800ae58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a56a:	f000 ffcf 	bl	800b50c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a56e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a570:	4618      	mov	r0, r3
 800a572:	3738      	adds	r7, #56	@ 0x38
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b090      	sub	sp, #64	@ 0x40
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10b      	bne.n	800a5ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5a6:	bf00      	nop
 800a5a8:	bf00      	nop
 800a5aa:	e7fd      	b.n	800a5a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <xQueueGenericSendFromISR+0x3e>
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <xQueueGenericSendFromISR+0x42>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <xQueueGenericSendFromISR+0x44>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10b      	bne.n	800a5dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5d6:	bf00      	nop
 800a5d8:	bf00      	nop
 800a5da:	e7fd      	b.n	800a5d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d103      	bne.n	800a5ea <xQueueGenericSendFromISR+0x6e>
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <xQueueGenericSendFromISR+0x72>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <xQueueGenericSendFromISR+0x74>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	623b      	str	r3, [r7, #32]
}
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a60c:	f002 fab4 	bl	800cb78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a610:	f3ef 8211 	mrs	r2, BASEPRI
 800a614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61fa      	str	r2, [r7, #28]
 800a626:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a628:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a62a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a634:	429a      	cmp	r2, r3
 800a636:	d302      	bcc.n	800a63e <xQueueGenericSendFromISR+0xc2>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d12f      	bne.n	800a69e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a654:	f000 fb70 	bl	800ad38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a658:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d112      	bne.n	800a688 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a666:	2b00      	cmp	r3, #0
 800a668:	d016      	beq.n	800a698 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	3324      	adds	r3, #36	@ 0x24
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 f964 	bl	800b93c <xTaskRemoveFromEventList>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00e      	beq.n	800a698 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	e007      	b.n	800a698 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a68c:	3301      	adds	r3, #1
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	b25a      	sxtb	r2, r3
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a698:	2301      	movs	r3, #1
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a69c:	e001      	b.n	800a6a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a6ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3740      	adds	r7, #64	@ 0x40
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08e      	sub	sp, #56	@ 0x38
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	623b      	str	r3, [r7, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	61fb      	str	r3, [r7, #28]
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	e7fd      	b.n	800a700 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <xQueueGiveFromISR+0x5c>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <xQueueGiveFromISR+0x60>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <xQueueGiveFromISR+0x62>
 800a718:	2300      	movs	r3, #0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10b      	bne.n	800a736 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	61bb      	str	r3, [r7, #24]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a736:	f002 fa1f 	bl	800cb78 <vPortValidateInterruptPriority>
	__asm volatile
 800a73a:	f3ef 8211 	mrs	r2, BASEPRI
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	617a      	str	r2, [r7, #20]
 800a750:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a752:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a754:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a75a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a762:	429a      	cmp	r2, r3
 800a764:	d22b      	bcs.n	800a7be <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a76c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a778:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d112      	bne.n	800a7a8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a786:	2b00      	cmp	r3, #0
 800a788:	d016      	beq.n	800a7b8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	3324      	adds	r3, #36	@ 0x24
 800a78e:	4618      	mov	r0, r3
 800a790:	f001 f8d4 	bl	800b93c <xTaskRemoveFromEventList>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00b      	beq.n	800a7b8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	e007      	b.n	800a7b8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	b25a      	sxtb	r2, r3
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7bc:	e001      	b.n	800a7c2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f383 8811 	msr	BASEPRI, r3
}
 800a7cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3738      	adds	r7, #56	@ 0x38
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08c      	sub	sp, #48	@ 0x30
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10b      	bne.n	800a80a <xQueueReceive+0x32>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	623b      	str	r3, [r7, #32]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <xQueueReceive+0x40>
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueReceive+0x44>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <xQueueReceive+0x46>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <xQueueReceive+0x62>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	61fb      	str	r3, [r7, #28]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a83a:	f001 fa4f 	bl	800bcdc <xTaskGetSchedulerState>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <xQueueReceive+0x72>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <xQueueReceive+0x76>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <xQueueReceive+0x78>
 800a84e:	2300      	movs	r3, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <xQueueReceive+0x94>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	61bb      	str	r3, [r7, #24]
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a86c:	f002 f8a4 	bl	800c9b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01f      	beq.n	800a8bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a880:	f000 fac4 	bl	800ae0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	1e5a      	subs	r2, r3, #1
 800a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00f      	beq.n	800a8b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a896:	3310      	adds	r3, #16
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 f84f 	bl	800b93c <xTaskRemoveFromEventList>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8a4:	4b3c      	ldr	r3, [pc, #240]	@ (800a998 <xQueueReceive+0x1c0>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8b4:	f002 f8b2 	bl	800ca1c <vPortExitCritical>
				return pdPASS;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e069      	b.n	800a990 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8c2:	f002 f8ab 	bl	800ca1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e062      	b.n	800a990 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d0:	f107 0310 	add.w	r3, r7, #16
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 f895 	bl	800ba04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8de:	f002 f89d 	bl	800ca1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8e2:	f000 fe05 	bl	800b4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8e6:	f002 f867 	bl	800c9b8 <vPortEnterCritical>
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8f0:	b25b      	sxtb	r3, r3
 800a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f6:	d103      	bne.n	800a900 <xQueueReceive+0x128>
 800a8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a906:	b25b      	sxtb	r3, r3
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d103      	bne.n	800a916 <xQueueReceive+0x13e>
 800a90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a916:	f002 f881 	bl	800ca1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a91a:	1d3a      	adds	r2, r7, #4
 800a91c:	f107 0310 	add.w	r3, r7, #16
 800a920:	4611      	mov	r1, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f001 f884 	bl	800ba30 <xTaskCheckForTimeOut>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d123      	bne.n	800a976 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a92e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a930:	f000 fae4 	bl	800aefc <prvIsQueueEmpty>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d017      	beq.n	800a96a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93c:	3324      	adds	r3, #36	@ 0x24
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4611      	mov	r1, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f000 ffa8 	bl	800b898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a94a:	f000 fa85 	bl	800ae58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a94e:	f000 fddd 	bl	800b50c <xTaskResumeAll>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d189      	bne.n	800a86c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a958:	4b0f      	ldr	r3, [pc, #60]	@ (800a998 <xQueueReceive+0x1c0>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	e780      	b.n	800a86c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a96a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a96c:	f000 fa74 	bl	800ae58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a970:	f000 fdcc 	bl	800b50c <xTaskResumeAll>
 800a974:	e77a      	b.n	800a86c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a978:	f000 fa6e 	bl	800ae58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a97c:	f000 fdc6 	bl	800b50c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a982:	f000 fabb 	bl	800aefc <prvIsQueueEmpty>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f43f af6f 	beq.w	800a86c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a98e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a990:	4618      	mov	r0, r3
 800a992:	3730      	adds	r7, #48	@ 0x30
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08e      	sub	sp, #56	@ 0x38
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	623b      	str	r3, [r7, #32]
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	e7fd      	b.n	800a9cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	61fb      	str	r3, [r7, #28]
}
 800a9ea:	bf00      	nop
 800a9ec:	bf00      	nop
 800a9ee:	e7fd      	b.n	800a9ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9f0:	f001 f974 	bl	800bcdc <xTaskGetSchedulerState>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <xQueueSemaphoreTake+0x64>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <xQueueSemaphoreTake+0x68>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <xQueueSemaphoreTake+0x6a>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	61bb      	str	r3, [r7, #24]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa22:	f001 ffc9 	bl	800c9b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d024      	beq.n	800aa7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa34:	1e5a      	subs	r2, r3, #1
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa42:	f001 fac5 	bl	800bfd0 <pvTaskIncrementMutexHeldCount>
 800aa46:	4602      	mov	r2, r0
 800aa48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00f      	beq.n	800aa74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa56:	3310      	adds	r3, #16
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 ff6f 	bl	800b93c <xTaskRemoveFromEventList>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d007      	beq.n	800aa74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa64:	4b54      	ldr	r3, [pc, #336]	@ (800abb8 <xQueueSemaphoreTake+0x21c>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa74:	f001 ffd2 	bl	800ca1c <vPortExitCritical>
				return pdPASS;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e098      	b.n	800abae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d112      	bne.n	800aaa8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	617b      	str	r3, [r7, #20]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aaa0:	f001 ffbc 	bl	800ca1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e082      	b.n	800abae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 ffa6 	bl	800ba04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aabc:	f001 ffae 	bl	800ca1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac0:	f000 fd16 	bl	800b4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac4:	f001 ff78 	bl	800c9b8 <vPortEnterCritical>
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d103      	bne.n	800aade <xQueueSemaphoreTake+0x142>
 800aad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d103      	bne.n	800aaf4 <xQueueSemaphoreTake+0x158>
 800aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaf4:	f001 ff92 	bl	800ca1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf8:	463a      	mov	r2, r7
 800aafa:	f107 030c 	add.w	r3, r7, #12
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 ff95 	bl	800ba30 <xTaskCheckForTimeOut>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d132      	bne.n	800ab72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab0e:	f000 f9f5 	bl	800aefc <prvIsQueueEmpty>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d026      	beq.n	800ab66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ab20:	f001 ff4a 	bl	800c9b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 f8f5 	bl	800bd18 <xTaskPriorityInherit>
 800ab2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ab30:	f001 ff74 	bl	800ca1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab36:	3324      	adds	r3, #36	@ 0x24
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 feab 	bl	800b898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab44:	f000 f988 	bl	800ae58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab48:	f000 fce0 	bl	800b50c <xTaskResumeAll>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f47f af67 	bne.w	800aa22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ab54:	4b18      	ldr	r3, [pc, #96]	@ (800abb8 <xQueueSemaphoreTake+0x21c>)
 800ab56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	e75d      	b.n	800aa22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab68:	f000 f976 	bl	800ae58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab6c:	f000 fcce 	bl	800b50c <xTaskResumeAll>
 800ab70:	e757      	b.n	800aa22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab74:	f000 f970 	bl	800ae58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab78:	f000 fcc8 	bl	800b50c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab7e:	f000 f9bd 	bl	800aefc <prvIsQueueEmpty>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f43f af4c 	beq.w	800aa22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00d      	beq.n	800abac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ab90:	f001 ff12 	bl	800c9b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab96:	f000 f8b7 	bl	800ad08 <prvGetDisinheritPriorityAfterTimeout>
 800ab9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 f990 	bl	800bec8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aba8:	f001 ff38 	bl	800ca1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3738      	adds	r7, #56	@ 0x38
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08e      	sub	sp, #56	@ 0x38
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800abcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10b      	bne.n	800abea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	623b      	str	r3, [r7, #32]
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	e7fd      	b.n	800abe6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d103      	bne.n	800abf8 <xQueueReceiveFromISR+0x3c>
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <xQueueReceiveFromISR+0x40>
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <xQueueReceiveFromISR+0x42>
 800abfc:	2300      	movs	r3, #0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	61fb      	str	r3, [r7, #28]
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	e7fd      	b.n	800ac16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac1a:	f001 ffad 	bl	800cb78 <vPortValidateInterruptPriority>
	__asm volatile
 800ac1e:	f3ef 8211 	mrs	r2, BASEPRI
 800ac22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	61ba      	str	r2, [r7, #24]
 800ac34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d02f      	beq.n	800aca6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac54:	f000 f8da 	bl	800ae0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d112      	bne.n	800ac90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d016      	beq.n	800aca0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac74:	3310      	adds	r3, #16
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fe60 	bl	800b93c <xTaskRemoveFromEventList>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00b      	beq.n	800aca0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e007      	b.n	800aca0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac94:	3301      	adds	r3, #1
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	b25a      	sxtb	r2, r3
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aca0:	2301      	movs	r3, #1
 800aca2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca4:	e001      	b.n	800acaa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	637b      	str	r3, [r7, #52]	@ 0x34
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f383 8811 	msr	BASEPRI, r3
}
 800acb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3738      	adds	r7, #56	@ 0x38
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10b      	bne.n	800acea <vQueueDelete+0x2a>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	60bb      	str	r3, [r7, #8]
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f000 f95e 	bl	800afac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f002 f84c 	bl	800cd98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d006      	beq.n	800ad26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e001      	b.n	800ad2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad26:	2300      	movs	r3, #0
 800ad28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
	}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10d      	bne.n	800ad72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d14d      	bne.n	800adfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 f840 	bl	800bde8 <xTaskPriorityDisinherit>
 800ad68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	609a      	str	r2, [r3, #8]
 800ad70:	e043      	b.n	800adfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d119      	bne.n	800adac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6858      	ldr	r0, [r3, #4]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad80:	461a      	mov	r2, r3
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	f002 f954 	bl	800d030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	441a      	add	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d32b      	bcc.n	800adfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	e026      	b.n	800adfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68d8      	ldr	r0, [r3, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb4:	461a      	mov	r2, r3
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	f002 f93a 	bl	800d030 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc4:	425b      	negs	r3, r3
 800adc6:	441a      	add	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d207      	bcs.n	800ade8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	689a      	ldr	r2, [r3, #8]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade0:	425b      	negs	r3, r3
 800ade2:	441a      	add	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d105      	bne.n	800adfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ae02:	697b      	ldr	r3, [r7, #20]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d018      	beq.n	800ae50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae26:	441a      	add	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d303      	bcc.n	800ae40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68d9      	ldr	r1, [r3, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f002 f8f0 	bl	800d030 <memcpy>
	}
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae60:	f001 fdaa 	bl	800c9b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae6c:	e011      	b.n	800ae92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d012      	beq.n	800ae9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3324      	adds	r3, #36	@ 0x24
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fd5e 	bl	800b93c <xTaskRemoveFromEventList>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae86:	f000 fe37 	bl	800baf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dce9      	bgt.n	800ae6e <prvUnlockQueue+0x16>
 800ae9a:	e000      	b.n	800ae9e <prvUnlockQueue+0x46>
					break;
 800ae9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	22ff      	movs	r2, #255	@ 0xff
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aea6:	f001 fdb9 	bl	800ca1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aeaa:	f001 fd85 	bl	800c9b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aeb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb6:	e011      	b.n	800aedc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d012      	beq.n	800aee6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3310      	adds	r3, #16
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fd39 	bl	800b93c <xTaskRemoveFromEventList>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aed0:	f000 fe12 	bl	800baf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aedc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dce9      	bgt.n	800aeb8 <prvUnlockQueue+0x60>
 800aee4:	e000      	b.n	800aee8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aee6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	22ff      	movs	r2, #255	@ 0xff
 800aeec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aef0:	f001 fd94 	bl	800ca1c <vPortExitCritical>
}
 800aef4:	bf00      	nop
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af04:	f001 fd58 	bl	800c9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e001      	b.n	800af1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af1a:	f001 fd7f 	bl	800ca1c <vPortExitCritical>

	return xReturn;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af30:	f001 fd42 	bl	800c9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d102      	bne.n	800af46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e001      	b.n	800af4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af4a:	f001 fd67 	bl	800ca1c <vPortExitCritical>

	return xReturn;
 800af4e:	68fb      	ldr	r3, [r7, #12]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e014      	b.n	800af92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af68:	4a0f      	ldr	r2, [pc, #60]	@ (800afa8 <vQueueAddToRegistry+0x50>)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af74:	490c      	ldr	r1, [pc, #48]	@ (800afa8 <vQueueAddToRegistry+0x50>)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af7e:	4a0a      	ldr	r2, [pc, #40]	@ (800afa8 <vQueueAddToRegistry+0x50>)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	4413      	add	r3, r2
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af8a:	e006      	b.n	800af9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b07      	cmp	r3, #7
 800af96:	d9e7      	bls.n	800af68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000c34 	.word	0x20000c34

0800afac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	e016      	b.n	800afe8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800afba:	4a10      	ldr	r2, [pc, #64]	@ (800affc <vQueueUnregisterQueue+0x50>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	4413      	add	r3, r2
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d10b      	bne.n	800afe2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800afca:	4a0c      	ldr	r2, [pc, #48]	@ (800affc <vQueueUnregisterQueue+0x50>)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2100      	movs	r1, #0
 800afd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800afd4:	4a09      	ldr	r2, [pc, #36]	@ (800affc <vQueueUnregisterQueue+0x50>)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	4413      	add	r3, r2
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
				break;
 800afe0:	e006      	b.n	800aff0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3301      	adds	r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b07      	cmp	r3, #7
 800afec:	d9e5      	bls.n	800afba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800afee:	bf00      	nop
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20000c34 	.word	0x20000c34

0800b000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b010:	f001 fcd2 	bl	800c9b8 <vPortEnterCritical>
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b01a:	b25b      	sxtb	r3, r3
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b020:	d103      	bne.n	800b02a <vQueueWaitForMessageRestricted+0x2a>
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b030:	b25b      	sxtb	r3, r3
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d103      	bne.n	800b040 <vQueueWaitForMessageRestricted+0x40>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b040:	f001 fcec 	bl	800ca1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d106      	bne.n	800b05a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	3324      	adds	r3, #36	@ 0x24
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fc45 	bl	800b8e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f7ff fefc 	bl	800ae58 <prvUnlockQueue>
	}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08e      	sub	sp, #56	@ 0x38
 800b06c:	af04      	add	r7, sp, #16
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	623b      	str	r3, [r7, #32]
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	e7fd      	b.n	800b090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10b      	bne.n	800b0b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	61fb      	str	r3, [r7, #28]
}
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
 800b0b0:	e7fd      	b.n	800b0ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0b2:	235c      	movs	r3, #92	@ 0x5c
 800b0b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0ba:	d00b      	beq.n	800b0d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	61bb      	str	r3, [r7, #24]
}
 800b0ce:	bf00      	nop
 800b0d0:	bf00      	nop
 800b0d2:	e7fd      	b.n	800b0d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01e      	beq.n	800b11a <xTaskCreateStatic+0xb2>
 800b0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01b      	beq.n	800b11a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fa:	9302      	str	r3, [sp, #8]
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f850 	bl	800b1b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b114:	f000 f8de 	bl	800b2d4 <prvAddNewTaskToReadyList>
 800b118:	e001      	b.n	800b11e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b11e:	697b      	ldr	r3, [r7, #20]
	}
 800b120:	4618      	mov	r0, r3
 800b122:	3728      	adds	r7, #40	@ 0x28
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08c      	sub	sp, #48	@ 0x30
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	4613      	mov	r3, r2
 800b136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b138:	88fb      	ldrh	r3, [r7, #6]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 fd5d 	bl	800cbfc <pvPortMalloc>
 800b142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00e      	beq.n	800b168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b14a:	205c      	movs	r0, #92	@ 0x5c
 800b14c:	f001 fd56 	bl	800cbfc <pvPortMalloc>
 800b150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b15e:	e005      	b.n	800b16c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b160:	6978      	ldr	r0, [r7, #20]
 800b162:	f001 fe19 	bl	800cd98 <vPortFree>
 800b166:	e001      	b.n	800b16c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d017      	beq.n	800b1a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b17a:	88fa      	ldrh	r2, [r7, #6]
 800b17c:	2300      	movs	r3, #0
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	9302      	str	r3, [sp, #8]
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f80e 	bl	800b1b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b196:	69f8      	ldr	r0, [r7, #28]
 800b198:	f000 f89c 	bl	800b2d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b19c:	2301      	movs	r3, #1
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	e002      	b.n	800b1a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
	}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b088      	sub	sp, #32
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	607a      	str	r2, [r7, #4]
 800b1be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	21a5      	movs	r1, #165	@ 0xa5
 800b1cc:	f001 ff04 	bl	800cfd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	f023 0307 	bic.w	r3, r3, #7
 800b1e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	617b      	str	r3, [r7, #20]
}
 800b206:	bf00      	nop
 800b208:	bf00      	nop
 800b20a:	e7fd      	b.n	800b208 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01f      	beq.n	800b252 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b212:	2300      	movs	r3, #0
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	e012      	b.n	800b23e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	4413      	add	r3, r2
 800b21e:	7819      	ldrb	r1, [r3, #0]
 800b220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	3334      	adds	r3, #52	@ 0x34
 800b228:	460a      	mov	r2, r1
 800b22a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	4413      	add	r3, r2
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	3301      	adds	r3, #1
 800b23c:	61fb      	str	r3, [r7, #28]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	2b0f      	cmp	r3, #15
 800b242:	d9e9      	bls.n	800b218 <prvInitialiseNewTask+0x66>
 800b244:	e000      	b.n	800b248 <prvInitialiseNewTask+0x96>
			{
				break;
 800b246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b250:	e003      	b.n	800b25a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	2b37      	cmp	r3, #55	@ 0x37
 800b25e:	d901      	bls.n	800b264 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b260:	2337      	movs	r3, #55	@ 0x37
 800b262:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b268:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b26e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	2200      	movs	r2, #0
 800b274:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	3304      	adds	r3, #4
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fe fd7c 	bl	8009d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	3318      	adds	r3, #24
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe fd77 	bl	8009d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b292:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b29e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	69b8      	ldr	r0, [r7, #24]
 800b2b4:	f001 fa4e 	bl	800c754 <pxPortInitialiseStack>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2ca:	bf00      	nop
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
	...

0800b2d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2dc:	f001 fb6c 	bl	800c9b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d109      	bne.n	800b306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2f8:	4b27      	ldr	r3, [pc, #156]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d110      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b300:	f000 fc1e 	bl	800bb40 <prvInitialiseTaskLists>
 800b304:	e00d      	b.n	800b322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b306:	4b26      	ldr	r3, [pc, #152]	@ (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b30e:	4b23      	ldr	r3, [pc, #140]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b318:	429a      	cmp	r2, r3
 800b31a:	d802      	bhi.n	800b322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b31c:	4a1f      	ldr	r2, [pc, #124]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b322:	4b20      	ldr	r3, [pc, #128]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b32c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b338:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <prvAddNewTaskToReadyList+0x74>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b344:	4a18      	ldr	r2, [pc, #96]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4a15      	ldr	r2, [pc, #84]	@ (800b3ac <prvAddNewTaskToReadyList+0xd8>)
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f7fe fd17 	bl	8009d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b364:	f001 fb5a 	bl	800ca1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b368:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00e      	beq.n	800b38e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b370:	4b0a      	ldr	r3, [pc, #40]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d207      	bcs.n	800b38e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b37e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b0 <prvAddNewTaskToReadyList+0xdc>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20001148 	.word	0x20001148
 800b39c:	20000c74 	.word	0x20000c74
 800b3a0:	20001154 	.word	0x20001154
 800b3a4:	20001164 	.word	0x20001164
 800b3a8:	20001150 	.word	0x20001150
 800b3ac:	20000c78 	.word	0x20000c78
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d018      	beq.n	800b3f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c6:	4b14      	ldr	r3, [pc, #80]	@ (800b418 <vTaskDelay+0x64>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <vTaskDelay+0x32>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	60bb      	str	r3, [r7, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e6:	f000 f883 	bl	800b4f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fe03 	bl	800bff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f2:	f000 f88b 	bl	800b50c <xTaskResumeAll>
 800b3f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d107      	bne.n	800b40e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3fe:	4b07      	ldr	r3, [pc, #28]	@ (800b41c <vTaskDelay+0x68>)
 800b400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20001170 	.word	0x20001170
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	@ 0x28
 800b424:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42e:	463a      	mov	r2, r7
 800b430:	1d39      	adds	r1, r7, #4
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fc4a 	bl	8009cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	9202      	str	r2, [sp, #8]
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	2300      	movs	r3, #0
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	2300      	movs	r3, #0
 800b44c:	460a      	mov	r2, r1
 800b44e:	4922      	ldr	r1, [pc, #136]	@ (800b4d8 <vTaskStartScheduler+0xb8>)
 800b450:	4822      	ldr	r0, [pc, #136]	@ (800b4dc <vTaskStartScheduler+0xbc>)
 800b452:	f7ff fe09 	bl	800b068 <xTaskCreateStatic>
 800b456:	4603      	mov	r3, r0
 800b458:	4a21      	ldr	r2, [pc, #132]	@ (800b4e0 <vTaskStartScheduler+0xc0>)
 800b45a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b45c:	4b20      	ldr	r3, [pc, #128]	@ (800b4e0 <vTaskStartScheduler+0xc0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e001      	b.n	800b46e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d102      	bne.n	800b47a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b474:	f000 fe14 	bl	800c0a0 <xTimerCreateTimerTask>
 800b478:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d116      	bne.n	800b4ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
}
 800b492:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b494:	4b13      	ldr	r3, [pc, #76]	@ (800b4e4 <vTaskStartScheduler+0xc4>)
 800b496:	f04f 32ff 	mov.w	r2, #4294967295
 800b49a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b49c:	4b12      	ldr	r3, [pc, #72]	@ (800b4e8 <vTaskStartScheduler+0xc8>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <vTaskStartScheduler+0xcc>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4a8:	f001 f9e2 	bl	800c870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4ac:	e00f      	b.n	800b4ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b4:	d10b      	bne.n	800b4ce <vTaskStartScheduler+0xae>
	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	60fb      	str	r3, [r7, #12]
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	e7fd      	b.n	800b4ca <vTaskStartScheduler+0xaa>
}
 800b4ce:	bf00      	nop
 800b4d0:	3718      	adds	r7, #24
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800d0ec 	.word	0x0800d0ec
 800b4dc:	0800bb11 	.word	0x0800bb11
 800b4e0:	2000116c 	.word	0x2000116c
 800b4e4:	20001168 	.word	0x20001168
 800b4e8:	20001154 	.word	0x20001154
 800b4ec:	2000114c 	.word	0x2000114c

0800b4f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4f4:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <vTaskSuspendAll+0x18>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	4a03      	ldr	r2, [pc, #12]	@ (800b508 <vTaskSuspendAll+0x18>)
 800b4fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4fe:	bf00      	nop
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	20001170 	.word	0x20001170

0800b50c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b516:	2300      	movs	r3, #0
 800b518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b51a:	4b42      	ldr	r3, [pc, #264]	@ (800b624 <xTaskResumeAll+0x118>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10b      	bne.n	800b53a <xTaskResumeAll+0x2e>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	603b      	str	r3, [r7, #0]
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	e7fd      	b.n	800b536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b53a:	f001 fa3d 	bl	800c9b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b53e:	4b39      	ldr	r3, [pc, #228]	@ (800b624 <xTaskResumeAll+0x118>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3b01      	subs	r3, #1
 800b544:	4a37      	ldr	r2, [pc, #220]	@ (800b624 <xTaskResumeAll+0x118>)
 800b546:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b548:	4b36      	ldr	r3, [pc, #216]	@ (800b624 <xTaskResumeAll+0x118>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d162      	bne.n	800b616 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b550:	4b35      	ldr	r3, [pc, #212]	@ (800b628 <xTaskResumeAll+0x11c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d05e      	beq.n	800b616 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b558:	e02f      	b.n	800b5ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55a:	4b34      	ldr	r3, [pc, #208]	@ (800b62c <xTaskResumeAll+0x120>)
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3318      	adds	r3, #24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe fc70 	bl	8009e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3304      	adds	r3, #4
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fc6b 	bl	8009e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b57a:	4b2d      	ldr	r3, [pc, #180]	@ (800b630 <xTaskResumeAll+0x124>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d903      	bls.n	800b58a <xTaskResumeAll+0x7e>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b586:	4a2a      	ldr	r2, [pc, #168]	@ (800b630 <xTaskResumeAll+0x124>)
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4a27      	ldr	r2, [pc, #156]	@ (800b634 <xTaskResumeAll+0x128>)
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3304      	adds	r3, #4
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f7fe fbf6 	bl	8009d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5aa:	4b23      	ldr	r3, [pc, #140]	@ (800b638 <xTaskResumeAll+0x12c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d302      	bcc.n	800b5ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b5b4:	4b21      	ldr	r3, [pc, #132]	@ (800b63c <xTaskResumeAll+0x130>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b62c <xTaskResumeAll+0x120>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1cb      	bne.n	800b55a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5c8:	f000 fb58 	bl	800bc7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b640 <xTaskResumeAll+0x134>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d010      	beq.n	800b5fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5d8:	f000 f846 	bl	800b668 <xTaskIncrementTick>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d002      	beq.n	800b5e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5e2:	4b16      	ldr	r3, [pc, #88]	@ (800b63c <xTaskResumeAll+0x130>)
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1f1      	bne.n	800b5d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b5f4:	4b12      	ldr	r3, [pc, #72]	@ (800b640 <xTaskResumeAll+0x134>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5fa:	4b10      	ldr	r3, [pc, #64]	@ (800b63c <xTaskResumeAll+0x130>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b602:	2301      	movs	r3, #1
 800b604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b606:	4b0f      	ldr	r3, [pc, #60]	@ (800b644 <xTaskResumeAll+0x138>)
 800b608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f001 fa01 	bl	800ca1c <vPortExitCritical>

	return xAlreadyYielded;
 800b61a:	68bb      	ldr	r3, [r7, #8]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20001170 	.word	0x20001170
 800b628:	20001148 	.word	0x20001148
 800b62c:	20001108 	.word	0x20001108
 800b630:	20001150 	.word	0x20001150
 800b634:	20000c78 	.word	0x20000c78
 800b638:	20000c74 	.word	0x20000c74
 800b63c:	2000115c 	.word	0x2000115c
 800b640:	20001158 	.word	0x20001158
 800b644:	e000ed04 	.word	0xe000ed04

0800b648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b64e:	4b05      	ldr	r3, [pc, #20]	@ (800b664 <xTaskGetTickCount+0x1c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b654:	687b      	ldr	r3, [r7, #4]
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	2000114c 	.word	0x2000114c

0800b668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b672:	4b4f      	ldr	r3, [pc, #316]	@ (800b7b0 <xTaskIncrementTick+0x148>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 8090 	bne.w	800b79c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b67c:	4b4d      	ldr	r3, [pc, #308]	@ (800b7b4 <xTaskIncrementTick+0x14c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b684:	4a4b      	ldr	r2, [pc, #300]	@ (800b7b4 <xTaskIncrementTick+0x14c>)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d121      	bne.n	800b6d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b690:	4b49      	ldr	r3, [pc, #292]	@ (800b7b8 <xTaskIncrementTick+0x150>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00b      	beq.n	800b6b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	603b      	str	r3, [r7, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	bf00      	nop
 800b6b0:	e7fd      	b.n	800b6ae <xTaskIncrementTick+0x46>
 800b6b2:	4b41      	ldr	r3, [pc, #260]	@ (800b7b8 <xTaskIncrementTick+0x150>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	4b40      	ldr	r3, [pc, #256]	@ (800b7bc <xTaskIncrementTick+0x154>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b8 <xTaskIncrementTick+0x150>)
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7bc <xTaskIncrementTick+0x154>)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b7c0 <xTaskIncrementTick+0x158>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b7c0 <xTaskIncrementTick+0x158>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	f000 fad4 	bl	800bc7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7c4 <xTaskIncrementTick+0x15c>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d349      	bcc.n	800b772 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6de:	4b36      	ldr	r3, [pc, #216]	@ (800b7b8 <xTaskIncrementTick+0x150>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d104      	bne.n	800b6f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e8:	4b36      	ldr	r3, [pc, #216]	@ (800b7c4 <xTaskIncrementTick+0x15c>)
 800b6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ee:	601a      	str	r2, [r3, #0]
					break;
 800b6f0:	e03f      	b.n	800b772 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f2:	4b31      	ldr	r3, [pc, #196]	@ (800b7b8 <xTaskIncrementTick+0x150>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	429a      	cmp	r2, r3
 800b708:	d203      	bcs.n	800b712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b70a:	4a2e      	ldr	r2, [pc, #184]	@ (800b7c4 <xTaskIncrementTick+0x15c>)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b710:	e02f      	b.n	800b772 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	3304      	adds	r3, #4
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe fb98 	bl	8009e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	3318      	adds	r3, #24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fb8f 	bl	8009e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b732:	4b25      	ldr	r3, [pc, #148]	@ (800b7c8 <xTaskIncrementTick+0x160>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d903      	bls.n	800b742 <xTaskIncrementTick+0xda>
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73e:	4a22      	ldr	r2, [pc, #136]	@ (800b7c8 <xTaskIncrementTick+0x160>)
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7cc <xTaskIncrementTick+0x164>)
 800b750:	441a      	add	r2, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7fe fb1a 	bl	8009d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b762:	4b1b      	ldr	r3, [pc, #108]	@ (800b7d0 <xTaskIncrementTick+0x168>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b768:	429a      	cmp	r2, r3
 800b76a:	d3b8      	bcc.n	800b6de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b76c:	2301      	movs	r3, #1
 800b76e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b770:	e7b5      	b.n	800b6de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b772:	4b17      	ldr	r3, [pc, #92]	@ (800b7d0 <xTaskIncrementTick+0x168>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b778:	4914      	ldr	r1, [pc, #80]	@ (800b7cc <xTaskIncrementTick+0x164>)
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	440b      	add	r3, r1
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d901      	bls.n	800b78e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b78a:	2301      	movs	r3, #1
 800b78c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b78e:	4b11      	ldr	r3, [pc, #68]	@ (800b7d4 <xTaskIncrementTick+0x16c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	e004      	b.n	800b7a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b79c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d8 <xTaskIncrementTick+0x170>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d8 <xTaskIncrementTick+0x170>)
 800b7a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001170 	.word	0x20001170
 800b7b4:	2000114c 	.word	0x2000114c
 800b7b8:	20001100 	.word	0x20001100
 800b7bc:	20001104 	.word	0x20001104
 800b7c0:	20001160 	.word	0x20001160
 800b7c4:	20001168 	.word	0x20001168
 800b7c8:	20001150 	.word	0x20001150
 800b7cc:	20000c78 	.word	0x20000c78
 800b7d0:	20000c74 	.word	0x20000c74
 800b7d4:	2000115c 	.word	0x2000115c
 800b7d8:	20001158 	.word	0x20001158

0800b7dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7e2:	4b28      	ldr	r3, [pc, #160]	@ (800b884 <vTaskSwitchContext+0xa8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7ea:	4b27      	ldr	r3, [pc, #156]	@ (800b888 <vTaskSwitchContext+0xac>)
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7f0:	e042      	b.n	800b878 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b7f2:	4b25      	ldr	r3, [pc, #148]	@ (800b888 <vTaskSwitchContext+0xac>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f8:	4b24      	ldr	r3, [pc, #144]	@ (800b88c <vTaskSwitchContext+0xb0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	60fb      	str	r3, [r7, #12]
 800b7fe:	e011      	b.n	800b824 <vTaskSwitchContext+0x48>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <vTaskSwitchContext+0x42>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	607b      	str	r3, [r7, #4]
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	e7fd      	b.n	800b81a <vTaskSwitchContext+0x3e>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3b01      	subs	r3, #1
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	491a      	ldr	r1, [pc, #104]	@ (800b890 <vTaskSwitchContext+0xb4>)
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	440b      	add	r3, r1
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0e3      	beq.n	800b800 <vTaskSwitchContext+0x24>
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4a13      	ldr	r2, [pc, #76]	@ (800b890 <vTaskSwitchContext+0xb4>)
 800b844:	4413      	add	r3, r2
 800b846:	60bb      	str	r3, [r7, #8]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	605a      	str	r2, [r3, #4]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3308      	adds	r3, #8
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d104      	bne.n	800b868 <vTaskSwitchContext+0x8c>
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	605a      	str	r2, [r3, #4]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	4a09      	ldr	r2, [pc, #36]	@ (800b894 <vTaskSwitchContext+0xb8>)
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	4a06      	ldr	r2, [pc, #24]	@ (800b88c <vTaskSwitchContext+0xb0>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6013      	str	r3, [r2, #0]
}
 800b878:	bf00      	nop
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	20001170 	.word	0x20001170
 800b888:	2000115c 	.word	0x2000115c
 800b88c:	20001150 	.word	0x20001150
 800b890:	20000c78 	.word	0x20000c78
 800b894:	20000c74 	.word	0x20000c74

0800b898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10b      	bne.n	800b8c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	60fb      	str	r3, [r7, #12]
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	e7fd      	b.n	800b8bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c0:	4b07      	ldr	r3, [pc, #28]	@ (800b8e0 <vTaskPlaceOnEventList+0x48>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7fe fa86 	bl	8009dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	6838      	ldr	r0, [r7, #0]
 800b8d2:	f000 fb91 	bl	800bff8 <prvAddCurrentTaskToDelayedList>
}
 800b8d6:	bf00      	nop
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	20000c74 	.word	0x20000c74

0800b8e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10b      	bne.n	800b90e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	617b      	str	r3, [r7, #20]
}
 800b908:	bf00      	nop
 800b90a:	bf00      	nop
 800b90c:	e7fd      	b.n	800b90a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b90e:	4b0a      	ldr	r3, [pc, #40]	@ (800b938 <vTaskPlaceOnEventListRestricted+0x54>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3318      	adds	r3, #24
 800b914:	4619      	mov	r1, r3
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7fe fa3b 	bl	8009d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295
 800b926:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b928:	6879      	ldr	r1, [r7, #4]
 800b92a:	68b8      	ldr	r0, [r7, #8]
 800b92c:	f000 fb64 	bl	800bff8 <prvAddCurrentTaskToDelayedList>
	}
 800b930:	bf00      	nop
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20000c74 	.word	0x20000c74

0800b93c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10b      	bne.n	800b96a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	60fb      	str	r3, [r7, #12]
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	e7fd      	b.n	800b966 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	3318      	adds	r3, #24
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fa6c 	bl	8009e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b974:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ec <xTaskRemoveFromEventList+0xb0>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d11d      	bne.n	800b9b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	3304      	adds	r3, #4
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fa63 	bl	8009e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b98a:	4b19      	ldr	r3, [pc, #100]	@ (800b9f0 <xTaskRemoveFromEventList+0xb4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d903      	bls.n	800b99a <xTaskRemoveFromEventList+0x5e>
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <xTaskRemoveFromEventList+0xb4>)
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a13      	ldr	r2, [pc, #76]	@ (800b9f4 <xTaskRemoveFromEventList+0xb8>)
 800b9a8:	441a      	add	r2, r3
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7fe f9ee 	bl	8009d92 <vListInsertEnd>
 800b9b6:	e005      	b.n	800b9c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	3318      	adds	r3, #24
 800b9bc:	4619      	mov	r1, r3
 800b9be:	480e      	ldr	r0, [pc, #56]	@ (800b9f8 <xTaskRemoveFromEventList+0xbc>)
 800b9c0:	f7fe f9e7 	bl	8009d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b9fc <xTaskRemoveFromEventList+0xc0>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d905      	bls.n	800b9de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba00 <xTaskRemoveFromEventList+0xc4>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	e001      	b.n	800b9e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9e2:	697b      	ldr	r3, [r7, #20]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20001170 	.word	0x20001170
 800b9f0:	20001150 	.word	0x20001150
 800b9f4:	20000c78 	.word	0x20000c78
 800b9f8:	20001108 	.word	0x20001108
 800b9fc:	20000c74 	.word	0x20000c74
 800ba00:	2000115c 	.word	0x2000115c

0800ba04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba0c:	4b06      	ldr	r3, [pc, #24]	@ (800ba28 <vTaskInternalSetTimeOutState+0x24>)
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba14:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <vTaskInternalSetTimeOutState+0x28>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	605a      	str	r2, [r3, #4]
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	20001160 	.word	0x20001160
 800ba2c:	2000114c 	.word	0x2000114c

0800ba30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10b      	bne.n	800ba58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	613b      	str	r3, [r7, #16]
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10b      	bne.n	800ba76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60fb      	str	r3, [r7, #12]
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba76:	f000 ff9f 	bl	800c9b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba7a:	4b1d      	ldr	r3, [pc, #116]	@ (800baf0 <xTaskCheckForTimeOut+0xc0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba92:	d102      	bne.n	800ba9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e023      	b.n	800bae2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4b15      	ldr	r3, [pc, #84]	@ (800baf4 <xTaskCheckForTimeOut+0xc4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d007      	beq.n	800bab6 <xTaskCheckForTimeOut+0x86>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	429a      	cmp	r2, r3
 800baae:	d302      	bcc.n	800bab6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bab0:	2301      	movs	r3, #1
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	e015      	b.n	800bae2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	429a      	cmp	r2, r3
 800babe:	d20b      	bcs.n	800bad8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	1ad2      	subs	r2, r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff ff99 	bl	800ba04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bad2:	2300      	movs	r3, #0
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	e004      	b.n	800bae2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bade:	2301      	movs	r3, #1
 800bae0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bae2:	f000 ff9b 	bl	800ca1c <vPortExitCritical>

	return xReturn;
 800bae6:	69fb      	ldr	r3, [r7, #28]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3720      	adds	r7, #32
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	2000114c 	.word	0x2000114c
 800baf4:	20001160 	.word	0x20001160

0800baf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bafc:	4b03      	ldr	r3, [pc, #12]	@ (800bb0c <vTaskMissedYield+0x14>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
}
 800bb02:	bf00      	nop
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	2000115c 	.word	0x2000115c

0800bb10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb18:	f000 f852 	bl	800bbc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb1c:	4b06      	ldr	r3, [pc, #24]	@ (800bb38 <prvIdleTask+0x28>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d9f9      	bls.n	800bb18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <prvIdleTask+0x2c>)
 800bb26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb34:	e7f0      	b.n	800bb18 <prvIdleTask+0x8>
 800bb36:	bf00      	nop
 800bb38:	20000c78 	.word	0x20000c78
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	e00c      	b.n	800bb66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4a12      	ldr	r2, [pc, #72]	@ (800bba0 <prvInitialiseTaskLists+0x60>)
 800bb58:	4413      	add	r3, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe f8ec 	bl	8009d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3301      	adds	r3, #1
 800bb64:	607b      	str	r3, [r7, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b37      	cmp	r3, #55	@ 0x37
 800bb6a:	d9ef      	bls.n	800bb4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb6c:	480d      	ldr	r0, [pc, #52]	@ (800bba4 <prvInitialiseTaskLists+0x64>)
 800bb6e:	f7fe f8e3 	bl	8009d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb72:	480d      	ldr	r0, [pc, #52]	@ (800bba8 <prvInitialiseTaskLists+0x68>)
 800bb74:	f7fe f8e0 	bl	8009d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb78:	480c      	ldr	r0, [pc, #48]	@ (800bbac <prvInitialiseTaskLists+0x6c>)
 800bb7a:	f7fe f8dd 	bl	8009d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb7e:	480c      	ldr	r0, [pc, #48]	@ (800bbb0 <prvInitialiseTaskLists+0x70>)
 800bb80:	f7fe f8da 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb84:	480b      	ldr	r0, [pc, #44]	@ (800bbb4 <prvInitialiseTaskLists+0x74>)
 800bb86:	f7fe f8d7 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb8 <prvInitialiseTaskLists+0x78>)
 800bb8c:	4a05      	ldr	r2, [pc, #20]	@ (800bba4 <prvInitialiseTaskLists+0x64>)
 800bb8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb90:	4b0a      	ldr	r3, [pc, #40]	@ (800bbbc <prvInitialiseTaskLists+0x7c>)
 800bb92:	4a05      	ldr	r2, [pc, #20]	@ (800bba8 <prvInitialiseTaskLists+0x68>)
 800bb94:	601a      	str	r2, [r3, #0]
}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	20000c78 	.word	0x20000c78
 800bba4:	200010d8 	.word	0x200010d8
 800bba8:	200010ec 	.word	0x200010ec
 800bbac:	20001108 	.word	0x20001108
 800bbb0:	2000111c 	.word	0x2000111c
 800bbb4:	20001134 	.word	0x20001134
 800bbb8:	20001100 	.word	0x20001100
 800bbbc:	20001104 	.word	0x20001104

0800bbc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc6:	e019      	b.n	800bbfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbc8:	f000 fef6 	bl	800c9b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbcc:	4b10      	ldr	r3, [pc, #64]	@ (800bc10 <prvCheckTasksWaitingTermination+0x50>)
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe f937 	bl	8009e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbde:	4b0d      	ldr	r3, [pc, #52]	@ (800bc14 <prvCheckTasksWaitingTermination+0x54>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	4a0b      	ldr	r2, [pc, #44]	@ (800bc14 <prvCheckTasksWaitingTermination+0x54>)
 800bbe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbe8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc18 <prvCheckTasksWaitingTermination+0x58>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4a0a      	ldr	r2, [pc, #40]	@ (800bc18 <prvCheckTasksWaitingTermination+0x58>)
 800bbf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbf2:	f000 ff13 	bl	800ca1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f810 	bl	800bc1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbfc:	4b06      	ldr	r3, [pc, #24]	@ (800bc18 <prvCheckTasksWaitingTermination+0x58>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e1      	bne.n	800bbc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	2000111c 	.word	0x2000111c
 800bc14:	20001148 	.word	0x20001148
 800bc18:	20001130 	.word	0x20001130

0800bc1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 f8b0 	bl	800cd98 <vPortFree>
				vPortFree( pxTCB );
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f001 f8ad 	bl	800cd98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc3e:	e019      	b.n	800bc74 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d103      	bne.n	800bc52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 f8a4 	bl	800cd98 <vPortFree>
	}
 800bc50:	e010      	b.n	800bc74 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d00b      	beq.n	800bc74 <prvDeleteTCB+0x58>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	e7fd      	b.n	800bc70 <prvDeleteTCB+0x54>
	}
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc82:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb4 <prvResetNextTaskUnblockTime+0x38>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d104      	bne.n	800bc96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc94:	e008      	b.n	800bca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc96:	4b07      	ldr	r3, [pc, #28]	@ (800bcb4 <prvResetNextTaskUnblockTime+0x38>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	4a04      	ldr	r2, [pc, #16]	@ (800bcb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bca6:	6013      	str	r3, [r2, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	20001100 	.word	0x20001100
 800bcb8:	20001168 	.word	0x20001168

0800bcbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bcc2:	4b05      	ldr	r3, [pc, #20]	@ (800bcd8 <xTaskGetCurrentTaskHandle+0x1c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bcc8:	687b      	ldr	r3, [r7, #4]
	}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20000c74 	.word	0x20000c74

0800bcdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bce2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd10 <xTaskGetSchedulerState+0x34>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcea:	2301      	movs	r3, #1
 800bcec:	607b      	str	r3, [r7, #4]
 800bcee:	e008      	b.n	800bd02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf0:	4b08      	ldr	r3, [pc, #32]	@ (800bd14 <xTaskGetSchedulerState+0x38>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	607b      	str	r3, [r7, #4]
 800bcfc:	e001      	b.n	800bd02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd02:	687b      	ldr	r3, [r7, #4]
	}
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	20001154 	.word	0x20001154
 800bd14:	20001170 	.word	0x20001170

0800bd18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd24:	2300      	movs	r3, #0
 800bd26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d051      	beq.n	800bdd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd32:	4b2a      	ldr	r3, [pc, #168]	@ (800bddc <xTaskPriorityInherit+0xc4>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d241      	bcs.n	800bdc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	db06      	blt.n	800bd52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd44:	4b25      	ldr	r3, [pc, #148]	@ (800bddc <xTaskPriorityInherit+0xc4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	6959      	ldr	r1, [r3, #20]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4a1f      	ldr	r2, [pc, #124]	@ (800bde0 <xTaskPriorityInherit+0xc8>)
 800bd64:	4413      	add	r3, r2
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d122      	bne.n	800bdb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe f86c 	bl	8009e4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd74:	4b19      	ldr	r3, [pc, #100]	@ (800bddc <xTaskPriorityInherit+0xc4>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd82:	4b18      	ldr	r3, [pc, #96]	@ (800bde4 <xTaskPriorityInherit+0xcc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d903      	bls.n	800bd92 <xTaskPriorityInherit+0x7a>
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8e:	4a15      	ldr	r2, [pc, #84]	@ (800bde4 <xTaskPriorityInherit+0xcc>)
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4a10      	ldr	r2, [pc, #64]	@ (800bde0 <xTaskPriorityInherit+0xc8>)
 800bda0:	441a      	add	r2, r3
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7fd fff2 	bl	8009d92 <vListInsertEnd>
 800bdae:	e004      	b.n	800bdba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bddc <xTaskPriorityInherit+0xc4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	e008      	b.n	800bdd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdc4:	4b05      	ldr	r3, [pc, #20]	@ (800bddc <xTaskPriorityInherit+0xc4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d201      	bcs.n	800bdd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
	}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20000c74 	.word	0x20000c74
 800bde0:	20000c78 	.word	0x20000c78
 800bde4:	20001150 	.word	0x20001150

0800bde8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d058      	beq.n	800beb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdfe:	4b2f      	ldr	r3, [pc, #188]	@ (800bebc <xTaskPriorityDisinherit+0xd4>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	429a      	cmp	r2, r3
 800be06:	d00b      	beq.n	800be20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	60fb      	str	r3, [r7, #12]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10b      	bne.n	800be40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	60bb      	str	r3, [r7, #8]
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	e7fd      	b.n	800be3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be44:	1e5a      	subs	r2, r3, #1
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be52:	429a      	cmp	r2, r3
 800be54:	d02c      	beq.n	800beb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d128      	bne.n	800beb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fd fff2 	bl	8009e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be80:	4b0f      	ldr	r3, [pc, #60]	@ (800bec0 <xTaskPriorityDisinherit+0xd8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d903      	bls.n	800be90 <xTaskPriorityDisinherit+0xa8>
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8c:	4a0c      	ldr	r2, [pc, #48]	@ (800bec0 <xTaskPriorityDisinherit+0xd8>)
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4a09      	ldr	r2, [pc, #36]	@ (800bec4 <xTaskPriorityDisinherit+0xdc>)
 800be9e:	441a      	add	r2, r3
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7fd ff73 	bl	8009d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800beb0:	697b      	ldr	r3, [r7, #20]
	}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000c74 	.word	0x20000c74
 800bec0:	20001150 	.word	0x20001150
 800bec4:	20000c78 	.word	0x20000c78

0800bec8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bed6:	2301      	movs	r3, #1
 800bed8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d06c      	beq.n	800bfba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10b      	bne.n	800bf00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	60fb      	str	r3, [r7, #12]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d902      	bls.n	800bf10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	61fb      	str	r3, [r7, #28]
 800bf0e:	e002      	b.n	800bf16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	69fa      	ldr	r2, [r7, #28]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d04c      	beq.n	800bfba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d147      	bne.n	800bfba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf2a:	4b26      	ldr	r3, [pc, #152]	@ (800bfc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d10b      	bne.n	800bf4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	60bb      	str	r3, [r7, #8]
}
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	e7fd      	b.n	800bf48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	69fa      	ldr	r2, [r7, #28]
 800bf56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	db04      	blt.n	800bf6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6959      	ldr	r1, [r3, #20]
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4a13      	ldr	r2, [pc, #76]	@ (800bfc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4299      	cmp	r1, r3
 800bf7e:	d11c      	bne.n	800bfba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	3304      	adds	r3, #4
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fd ff61 	bl	8009e4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d903      	bls.n	800bf9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bfcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4a07      	ldr	r2, [pc, #28]	@ (800bfc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfac:	441a      	add	r2, r3
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f7fd feec 	bl	8009d92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfba:	bf00      	nop
 800bfbc:	3720      	adds	r7, #32
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000c74 	.word	0x20000c74
 800bfc8:	20000c78 	.word	0x20000c78
 800bfcc:	20001150 	.word	0x20001150

0800bfd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfd4:	4b07      	ldr	r3, [pc, #28]	@ (800bff4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfdc:	4b05      	ldr	r3, [pc, #20]	@ (800bff4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfe2:	3201      	adds	r2, #1
 800bfe4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bfe6:	4b03      	ldr	r3, [pc, #12]	@ (800bff4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
	}
 800bfea:	4618      	mov	r0, r3
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	20000c74 	.word	0x20000c74

0800bff8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c002:	4b21      	ldr	r3, [pc, #132]	@ (800c088 <prvAddCurrentTaskToDelayedList+0x90>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c008:	4b20      	ldr	r3, [pc, #128]	@ (800c08c <prvAddCurrentTaskToDelayedList+0x94>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3304      	adds	r3, #4
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd ff1c 	bl	8009e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01a:	d10a      	bne.n	800c032 <prvAddCurrentTaskToDelayedList+0x3a>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d007      	beq.n	800c032 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c022:	4b1a      	ldr	r3, [pc, #104]	@ (800c08c <prvAddCurrentTaskToDelayedList+0x94>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3304      	adds	r3, #4
 800c028:	4619      	mov	r1, r3
 800c02a:	4819      	ldr	r0, [pc, #100]	@ (800c090 <prvAddCurrentTaskToDelayedList+0x98>)
 800c02c:	f7fd feb1 	bl	8009d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c030:	e026      	b.n	800c080 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4413      	add	r3, r2
 800c038:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c03a:	4b14      	ldr	r3, [pc, #80]	@ (800c08c <prvAddCurrentTaskToDelayedList+0x94>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	429a      	cmp	r2, r3
 800c048:	d209      	bcs.n	800c05e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c04a:	4b12      	ldr	r3, [pc, #72]	@ (800c094 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	4b0f      	ldr	r3, [pc, #60]	@ (800c08c <prvAddCurrentTaskToDelayedList+0x94>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3304      	adds	r3, #4
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7fd febf 	bl	8009dda <vListInsert>
}
 800c05c:	e010      	b.n	800c080 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05e:	4b0e      	ldr	r3, [pc, #56]	@ (800c098 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <prvAddCurrentTaskToDelayedList+0x94>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3304      	adds	r3, #4
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	f7fd feb5 	bl	8009dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c070:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	429a      	cmp	r2, r3
 800c078:	d202      	bcs.n	800c080 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c07a:	4a08      	ldr	r2, [pc, #32]	@ (800c09c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	6013      	str	r3, [r2, #0]
}
 800c080:	bf00      	nop
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	2000114c 	.word	0x2000114c
 800c08c:	20000c74 	.word	0x20000c74
 800c090:	20001134 	.word	0x20001134
 800c094:	20001104 	.word	0x20001104
 800c098:	20001100 	.word	0x20001100
 800c09c:	20001168 	.word	0x20001168

0800c0a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08a      	sub	sp, #40	@ 0x28
 800c0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0aa:	f000 fb13 	bl	800c6d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c124 <xTimerCreateTimerTask+0x84>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d021      	beq.n	800c0fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0be:	1d3a      	adds	r2, r7, #4
 800c0c0:	f107 0108 	add.w	r1, r7, #8
 800c0c4:	f107 030c 	add.w	r3, r7, #12
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fd fe1b 	bl	8009d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	9202      	str	r2, [sp, #8]
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	2302      	movs	r3, #2
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	460a      	mov	r2, r1
 800c0e0:	4911      	ldr	r1, [pc, #68]	@ (800c128 <xTimerCreateTimerTask+0x88>)
 800c0e2:	4812      	ldr	r0, [pc, #72]	@ (800c12c <xTimerCreateTimerTask+0x8c>)
 800c0e4:	f7fe ffc0 	bl	800b068 <xTaskCreateStatic>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	4a11      	ldr	r2, [pc, #68]	@ (800c130 <xTimerCreateTimerTask+0x90>)
 800c0ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0ee:	4b10      	ldr	r3, [pc, #64]	@ (800c130 <xTimerCreateTimerTask+0x90>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	613b      	str	r3, [r7, #16]
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	e7fd      	b.n	800c114 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c118:	697b      	ldr	r3, [r7, #20]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	200011a4 	.word	0x200011a4
 800c128:	0800d0f4 	.word	0x0800d0f4
 800c12c:	0800c26d 	.word	0x0800c26d
 800c130:	200011a8 	.word	0x200011a8

0800c134 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08a      	sub	sp, #40	@ 0x28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c142:	2300      	movs	r3, #0
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10b      	bne.n	800c164 <xTimerGenericCommand+0x30>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	623b      	str	r3, [r7, #32]
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	e7fd      	b.n	800c160 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c164:	4b19      	ldr	r3, [pc, #100]	@ (800c1cc <xTimerGenericCommand+0x98>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d02a      	beq.n	800c1c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	dc18      	bgt.n	800c1b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c17e:	f7ff fdad 	bl	800bcdc <xTaskGetSchedulerState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b02      	cmp	r3, #2
 800c186:	d109      	bne.n	800c19c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c188:	4b10      	ldr	r3, [pc, #64]	@ (800c1cc <xTimerGenericCommand+0x98>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	f107 0110 	add.w	r1, r7, #16
 800c190:	2300      	movs	r3, #0
 800c192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c194:	f7fe f8f0 	bl	800a378 <xQueueGenericSend>
 800c198:	6278      	str	r0, [r7, #36]	@ 0x24
 800c19a:	e012      	b.n	800c1c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c19c:	4b0b      	ldr	r3, [pc, #44]	@ (800c1cc <xTimerGenericCommand+0x98>)
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	f107 0110 	add.w	r1, r7, #16
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f7fe f8e6 	bl	800a378 <xQueueGenericSend>
 800c1ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1ae:	e008      	b.n	800c1c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1b0:	4b06      	ldr	r3, [pc, #24]	@ (800c1cc <xTimerGenericCommand+0x98>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	f107 0110 	add.w	r1, r7, #16
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	f7fe f9de 	bl	800a57c <xQueueGenericSendFromISR>
 800c1c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3728      	adds	r7, #40	@ 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	200011a4 	.word	0x200011a4

0800c1d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1da:	4b23      	ldr	r3, [pc, #140]	@ (800c268 <prvProcessExpiredTimer+0x98>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fd fe2f 	bl	8009e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d023      	beq.n	800c244 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	699a      	ldr	r2, [r3, #24]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	18d1      	adds	r1, r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	6978      	ldr	r0, [r7, #20]
 800c20a:	f000 f8d5 	bl	800c3b8 <prvInsertTimerInActiveList>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d020      	beq.n	800c256 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c214:	2300      	movs	r3, #0
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	2300      	movs	r3, #0
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	2100      	movs	r1, #0
 800c21e:	6978      	ldr	r0, [r7, #20]
 800c220:	f7ff ff88 	bl	800c134 <xTimerGenericCommand>
 800c224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d114      	bne.n	800c256 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60fb      	str	r3, [r7, #12]
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	e7fd      	b.n	800c240 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	6978      	ldr	r0, [r7, #20]
 800c25c:	4798      	blx	r3
}
 800c25e:	bf00      	nop
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2000119c 	.word	0x2000119c

0800c26c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c274:	f107 0308 	add.w	r3, r7, #8
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f859 	bl	800c330 <prvGetNextExpireTime>
 800c27e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	4619      	mov	r1, r3
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f805 	bl	800c294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c28a:	f000 f8d7 	bl	800c43c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c28e:	bf00      	nop
 800c290:	e7f0      	b.n	800c274 <prvTimerTask+0x8>
	...

0800c294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c29e:	f7ff f927 	bl	800b4f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2a2:	f107 0308 	add.w	r3, r7, #8
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f866 	bl	800c378 <prvSampleTimeNow>
 800c2ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d130      	bne.n	800c316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10a      	bne.n	800c2d0 <prvProcessTimerOrBlockTask+0x3c>
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d806      	bhi.n	800c2d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2c2:	f7ff f923 	bl	800b50c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2c6:	68f9      	ldr	r1, [r7, #12]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7ff ff81 	bl	800c1d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2ce:	e024      	b.n	800c31a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d008      	beq.n	800c2e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2d6:	4b13      	ldr	r3, [pc, #76]	@ (800c324 <prvProcessTimerOrBlockTask+0x90>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <prvProcessTimerOrBlockTask+0x50>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e000      	b.n	800c2e6 <prvProcessTimerOrBlockTask+0x52>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c328 <prvProcessTimerOrBlockTask+0x94>)
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	f7fe fe83 	bl	800b000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2fa:	f7ff f907 	bl	800b50c <xTaskResumeAll>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10a      	bne.n	800c31a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c304:	4b09      	ldr	r3, [pc, #36]	@ (800c32c <prvProcessTimerOrBlockTask+0x98>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	f3bf 8f6f 	isb	sy
}
 800c314:	e001      	b.n	800c31a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c316:	f7ff f8f9 	bl	800b50c <xTaskResumeAll>
}
 800c31a:	bf00      	nop
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200011a0 	.word	0x200011a0
 800c328:	200011a4 	.word	0x200011a4
 800c32c:	e000ed04 	.word	0xe000ed04

0800c330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c338:	4b0e      	ldr	r3, [pc, #56]	@ (800c374 <prvGetNextExpireTime+0x44>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <prvGetNextExpireTime+0x16>
 800c342:	2201      	movs	r2, #1
 800c344:	e000      	b.n	800c348 <prvGetNextExpireTime+0x18>
 800c346:	2200      	movs	r2, #0
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c354:	4b07      	ldr	r3, [pc, #28]	@ (800c374 <prvGetNextExpireTime+0x44>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	e001      	b.n	800c364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c364:	68fb      	ldr	r3, [r7, #12]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	2000119c 	.word	0x2000119c

0800c378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c380:	f7ff f962 	bl	800b648 <xTaskGetTickCount>
 800c384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c386:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b4 <prvSampleTimeNow+0x3c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d205      	bcs.n	800c39c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c390:	f000 f93a 	bl	800c608 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	e002      	b.n	800c3a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3a2:	4a04      	ldr	r2, [pc, #16]	@ (800c3b4 <prvSampleTimeNow+0x3c>)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200011ac 	.word	0x200011ac

0800c3b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d812      	bhi.n	800c404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	1ad2      	subs	r2, r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d302      	bcc.n	800c3f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	617b      	str	r3, [r7, #20]
 800c3f0:	e01b      	b.n	800c42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3f2:	4b10      	ldr	r3, [pc, #64]	@ (800c434 <prvInsertTimerInActiveList+0x7c>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	f7fd fcec 	bl	8009dda <vListInsert>
 800c402:	e012      	b.n	800c42a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d206      	bcs.n	800c41a <prvInsertTimerInActiveList+0x62>
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c414:	2301      	movs	r3, #1
 800c416:	617b      	str	r3, [r7, #20]
 800c418:	e007      	b.n	800c42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c41a:	4b07      	ldr	r3, [pc, #28]	@ (800c438 <prvInsertTimerInActiveList+0x80>)
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7fd fcd8 	bl	8009dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c42a:	697b      	ldr	r3, [r7, #20]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	200011a0 	.word	0x200011a0
 800c438:	2000119c 	.word	0x2000119c

0800c43c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08e      	sub	sp, #56	@ 0x38
 800c440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c442:	e0ce      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	da19      	bge.n	800c47e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c44a:	1d3b      	adds	r3, r7, #4
 800c44c:	3304      	adds	r3, #4
 800c44e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10b      	bne.n	800c46e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	61fb      	str	r3, [r7, #28]
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	e7fd      	b.n	800c46a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c474:	6850      	ldr	r0, [r2, #4]
 800c476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c478:	6892      	ldr	r2, [r2, #8]
 800c47a:	4611      	mov	r1, r2
 800c47c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f2c0 80ae 	blt.w	800c5e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d004      	beq.n	800c49c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	3304      	adds	r3, #4
 800c496:	4618      	mov	r0, r3
 800c498:	f7fd fcd8 	bl	8009e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c49c:	463b      	mov	r3, r7
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff ff6a 	bl	800c378 <prvSampleTimeNow>
 800c4a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b09      	cmp	r3, #9
 800c4aa:	f200 8097 	bhi.w	800c5dc <prvProcessReceivedCommands+0x1a0>
 800c4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <prvProcessReceivedCommands+0x78>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c4dd 	.word	0x0800c4dd
 800c4b8:	0800c4dd 	.word	0x0800c4dd
 800c4bc:	0800c4dd 	.word	0x0800c4dd
 800c4c0:	0800c553 	.word	0x0800c553
 800c4c4:	0800c567 	.word	0x0800c567
 800c4c8:	0800c5b3 	.word	0x0800c5b3
 800c4cc:	0800c4dd 	.word	0x0800c4dd
 800c4d0:	0800c4dd 	.word	0x0800c4dd
 800c4d4:	0800c553 	.word	0x0800c553
 800c4d8:	0800c567 	.word	0x0800c567
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4e2:	f043 0301 	orr.w	r3, r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	18d1      	adds	r1, r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4fc:	f7ff ff5c 	bl	800c3b8 <prvInsertTimerInActiveList>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d06c      	beq.n	800c5e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c50c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c514:	f003 0304 	and.w	r3, r3, #4
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d061      	beq.n	800c5e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	441a      	add	r2, r3
 800c524:	2300      	movs	r3, #0
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	2300      	movs	r3, #0
 800c52a:	2100      	movs	r1, #0
 800c52c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c52e:	f7ff fe01 	bl	800c134 <xTimerGenericCommand>
 800c532:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d152      	bne.n	800c5e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	61bb      	str	r3, [r7, #24]
}
 800c54c:	bf00      	nop
 800c54e:	bf00      	nop
 800c550:	e7fd      	b.n	800c54e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c558:	f023 0301 	bic.w	r3, r3, #1
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c564:	e03d      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c56c:	f043 0301 	orr.w	r3, r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10b      	bne.n	800c59e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	617b      	str	r3, [r7, #20]
}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	e7fd      	b.n	800c59a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	18d1      	adds	r1, r2, r3
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ac:	f7ff ff04 	bl	800c3b8 <prvInsertTimerInActiveList>
					break;
 800c5b0:	e017      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c5c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5c2:	f000 fbe9 	bl	800cd98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5c6:	e00c      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5ce:	f023 0301 	bic.w	r3, r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c5da:	e002      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c5dc:	bf00      	nop
 800c5de:	e000      	b.n	800c5e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c5e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5e2:	4b08      	ldr	r3, [pc, #32]	@ (800c604 <prvProcessReceivedCommands+0x1c8>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	1d39      	adds	r1, r7, #4
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe f8f4 	bl	800a7d8 <xQueueReceive>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f47f af26 	bne.w	800c444 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	3730      	adds	r7, #48	@ 0x30
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	200011a4 	.word	0x200011a4

0800c608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c60e:	e049      	b.n	800c6a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c610:	4b2e      	ldr	r3, [pc, #184]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c61a:	4b2c      	ldr	r3, [pc, #176]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3304      	adds	r3, #4
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fd fc0f 	bl	8009e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02f      	beq.n	800c6a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	4413      	add	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	429a      	cmp	r2, r3
 800c654:	d90e      	bls.n	800c674 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c662:	4b1a      	ldr	r3, [pc, #104]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3304      	adds	r3, #4
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fd fbb4 	bl	8009dda <vListInsert>
 800c672:	e017      	b.n	800c6a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c674:	2300      	movs	r3, #0
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	2300      	movs	r3, #0
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	2100      	movs	r1, #0
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff fd58 	bl	800c134 <xTimerGenericCommand>
 800c684:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10b      	bne.n	800c6a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	603b      	str	r3, [r7, #0]
}
 800c69e:	bf00      	nop
 800c6a0:	bf00      	nop
 800c6a2:	e7fd      	b.n	800c6a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6a4:	4b09      	ldr	r3, [pc, #36]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1b0      	bne.n	800c610 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6ae:	4b07      	ldr	r3, [pc, #28]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6b4:	4b06      	ldr	r3, [pc, #24]	@ (800c6d0 <prvSwitchTimerLists+0xc8>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a04      	ldr	r2, [pc, #16]	@ (800c6cc <prvSwitchTimerLists+0xc4>)
 800c6ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6bc:	4a04      	ldr	r2, [pc, #16]	@ (800c6d0 <prvSwitchTimerLists+0xc8>)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	6013      	str	r3, [r2, #0]
}
 800c6c2:	bf00      	nop
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	2000119c 	.word	0x2000119c
 800c6d0:	200011a0 	.word	0x200011a0

0800c6d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6da:	f000 f96d 	bl	800c9b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6de:	4b15      	ldr	r3, [pc, #84]	@ (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d120      	bne.n	800c728 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6e6:	4814      	ldr	r0, [pc, #80]	@ (800c738 <prvCheckForValidListAndQueue+0x64>)
 800c6e8:	f7fd fb26 	bl	8009d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6ec:	4813      	ldr	r0, [pc, #76]	@ (800c73c <prvCheckForValidListAndQueue+0x68>)
 800c6ee:	f7fd fb23 	bl	8009d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6f2:	4b13      	ldr	r3, [pc, #76]	@ (800c740 <prvCheckForValidListAndQueue+0x6c>)
 800c6f4:	4a10      	ldr	r2, [pc, #64]	@ (800c738 <prvCheckForValidListAndQueue+0x64>)
 800c6f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6f8:	4b12      	ldr	r3, [pc, #72]	@ (800c744 <prvCheckForValidListAndQueue+0x70>)
 800c6fa:	4a10      	ldr	r2, [pc, #64]	@ (800c73c <prvCheckForValidListAndQueue+0x68>)
 800c6fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6fe:	2300      	movs	r3, #0
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4b11      	ldr	r3, [pc, #68]	@ (800c748 <prvCheckForValidListAndQueue+0x74>)
 800c704:	4a11      	ldr	r2, [pc, #68]	@ (800c74c <prvCheckForValidListAndQueue+0x78>)
 800c706:	2110      	movs	r1, #16
 800c708:	200a      	movs	r0, #10
 800c70a:	f7fd fc33 	bl	8009f74 <xQueueGenericCreateStatic>
 800c70e:	4603      	mov	r3, r0
 800c710:	4a08      	ldr	r2, [pc, #32]	@ (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c712:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c714:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d005      	beq.n	800c728 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c71c:	4b05      	ldr	r3, [pc, #20]	@ (800c734 <prvCheckForValidListAndQueue+0x60>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	490b      	ldr	r1, [pc, #44]	@ (800c750 <prvCheckForValidListAndQueue+0x7c>)
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fc18 	bl	800af58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c728:	f000 f978 	bl	800ca1c <vPortExitCritical>
}
 800c72c:	bf00      	nop
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200011a4 	.word	0x200011a4
 800c738:	20001174 	.word	0x20001174
 800c73c:	20001188 	.word	0x20001188
 800c740:	2000119c 	.word	0x2000119c
 800c744:	200011a0 	.word	0x200011a0
 800c748:	20001250 	.word	0x20001250
 800c74c:	200011b0 	.word	0x200011b0
 800c750:	0800d0fc 	.word	0x0800d0fc

0800c754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3b04      	subs	r3, #4
 800c764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3b04      	subs	r3, #4
 800c772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f023 0201 	bic.w	r2, r3, #1
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3b04      	subs	r3, #4
 800c782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c784:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b8 <pxPortInitialiseStack+0x64>)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3b14      	subs	r3, #20
 800c78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3b04      	subs	r3, #4
 800c79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f06f 0202 	mvn.w	r2, #2
 800c7a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3b20      	subs	r3, #32
 800c7a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	0800c7bd 	.word	0x0800c7bd

0800c7bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7c6:	4b13      	ldr	r3, [pc, #76]	@ (800c814 <prvTaskExitError+0x58>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d00b      	beq.n	800c7e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	60fb      	str	r3, [r7, #12]
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <prvTaskExitError+0x28>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	60bb      	str	r3, [r7, #8]
}
 800c7fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7fc:	bf00      	nop
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0fc      	beq.n	800c7fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	2000000c 	.word	0x2000000c
	...

0800c820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c820:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <pxCurrentTCBConst2>)
 800c822:	6819      	ldr	r1, [r3, #0]
 800c824:	6808      	ldr	r0, [r1, #0]
 800c826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	f380 8809 	msr	PSP, r0
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f04f 0000 	mov.w	r0, #0
 800c836:	f380 8811 	msr	BASEPRI, r0
 800c83a:	4770      	bx	lr
 800c83c:	f3af 8000 	nop.w

0800c840 <pxCurrentTCBConst2>:
 800c840:	20000c74 	.word	0x20000c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop

0800c848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c848:	4808      	ldr	r0, [pc, #32]	@ (800c86c <prvPortStartFirstTask+0x24>)
 800c84a:	6800      	ldr	r0, [r0, #0]
 800c84c:	6800      	ldr	r0, [r0, #0]
 800c84e:	f380 8808 	msr	MSP, r0
 800c852:	f04f 0000 	mov.w	r0, #0
 800c856:	f380 8814 	msr	CONTROL, r0
 800c85a:	b662      	cpsie	i
 800c85c:	b661      	cpsie	f
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	df00      	svc	0
 800c868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c86a:	bf00      	nop
 800c86c:	e000ed08 	.word	0xe000ed08

0800c870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c876:	4b47      	ldr	r3, [pc, #284]	@ (800c994 <xPortStartScheduler+0x124>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a47      	ldr	r2, [pc, #284]	@ (800c998 <xPortStartScheduler+0x128>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d10b      	bne.n	800c898 <xPortStartScheduler+0x28>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	bf00      	nop
 800c896:	e7fd      	b.n	800c894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c898:	4b3e      	ldr	r3, [pc, #248]	@ (800c994 <xPortStartScheduler+0x124>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a3f      	ldr	r2, [pc, #252]	@ (800c99c <xPortStartScheduler+0x12c>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d10b      	bne.n	800c8ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	613b      	str	r3, [r7, #16]
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	e7fd      	b.n	800c8b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8ba:	4b39      	ldr	r3, [pc, #228]	@ (800c9a0 <xPortStartScheduler+0x130>)
 800c8bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	22ff      	movs	r2, #255	@ 0xff
 800c8ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	4b31      	ldr	r3, [pc, #196]	@ (800c9a4 <xPortStartScheduler+0x134>)
 800c8e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8e2:	4b31      	ldr	r3, [pc, #196]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c8e4:	2207      	movs	r2, #7
 800c8e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8e8:	e009      	b.n	800c8fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c8f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8f4:	78fb      	ldrb	r3, [r7, #3]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8fe:	78fb      	ldrb	r3, [r7, #3]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c906:	2b80      	cmp	r3, #128	@ 0x80
 800c908:	d0ef      	beq.n	800c8ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c90a:	4b27      	ldr	r3, [pc, #156]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f1c3 0307 	rsb	r3, r3, #7
 800c912:	2b04      	cmp	r3, #4
 800c914:	d00b      	beq.n	800c92e <xPortStartScheduler+0xbe>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60bb      	str	r3, [r7, #8]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c92e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c938:	4b1b      	ldr	r3, [pc, #108]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c940:	4a19      	ldr	r2, [pc, #100]	@ (800c9a8 <xPortStartScheduler+0x138>)
 800c942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c94c:	4b17      	ldr	r3, [pc, #92]	@ (800c9ac <xPortStartScheduler+0x13c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a16      	ldr	r2, [pc, #88]	@ (800c9ac <xPortStartScheduler+0x13c>)
 800c952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c958:	4b14      	ldr	r3, [pc, #80]	@ (800c9ac <xPortStartScheduler+0x13c>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a13      	ldr	r2, [pc, #76]	@ (800c9ac <xPortStartScheduler+0x13c>)
 800c95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c964:	f000 f8da 	bl	800cb1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c968:	4b11      	ldr	r3, [pc, #68]	@ (800c9b0 <xPortStartScheduler+0x140>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c96e:	f000 f8f9 	bl	800cb64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c972:	4b10      	ldr	r3, [pc, #64]	@ (800c9b4 <xPortStartScheduler+0x144>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a0f      	ldr	r2, [pc, #60]	@ (800c9b4 <xPortStartScheduler+0x144>)
 800c978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c97c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c97e:	f7ff ff63 	bl	800c848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c982:	f7fe ff2b 	bl	800b7dc <vTaskSwitchContext>
	prvTaskExitError();
 800c986:	f7ff ff19 	bl	800c7bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	e000ed00 	.word	0xe000ed00
 800c998:	410fc271 	.word	0x410fc271
 800c99c:	410fc270 	.word	0x410fc270
 800c9a0:	e000e400 	.word	0xe000e400
 800c9a4:	200012a0 	.word	0x200012a0
 800c9a8:	200012a4 	.word	0x200012a4
 800c9ac:	e000ed20 	.word	0xe000ed20
 800c9b0:	2000000c 	.word	0x2000000c
 800c9b4:	e000ef34 	.word	0xe000ef34

0800c9b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	607b      	str	r3, [r7, #4]
}
 800c9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ca14 <vPortEnterCritical+0x5c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800ca14 <vPortEnterCritical+0x5c>)
 800c9da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800ca14 <vPortEnterCritical+0x5c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d110      	bne.n	800ca06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800ca18 <vPortEnterCritical+0x60>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <vPortEnterCritical+0x4e>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	603b      	str	r3, [r7, #0]
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	e7fd      	b.n	800ca02 <vPortEnterCritical+0x4a>
	}
}
 800ca06:	bf00      	nop
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	2000000c 	.word	0x2000000c
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca22:	4b12      	ldr	r3, [pc, #72]	@ (800ca6c <vPortExitCritical+0x50>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10b      	bne.n	800ca42 <vPortExitCritical+0x26>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	607b      	str	r3, [r7, #4]
}
 800ca3c:	bf00      	nop
 800ca3e:	bf00      	nop
 800ca40:	e7fd      	b.n	800ca3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca42:	4b0a      	ldr	r3, [pc, #40]	@ (800ca6c <vPortExitCritical+0x50>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	4a08      	ldr	r2, [pc, #32]	@ (800ca6c <vPortExitCritical+0x50>)
 800ca4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca4c:	4b07      	ldr	r3, [pc, #28]	@ (800ca6c <vPortExitCritical+0x50>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <vPortExitCritical+0x44>
 800ca54:	2300      	movs	r3, #0
 800ca56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f383 8811 	msr	BASEPRI, r3
}
 800ca5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr
 800ca6c:	2000000c 	.word	0x2000000c

0800ca70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca70:	f3ef 8009 	mrs	r0, PSP
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	4b15      	ldr	r3, [pc, #84]	@ (800cad0 <pxCurrentTCBConst>)
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	f01e 0f10 	tst.w	lr, #16
 800ca80:	bf08      	it	eq
 800ca82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8a:	6010      	str	r0, [r2, #0]
 800ca8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca94:	f380 8811 	msr	BASEPRI, r0
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f7fe fe9c 	bl	800b7dc <vTaskSwitchContext>
 800caa4:	f04f 0000 	mov.w	r0, #0
 800caa8:	f380 8811 	msr	BASEPRI, r0
 800caac:	bc09      	pop	{r0, r3}
 800caae:	6819      	ldr	r1, [r3, #0]
 800cab0:	6808      	ldr	r0, [r1, #0]
 800cab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab6:	f01e 0f10 	tst.w	lr, #16
 800caba:	bf08      	it	eq
 800cabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cac0:	f380 8809 	msr	PSP, r0
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	f3af 8000 	nop.w

0800cad0 <pxCurrentTCBConst>:
 800cad0:	20000c74 	.word	0x20000c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop

0800cad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	607b      	str	r3, [r7, #4]
}
 800caf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800caf2:	f7fe fdb9 	bl	800b668 <xTaskIncrementTick>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cafc:	4b06      	ldr	r3, [pc, #24]	@ (800cb18 <xPortSysTickHandler+0x40>)
 800cafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	2300      	movs	r3, #0
 800cb06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f383 8811 	msr	BASEPRI, r3
}
 800cb0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	e000ed04 	.word	0xe000ed04

0800cb1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb20:	4b0b      	ldr	r3, [pc, #44]	@ (800cb50 <vPortSetupTimerInterrupt+0x34>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb26:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <vPortSetupTimerInterrupt+0x38>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb58 <vPortSetupTimerInterrupt+0x3c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a0a      	ldr	r2, [pc, #40]	@ (800cb5c <vPortSetupTimerInterrupt+0x40>)
 800cb32:	fba2 2303 	umull	r2, r3, r2, r3
 800cb36:	099b      	lsrs	r3, r3, #6
 800cb38:	4a09      	ldr	r2, [pc, #36]	@ (800cb60 <vPortSetupTimerInterrupt+0x44>)
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb3e:	4b04      	ldr	r3, [pc, #16]	@ (800cb50 <vPortSetupTimerInterrupt+0x34>)
 800cb40:	2207      	movs	r2, #7
 800cb42:	601a      	str	r2, [r3, #0]
}
 800cb44:	bf00      	nop
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	e000e010 	.word	0xe000e010
 800cb54:	e000e018 	.word	0xe000e018
 800cb58:	20000000 	.word	0x20000000
 800cb5c:	10624dd3 	.word	0x10624dd3
 800cb60:	e000e014 	.word	0xe000e014

0800cb64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb74 <vPortEnableVFP+0x10>
 800cb68:	6801      	ldr	r1, [r0, #0]
 800cb6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb6e:	6001      	str	r1, [r0, #0]
 800cb70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb72:	bf00      	nop
 800cb74:	e000ed88 	.word	0xe000ed88

0800cb78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb7e:	f3ef 8305 	mrs	r3, IPSR
 800cb82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	d915      	bls.n	800cbb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb8a:	4a18      	ldr	r2, [pc, #96]	@ (800cbec <vPortValidateInterruptPriority+0x74>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb94:	4b16      	ldr	r3, [pc, #88]	@ (800cbf0 <vPortValidateInterruptPriority+0x78>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	7afa      	ldrb	r2, [r7, #11]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d20b      	bcs.n	800cbb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	607b      	str	r3, [r7, #4]
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	e7fd      	b.n	800cbb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf4 <vPortValidateInterruptPriority+0x7c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbbe:	4b0e      	ldr	r3, [pc, #56]	@ (800cbf8 <vPortValidateInterruptPriority+0x80>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d90b      	bls.n	800cbde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	603b      	str	r3, [r7, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	e7fd      	b.n	800cbda <vPortValidateInterruptPriority+0x62>
	}
 800cbde:	bf00      	nop
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	e000e3f0 	.word	0xe000e3f0
 800cbf0:	200012a0 	.word	0x200012a0
 800cbf4:	e000ed0c 	.word	0xe000ed0c
 800cbf8:	200012a4 	.word	0x200012a4

0800cbfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	@ 0x28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc08:	f7fe fc72 	bl	800b4f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc0c:	4b5c      	ldr	r3, [pc, #368]	@ (800cd80 <pvPortMalloc+0x184>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc14:	f000 f924 	bl	800ce60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc18:	4b5a      	ldr	r3, [pc, #360]	@ (800cd84 <pvPortMalloc+0x188>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4013      	ands	r3, r2
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f040 8095 	bne.w	800cd50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01e      	beq.n	800cc6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d015      	beq.n	800cc6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f023 0307 	bic.w	r3, r3, #7
 800cc44:	3308      	adds	r3, #8
 800cc46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00b      	beq.n	800cc6a <pvPortMalloc+0x6e>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	617b      	str	r3, [r7, #20]
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	e7fd      	b.n	800cc66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d06f      	beq.n	800cd50 <pvPortMalloc+0x154>
 800cc70:	4b45      	ldr	r3, [pc, #276]	@ (800cd88 <pvPortMalloc+0x18c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d86a      	bhi.n	800cd50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc7a:	4b44      	ldr	r3, [pc, #272]	@ (800cd8c <pvPortMalloc+0x190>)
 800cc7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc7e:	4b43      	ldr	r3, [pc, #268]	@ (800cd8c <pvPortMalloc+0x190>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc84:	e004      	b.n	800cc90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d903      	bls.n	800cca2 <pvPortMalloc+0xa6>
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1f1      	bne.n	800cc86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cca2:	4b37      	ldr	r3, [pc, #220]	@ (800cd80 <pvPortMalloc+0x184>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d051      	beq.n	800cd50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2208      	movs	r2, #8
 800ccb2:	4413      	add	r3, r2
 800ccb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	1ad2      	subs	r2, r2, r3
 800ccc6:	2308      	movs	r3, #8
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d920      	bls.n	800cd10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f003 0307 	and.w	r3, r3, #7
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00b      	beq.n	800ccf8 <pvPortMalloc+0xfc>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	613b      	str	r3, [r7, #16]
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	e7fd      	b.n	800ccf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd0a:	69b8      	ldr	r0, [r7, #24]
 800cd0c:	f000 f90a 	bl	800cf24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd10:	4b1d      	ldr	r3, [pc, #116]	@ (800cd88 <pvPortMalloc+0x18c>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	4a1b      	ldr	r2, [pc, #108]	@ (800cd88 <pvPortMalloc+0x18c>)
 800cd1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800cd88 <pvPortMalloc+0x18c>)
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	4b1b      	ldr	r3, [pc, #108]	@ (800cd90 <pvPortMalloc+0x194>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d203      	bcs.n	800cd32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd2a:	4b17      	ldr	r3, [pc, #92]	@ (800cd88 <pvPortMalloc+0x18c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a18      	ldr	r2, [pc, #96]	@ (800cd90 <pvPortMalloc+0x194>)
 800cd30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	4b13      	ldr	r3, [pc, #76]	@ (800cd84 <pvPortMalloc+0x188>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd46:	4b13      	ldr	r3, [pc, #76]	@ (800cd94 <pvPortMalloc+0x198>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	4a11      	ldr	r2, [pc, #68]	@ (800cd94 <pvPortMalloc+0x198>)
 800cd4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd50:	f7fe fbdc 	bl	800b50c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00b      	beq.n	800cd76 <pvPortMalloc+0x17a>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60fb      	str	r3, [r7, #12]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <pvPortMalloc+0x176>
	return pvReturn;
 800cd76:	69fb      	ldr	r3, [r7, #28]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3728      	adds	r7, #40	@ 0x28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	20004eb0 	.word	0x20004eb0
 800cd84:	20004ec4 	.word	0x20004ec4
 800cd88:	20004eb4 	.word	0x20004eb4
 800cd8c:	20004ea8 	.word	0x20004ea8
 800cd90:	20004eb8 	.word	0x20004eb8
 800cd94:	20004ebc 	.word	0x20004ebc

0800cd98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d04f      	beq.n	800ce4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdaa:	2308      	movs	r3, #8
 800cdac:	425b      	negs	r3, r3
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	4b25      	ldr	r3, [pc, #148]	@ (800ce54 <vPortFree+0xbc>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10b      	bne.n	800cdde <vPortFree+0x46>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	60fb      	str	r3, [r7, #12]
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	e7fd      	b.n	800cdda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00b      	beq.n	800cdfe <vPortFree+0x66>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	60bb      	str	r3, [r7, #8]
}
 800cdf8:	bf00      	nop
 800cdfa:	bf00      	nop
 800cdfc:	e7fd      	b.n	800cdfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	4b14      	ldr	r3, [pc, #80]	@ (800ce54 <vPortFree+0xbc>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4013      	ands	r3, r2
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d01e      	beq.n	800ce4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d11a      	bne.n	800ce4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	4b0e      	ldr	r3, [pc, #56]	@ (800ce54 <vPortFree+0xbc>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	401a      	ands	r2, r3
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce24:	f7fe fb64 	bl	800b4f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce58 <vPortFree+0xc0>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4413      	add	r3, r2
 800ce32:	4a09      	ldr	r2, [pc, #36]	@ (800ce58 <vPortFree+0xc0>)
 800ce34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce36:	6938      	ldr	r0, [r7, #16]
 800ce38:	f000 f874 	bl	800cf24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce3c:	4b07      	ldr	r3, [pc, #28]	@ (800ce5c <vPortFree+0xc4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3301      	adds	r3, #1
 800ce42:	4a06      	ldr	r2, [pc, #24]	@ (800ce5c <vPortFree+0xc4>)
 800ce44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce46:	f7fe fb61 	bl	800b50c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce4a:	bf00      	nop
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20004ec4 	.word	0x20004ec4
 800ce58:	20004eb4 	.word	0x20004eb4
 800ce5c:	20004ec0 	.word	0x20004ec0

0800ce60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ce6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce6c:	4b27      	ldr	r3, [pc, #156]	@ (800cf0c <prvHeapInit+0xac>)
 800ce6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00c      	beq.n	800ce94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	3307      	adds	r3, #7
 800ce7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 0307 	bic.w	r3, r3, #7
 800ce86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	4a1f      	ldr	r2, [pc, #124]	@ (800cf0c <prvHeapInit+0xac>)
 800ce90:	4413      	add	r3, r2
 800ce92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce98:	4a1d      	ldr	r2, [pc, #116]	@ (800cf10 <prvHeapInit+0xb0>)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce9e:	4b1c      	ldr	r3, [pc, #112]	@ (800cf10 <prvHeapInit+0xb0>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	4413      	add	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ceac:	2208      	movs	r2, #8
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	1a9b      	subs	r3, r3, r2
 800ceb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f023 0307 	bic.w	r3, r3, #7
 800ceba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4a15      	ldr	r2, [pc, #84]	@ (800cf14 <prvHeapInit+0xb4>)
 800cec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cec2:	4b14      	ldr	r3, [pc, #80]	@ (800cf14 <prvHeapInit+0xb4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2200      	movs	r2, #0
 800cec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceca:	4b12      	ldr	r3, [pc, #72]	@ (800cf14 <prvHeapInit+0xb4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	1ad2      	subs	r2, r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cee0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf14 <prvHeapInit+0xb4>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	4a0a      	ldr	r2, [pc, #40]	@ (800cf18 <prvHeapInit+0xb8>)
 800ceee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	4a09      	ldr	r2, [pc, #36]	@ (800cf1c <prvHeapInit+0xbc>)
 800cef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cef8:	4b09      	ldr	r3, [pc, #36]	@ (800cf20 <prvHeapInit+0xc0>)
 800cefa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cefe:	601a      	str	r2, [r3, #0]
}
 800cf00:	bf00      	nop
 800cf02:	3714      	adds	r7, #20
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	200012a8 	.word	0x200012a8
 800cf10:	20004ea8 	.word	0x20004ea8
 800cf14:	20004eb0 	.word	0x20004eb0
 800cf18:	20004eb8 	.word	0x20004eb8
 800cf1c:	20004eb4 	.word	0x20004eb4
 800cf20:	20004ec4 	.word	0x20004ec4

0800cf24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf2c:	4b28      	ldr	r3, [pc, #160]	@ (800cfd0 <prvInsertBlockIntoFreeList+0xac>)
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	e002      	b.n	800cf38 <prvInsertBlockIntoFreeList+0x14>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d8f7      	bhi.n	800cf32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d108      	bne.n	800cf66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	441a      	add	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	441a      	add	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d118      	bne.n	800cfac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	4b15      	ldr	r3, [pc, #84]	@ (800cfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d00d      	beq.n	800cfa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	441a      	add	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	e008      	b.n	800cfb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfa2:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	e003      	b.n	800cfb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d002      	beq.n	800cfc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfc2:	bf00      	nop
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	20004ea8 	.word	0x20004ea8
 800cfd4:	20004eb0 	.word	0x20004eb0

0800cfd8 <memset>:
 800cfd8:	4402      	add	r2, r0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d100      	bne.n	800cfe2 <memset+0xa>
 800cfe0:	4770      	bx	lr
 800cfe2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfe6:	e7f9      	b.n	800cfdc <memset+0x4>

0800cfe8 <__libc_init_array>:
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	4d0d      	ldr	r5, [pc, #52]	@ (800d020 <__libc_init_array+0x38>)
 800cfec:	4c0d      	ldr	r4, [pc, #52]	@ (800d024 <__libc_init_array+0x3c>)
 800cfee:	1b64      	subs	r4, r4, r5
 800cff0:	10a4      	asrs	r4, r4, #2
 800cff2:	2600      	movs	r6, #0
 800cff4:	42a6      	cmp	r6, r4
 800cff6:	d109      	bne.n	800d00c <__libc_init_array+0x24>
 800cff8:	4d0b      	ldr	r5, [pc, #44]	@ (800d028 <__libc_init_array+0x40>)
 800cffa:	4c0c      	ldr	r4, [pc, #48]	@ (800d02c <__libc_init_array+0x44>)
 800cffc:	f000 f826 	bl	800d04c <_init>
 800d000:	1b64      	subs	r4, r4, r5
 800d002:	10a4      	asrs	r4, r4, #2
 800d004:	2600      	movs	r6, #0
 800d006:	42a6      	cmp	r6, r4
 800d008:	d105      	bne.n	800d016 <__libc_init_array+0x2e>
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d010:	4798      	blx	r3
 800d012:	3601      	adds	r6, #1
 800d014:	e7ee      	b.n	800cff4 <__libc_init_array+0xc>
 800d016:	f855 3b04 	ldr.w	r3, [r5], #4
 800d01a:	4798      	blx	r3
 800d01c:	3601      	adds	r6, #1
 800d01e:	e7f2      	b.n	800d006 <__libc_init_array+0x1e>
 800d020:	0800d26c 	.word	0x0800d26c
 800d024:	0800d26c 	.word	0x0800d26c
 800d028:	0800d26c 	.word	0x0800d26c
 800d02c:	0800d270 	.word	0x0800d270

0800d030 <memcpy>:
 800d030:	440a      	add	r2, r1
 800d032:	4291      	cmp	r1, r2
 800d034:	f100 33ff 	add.w	r3, r0, #4294967295
 800d038:	d100      	bne.n	800d03c <memcpy+0xc>
 800d03a:	4770      	bx	lr
 800d03c:	b510      	push	{r4, lr}
 800d03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d046:	4291      	cmp	r1, r2
 800d048:	d1f9      	bne.n	800d03e <memcpy+0xe>
 800d04a:	bd10      	pop	{r4, pc}

0800d04c <_init>:
 800d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04e:	bf00      	nop
 800d050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d052:	bc08      	pop	{r3}
 800d054:	469e      	mov	lr, r3
 800d056:	4770      	bx	lr

0800d058 <_fini>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	bf00      	nop
 800d05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05e:	bc08      	pop	{r3}
 800d060:	469e      	mov	lr, r3
 800d062:	4770      	bx	lr


RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000accc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800aeac  0800aeac  0000beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b074  0800b074  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b074  0800b074  0000c074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b07c  0800b07c  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b07c  0800b07c  0000c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b080  0800b080  0000c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b084  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee8  20000010  0800b094  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ef8  0800b094  0000def8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcd2  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cda  00000000  00000000  00028d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f8  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024296  00000000  00000000  0002f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6d9  00000000  00000000  0005358e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2325  00000000  00000000  0006ec67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006150  00000000  00000000  00150fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00157120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae94 	.word	0x0800ae94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800ae94 	.word	0x0800ae94

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HAL_SPI_TxCpltCallback>:
volatile uint8_t dtc_write_done = 0;

// CMD + ADDrH + ADDrL + Data(1Page)
static uint8_t tx_buf[sizeof(DTC_Table_t) + 3];

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <HAL_SPI_TxCpltCallback+0x2c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d107      	bne.n	800056e <HAL_SPI_TxCpltCallback+0x22>
        dtc_write_done = 1;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <HAL_SPI_TxCpltCallback+0x30>)
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN,  GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_SPI_TxCpltCallback+0x34>)
 800056a:	f002 fe75 	bl	8003258 <HAL_GPIO_WritePin>
    }
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013000 	.word	0x40013000
 800057c:	2000002c 	.word	0x2000002c
 8000580:	40020400 	.word	0x40020400

08000584 <EEPROM_WriteEnable>:

// Send WREN CMD (Polling)
static HAL_StatusTypeDef EEPROM_WriteEnable(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 800058a:	2306      	movs	r3, #6
 800058c:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_RESET);  // EEPROM CS LOW
 800058e:	2200      	movs	r2, #0
 8000590:	2104      	movs	r1, #4
 8000592:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <EEPROM_WriteEnable+0x3c>)
 8000594:	f002 fe60 	bl	8003258 <HAL_GPIO_WritePin>
    
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY /* no timeout */);
 8000598:	1db9      	adds	r1, r7, #6
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2201      	movs	r2, #1
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <EEPROM_WriteEnable+0x40>)
 80005a2:	f005 fe40 	bl	8006226 <HAL_SPI_Transmit>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    
    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_SET);    // EEPROM CS HIGH
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <EEPROM_WriteEnable+0x3c>)
 80005b0:	f002 fe52 	bl	8003258 <HAL_GPIO_WritePin>
   
    return ret;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400
 80005c4:	20000304 	.word	0x20000304

080005c8 <DTC_WriteToEEPROM_DMA>:

// Request DTC SPI DMA store
HAL_StatusTypeDef DTC_WriteToEEPROM_DMA(uint16_t address, DTC_Table_t *dtc) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	80fb      	strh	r3, [r7, #6]
    if (EEPROM_WriteEnable() != HAL_OK) return HAL_ERROR;
 80005d4:	f7ff ffd6 	bl	8000584 <EEPROM_WriteEnable>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <DTC_WriteToEEPROM_DMA+0x1a>
 80005de:	2301      	movs	r3, #1
 80005e0:	e01f      	b.n	8000622 <DTC_WriteToEEPROM_DMA+0x5a>

    tx_buf[0] = EEPROM_CMD_WRITE;       // CMD
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = (address >> 8) & 0xFF;  // AddrH
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005f2:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = (address >> 0) & 0xFF;  // AddrL
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005fa:	709a      	strb	r2, [r3, #2]
    
    memcpy(&tx_buf[3], dtc, sizeof(DTC_Table_t));
 80005fc:	2236      	movs	r2, #54	@ 0x36
 80005fe:	6839      	ldr	r1, [r7, #0]
 8000600:	480b      	ldr	r0, [pc, #44]	@ (8000630 <DTC_WriteToEEPROM_DMA+0x68>)
 8000602:	f00a fc39 	bl	800ae78 <memcpy>

    dtc_write_done = 0;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <DTC_WriteToEEPROM_DMA+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

    //Start sending
    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_RESET);  // CS LOW
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <DTC_WriteToEEPROM_DMA+0x70>)
 8000612:	f002 fe21 	bl	8003258 <HAL_GPIO_WritePin>
    return HAL_SPI_Transmit_DMA(&hspi1, tx_buf, sizeof(DTC_Table_t) + 3);
 8000616:	2239      	movs	r2, #57	@ 0x39
 8000618:	4904      	ldr	r1, [pc, #16]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <DTC_WriteToEEPROM_DMA+0x74>)
 800061c:	f005 ff40 	bl	80064a0 <HAL_SPI_Transmit_DMA>
 8000620:	4603      	mov	r3, r0
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000030 	.word	0x20000030
 8000630:	20000033 	.word	0x20000033
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40020400 	.word	0x40020400
 800063c:	20000304 	.word	0x20000304

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f001 f92e 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f882 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fabc 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 fa54 	bl	8000afc <MX_DMA_Init>
  MX_ADC1_Init();
 8000654:	f000 f8da 	bl	800080c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000658:	f000 f92a 	bl	80008b0 <MX_CAN1_Init>
  MX_I2C1_Init();
 800065c:	f000 f95c 	bl	8000918 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000660:	f000 f988 	bl	8000974 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000664:	f000 f9b4 	bl	80009d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000668:	f000 f9e8 	bl	8000a3c <MX_SPI2_Init>
  MX_UART4_Init();
 800066c:	f000 fa1c 	bl	8000aa8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f007 f998 	bl	80079a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000674:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <main+0xb8>)
 8000676:	f007 fa8c 	bl	8007b92 <osMutexNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <main+0xbc>)
 800067e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 8000680:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <main+0xc0>)
 8000682:	2108      	movs	r1, #8
 8000684:	2008      	movs	r0, #8
 8000686:	f007 fb92 	bl	8007dae <osMessageQueueNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <main+0xc4>)
 800068e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000690:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <main+0xc8>)
 8000692:	2100      	movs	r1, #0
 8000694:	481d      	ldr	r0, [pc, #116]	@ (800070c <main+0xcc>)
 8000696:	f007 f9cf 	bl	8007a38 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <main+0xd0>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 80006a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <main+0xd4>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	481c      	ldr	r0, [pc, #112]	@ (8000718 <main+0xd8>)
 80006a6:	f007 f9c7 	bl	8007a38 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <main+0xdc>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <main+0xe0>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	481b      	ldr	r0, [pc, #108]	@ (8000724 <main+0xe4>)
 80006b6:	f007 f9bf 	bl	8007a38 <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <main+0xe8>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 80006c0:	4a1a      	ldr	r2, [pc, #104]	@ (800072c <main+0xec>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	481a      	ldr	r0, [pc, #104]	@ (8000730 <main+0xf0>)
 80006c6:	f007 f9b7 	bl	8007a38 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <main+0xf4>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80006d0:	4a19      	ldr	r2, [pc, #100]	@ (8000738 <main+0xf8>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4819      	ldr	r0, [pc, #100]	@ (800073c <main+0xfc>)
 80006d6:	f007 f9af 	bl	8007a38 <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <main+0x100>)
 80006de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CommTaskHandle = osThreadNew(StartCommTask, NULL, &CommTask_attributes);
 80006e0:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <main+0x104>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4818      	ldr	r0, [pc, #96]	@ (8000748 <main+0x108>)
 80006e6:	f007 f9a7 	bl	8007a38 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a17      	ldr	r2, [pc, #92]	@ (800074c <main+0x10c>)
 80006ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f0:	f007 f97c 	bl	80079ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <main+0xb4>
 80006f8:	0800b020 	.word	0x0800b020
 80006fc:	20000590 	.word	0x20000590
 8000700:	0800b008 	.word	0x0800b008
 8000704:	2000058c 	.word	0x2000058c
 8000708:	0800af54 	.word	0x0800af54
 800070c:	08000db9 	.word	0x08000db9
 8000710:	20000578 	.word	0x20000578
 8000714:	0800af78 	.word	0x0800af78
 8000718:	08000dc9 	.word	0x08000dc9
 800071c:	2000057c 	.word	0x2000057c
 8000720:	0800af9c 	.word	0x0800af9c
 8000724:	08000dd9 	.word	0x08000dd9
 8000728:	20000580 	.word	0x20000580
 800072c:	0800afc0 	.word	0x0800afc0
 8000730:	08000de9 	.word	0x08000de9
 8000734:	20000584 	.word	0x20000584
 8000738:	0800afe4 	.word	0x0800afe4
 800073c:	08000df9 	.word	0x08000df9
 8000740:	20000588 	.word	0x20000588
 8000744:	0800b030 	.word	0x0800b030
 8000748:	08000d31 	.word	0x08000d31
 800074c:	20000598 	.word	0x20000598

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2234      	movs	r2, #52	@ 0x34
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00a fb4a 	bl	800adf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <SystemClock_Config+0xb4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <SystemClock_Config+0xb4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemClock_Config+0xb4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <SystemClock_Config+0xb8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <SystemClock_Config+0xb8>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <SystemClock_Config+0xb8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 fa23 	bl	8005c0c <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007cc:	f000 fb1c 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 f82e 	bl	800584c <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007f6:	f000 fb07 	bl	8000e08 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000830:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000836:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <MX_ADC1_Init+0xa0>)
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000858:	2201      	movs	r2, #1
 800085a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000866:	2201      	movs	r2, #1
 8000868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800086c:	f001 f88c 	bl	8001988 <HAL_ADC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fac7 	bl	8000e08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800087a:	2302      	movs	r3, #2
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800088c:	f001 f8c0 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000896:	f000 fab7 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000006c 	.word	0x2000006c
 80008a8:	40012000 	.word	0x40012000
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_CAN1_Init+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008bc:	2210      	movs	r2, #16
 80008be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008fe:	f001 fab5 	bl	8001e6c <HAL_CAN_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 fa7e 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000b4 	.word	0x200000b4
 8000914:	40006400 	.word	0x40006400

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800093a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f002 fc99 	bl	800328c <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 fa52 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000dc 	.word	0x200000dc
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_I2C2_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000980:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_I2C2_Init+0x58>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000996:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009b2:	f002 fc6b 	bl	800328c <HAL_I2C_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 fa24 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000130 	.word	0x20000130
 80009c8:	40005800 	.word	0x40005800
 80009cc:	000186a0 	.word	0x000186a0

080009d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <MX_SPI1_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a22:	f005 fb77 	bl	8006114 <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a2c:	f000 f9ec 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000304 	.word	0x20000304
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <MX_SPI2_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI2_Init+0x64>)
 8000a8e:	f005 fb41 	bl	8006114 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 f9b6 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000035c 	.word	0x2000035c
 8000aa4:	40003800 	.word	0x40003800

08000aa8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <MX_UART4_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_UART4_Init+0x4c>)
 8000ae0:	f006 f808 	bl	8006af4 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 f98d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000534 	.word	0x20000534
 8000af8:	40004c00 	.word	0x40004c00

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a27      	ldr	r2, [pc, #156]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_DMA_Init+0xc8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	200b      	movs	r0, #11
 8000b40:	f001 fda3 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b44:	200b      	movs	r0, #11
 8000b46:	f001 fdbc 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2105      	movs	r1, #5
 8000b4e:	200d      	movs	r0, #13
 8000b50:	f001 fd9b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b54:	200d      	movs	r0, #13
 8000b56:	f001 fdb4 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	200e      	movs	r0, #14
 8000b60:	f001 fd93 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b64:	200e      	movs	r0, #14
 8000b66:	f001 fdac 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f001 fd8b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b74:	200f      	movs	r0, #15
 8000b76:	f001 fda4 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2011      	movs	r0, #17
 8000b80:	f001 fd83 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b84:	2011      	movs	r0, #17
 8000b86:	f001 fd9c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	202f      	movs	r0, #47	@ 0x2f
 8000b90:	f001 fd7b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000b94:	202f      	movs	r0, #47	@ 0x2f
 8000b96:	f001 fd94 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	2038      	movs	r0, #56	@ 0x38
 8000ba0:	f001 fd73 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ba4:	2038      	movs	r0, #56	@ 0x38
 8000ba6:	f001 fd8c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	203b      	movs	r0, #59	@ 0x3b
 8000bb0:	f001 fd6b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bb4:	203b      	movs	r0, #59	@ 0x3b
 8000bb6:	f001 fd84 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a33      	ldr	r2, [pc, #204]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2107      	movs	r1, #7
 8000c6e:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <MX_GPIO_Init+0xf0>)
 8000c70:	f002 faf2 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c74:	2303      	movs	r3, #3
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <MX_GPIO_Init+0xf0>)
 8000c8c:	f002 f950 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c90:	2304      	movs	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_GPIO_Init+0xf0>)
 8000ca8:	f002 f942 	bl	8002f30 <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <WriteDTC_IfFault>:

/* USER CODE BEGIN 4 */
void WriteDTC_IfFault(uint8_t condition, uint16_t code, const char *desc) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	603a      	str	r2, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	80bb      	strh	r3, [r7, #4]
    if (condition)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d026      	beq.n	8000d20 <WriteDTC_IfFault+0x64>
    {
        DTC_Table_t dtc;
        dtc.DTC_Code = code;
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	813b      	strh	r3, [r7, #8]
        strncpy(dtc.Description, desc, sizeof(dtc.Description));
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	3302      	adds	r3, #2
 8000cdc:	2232      	movs	r2, #50	@ 0x32
 8000cde:	6839      	ldr	r1, [r7, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a f891 	bl	800ae08 <strncpy>
        dtc.Description[sizeof(dtc.Description) - 1] = '\0';
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        dtc.active = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

        DTC_WriteToEEPROM_DMA(dtc_eeprom_addr, &dtc);
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <WriteDTC_IfFault+0x6c>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f107 0208 	add.w	r2, r7, #8
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc63 	bl	80005c8 <DTC_WriteToEEPROM_DMA>
        while (!dtc_write_done) osDelay(1);
 8000d02:	e002      	b.n	8000d0a <WriteDTC_IfFault+0x4e>
 8000d04:	2001      	movs	r0, #1
 8000d06:	f006 ff29 	bl	8007b5c <osDelay>
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <WriteDTC_IfFault+0x70>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f7      	beq.n	8000d04 <WriteDTC_IfFault+0x48>
        dtc_eeprom_addr += sizeof(DTC_Table_t);
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <WriteDTC_IfFault+0x6c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	3336      	adds	r3, #54	@ 0x36
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <WriteDTC_IfFault+0x6c>)
 8000d1e:	801a      	strh	r2, [r3, #0]
    }
}
 8000d20:	bf00      	nop
 8000d22:	3740      	adds	r7, #64	@ 0x40
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000594 	.word	0x20000594
 8000d2c:	2000002c 	.word	0x2000002c

08000d30 <StartCommTask>:

void StartCommTask(void *argument) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <StartCommTask+0x70>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	4618      	mov	r0, r3
 8000d42:	f006 ffac 	bl	8007c9e <osMutexAcquire>

    if (PMIC_ReadFaultStatus_DMA() == HAL_OK) {
 8000d46:	f000 f865 	bl	8000e14 <PMIC_ReadFaultStatus_DMA>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11e      	bne.n	8000d8e <StartCommTask+0x5e>

        while(!pmic_dma_done) osDelay(1);
 8000d50:	e002      	b.n	8000d58 <StartCommTask+0x28>
 8000d52:	2001      	movs	r0, #1
 8000d54:	f006 ff02 	bl	8007b5c <osDelay>
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <StartCommTask+0x74>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f7      	beq.n	8000d52 <StartCommTask+0x22>

        WriteDTC_IfFault(pmic_uv_status.bits.BUCKA_UV, DTC_PMIC_UV_A, "[C600] UV_FAULT_A Detected");
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <StartCommTask+0x78>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <StartCommTask+0x7c>)
 8000d6e:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffa2 	bl	8000cbc <WriteDTC_IfFault>
        WriteDTC_IfFault(pmic_oc_status.bits.BUCKA_OC, DTC_PMIC_OC_A, "[C610] OC_FAULT_A Detected");
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <StartCommTask+0x80>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <StartCommTask+0x84>)
 8000d84:	f24c 6110 	movw	r1, #50704	@ 0xc610
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff97 	bl	8000cbc <WriteDTC_IfFault>
    }

    osMutexRelease(CommMutexHandleHandle);
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <StartCommTask+0x70>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 ffce 	bl	8007d34 <osMutexRelease>

    osDelay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f006 fedf 	bl	8007b5c <osDelay>
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000d9e:	e7cb      	b.n	8000d38 <StartCommTask+0x8>
 8000da0:	20000590 	.word	0x20000590
 8000da4:	200005a1 	.word	0x200005a1
 8000da8:	2000059c 	.word	0x2000059c
 8000dac:	0800af04 	.word	0x0800af04
 8000db0:	200005a0 	.word	0x200005a0
 8000db4:	0800af20 	.word	0x0800af20

08000db8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f006 fecb 	bl	8007b5c <osDelay>
 8000dc6:	e7fb      	b.n	8000dc0 <StartDefaultTask+0x8>

08000dc8 <StartI2CTask>:
* @retval None
*/

/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f006 fec3 	bl	8007b5c <osDelay>
 8000dd6:	e7fb      	b.n	8000dd0 <StartI2CTask+0x8>

08000dd8 <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPITask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f006 febb 	bl	8007b5c <osDelay>
 8000de6:	e7fb      	b.n	8000de0 <StartSPITask+0x8>

08000de8 <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f006 feb3 	bl	8007b5c <osDelay>
 8000df6:	e7fb      	b.n	8000df0 <StartCANTask+0x8>

08000df8 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f006 feab 	bl	8007b5c <osDelay>
 8000e06:	e7fb      	b.n	8000e00 <StartUARTTask+0x8>

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <PMIC_ReadFaultStatus_DMA>:

PMIC_FaultStatus1_t pmic_uv_status;
PMIC_FaultStatus2_t pmic_oc_status;
volatile uint8_t pmic_dma_done = 0;

HAL_StatusTypeDef PMIC_ReadFaultStatus_DMA(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef ret;

    // Initialize DMA completion flag
    pmic_dma_done = 0;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <PMIC_ReadFaultStatus_DMA+0x30>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]

    // Read 0x07 register (UV/OV status)
    ret = HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <PMIC_ReadFaultStatus_DMA+0x34>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	21c0      	movs	r1, #192	@ 0xc0
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <PMIC_ReadFaultStatus_DMA+0x38>)
 8000e30:	f002 fb70 	bl	8003514 <HAL_I2C_Mem_Read_DMA>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
                                &pmic_uv_status.all,
                                1);

    // DMA is asynchronous and does not gaurantee sequential execution
    // -> After UV status is read, OC status is read in the callback
    return ret;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200005a1 	.word	0x200005a1
 8000e48:	2000059c 	.word	0x2000059c
 8000e4c:	200000dc 	.word	0x200000dc

08000e50 <HAL_I2C_MemRxCpltCallback>:

// DMA receive complete callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	@ (8000e84 <HAL_I2C_MemRxCpltCallback+0x34>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d10c      	bne.n	8000e7c <HAL_I2C_MemRxCpltCallback+0x2c>
        HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000e62:	2301      	movs	r3, #1
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_I2C_MemRxCpltCallback+0x38>)
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	21c0      	movs	r1, #192	@ 0xc0
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <HAL_I2C_MemRxCpltCallback+0x3c>)
 8000e72:	f002 fb4f 	bl	8003514 <HAL_I2C_Mem_Read_DMA>
                                PMIC_REG_FAULT_STATUS2,
                                I2C_MEMADD_SIZE_8BIT,
                                &pmic_oc_status.all,
                                1);

        pmic_dma_done = 1;
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_I2C_MemRxCpltCallback+0x40>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
    }
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	200005a0 	.word	0x200005a0
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	200005a1 	.word	0x200005a1

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	f06f 0001 	mvn.w	r0, #1
 8000eda:	f001 fbd6 	bl	800268a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_ADC_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d127      	bne.n	8000f5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f46:	2304      	movs	r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_ADC_MspInit+0x84>)
 8000f5a:	f001 ffe9 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <HAL_CAN_MspInit+0xa4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d13b      	bne.n	800100e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000fa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_CAN_MspInit+0xa8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fde:	2309      	movs	r3, #9
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <HAL_CAN_MspInit+0xac>)
 8000fea:	f001 ffa1 	bl	8002f30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2013      	movs	r0, #19
 8000ff4:	f001 fb49 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ff8:	2013      	movs	r0, #19
 8000ffa:	f001 fb62 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2014      	movs	r0, #20
 8001004:	f001 fb41 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001008:	2014      	movs	r0, #20
 800100a:	f001 fb5a 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40006400 	.word	0x40006400
 800101c:	40023800 	.word	0x40023800
 8001020:	40021800 	.word	0x40021800

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a9c      	ldr	r2, [pc, #624]	@ (80012b4 <HAL_I2C_MspInit+0x290>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 809b 	bne.w	800117e <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	4b9a      	ldr	r3, [pc, #616]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	4a99      	ldr	r2, [pc, #612]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6313      	str	r3, [r2, #48]	@ 0x30
 8001058:	4b97      	ldr	r3, [pc, #604]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001064:	23c0      	movs	r3, #192	@ 0xc0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001074:	2304      	movs	r3, #4
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	488f      	ldr	r0, [pc, #572]	@ (80012bc <HAL_I2C_MspInit+0x298>)
 8001080:	f001 ff56 	bl	8002f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	4b8b      	ldr	r3, [pc, #556]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	4a8a      	ldr	r2, [pc, #552]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 800108e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001092:	6413      	str	r3, [r2, #64]	@ 0x40
 8001094:	4b88      	ldr	r3, [pc, #544]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010a0:	4b87      	ldr	r3, [pc, #540]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010a2:	4a88      	ldr	r2, [pc, #544]	@ (80012c4 <HAL_I2C_MspInit+0x2a0>)
 80010a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010a6:	4b86      	ldr	r3, [pc, #536]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010ac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ae:	4b84      	ldr	r3, [pc, #528]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b4:	4b82      	ldr	r3, [pc, #520]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ba:	4b81      	ldr	r3, [pc, #516]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c2:	4b7f      	ldr	r3, [pc, #508]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c8:	4b7d      	ldr	r3, [pc, #500]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010ce:	4b7c      	ldr	r3, [pc, #496]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010d4:	4b7a      	ldr	r3, [pc, #488]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010da:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010dc:	4b78      	ldr	r3, [pc, #480]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010e2:	4877      	ldr	r0, [pc, #476]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010e4:	f001 fb08 	bl	80026f8 <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80010ee:	f7ff fe8b 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a72      	ldr	r2, [pc, #456]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f8:	4a71      	ldr	r2, [pc, #452]	@ (80012c0 <HAL_I2C_MspInit+0x29c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80010fe:	4b72      	ldr	r3, [pc, #456]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001100:	4a72      	ldr	r2, [pc, #456]	@ (80012cc <HAL_I2C_MspInit+0x2a8>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001104:	4b70      	ldr	r3, [pc, #448]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001106:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800110a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110c:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 800110e:	2240      	movs	r2, #64	@ 0x40
 8001110:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b6d      	ldr	r3, [pc, #436]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b6b      	ldr	r3, [pc, #428]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 800111a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800111e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001120:	4b69      	ldr	r3, [pc, #420]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001126:	4b68      	ldr	r3, [pc, #416]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800112c:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001132:	4b65      	ldr	r3, [pc, #404]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001134:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001138:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001140:	4861      	ldr	r0, [pc, #388]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001142:	f001 fad9 	bl	80026f8 <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 800114c:	f7ff fe5c 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a5d      	ldr	r2, [pc, #372]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34
 8001156:	4a5c      	ldr	r2, [pc, #368]	@ (80012c8 <HAL_I2C_MspInit+0x2a4>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	201f      	movs	r0, #31
 8001162:	f001 fa92 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001166:	201f      	movs	r0, #31
 8001168:	f001 faab 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2020      	movs	r0, #32
 8001172:	f001 fa8a 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001176:	2020      	movs	r0, #32
 8001178:	f001 faa3 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117c:	e095      	b.n	80012aa <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a53      	ldr	r2, [pc, #332]	@ (80012d0 <HAL_I2C_MspInit+0x2ac>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f040 8090 	bne.w	80012aa <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a49      	ldr	r2, [pc, #292]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b47      	ldr	r3, [pc, #284]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a6:	2303      	movs	r3, #3
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011b6:	2304      	movs	r3, #4
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <HAL_I2C_MspInit+0x2b0>)
 80011c2:	f001 feb5 	bl	8002f30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a3a      	ldr	r2, [pc, #232]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 80011d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <HAL_I2C_MspInit+0x294>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 80011e4:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <HAL_I2C_MspInit+0x2b8>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011e8:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 80011ea:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f0:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001202:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001204:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120a:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001210:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121c:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001222:	482d      	ldr	r0, [pc, #180]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 8001224:	f001 fa68 	bl	80026f8 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 800122e:	f7ff fdeb 	bl	8000e08 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a28      	ldr	r2, [pc, #160]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 8001236:	639a      	str	r2, [r3, #56]	@ 0x38
 8001238:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <HAL_I2C_MspInit+0x2b4>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800123e:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001240:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <HAL_I2C_MspInit+0x2c0>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001244:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001246:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800124a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 800124e:	2240      	movs	r2, #64	@ 0x40
 8001250:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 800125a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800127e:	4818      	ldr	r0, [pc, #96]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001280:	f001 fa3a 	bl	80026f8 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 800128a:	f7ff fdbd 	bl	8000e08 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <HAL_I2C_MspInit+0x2bc>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2021      	movs	r0, #33	@ 0x21
 80012a0:	f001 f9f3 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012a4:	2021      	movs	r0, #33	@ 0x21
 80012a6:	f001 fa0c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3730      	adds	r7, #48	@ 0x30
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400
 80012c0:	20000184 	.word	0x20000184
 80012c4:	40026010 	.word	0x40026010
 80012c8:	200001e4 	.word	0x200001e4
 80012cc:	400260a0 	.word	0x400260a0
 80012d0:	40005800 	.word	0x40005800
 80012d4:	40021400 	.word	0x40021400
 80012d8:	20000244 	.word	0x20000244
 80012dc:	40026040 	.word	0x40026040
 80012e0:	200002a4 	.word	0x200002a4
 80012e4:	400260b8 	.word	0x400260b8

080012e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a4a      	ldr	r2, [pc, #296]	@ (8001430 <HAL_SPI_MspInit+0x148>)
 8001306:	4293      	cmp	r3, r2
 8001308:	f040 80a0 	bne.w	800144c <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	4a47      	ldr	r2, [pc, #284]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 8001316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800131a:	6453      	str	r3, [r2, #68]	@ 0x44
 800131c:	4b45      	ldr	r3, [pc, #276]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4a40      	ldr	r2, [pc, #256]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	@ 0x30
 8001338:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_SPI_MspInit+0x14c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001344:	23e0      	movs	r3, #224	@ 0xe0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001354:	2305      	movs	r3, #5
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4836      	ldr	r0, [pc, #216]	@ (8001438 <HAL_SPI_MspInit+0x150>)
 8001360:	f001 fde6 	bl	8002f30 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <HAL_SPI_MspInit+0x154>)
 8001366:	4a36      	ldr	r2, [pc, #216]	@ (8001440 <HAL_SPI_MspInit+0x158>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800136a:	4b34      	ldr	r3, [pc, #208]	@ (800143c <HAL_SPI_MspInit+0x154>)
 800136c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001370:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001372:	4b32      	ldr	r3, [pc, #200]	@ (800143c <HAL_SPI_MspInit+0x154>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <HAL_SPI_MspInit+0x154>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800137e:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <HAL_SPI_MspInit+0x154>)
 8001380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001384:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001386:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_SPI_MspInit+0x154>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138c:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <HAL_SPI_MspInit+0x154>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001392:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <HAL_SPI_MspInit+0x154>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <HAL_SPI_MspInit+0x154>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139e:	4b27      	ldr	r3, [pc, #156]	@ (800143c <HAL_SPI_MspInit+0x154>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013a4:	4825      	ldr	r0, [pc, #148]	@ (800143c <HAL_SPI_MspInit+0x154>)
 80013a6:	f001 f9a7 	bl	80026f8 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013b0:	f7ff fd2a 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a21      	ldr	r2, [pc, #132]	@ (800143c <HAL_SPI_MspInit+0x154>)
 80013b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013ba:	4a20      	ldr	r2, [pc, #128]	@ (800143c <HAL_SPI_MspInit+0x154>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <HAL_SPI_MspInit+0x160>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013c8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013d0:	2240      	movs	r2, #64	@ 0x40
 80013d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001400:	4810      	ldr	r0, [pc, #64]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 8001402:	f001 f979 	bl	80026f8 <HAL_DMA_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800140c:	f7ff fcfc 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 8001414:	649a      	str	r2, [r3, #72]	@ 0x48
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_SPI_MspInit+0x15c>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2105      	movs	r1, #5
 8001420:	2023      	movs	r0, #35	@ 0x23
 8001422:	f001 f932 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001426:	2023      	movs	r0, #35	@ 0x23
 8001428:	f001 f94b 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800142c:	e0c1      	b.n	80015b2 <HAL_SPI_MspInit+0x2ca>
 800142e:	bf00      	nop
 8001430:	40013000 	.word	0x40013000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	200003b4 	.word	0x200003b4
 8001440:	40026410 	.word	0x40026410
 8001444:	20000414 	.word	0x20000414
 8001448:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5a      	ldr	r2, [pc, #360]	@ (80015bc <HAL_SPI_MspInit+0x2d4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	f040 80ad 	bne.w	80015b2 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b58      	ldr	r3, [pc, #352]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b51      	ldr	r3, [pc, #324]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	4a50      	ldr	r2, [pc, #320]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6313      	str	r3, [r2, #48]	@ 0x30
 8001484:	4b4e      	ldr	r3, [pc, #312]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	4a49      	ldr	r2, [pc, #292]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a0:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <HAL_SPI_MspInit+0x2d8>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ac:	230c      	movs	r3, #12
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014bc:	2305      	movs	r3, #5
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	483f      	ldr	r0, [pc, #252]	@ (80015c4 <HAL_SPI_MspInit+0x2dc>)
 80014c8:	f001 fd32 	bl	8002f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014de:	2305      	movs	r3, #5
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4837      	ldr	r0, [pc, #220]	@ (80015c8 <HAL_SPI_MspInit+0x2e0>)
 80014ea:	f001 fd21 	bl	8002f30 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 80014f0:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <HAL_SPI_MspInit+0x2e8>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014f4:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800152c:	4827      	ldr	r0, [pc, #156]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 800152e:	f001 f8e3 	bl	80026f8 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001538:	f7ff fc66 	bl	8000e08 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001540:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001542:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <HAL_SPI_MspInit+0x2e4>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800154a:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <HAL_SPI_MspInit+0x2f0>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001556:	2240      	movs	r2, #64	@ 0x40
 8001558:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001566:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 8001588:	f001 f8b6 	bl	80026f8 <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001592:	f7ff fc39 	bl	8000e08 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800159a:	649a      	str	r2, [r3, #72]	@ 0x48
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <HAL_SPI_MspInit+0x2ec>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2105      	movs	r1, #5
 80015a6:	2024      	movs	r0, #36	@ 0x24
 80015a8:	f001 f86f 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015ac:	2024      	movs	r0, #36	@ 0x24
 80015ae:	f001 f888 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	@ 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40003800 	.word	0x40003800
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020400 	.word	0x40020400
 80015cc:	20000474 	.word	0x20000474
 80015d0:	40026058 	.word	0x40026058
 80015d4:	200004d4 	.word	0x200004d4
 80015d8:	40026070 	.word	0x40026070

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a25      	ldr	r2, [pc, #148]	@ (8001690 <HAL_UART_MspInit+0xb4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d144      	bne.n	8001688 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 8001608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_UART_MspInit+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001646:	2308      	movs	r3, #8
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <HAL_UART_MspInit+0xbc>)
 8001652:	f001 fc6d 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001668:	230b      	movs	r3, #11
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4809      	ldr	r0, [pc, #36]	@ (8001698 <HAL_UART_MspInit+0xbc>)
 8001674:	f001 fc5c 	bl	8002f30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2105      	movs	r1, #5
 800167c:	2034      	movs	r0, #52	@ 0x34
 800167e:	f001 f804 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001682:	2034      	movs	r0, #52	@ 0x34
 8001684:	f001 f81d 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40004c00 	.word	0x40004c00
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 f937 	bl	8001948 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016da:	f008 fa13 	bl	8009b04 <xTaskGetSchedulerState>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d001      	beq.n	80016e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016e4:	f009 f908 	bl	800a8f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA1_Stream0_IRQHandler+0x10>)
 80016f2:	f001 f999 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000184 	.word	0x20000184

08001700 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <DMA1_Stream2_IRQHandler+0x10>)
 8001706:	f001 f98f 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000244 	.word	0x20000244

08001714 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <DMA1_Stream3_IRQHandler+0x10>)
 800171a:	f001 f985 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000474 	.word	0x20000474

08001728 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <DMA1_Stream4_IRQHandler+0x10>)
 800172e:	f001 f97b 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200004d4 	.word	0x200004d4

0800173c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA1_Stream6_IRQHandler+0x10>)
 8001742:	f001 f971 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001e4 	.word	0x200001e4

08001750 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <CAN1_TX_IRQHandler+0x10>)
 8001756:	f000 fc84 	bl	8002062 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000b4 	.word	0x200000b4

08001764 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <CAN1_RX0_IRQHandler+0x10>)
 800176a:	f000 fc7a 	bl	8002062 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200000b4 	.word	0x200000b4

08001778 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <I2C1_EV_IRQHandler+0x10>)
 800177e:	f002 f85d 	bl	800383c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000dc 	.word	0x200000dc

0800178c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <I2C1_ER_IRQHandler+0x10>)
 8001792:	f002 f9c4 	bl	8003b1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000dc 	.word	0x200000dc

080017a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <I2C2_EV_IRQHandler+0x10>)
 80017a6:	f002 f849 	bl	800383c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000130 	.word	0x20000130

080017b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <SPI1_IRQHandler+0x10>)
 80017ba:	f004 ff27 	bl	800660c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000304 	.word	0x20000304

080017c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <SPI2_IRQHandler+0x10>)
 80017ce:	f004 ff1d 	bl	800660c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000035c 	.word	0x2000035c

080017dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Stream7_IRQHandler+0x10>)
 80017e2:	f001 f921 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002a4 	.word	0x200002a4

080017f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <UART4_IRQHandler+0x10>)
 80017f6:	f005 f9cb 	bl	8006b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000534 	.word	0x20000534

08001804 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA2_Stream0_IRQHandler+0x10>)
 800180a:	f001 f90d 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200003b4 	.word	0x200003b4

08001818 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA2_Stream3_IRQHandler+0x10>)
 800181e:	f001 f903 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000414 	.word	0x20000414

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	@ (8001890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	@ (800189c <LoopFillZerobss+0x26>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800187a:	f7ff ffd7 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f009 fad7 	bl	800ae30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7fe fedd 	bl	8000640 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001888:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001894:	0800b084 	.word	0x0800b084
  ldr r2, =_sbss
 8001898:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800189c:	20004ef8 	.word	0x20004ef8

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 fed1 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fadc 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fee9 	bl	80026de <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 feb1 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	200005a4 	.word	0x200005a4

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200005a4 	.word	0x200005a4

08001988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e033      	b.n	8001a06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff faa0 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019ce:	f023 0302 	bic.w	r3, r3, #2
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f94a 	bl	8001c74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1c>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e113      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x244>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d925      	bls.n	8001a88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b1e      	subs	r3, #30
 8001a52:	2207      	movs	r2, #7
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4403      	add	r3, r0
 8001a7a:	3b1e      	subs	r3, #30
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e022      	b.n	8001ace <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6919      	ldr	r1, [r3, #16]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4403      	add	r3, r0
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d824      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b05      	subs	r3, #5
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b05      	subs	r3, #5
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b1e:	e04c      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d824      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b23      	subs	r3, #35	@ 0x23
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b23      	subs	r3, #35	@ 0x23
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b70:	e023      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b41      	subs	r3, #65	@ 0x41
 8001b84:	221f      	movs	r2, #31
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b41      	subs	r3, #65	@ 0x41
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_ADC_ConfigChannel+0x250>)
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_ADC_ConfigChannel+0x254>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d10f      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d8>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d10b      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_ADC_ConfigChannel+0x254>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <HAL_ADC_ConfigChannel+0x258>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x1f4>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d122      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_ADC_ConfigChannel+0x258>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d111      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_ADC_ConfigChannel+0x25c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_ADC_ConfigChannel+0x260>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9a      	lsrs	r2, r3, #18
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40012300 	.word	0x40012300
 8001c64:	40012000 	.word	0x40012000
 8001c68:	10000012 	.word	0x10000012
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	431bde83 	.word	0x431bde83

08001c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	4b79      	ldr	r3, [pc, #484]	@ (8001e64 <ADC_Init+0x1f0>)
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	021a      	lsls	r2, r3, #8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <ADC_Init+0x1f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6899      	ldr	r1, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e00f      	b.n	8001d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0202 	bic.w	r2, r2, #2
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
 8001d8c:	005a      	lsls	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01b      	beq.n	8001dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	035a      	lsls	r2, r3, #13
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	e007      	b.n	8001de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	051a      	lsls	r2, r3, #20
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e2a:	025a      	lsls	r2, r3, #9
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	029a      	lsls	r2, r3, #10
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40012300 	.word	0x40012300
 8001e68:	0f000001 	.word	0x0f000001

08001e6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0ed      	b.n	800205a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff f872 	bl	8000f74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fd66 	bl	8001970 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea6:	e012      	b.n	8001ece <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea8:	f7ff fd62 	bl	8001970 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d90b      	bls.n	8001ece <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0c5      	b.n	800205a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0e5      	beq.n	8001ea8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0202 	bic.w	r2, r2, #2
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7ff fd40 	bl	8001970 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef2:	e012      	b.n	8001f1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef4:	f7ff fd3c 	bl	8001970 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b0a      	cmp	r3, #10
 8001f00:	d90b      	bls.n	8001f1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2205      	movs	r2, #5
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e09f      	b.n	800205a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e5      	bne.n	8001ef4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d108      	bne.n	8001f42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e007      	b.n	8001f52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7e5b      	ldrb	r3, [r3, #25]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d108      	bne.n	8001f6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e007      	b.n	8001f7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e9b      	ldrb	r3, [r3, #26]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e007      	b.n	8001fa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0220 	bic.w	r2, r2, #32
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7edb      	ldrb	r3, [r3, #27]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d108      	bne.n	8001fc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0210 	bic.w	r2, r2, #16
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e007      	b.n	8001fd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0210 	orr.w	r2, r2, #16
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7f1b      	ldrb	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d108      	bne.n	8001fea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e007      	b.n	8001ffa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7f5b      	ldrb	r3, [r3, #29]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0204 	orr.w	r2, r2, #4
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e007      	b.n	8002024 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	ea42 0103 	orr.w	r1, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b08a      	sub	sp, #40	@ 0x28
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d07c      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d023      	beq.n	80020fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f983 	bl	80023d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80020ca:	e016      	b.n	80020fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80020de:	e00c      	b.n	80020fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f2:	e002      	b.n	80020fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f989 	bl	800240c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d024      	beq.n	800214e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800210c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f963 	bl	80023e4 <HAL_CAN_TxMailbox1CompleteCallback>
 800211e:	e016      	b.n	800214e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
 8002132:	e00c      	b.n	800214e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	e002      	b.n	800214e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f969 	bl	8002420 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d024      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002160:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f943 	bl	80023f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002172:	e016      	b.n	80021a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
 8002186:	e00c      	b.n	80021a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
 800219a:	e002      	b.n	80021a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f949 	bl	8002434 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00c      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2210      	movs	r2, #16
 80021c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2208      	movs	r2, #8
 80021e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f93a 	bl	800245c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f921 	bl	8002448 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00c      	beq.n	800222a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2210      	movs	r2, #16
 8002228:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00b      	beq.n	800224c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f91c 	bl	8002484 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f903 	bl	8002470 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2210      	movs	r2, #16
 8002284:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f906 	bl	8002498 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2208      	movs	r2, #8
 80022a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8ff 	bl	80024ac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d07b      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d072      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d043      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03e      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002330:	2b60      	cmp	r3, #96	@ 0x60
 8002332:	d02b      	beq.n	800238c <HAL_CAN_IRQHandler+0x32a>
 8002334:	2b60      	cmp	r3, #96	@ 0x60
 8002336:	d82e      	bhi.n	8002396 <HAL_CAN_IRQHandler+0x334>
 8002338:	2b50      	cmp	r3, #80	@ 0x50
 800233a:	d022      	beq.n	8002382 <HAL_CAN_IRQHandler+0x320>
 800233c:	2b50      	cmp	r3, #80	@ 0x50
 800233e:	d82a      	bhi.n	8002396 <HAL_CAN_IRQHandler+0x334>
 8002340:	2b40      	cmp	r3, #64	@ 0x40
 8002342:	d019      	beq.n	8002378 <HAL_CAN_IRQHandler+0x316>
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d826      	bhi.n	8002396 <HAL_CAN_IRQHandler+0x334>
 8002348:	2b30      	cmp	r3, #48	@ 0x30
 800234a:	d010      	beq.n	800236e <HAL_CAN_IRQHandler+0x30c>
 800234c:	2b30      	cmp	r3, #48	@ 0x30
 800234e:	d822      	bhi.n	8002396 <HAL_CAN_IRQHandler+0x334>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d002      	beq.n	800235a <HAL_CAN_IRQHandler+0x2f8>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d005      	beq.n	8002364 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002358:	e01d      	b.n	8002396 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002362:	e019      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800236c:	e014      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	f043 0320 	orr.w	r3, r3, #32
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002376:	e00f      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002380:	e00a      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800238a:	e005      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002394:	e000      	b.n	8002398 <HAL_CAN_IRQHandler+0x336>
            break;
 8002396:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f87c 	bl	80024c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	@ (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	@ (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff f934 	bl	8001970 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e099      	b.n	8002848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	e00f      	b.n	8002756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002736:	f7ff f91b 	bl	8001970 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b05      	cmp	r3, #5
 8002742:	d908      	bls.n	8002756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e078      	b.n	8002848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4b38      	ldr	r3, [pc, #224]	@ (8002850 <HAL_DMA_Init+0x158>)
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d107      	bne.n	80027c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	4313      	orrs	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0307 	bic.w	r3, r3, #7
 80027d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d117      	bne.n	800281a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb1b 	bl	8002e38 <DMA_CheckFifoParam>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002816:	2301      	movs	r3, #1
 8002818:	e016      	b.n	8002848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fad2 	bl	8002dcc <DMA_CalcBaseAndBitshift>
 8002828:	4603      	mov	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	223f      	movs	r2, #63	@ 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	e010803f 	.word	0xe010803f

08002854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DMA_Start_IT+0x26>
 8002876:	2302      	movs	r3, #2
 8002878:	e040      	b.n	80028fc <HAL_DMA_Start_IT+0xa8>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d12f      	bne.n	80028ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa64 	bl	8002d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	223f      	movs	r2, #63	@ 0x3f
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0216 	orr.w	r2, r2, #22
 80028c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0208 	orr.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e005      	b.n	80028fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002912:	f7ff f82d 	bl	8001970 <HAL_GetTick>
 8002916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2280      	movs	r2, #128	@ 0x80
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e052      	b.n	80029dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0216 	bic.w	r2, r2, #22
 8002944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_DMA_Abort+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002986:	e013      	b.n	80029b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002988:	f7fe fff2 	bl	8001970 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b05      	cmp	r3, #5
 8002994:	d90c      	bls.n	80029b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e015      	b.n	80029dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e4      	bne.n	8002988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	223f      	movs	r2, #63	@ 0x3f
 80029c4:	409a      	lsls	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00c      	b.n	8002a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2205      	movs	r2, #5
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a34:	4b8e      	ldr	r3, [pc, #568]	@ (8002c70 <HAL_DMA_IRQHandler+0x248>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8e      	ldr	r2, [pc, #568]	@ (8002c74 <HAL_DMA_IRQHandler+0x24c>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	2208      	movs	r2, #8
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	2208      	movs	r2, #8
 8002a82:	409a      	lsls	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	2204      	movs	r2, #4
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	2204      	movs	r2, #4
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	2210      	movs	r2, #16
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d043      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03c      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	2210      	movs	r2, #16
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
 8002b56:	e01f      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e016      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8087 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d136      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x1da>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	223f      	movs	r2, #63	@ 0x3f
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d07e      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
        }
        return;
 8002c3e:	e079      	b.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d031      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e02c      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000
 8002c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01e      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d032      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d307      	bcc.n	8002d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f2      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x2cc>
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e000      	b.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d34:	bf00      	nop
    }
  }
}
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4a:	b2db      	uxtb	r3, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d108      	bne.n	8002db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dae:	e007      	b.n	8002dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3b10      	subs	r3, #16
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <DMA_CalcBaseAndBitshift+0x64>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de6:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <DMA_CalcBaseAndBitshift+0x68>)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d909      	bls.n	8002e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	1d1a      	adds	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e0c:	e007      	b.n	8002e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	aaaaaaab 	.word	0xaaaaaaab
 8002e34:	0800b06c 	.word	0x0800b06c

08002e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11f      	bne.n	8002e92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d856      	bhi.n	8002f06 <DMA_CheckFifoParam+0xce>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <DMA_CheckFifoParam+0x28>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e83 	.word	0x08002e83
 8002e68:	08002e71 	.word	0x08002e71
 8002e6c:	08002f07 	.word	0x08002f07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d046      	beq.n	8002f0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e80:	e043      	b.n	8002f0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e8a:	d140      	bne.n	8002f0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e03d      	b.n	8002f0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9a:	d121      	bne.n	8002ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d837      	bhi.n	8002f12 <DMA_CheckFifoParam+0xda>
 8002ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <DMA_CheckFifoParam+0x70>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ebf 	.word	0x08002ebf
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002ed1 	.word	0x08002ed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e030      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d025      	beq.n	8002f16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ece:	e022      	b.n	8002f16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ede:	e01c      	b.n	8002f1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d903      	bls.n	8002eee <DMA_CheckFifoParam+0xb6>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d003      	beq.n	8002ef4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eec:	e018      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef2:	e015      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e00b      	b.n	8002f1e <DMA_CheckFifoParam+0xe6>
      break;
 8002f06:	bf00      	nop
 8002f08:	e00a      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e008      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e006      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e165      	b.n	8003218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8154 	bne.w	8003212 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80ae 	beq.w	8003212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	4a5c      	ldr	r2, [pc, #368]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <HAL_GPIO_Init+0x300>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d2:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_GPIO_Init+0x304>)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003238 <HAL_GPIO_Init+0x308>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d025      	beq.n	800314a <HAL_GPIO_Init+0x21a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4e      	ldr	r2, [pc, #312]	@ (800323c <HAL_GPIO_Init+0x30c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <HAL_GPIO_Init+0x216>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <HAL_GPIO_Init+0x310>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x212>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4c      	ldr	r2, [pc, #304]	@ (8003244 <HAL_GPIO_Init+0x314>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x20e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4b      	ldr	r2, [pc, #300]	@ (8003248 <HAL_GPIO_Init+0x318>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x20a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4a      	ldr	r2, [pc, #296]	@ (800324c <HAL_GPIO_Init+0x31c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x206>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a49      	ldr	r2, [pc, #292]	@ (8003250 <HAL_GPIO_Init+0x320>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x202>
 800312e:	2306      	movs	r3, #6
 8003130:	e00c      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003132:	2307      	movs	r3, #7
 8003134:	e00a      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003136:	2305      	movs	r3, #5
 8003138:	e008      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800313a:	2304      	movs	r3, #4
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800313e:	2303      	movs	r3, #3
 8003140:	e004      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003142:	2302      	movs	r3, #2
 8003144:	e002      	b.n	800314c <HAL_GPIO_Init+0x21c>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x21c>
 800314a:	2300      	movs	r3, #0
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	4093      	lsls	r3, r2
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315c:	4935      	ldr	r1, [pc, #212]	@ (8003234 <HAL_GPIO_Init+0x304>)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_GPIO_Init+0x324>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800318e:	4a31      	ldr	r2, [pc, #196]	@ (8003254 <HAL_GPIO_Init+0x324>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003194:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <HAL_GPIO_Init+0x324>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b8:	4a26      	ldr	r2, [pc, #152]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_GPIO_Init+0x324>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <HAL_GPIO_Init+0x324>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	f67f ae96 	bls.w	8002f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40021400 	.word	0x40021400
 8003250:	40021800 	.word	0x40021800
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd feb6 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	@ 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f002 fc64 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	@ (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	@ (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	@ (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	@ (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	@ (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	@ (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	@ (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	@ 0x30
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7fe fa1f 	bl	8001970 <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b20      	cmp	r3, #32
 8003542:	f040 8176 	bne.w	8003832 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003546:	4b95      	ldr	r3, [pc, #596]	@ (800379c <HAL_I2C_Mem_Read_DMA+0x288>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	4a94      	ldr	r2, [pc, #592]	@ (80037a0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0a1a      	lsrs	r2, r3, #8
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3b01      	subs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e14c      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d0db      	beq.n	8003560 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Read_DMA+0xa2>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e13e      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2222      	movs	r2, #34	@ 0x22
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a62      	ldr	r2, [pc, #392]	@ (80037a4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800361e:	897a      	ldrh	r2, [r7, #10]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80cc 	beq.w	80037d8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02d      	beq.n	80036a4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_I2C_Mem_Read_DMA+0x294>)
 800364e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	4a55      	ldr	r2, [pc, #340]	@ (80037ac <HAL_I2C_Mem_Read_DMA+0x298>)
 8003656:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	2200      	movs	r2, #0
 8003666:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	2200      	movs	r2, #0
 800366e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	2200      	movs	r2, #0
 8003676:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3310      	adds	r3, #16
 8003682:	4619      	mov	r1, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	461a      	mov	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	f7ff f8e1 	bl	8002854 <HAL_DMA_Start_IT>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003698:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 8087 	bne.w	80037b0 <HAL_I2C_Mem_Read_DMA+0x29c>
 80036a2:	e013      	b.n	80036cc <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b3      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80036cc:	88f8      	ldrh	r0, [r7, #6]
 80036ce:	893a      	ldrh	r2, [r7, #8]
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2323      	movs	r3, #35	@ 0x23
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4603      	mov	r3, r0
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f001 fc7f 	bl	8004fe0 <I2C_RequestMemoryRead>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d023      	beq.n	8003730 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f979 	bl	80029e4 <HAL_DMA_Abort_IT>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	2200      	movs	r2, #0
 80036fe:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e081      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e007      	b.n	800375a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003758:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003786:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	e049      	b.n	800382e <HAL_I2C_Mem_Read_DMA+0x31a>
 800379a:	bf00      	nop
 800379c:	20000000 	.word	0x20000000
 80037a0:	14f8b589 	.word	0x14f8b589
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	080051b1 	.word	0x080051b1
 80037ac:	0800535b 	.word	0x0800535b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f043 0210 	orr.w	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e02d      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80037d8:	88f8      	ldrh	r0, [r7, #6]
 80037da:	893a      	ldrh	r2, [r7, #8]
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2323      	movs	r3, #35	@ 0x23
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4603      	mov	r3, r0
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f001 fbf9 	bl	8004fe0 <I2C_RequestMemoryRead>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01d      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	@ 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003864:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b10      	cmp	r3, #16
 800386a:	d003      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x38>
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	f040 80c1 	bne.w	80039f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <HAL_I2C_EV_IRQHandler+0x6e>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003894:	d003      	beq.n	800389e <HAL_I2C_EV_IRQHandler+0x62>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_EV_IRQHandler+0x66>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_I2C_EV_IRQHandler+0x68>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f000 8132 	beq.w	8003b0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x92>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	0a5b      	lsrs	r3, r3, #9
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 ffa8 	bl	8005816 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fd6f 	bl	80043aa <I2C_Master_SB>
 80038cc:	e092      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0xb2>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fde5 	bl	80044b6 <I2C_Master_ADD10>
 80038ec:	e082      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0xd2>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fdff 	bl	800450a <I2C_Master_ADDR>
 800390c:	e072      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03b      	beq.n	8003992 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003928:	f000 80f3 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00f      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f9e9 	bl	8003d28 <I2C_MasterTransmit_TXE>
 8003956:	e04d      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80d6 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	0a5b      	lsrs	r3, r3, #9
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80cf 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	2b21      	cmp	r3, #33	@ 0x21
 8003978:	d103      	bne.n	8003982 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa70 	bl	8003e60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003980:	e0c7      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	f040 80c4 	bne.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fade 	bl	8003f4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003990:	e0bf      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a0:	f000 80b7 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb53 	bl	8004074 <I2C_MasterReceive_RXNE>
 80039ce:	e011      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 809a 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	0a5b      	lsrs	r3, r3, #9
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8093 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fbf2 	bl	80041d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f2:	e08e      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039f4:	e08d      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e007      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x20e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	0a5b      	lsrs	r3, r3, #9
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 ffb0 	bl	80049a8 <I2C_Slave_ADDR>
 8003a48:	e066      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0x22e>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a5b      	lsrs	r3, r3, #9
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ffea 	bl	8004a3c <I2C_Slave_STOPF>
 8003a68:	e056      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a6a:	7bbb      	ldrb	r3, [r7, #14]
 8003a6c:	2b21      	cmp	r3, #33	@ 0x21
 8003a6e:	d002      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	2b29      	cmp	r3, #41	@ 0x29
 8003a74:	d125      	bne.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	09db      	lsrs	r3, r3, #7
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00f      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	0a9b      	lsrs	r3, r3, #10
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fec6 	bl	800482c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa0:	e039      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d033      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	0a5b      	lsrs	r3, r3, #9
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02d      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fef3 	bl	80048a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac0:	e029      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	0a9b      	lsrs	r3, r3, #10
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fefe 	bl	80048e8 <I2C_SlaveReceive_RXNE>
 8003aec:	e014      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0a5b      	lsrs	r3, r3, #9
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 ff2c 	bl	8004964 <I2C_SlaveReceive_BTF>
 8003b0c:	e004      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08a      	sub	sp, #40	@ 0x28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x4e>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	0a5b      	lsrs	r3, r3, #9
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x78>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003b94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	0a9b      	lsrs	r3, r3, #10
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03f      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d039      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003bae:	7efb      	ldrb	r3, [r7, #27]
 8003bb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bc8:	7ebb      	ldrb	r3, [r7, #26]
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d112      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b21      	cmp	r3, #33	@ 0x21
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b29      	cmp	r3, #41	@ 0x29
 8003bde:	d005      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xce>
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b28      	cmp	r3, #40	@ 0x28
 8003be4:	d106      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b21      	cmp	r3, #33	@ 0x21
 8003bea:	d103      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f855 	bl	8004c9c <I2C_Slave_AF>
 8003bf2:	e016      	b.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c06:	7efb      	ldrb	r3, [r7, #27]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c0c:	7efb      	ldrb	r3, [r7, #27]
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0adb      	lsrs	r3, r3, #11
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x12e>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 f88c 	bl	8004d7c <I2C_ITError>
  }
}
 8003c64:	bf00      	nop
 8003c66:	3728      	adds	r7, #40	@ 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d150      	bne.n	8003df0 <I2C_MasterTransmit_TXE+0xc8>
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b21      	cmp	r3, #33	@ 0x21
 8003d52:	d14d      	bne.n	8003df0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d01d      	beq.n	8003d96 <I2C_MasterTransmit_TXE+0x6e>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d01a      	beq.n	8003d96 <I2C_MasterTransmit_TXE+0x6e>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d66:	d016      	beq.n	8003d96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2211      	movs	r2, #17
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff6c 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d94:	e060      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003da4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d107      	bne.n	8003de0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff87 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dde:	e03b      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff3f 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dee:	e033      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b21      	cmp	r3, #33	@ 0x21
 8003df4:	d005      	beq.n	8003e02 <I2C_MasterTransmit_TXE+0xda>
 8003df6:	7bbb      	ldrb	r3, [r7, #14]
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d12d      	bne.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b22      	cmp	r3, #34	@ 0x22
 8003e00:	d12a      	bne.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d108      	bne.n	8003e1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e1c:	e01c      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b40      	cmp	r3, #64	@ 0x40
 8003e28:	d103      	bne.n	8003e32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f88e 	bl	8003f4c <I2C_MemoryTransmit_TXE_BTF>
}
 8003e30:	e012      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e56:	e7ff      	b.n	8003e58 <I2C_MasterTransmit_TXE+0x130>
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b21      	cmp	r3, #33	@ 0x21
 8003e78:	d164      	bne.n	8003f44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d012      	beq.n	8003eaa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ea8:	e04c      	b.n	8003f44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d01d      	beq.n	8003eec <I2C_MasterTransmit_BTF+0x8c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d01a      	beq.n	8003eec <I2C_MasterTransmit_BTF+0x8c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ebc:	d016      	beq.n	8003eec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ecc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2211      	movs	r2, #17
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fec1 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003eea:	e02b      	b.n	8003f44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003efa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b40      	cmp	r3, #64	@ 0x40
 8003f24:	d107      	bne.n	8003f36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fedc 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
}
 8003f34:	e006      	b.n	8003f44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe94 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11d      	bne.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10b      	bne.n	8003f84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f82:	e073      	b.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	121b      	asrs	r3, r3, #8
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f9e:	e065      	b.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10b      	bne.n	8003fc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fbe:	e055      	b.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d151      	bne.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b22      	cmp	r3, #34	@ 0x22
 8003fcc:	d10d      	bne.n	8003fea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fdc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fe8:	e040      	b.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b21      	cmp	r3, #33	@ 0x21
 8003ff8:	d112      	bne.n	8004020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800401e:	e025      	b.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d120      	bne.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b21      	cmp	r3, #33	@ 0x21
 800402e:	d11d      	bne.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800403e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fe40 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b22      	cmp	r3, #34	@ 0x22
 8004086:	f040 80a2 	bne.w	80041ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d921      	bls.n	80040dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	f040 8082 	bne.w	80041ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80040da:	e078      	b.n	80041ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d074      	beq.n	80041ce <I2C_MasterReceive_RXNE+0x15a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d002      	beq.n	80040f0 <I2C_MasterReceive_RXNE+0x7c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d16e      	bne.n	80041ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f001 fb2f 	bl	8005754 <I2C_WaitOnSTOPRequestThroughIT>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d142      	bne.n	8004182 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800411a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b40      	cmp	r3, #64	@ 0x40
 8004154:	d10a      	bne.n	800416c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc fe73 	bl	8000e50 <HAL_I2C_MemRxCpltCallback>
}
 800416a:	e030      	b.n	80041ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2212      	movs	r2, #18
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fd80 	bl	8003c80 <HAL_I2C_MasterRxCpltCallback>
}
 8004180:	e025      	b.n	80041ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004190:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fd99 	bl	8003d00 <HAL_I2C_ErrorCallback>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d11b      	bne.n	8004226 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004224:	e0bd      	b.n	80043a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d129      	bne.n	8004284 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d00a      	beq.n	800425c <I2C_MasterReceive_BTF+0x86>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d007      	beq.n	800425c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800425a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004282:	e08e      	b.n	80043a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d176      	bne.n	800437c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <I2C_MasterReceive_BTF+0xc4>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b10      	cmp	r3, #16
 8004298:	d108      	bne.n	80042ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e019      	b.n	80042e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d002      	beq.n	80042b8 <I2C_MasterReceive_BTF+0xe2>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d108      	bne.n	80042ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e00a      	b.n	80042e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d007      	beq.n	80042e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800433a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d10a      	bne.n	8004366 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fd76 	bl	8000e50 <HAL_I2C_MemRxCpltCallback>
}
 8004364:	e01d      	b.n	80043a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2212      	movs	r2, #18
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fc83 	bl	8003c80 <HAL_I2C_MasterRxCpltCallback>
}
 800437a:	e012      	b.n	80043a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d117      	bne.n	80043ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043d8:	e067      	b.n	80044aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]
}
 80043ec:	e05d      	b.n	80044aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f6:	d133      	bne.n	8004460 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b21      	cmp	r3, #33	@ 0x21
 8004402:	d109      	bne.n	8004418 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	e008      	b.n	800442a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <I2C_Master_SB+0x92>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d032      	beq.n	80044aa <I2C_Master_SB+0x100>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02d      	beq.n	80044aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445c:	605a      	str	r2, [r3, #4]
}
 800445e:	e024      	b.n	80044aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10e      	bne.n	8004486 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	b29b      	uxth	r3, r3
 800446e:	11db      	asrs	r3, r3, #7
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f063 030f 	orn	r3, r3, #15
 800447c:	b2da      	uxtb	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]
}
 8004484:	e011      	b.n	80044aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10d      	bne.n	80044aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	b29b      	uxth	r3, r3
 8004494:	11db      	asrs	r3, r3, #7
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0306 	and.w	r3, r3, #6
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f063 030e 	orn	r3, r3, #14
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <I2C_Master_ADD10+0x26>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <I2C_Master_ADD10+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044fc:	605a      	str	r2, [r3, #4]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b091      	sub	sp, #68	@ 0x44
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004518:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b22      	cmp	r3, #34	@ 0x22
 8004532:	f040 8169 	bne.w	8004808 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <I2C_Master_ADDR+0x54>
 800453e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d10b      	bne.n	800455e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	633b      	str	r3, [r7, #48]	@ 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	633b      	str	r3, [r7, #48]	@ 0x30
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	e160      	b.n	8004820 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11d      	bne.n	80045a2 <I2C_Master_ADDR+0x98>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800456e:	d118      	bne.n	80045a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004594:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	651a      	str	r2, [r3, #80]	@ 0x50
 80045a0:	e13e      	b.n	8004820 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d113      	bne.n	80045d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ac:	2300      	movs	r3, #0
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e115      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	f040 808a 	bne.w	80046f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045e6:	d137      	bne.n	8004658 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004606:	d113      	bne.n	8004630 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004616:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	e0e7      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e0d3      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	2b08      	cmp	r3, #8
 800465c:	d02e      	beq.n	80046bc <I2C_Master_ADDR+0x1b2>
 800465e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004660:	2b20      	cmp	r3, #32
 8004662:	d02b      	beq.n	80046bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004666:	2b12      	cmp	r3, #18
 8004668:	d102      	bne.n	8004670 <I2C_Master_ADDR+0x166>
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	2b01      	cmp	r3, #1
 800466e:	d125      	bne.n	80046bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00e      	beq.n	8004694 <I2C_Master_ADDR+0x18a>
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	2b02      	cmp	r3, #2
 800467a:	d00b      	beq.n	8004694 <I2C_Master_ADDR+0x18a>
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	2b10      	cmp	r3, #16
 8004680:	d008      	beq.n	8004694 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e007      	b.n	80046a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	e0a1      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e085      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d14d      	bne.n	800479a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	2b04      	cmp	r3, #4
 8004702:	d016      	beq.n	8004732 <I2C_Master_ADDR+0x228>
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	2b02      	cmp	r3, #2
 8004708:	d013      	beq.n	8004732 <I2C_Master_ADDR+0x228>
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	2b10      	cmp	r3, #16
 800470e:	d010      	beq.n	8004732 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e007      	b.n	8004742 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004740:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004750:	d117      	bne.n	8004782 <I2C_Master_ADDR+0x278>
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004758:	d00b      	beq.n	8004772 <I2C_Master_ADDR+0x268>
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d008      	beq.n	8004772 <I2C_Master_ADDR+0x268>
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	2b08      	cmp	r3, #8
 8004764:	d005      	beq.n	8004772 <I2C_Master_ADDR+0x268>
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	2b10      	cmp	r3, #16
 800476a:	d002      	beq.n	8004772 <I2C_Master_ADDR+0x268>
 800476c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476e:	2b20      	cmp	r3, #32
 8004770:	d107      	bne.n	8004782 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004780:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	e032      	b.n	8004800 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b8:	d117      	bne.n	80047ea <I2C_Master_ADDR+0x2e0>
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047c0:	d00b      	beq.n	80047da <I2C_Master_ADDR+0x2d0>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d008      	beq.n	80047da <I2C_Master_ADDR+0x2d0>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d005      	beq.n	80047da <I2C_Master_ADDR+0x2d0>
 80047ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d002      	beq.n	80047da <I2C_Master_ADDR+0x2d0>
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d107      	bne.n	80047ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004806:	e00b      	b.n	8004820 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	e7ff      	b.n	8004820 <I2C_Master_ADDR+0x316>
 8004820:	bf00      	nop
 8004822:	3744      	adds	r7, #68	@ 0x44
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02b      	beq.n	800489e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d114      	bne.n	800489e <I2C_SlaveTransmit_TXE+0x72>
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b29      	cmp	r3, #41	@ 0x29
 8004878:	d111      	bne.n	800489e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2221      	movs	r2, #33	@ 0x21
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2228      	movs	r2, #40	@ 0x28
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff f9fb 	bl	8003c94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d011      	beq.n	80048dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02c      	beq.n	800495c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d114      	bne.n	800495c <I2C_SlaveReceive_RXNE+0x74>
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b2a      	cmp	r3, #42	@ 0x2a
 8004936:	d111      	bne.n	800495c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004946:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2222      	movs	r2, #34	@ 0x22
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2228      	movs	r2, #40	@ 0x28
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff f9a6 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049c2:	2b28      	cmp	r3, #40	@ 0x28
 80049c4:	d127      	bne.n	8004a16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	81bb      	strh	r3, [r7, #12]
 80049f8:	e002      	b.n	8004a00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a08:	89ba      	ldrh	r2, [r7, #12]
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff f954 	bl	8003cbc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a14:	e00e      	b.n	8004a34 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d172      	bne.n	8004b80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b22      	cmp	r3, #34	@ 0x22
 8004a9e:	d002      	beq.n	8004aa6 <I2C_Slave_STOPF+0x6a>
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aa4:	d135      	bne.n	8004b12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f043 0204 	orr.w	r2, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe f92c 	bl	8002d3c <HAL_DMA_GetState>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d049      	beq.n	8004b7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	4a69      	ldr	r2, [pc, #420]	@ (8004c94 <I2C_Slave_STOPF+0x258>)
 8004af0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd ff74 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03d      	beq.n	8004b7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b10:	e035      	b.n	8004b7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f043 0204 	orr.w	r2, r3, #4
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f8f6 	bl	8002d3c <HAL_DMA_GetState>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d014      	beq.n	8004b80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c94 <I2C_Slave_STOPF+0x258>)
 8004b5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fd ff3e 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4798      	blx	r3
 8004b7c:	e000      	b.n	8004b80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d03e      	beq.n	8004c08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d112      	bne.n	8004bbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d112      	bne.n	8004bf2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8b3 	bl	8004d7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c16:	e039      	b.n	8004c8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1c:	d109      	bne.n	8004c32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2228      	movs	r2, #40	@ 0x28
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff f83b 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b28      	cmp	r3, #40	@ 0x28
 8004c3c:	d111      	bne.n	8004c62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a15      	ldr	r2, [pc, #84]	@ (8004c98 <I2C_Slave_STOPF+0x25c>)
 8004c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff f83c 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
}
 8004c60:	e014      	b.n	8004c8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	2b22      	cmp	r3, #34	@ 0x22
 8004c68:	d002      	beq.n	8004c70 <I2C_Slave_STOPF+0x234>
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	d10d      	bne.n	8004c8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff f80e 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	080053d5 	.word	0x080053d5
 8004c98:	ffff0000 	.word	0xffff0000

08004c9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d002      	beq.n	8004cbe <I2C_Slave_AF+0x22>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d129      	bne.n	8004d12 <I2C_Slave_AF+0x76>
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b28      	cmp	r3, #40	@ 0x28
 8004cc2:	d126      	bne.n	8004d12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <I2C_Slave_AF+0xdc>)
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cd8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ce2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe ffe4 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d10:	e02e      	b.n	8004d70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b21      	cmp	r3, #33	@ 0x21
 8004d16:	d126      	bne.n	8004d66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <I2C_Slave_AF+0xdc>)
 8004d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2221      	movs	r2, #33	@ 0x21
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe ff98 	bl	8003c94 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d64:	e004      	b.n	8004d70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d6e:	615a      	str	r2, [r3, #20]
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	ffff0000 	.word	0xffff0000

08004d7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d002      	beq.n	8004da0 <I2C_ITError+0x24>
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	d10a      	bne.n	8004db6 <I2C_ITError+0x3a>
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b22      	cmp	r3, #34	@ 0x22
 8004da4:	d107      	bne.n	8004db6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dbc:	2b28      	cmp	r3, #40	@ 0x28
 8004dbe:	d107      	bne.n	8004dd0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2228      	movs	r2, #40	@ 0x28
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dce:	e015      	b.n	8004dfc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dde:	d00a      	beq.n	8004df6 <I2C_ITError+0x7a>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b60      	cmp	r3, #96	@ 0x60
 8004de4:	d007      	beq.n	8004df6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e0a:	d162      	bne.n	8004ed2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e1a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d020      	beq.n	8004e6c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2e:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd8 <I2C_ITError+0x25c>)
 8004e30:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd fdd4 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8089 	beq.w	8004f56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e66:	4610      	mov	r0, r2
 8004e68:	4798      	blx	r3
 8004e6a:	e074      	b.n	8004f56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	4a59      	ldr	r2, [pc, #356]	@ (8004fd8 <I2C_ITError+0x25c>)
 8004e72:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd fdb3 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d068      	beq.n	8004f56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8e:	2b40      	cmp	r3, #64	@ 0x40
 8004e90:	d10b      	bne.n	8004eaa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
 8004ed0:	e041      	b.n	8004f56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b60      	cmp	r3, #96	@ 0x60
 8004edc:	d125      	bne.n	8004f2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d10b      	bne.n	8004f12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fe fef6 	bl	8003d14 <HAL_I2C_AbortCpltCallback>
 8004f28:	e015      	b.n	8004f56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d10b      	bne.n	8004f50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fe fed5 	bl	8003d00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10e      	bne.n	8004f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d113      	bne.n	8004fd0 <I2C_ITError+0x254>
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b28      	cmp	r3, #40	@ 0x28
 8004fac:	d110      	bne.n	8004fd0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004fdc <I2C_ITError+0x260>)
 8004fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe fe84 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	080053d5 	.word	0x080053d5
 8004fdc:	ffff0000 	.word	0xffff0000

08004fe0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	813b      	strh	r3, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005008:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2200      	movs	r2, #0
 8005022:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fa7c 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005040:	d103      	bne.n	800504a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0aa      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800505c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	6a3a      	ldr	r2, [r7, #32]
 8005062:	4952      	ldr	r1, [pc, #328]	@ (80051ac <I2C_RequestMemoryRead+0x1cc>)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fab4 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e097      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	6a39      	ldr	r1, [r7, #32]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fb1e 	bl	80056d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d107      	bne.n	80050b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e076      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050bc:	893b      	ldrh	r3, [r7, #8]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]
 80050c6:	e021      	b.n	800510c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c8:	893b      	ldrh	r3, [r7, #8]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 faf8 	bl	80056d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d107      	bne.n	80050fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e050      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510e:	6a39      	ldr	r1, [r7, #32]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fadd 	bl	80056d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	2b04      	cmp	r3, #4
 8005122:	d107      	bne.n	8005134 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005132:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e035      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005146:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2200      	movs	r2, #0
 8005150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f9e5 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516e:	d103      	bne.n	8005178 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e013      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	4906      	ldr	r1, [pc, #24]	@ (80051ac <I2C_RequestMemoryRead+0x1cc>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa1d 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	00010002 	.word	0x00010002

080051b0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051cc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051e2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f0:	2200      	movs	r2, #0
 80051f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2200      	movs	r2, #0
 8005202:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800520a:	2b21      	cmp	r3, #33	@ 0x21
 800520c:	d007      	beq.n	800521e <I2C_DMAXferCplt+0x6e>
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005214:	2b22      	cmp	r3, #34	@ 0x22
 8005216:	d131      	bne.n	800527c <I2C_DMAXferCplt+0xcc>
 8005218:	7cbb      	ldrb	r3, [r7, #18]
 800521a:	2b20      	cmp	r3, #32
 800521c:	d12e      	bne.n	800527c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	2b29      	cmp	r3, #41	@ 0x29
 8005238:	d10a      	bne.n	8005250 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2221      	movs	r2, #33	@ 0x21
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2228      	movs	r2, #40	@ 0x28
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f7fe fd23 	bl	8003c94 <HAL_I2C_SlaveTxCpltCallback>
 800524e:	e00c      	b.n	800526a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b2a      	cmp	r3, #42	@ 0x2a
 8005254:	d109      	bne.n	800526a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2222      	movs	r2, #34	@ 0x22
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2228      	movs	r2, #40	@ 0x28
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005264:	6978      	ldr	r0, [r7, #20]
 8005266:	f7fe fd1f 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005278:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800527a:	e06a      	b.n	8005352 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d064      	beq.n	8005352 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80052b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b8:	d009      	beq.n	80052ce <I2C_DMAXferCplt+0x11e>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d006      	beq.n	80052ce <I2C_DMAXferCplt+0x11e>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80052c6:	d002      	beq.n	80052ce <I2C_DMAXferCplt+0x11e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d107      	bne.n	80052de <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052ec:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052fc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800530c:	6978      	ldr	r0, [r7, #20]
 800530e:	f7fe fcf7 	bl	8003d00 <HAL_I2C_ErrorCallback>
}
 8005312:	e01e      	b.n	8005352 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d10a      	bne.n	800533e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f7fb fd8a 	bl	8000e50 <HAL_I2C_MemRxCpltCallback>
}
 800533c:	e009      	b.n	8005352 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2212      	movs	r2, #18
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f7fe fc97 	bl	8003c80 <HAL_I2C_MasterRxCpltCallback>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005374:	2200      	movs	r2, #0
 8005376:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fd fce5 	bl	8002d58 <HAL_DMA_GetError>
 800538e:	4603      	mov	r3, r0
 8005390:	2b02      	cmp	r3, #2
 8005392:	d01b      	beq.n	80053cc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f043 0210 	orr.w	r2, r3, #16
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7fe fc9a 	bl	8003d00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ee:	4b4b      	ldr	r3, [pc, #300]	@ (800551c <I2C_DMAAbort+0x148>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	08db      	lsrs	r3, r3, #3
 80053f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005520 <I2C_DMAAbort+0x14c>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	0a1a      	lsrs	r2, r3, #8
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	00da      	lsls	r2, r3, #3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800541a:	e00a      	b.n	8005432 <I2C_DMAAbort+0x5e>
    }
    count--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800542c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005430:	d0ea      	beq.n	8005408 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543e:	2200      	movs	r2, #0
 8005440:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005460:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	2200      	movs	r2, #0
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	2200      	movs	r2, #0
 8005486:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b60      	cmp	r3, #96	@ 0x60
 80054a2:	d10e      	bne.n	80054c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7fe fc2a 	bl	8003d14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054c0:	e027      	b.n	8005512 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80054c8:	2b28      	cmp	r3, #40	@ 0x28
 80054ca:	d117      	bne.n	80054fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2228      	movs	r2, #40	@ 0x28
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80054fa:	e007      	b.n	800550c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800550c:	6978      	ldr	r0, [r7, #20]
 800550e:	f7fe fbf7 	bl	8003d00 <HAL_I2C_ErrorCallback>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000
 8005520:	14f8b589 	.word	0x14f8b589

08005524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005534:	e025      	b.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d021      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fc fa17 	bl	8001970 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e023      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10d      	bne.n	80055a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	e00c      	b.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0b6      	beq.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e0:	e051      	b.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f0:	d123      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800560a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e046      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d021      	beq.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc f995 	bl	8001970 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e020      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10c      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	43da      	mvns	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e00b      	b.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	43da      	mvns	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d18d      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056dc:	e02d      	b.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f86a 	bl	80057b8 <I2C_IsAcknowledgeFailed>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d021      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fc f93b 	bl	8001970 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e007      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	d1ca      	bne.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005760:	4b13      	ldr	r3, [pc, #76]	@ (80057b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	0a1a      	lsrs	r2, r3, #8
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b01      	subs	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e008      	b.n	80057a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800579c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a0:	d0e9      	beq.n	8005776 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000000 	.word	0x20000000
 80057b4:	14f8b589 	.word	0x14f8b589

080057b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ce:	d11b      	bne.n	8005808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f043 0204 	orr.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005826:	d103      	bne.n	8005830 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800582e:	e007      	b.n	8005840 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005838:	d102      	bne.n	8005840 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2208      	movs	r2, #8
 800583e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0cc      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005860:	4b68      	ldr	r3, [pc, #416]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d90c      	bls.n	8005888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586e:	4b65      	ldr	r3, [pc, #404]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b63      	ldr	r3, [pc, #396]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0b8      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a0:	4b59      	ldr	r3, [pc, #356]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a58      	ldr	r2, [pc, #352]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b8:	4b53      	ldr	r3, [pc, #332]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4a52      	ldr	r2, [pc, #328]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c4:	4b50      	ldr	r3, [pc, #320]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	494d      	ldr	r1, [pc, #308]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d044      	beq.n	800596c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d119      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d003      	beq.n	800590a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005906:	2b03      	cmp	r3, #3
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e06f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e067      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800592a:	4b37      	ldr	r3, [pc, #220]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0203 	bic.w	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4934      	ldr	r1, [pc, #208]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800593c:	f7fc f818 	bl	8001970 <HAL_GetTick>
 8005940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005942:	e00a      	b.n	800595a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005944:	f7fc f814 	bl	8001970 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e04f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 020c 	and.w	r2, r3, #12
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	429a      	cmp	r2, r3
 800596a:	d1eb      	bne.n	8005944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800596c:	4b25      	ldr	r3, [pc, #148]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d20c      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b22      	ldr	r3, [pc, #136]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b20      	ldr	r3, [pc, #128]	@ (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e032      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4916      	ldr	r1, [pc, #88]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059be:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	490e      	ldr	r1, [pc, #56]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059d2:	f000 f821 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	490a      	ldr	r1, [pc, #40]	@ (8005a0c <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ea:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <HAL_RCC_ClockConfig+0x1c4>)
 80059ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_RCC_ClockConfig+0x1c8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fb ff78 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023c00 	.word	0x40023c00
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	0800b054 	.word	0x0800b054
 8005a10:	20000000 	.word	0x20000000
 8005a14:	20000004 	.word	0x20000004

08005a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b090      	sub	sp, #64	@ 0x40
 8005a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a28:	2300      	movs	r3, #0
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a30:	4b59      	ldr	r3, [pc, #356]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d00d      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x40>
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	f200 80a1 	bhi.w	8005b84 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x34>
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a4a:	e09b      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a4c:	4b53      	ldr	r3, [pc, #332]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005a50:	e09b      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a52:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a56:	e098      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a58:	4b4f      	ldr	r3, [pc, #316]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a60:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a62:	4b4d      	ldr	r3, [pc, #308]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	2200      	movs	r2, #0
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a80:	2100      	movs	r1, #0
 8005a82:	4b47      	ldr	r3, [pc, #284]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a84:	fb03 f201 	mul.w	r2, r3, r1
 8005a88:	2300      	movs	r3, #0
 8005a8a:	fb00 f303 	mul.w	r3, r0, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	4a43      	ldr	r2, [pc, #268]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a92:	fba0 1202 	umull	r1, r2, r0, r2
 8005a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a98:	460a      	mov	r2, r1
 8005a9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a9e:	4413      	add	r3, r2
 8005aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	61fa      	str	r2, [r7, #28]
 8005aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005ab2:	f7fa fbb5 	bl	8000220 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4613      	mov	r3, r2
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005abe:	e053      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac0:	4b35      	ldr	r3, [pc, #212]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	617a      	str	r2, [r7, #20]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ad2:	f04f 0b00 	mov.w	fp, #0
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	465b      	mov	r3, fp
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	0159      	lsls	r1, r3, #5
 8005ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae8:	0150      	lsls	r0, r2, #5
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	ebb2 080a 	subs.w	r8, r2, sl
 8005af2:	eb63 090b 	sbc.w	r9, r3, fp
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b0a:	ebb2 0408 	subs.w	r4, r2, r8
 8005b0e:	eb63 0509 	sbc.w	r5, r3, r9
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	00eb      	lsls	r3, r5, #3
 8005b1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b20:	00e2      	lsls	r2, r4, #3
 8005b22:	4614      	mov	r4, r2
 8005b24:	461d      	mov	r5, r3
 8005b26:	eb14 030a 	adds.w	r3, r4, sl
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	eb45 030b 	adc.w	r3, r5, fp
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b3e:	4629      	mov	r1, r5
 8005b40:	028b      	lsls	r3, r1, #10
 8005b42:	4621      	mov	r1, r4
 8005b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b48:	4621      	mov	r1, r4
 8005b4a:	028a      	lsls	r2, r1, #10
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	2200      	movs	r2, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	60fa      	str	r2, [r7, #12]
 8005b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b5c:	f7fa fb60 	bl	8000220 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4613      	mov	r3, r2
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b68:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	3301      	adds	r3, #1
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005b78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b82:	e002      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b84:	4b05      	ldr	r3, [pc, #20]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3740      	adds	r7, #64	@ 0x40
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	00f42400 	.word	0x00f42400
 8005ba0:	017d7840 	.word	0x017d7840

08005ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	@ (8005bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20000000 	.word	0x20000000

08005bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bc0:	f7ff fff0 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0a9b      	lsrs	r3, r3, #10
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4903      	ldr	r1, [pc, #12]	@ (8005be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800b064 	.word	0x0800b064

08005be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005be8:	f7ff ffdc 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	0b5b      	lsrs	r3, r3, #13
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4903      	ldr	r1, [pc, #12]	@ (8005c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40023800 	.word	0x40023800
 8005c08:	0800b064 	.word	0x0800b064

08005c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e273      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d075      	beq.n	8005d16 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c2a:	4b88      	ldr	r3, [pc, #544]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c36:	4b85      	ldr	r3, [pc, #532]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d112      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c42:	4b82      	ldr	r3, [pc, #520]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	4b7e      	ldr	r3, [pc, #504]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05b      	beq.n	8005d14 <HAL_RCC_OscConfig+0x108>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d157      	bne.n	8005d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e24e      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c70:	d106      	bne.n	8005c80 <HAL_RCC_OscConfig+0x74>
 8005c72:	4b76      	ldr	r3, [pc, #472]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xb0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x98>
 8005c8a:	4b70      	ldr	r3, [pc, #448]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b6d      	ldr	r3, [pc, #436]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xb0>
 8005ca4:	4b69      	ldr	r3, [pc, #420]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a68      	ldr	r2, [pc, #416]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a65      	ldr	r2, [pc, #404]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fb fe54 	bl	8001970 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fb fe50 	bl	8001970 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e213      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b5b      	ldr	r3, [pc, #364]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xc0>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fb fe40 	bl	8001970 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fb fe3c 	bl	8001970 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	@ 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1ff      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	4b51      	ldr	r3, [pc, #324]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0xe8>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d063      	beq.n	8005dea <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d22:	4b4a      	ldr	r3, [pc, #296]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2e:	4b47      	ldr	r3, [pc, #284]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d11c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3a:	4b44      	ldr	r3, [pc, #272]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	4b41      	ldr	r3, [pc, #260]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_RCC_OscConfig+0x152>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1d3      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4937      	ldr	r1, [pc, #220]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	e03a      	b.n	8005dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d020      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d7c:	4b34      	ldr	r3, [pc, #208]	@ (8005e50 <HAL_RCC_OscConfig+0x244>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d82:	f7fb fdf5 	bl	8001970 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8a:	f7fb fdf1 	bl	8001970 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e1b4      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da8:	4b28      	ldr	r3, [pc, #160]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4925      	ldr	r1, [pc, #148]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]
 8005dbc:	e015      	b.n	8005dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dbe:	4b24      	ldr	r3, [pc, #144]	@ (8005e50 <HAL_RCC_OscConfig+0x244>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fb fdd4 	bl	8001970 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dcc:	f7fb fdd0 	bl	8001970 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e193      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d036      	beq.n	8005e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfe:	4b15      	ldr	r3, [pc, #84]	@ (8005e54 <HAL_RCC_OscConfig+0x248>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e04:	f7fb fdb4 	bl	8001970 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0c:	f7fb fdb0 	bl	8001970 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e173      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCC_OscConfig+0x240>)
 8005e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0x200>
 8005e2a:	e01b      	b.n	8005e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e2c:	4b09      	ldr	r3, [pc, #36]	@ (8005e54 <HAL_RCC_OscConfig+0x248>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e32:	f7fb fd9d 	bl	8001970 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e38:	e00e      	b.n	8005e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3a:	f7fb fd99 	bl	8001970 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d907      	bls.n	8005e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e15c      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	42470000 	.word	0x42470000
 8005e54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e58:	4b8a      	ldr	r3, [pc, #552]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ea      	bne.n	8005e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8097 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e76:	4b83      	ldr	r3, [pc, #524]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10f      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	4b7f      	ldr	r3, [pc, #508]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e92:	4b7c      	ldr	r3, [pc, #496]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea2:	4b79      	ldr	r3, [pc, #484]	@ (8006088 <HAL_RCC_OscConfig+0x47c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d118      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eae:	4b76      	ldr	r3, [pc, #472]	@ (8006088 <HAL_RCC_OscConfig+0x47c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a75      	ldr	r2, [pc, #468]	@ (8006088 <HAL_RCC_OscConfig+0x47c>)
 8005eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eba:	f7fb fd59 	bl	8001970 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec2:	f7fb fd55 	bl	8001970 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e118      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8006088 <HAL_RCC_OscConfig+0x47c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x2ea>
 8005ee8:	4b66      	ldr	r3, [pc, #408]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eec:	4a65      	ldr	r2, [pc, #404]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef4:	e01c      	b.n	8005f30 <HAL_RCC_OscConfig+0x324>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x30c>
 8005efe:	4b61      	ldr	r3, [pc, #388]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	4a60      	ldr	r2, [pc, #384]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f04:	f043 0304 	orr.w	r3, r3, #4
 8005f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f16:	e00b      	b.n	8005f30 <HAL_RCC_OscConfig+0x324>
 8005f18:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1c:	4a59      	ldr	r2, [pc, #356]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f24:	4b57      	ldr	r3, [pc, #348]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f28:	4a56      	ldr	r2, [pc, #344]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f2a:	f023 0304 	bic.w	r3, r3, #4
 8005f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d015      	beq.n	8005f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fb fd1a 	bl	8001970 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fb fd16 	bl	8001970 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0d7      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f56:	4b4b      	ldr	r3, [pc, #300]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0ee      	beq.n	8005f40 <HAL_RCC_OscConfig+0x334>
 8005f62:	e014      	b.n	8005f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fb fd04 	bl	8001970 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6c:	f7fb fd00 	bl	8001970 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0c1      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f82:	4b40      	ldr	r3, [pc, #256]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1ee      	bne.n	8005f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f94:	4b3b      	ldr	r3, [pc, #236]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	4a3a      	ldr	r2, [pc, #232]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80ad 	beq.w	8006104 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005faa:	4b36      	ldr	r3, [pc, #216]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d060      	beq.n	8006078 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d145      	bne.n	800604a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbe:	4b33      	ldr	r3, [pc, #204]	@ (800608c <HAL_RCC_OscConfig+0x480>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fb fcd4 	bl	8001970 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fb fcd0 	bl	8001970 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e093      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	4b29      	ldr	r3, [pc, #164]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69da      	ldr	r2, [r3, #28]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	3b01      	subs	r3, #1
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	061b      	lsls	r3, r3, #24
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	071b      	lsls	r3, r3, #28
 8006016:	491b      	ldr	r1, [pc, #108]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601c:	4b1b      	ldr	r3, [pc, #108]	@ (800608c <HAL_RCC_OscConfig+0x480>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fb fca5 	bl	8001970 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602a:	f7fb fca1 	bl	8001970 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e064      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603c:	4b11      	ldr	r3, [pc, #68]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x41e>
 8006048:	e05c      	b.n	8006104 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_RCC_OscConfig+0x480>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fb fc8e 	bl	8001970 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006058:	f7fb fc8a 	bl	8001970 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e04d      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <HAL_RCC_OscConfig+0x478>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x44c>
 8006076:	e045      	b.n	8006104 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e040      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
 8006084:	40023800 	.word	0x40023800
 8006088:	40007000 	.word	0x40007000
 800608c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006090:	4b1f      	ldr	r3, [pc, #124]	@ (8006110 <HAL_RCC_OscConfig+0x504>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d030      	beq.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d129      	bne.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d122      	bne.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d119      	bne.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	3b01      	subs	r3, #1
 80060da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d10f      	bne.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d107      	bne.n	8006100 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40023800 	.word	0x40023800

08006114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07b      	b.n	800621e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006136:	d009      	beq.n	800614c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
 800613e:	e005      	b.n	800614c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb f8be 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0104 	and.w	r1, r3, #4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	f003 0210 	and.w	r2, r3, #16
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800620c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SPI_Transmit+0x22>
 8006244:	2302      	movs	r3, #2
 8006246:	e126      	b.n	8006496 <HAL_SPI_Transmit+0x270>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006250:	f7fb fb8e 	bl	8001970 <HAL_GetTick>
 8006254:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d002      	beq.n	800626c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	77fb      	strb	r3, [r7, #31]
    goto error;
 800626a:	e10b      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Transmit+0x52>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800627c:	e102      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c4:	d10f      	bne.n	80062e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b40      	cmp	r3, #64	@ 0x40
 80062f2:	d007      	beq.n	8006304 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800630c:	d14b      	bne.n	80063a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_Transmit+0xf6>
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d13e      	bne.n	800639a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006340:	e02b      	b.n	800639a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d112      	bne.n	8006376 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006374:	e011      	b.n	800639a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006376:	f7fb fafb 	bl	8001970 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d803      	bhi.n	800638e <HAL_SPI_Transmit+0x168>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d102      	bne.n	8006394 <HAL_SPI_Transmit+0x16e>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006398:	e074      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ce      	bne.n	8006342 <HAL_SPI_Transmit+0x11c>
 80063a4:	e04c      	b.n	8006440 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x18e>
 80063ae:	8afb      	ldrh	r3, [r7, #22]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d140      	bne.n	8006436 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063da:	e02c      	b.n	8006436 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d113      	bne.n	8006412 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006410:	e011      	b.n	8006436 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006412:	f7fb faad 	bl	8001970 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d803      	bhi.n	800642a <HAL_SPI_Transmit+0x204>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Transmit+0x20a>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006434:	e026      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1cd      	bne.n	80063dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fb13 	bl	8006a70 <SPI_EndRxTxTransaction>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e000      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006494:	7ffb      	ldrb	r3, [r7, #31]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_SPI_Transmit_DMA+0x20>
 80064bc:	2302      	movs	r3, #2
 80064be:	e09b      	b.n	80065f8 <HAL_SPI_Transmit_DMA+0x158>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d002      	beq.n	80064da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
 80064d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064d8:	e089      	b.n	80065ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_SPI_Transmit_DMA+0x46>
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064ea:	e080      	b.n	80065ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2203      	movs	r2, #3
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006532:	d10f      	bne.n	8006554 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006542:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006558:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <HAL_SPI_Transmit_DMA+0x160>)
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006560:	4a28      	ldr	r2, [pc, #160]	@ (8006604 <HAL_SPI_Transmit_DMA+0x164>)
 8006562:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006568:	4a27      	ldr	r2, [pc, #156]	@ (8006608 <HAL_SPI_Transmit_DMA+0x168>)
 800656a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006570:	2200      	movs	r2, #0
 8006572:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	4619      	mov	r1, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800658c:	f7fc f962 	bl	8002854 <HAL_DMA_Start_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659a:	f043 0210 	orr.w	r2, r3, #16
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80065ae:	e01e      	b.n	80065ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ba:	2b40      	cmp	r3, #64	@ 0x40
 80065bc:	d007      	beq.n	80065ce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065cc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0220 	orr.w	r2, r2, #32
 80065dc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0202 	orr.w	r2, r2, #2
 80065ec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	080068dd 	.word	0x080068dd
 8006604:	08006835 	.word	0x08006835
 8006608:	080068f9 	.word	0x080068f9

0800660c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
    return;
 800664e:	e0d7      	b.n	8006800 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <HAL_SPI_IRQHandler+0x66>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
    return;
 8006670:	e0c6      	b.n	8006800 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <HAL_SPI_IRQHandler+0x8c>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	099b      	lsrs	r3, r3, #6
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80b4 	beq.w	8006800 <HAL_SPI_IRQHandler+0x1f4>
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80ad 	beq.w	8006800 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	099b      	lsrs	r3, r3, #6
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d023      	beq.n	80066fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d011      	beq.n	80066e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	e00b      	b.n	80066fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	693b      	ldr	r3, [r7, #16]
        return;
 80066f8:	e082      	b.n	8006800 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d014      	beq.n	8006730 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	f043 0208 	orr.w	r2, r3, #8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]
 8006754:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	2b00      	cmp	r3, #0
 800675c:	d04f      	beq.n	80067fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800676c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <HAL_SPI_IRQHandler+0x17e>
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d034      	beq.n	80067f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0203 	bic.w	r2, r2, #3
 8006798:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a6:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <HAL_SPI_IRQHandler+0x1fc>)
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fc f918 	bl	80029e4 <HAL_DMA_Abort_IT>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d016      	beq.n	80067fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006808 <HAL_SPI_IRQHandler+0x1fc>)
 80067d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fc f902 	bl	80029e4 <HAL_DMA_Abort_IT>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80067f2:	e003      	b.n	80067fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f813 	bl	8006820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067fa:	e000      	b.n	80067fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067fc:	bf00      	nop
    return;
 80067fe:	bf00      	nop
  }
}
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	08006939 	.word	0x08006939

0800680c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006842:	f7fb f895 	bl	8001970 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006856:	d03b      	beq.n	80068d0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0220 	bic.w	r2, r2, #32
 8006866:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0202 	bic.w	r2, r2, #2
 8006876:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	2164      	movs	r1, #100	@ 0x64
 800687c:	6978      	ldr	r0, [r7, #20]
 800687e:	f000 f8f7 	bl	8006a70 <SPI_EndRxTxTransaction>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688c:	f043 0220 	orr.w	r2, r3, #32
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2200      	movs	r2, #0
 80068b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068c8:	6978      	ldr	r0, [r7, #20]
 80068ca:	f7ff ffa9 	bl	8006820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068ce:	e002      	b.n	80068d6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f7f9 fe3b 	bl	800054c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ff8e 	bl	800680c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0203 	bic.w	r2, r2, #3
 8006914:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	f043 0210 	orr.w	r2, r3, #16
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff ff78 	bl	8006820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ff64 	bl	8006820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006970:	f7fa fffe 	bl	8001970 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	4413      	add	r3, r2
 800697e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006980:	f7fa fff6 	bl	8001970 <HAL_GetTick>
 8006984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006986:	4b39      	ldr	r3, [pc, #228]	@ (8006a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	015b      	lsls	r3, r3, #5
 800698c:	0d1b      	lsrs	r3, r3, #20
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006996:	e054      	b.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d050      	beq.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069a0:	f7fa ffe6 	bl	8001970 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d902      	bls.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d13d      	bne.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069ce:	d111      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d8:	d004      	beq.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e2:	d107      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fc:	d10f      	bne.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e017      	b.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d19b      	bne.n	8006998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000000 	.word	0x20000000

08006a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <SPI_EndRxTxTransaction+0x7c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1b      	ldr	r2, [pc, #108]	@ (8006af0 <SPI_EndRxTxTransaction+0x80>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	0d5b      	lsrs	r3, r3, #21
 8006a88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a9a:	d112      	bne.n	8006ac2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2180      	movs	r1, #128	@ 0x80
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff ff5a 	bl	8006960 <SPI_WaitFlagStateUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab6:	f043 0220 	orr.w	r2, r3, #32
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e00f      	b.n	8006ae2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad8:	2b80      	cmp	r3, #128	@ 0x80
 8006ada:	d0f2      	beq.n	8006ac2 <SPI_EndRxTxTransaction+0x52>
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ade:	bf00      	nop
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000000 	.word	0x20000000
 8006af0:	165e9f81 	.word	0x165e9f81

08006af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e03f      	b.n	8006b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa fd5e 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fc7b 	bl	8007434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0ba      	sub	sp, #232	@ 0xe8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fb65 	bl	80072be <UART_Receive_IT>
      return;
 8006bf4:	e256      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80de 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d1 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81ed 	beq.w	800709a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 faf0 	bl	80072be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <HAL_UART_IRQHandler+0x17a>
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d04f      	beq.n	8006daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9f8 	bl	8007100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1a:	2b40      	cmp	r3, #64	@ 0x40
 8006d1c:	d141      	bne.n	8006da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1d9      	bne.n	8006d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	4a7d      	ldr	r2, [pc, #500]	@ (8006f6c <HAL_UART_IRQHandler+0x3dc>)
 8006d78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fb fe30 	bl	80029e4 <HAL_DMA_Abort_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e00e      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f99a 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00a      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f996 	bl	80070d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e006      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f992 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006db6:	e170      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	bf00      	nop
    return;
 8006dba:	e16e      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f040 814a 	bne.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8143 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 813c 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	f040 80b4 	bne.w	8006f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8140 	beq.w	800709e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f080 8139 	bcs.w	800709e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e3e:	f000 8088 	beq.w	8006f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d9      	bne.n	8006e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006eb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006eee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ef4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006efc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fb fcd9 	bl	8002904 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8c0 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f68:	e099      	b.n	800709e <HAL_UART_IRQHandler+0x50e>
 8006f6a:	bf00      	nop
 8006f6c:	080071c7 	.word	0x080071c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808b 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8086 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ff2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e3      	bne.n	8006fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800704c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f848 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007058:	e023      	b.n	80070a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800706a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8bb 	bl	80071ee <UART_Transmit_IT>
    return;
 8007078:	e014      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8fb 	bl	800728e <UART_EndTransmit_IT>
    return;
 8007098:	e004      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    return;
 800709a:	bf00      	nop
 800709c:	e002      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 80070a2:	bf00      	nop
  }
}
 80070a4:	37e8      	adds	r7, #232	@ 0xe8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b095      	sub	sp, #84	@ 0x54
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007128:	643a      	str	r2, [r7, #64]	@ 0x40
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3314      	adds	r3, #20
 8007142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	61fb      	str	r3, [r7, #28]
   return(result);
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	2b01      	cmp	r3, #1
 8007176:	d119      	bne.n	80071ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007198:	61ba      	str	r2, [r7, #24]
 800719a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071ba:	bf00      	nop
 80071bc:	3754      	adds	r7, #84	@ 0x54
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff ff77 	bl	80070d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b21      	cmp	r3, #33	@ 0x21
 8007200:	d13e      	bne.n	8007280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720a:	d114      	bne.n	8007236 <UART_Transmit_IT+0x48>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d110      	bne.n	8007236 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	621a      	str	r2, [r3, #32]
 8007234:	e008      	b.n	8007248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6211      	str	r1, [r2, #32]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29b      	uxth	r3, r3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4619      	mov	r1, r3
 8007256:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10f      	bne.n	800727c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800726a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800727a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fefc 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08c      	sub	sp, #48	@ 0x30
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b22      	cmp	r3, #34	@ 0x22
 80072d0:	f040 80ab 	bne.w	800742a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d117      	bne.n	800730e <UART_Receive_IT+0x50>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	@ 0x28
 800730c:	e026      	b.n	800735c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007320:	d007      	beq.n	8007332 <UART_Receive_IT+0x74>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <UART_Receive_IT+0x82>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e008      	b.n	8007352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4619      	mov	r1, r3
 800736a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800736c:	2b00      	cmp	r3, #0
 800736e:	d15a      	bne.n	8007426 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0220 	bic.w	r2, r2, #32
 800737e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800738e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d135      	bne.n	800741c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	613b      	str	r3, [r7, #16]
   return(result);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f023 0310 	bic.w	r3, r3, #16
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d6:	623a      	str	r2, [r7, #32]
 80073d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	69f9      	ldr	r1, [r7, #28]
 80073dc:	6a3a      	ldr	r2, [r7, #32]
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d10a      	bne.n	800740e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fe67 	bl	80070e8 <HAL_UARTEx_RxEventCallback>
 800741a:	e002      	b.n	8007422 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe4f 	bl	80070c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	e002      	b.n	800742c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800742a:	2302      	movs	r3, #2
  }
}
 800742c:	4618      	mov	r0, r3
 800742e:	3730      	adds	r7, #48	@ 0x30
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007438:	b0c0      	sub	sp, #256	@ 0x100
 800743a:	af00      	add	r7, sp, #0
 800743c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	68d9      	ldr	r1, [r3, #12]
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	ea40 0301 	orr.w	r3, r0, r1
 800745c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	431a      	orrs	r2, r3
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	431a      	orrs	r2, r3
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800748c:	f021 010c 	bic.w	r1, r1, #12
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800749a:	430b      	orrs	r3, r1
 800749c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ae:	6999      	ldr	r1, [r3, #24]
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	ea40 0301 	orr.w	r3, r0, r1
 80074ba:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b95      	ldr	r3, [pc, #596]	@ (8007718 <UART_SetConfig+0x2e4>)
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d011      	beq.n	80074ec <UART_SetConfig+0xb8>
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b93      	ldr	r3, [pc, #588]	@ (800771c <UART_SetConfig+0x2e8>)
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d00b      	beq.n	80074ec <UART_SetConfig+0xb8>
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b91      	ldr	r3, [pc, #580]	@ (8007720 <UART_SetConfig+0x2ec>)
 80074dc:	429a      	cmp	r2, r3
 80074de:	d005      	beq.n	80074ec <UART_SetConfig+0xb8>
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b8f      	ldr	r3, [pc, #572]	@ (8007724 <UART_SetConfig+0x2f0>)
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d104      	bne.n	80074f6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074ec:	f7fe fb7a 	bl	8005be4 <HAL_RCC_GetPCLK2Freq>
 80074f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074f4:	e003      	b.n	80074fe <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074f6:	f7fe fb61 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 80074fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007508:	f040 8110 	bne.w	800772c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800750c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007510:	2200      	movs	r2, #0
 8007512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007516:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800751a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	1891      	adds	r1, r2, r2
 8007524:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007526:	415b      	adcs	r3, r3
 8007528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800752a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800752e:	4621      	mov	r1, r4
 8007530:	eb12 0801 	adds.w	r8, r2, r1
 8007534:	4629      	mov	r1, r5
 8007536:	eb43 0901 	adc.w	r9, r3, r1
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800754a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800754e:	4690      	mov	r8, r2
 8007550:	4699      	mov	r9, r3
 8007552:	4623      	mov	r3, r4
 8007554:	eb18 0303 	adds.w	r3, r8, r3
 8007558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800755c:	462b      	mov	r3, r5
 800755e:	eb49 0303 	adc.w	r3, r9, r3
 8007562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007572:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800757a:	460b      	mov	r3, r1
 800757c:	18db      	adds	r3, r3, r3
 800757e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007580:	4613      	mov	r3, r2
 8007582:	eb42 0303 	adc.w	r3, r2, r3
 8007586:	657b      	str	r3, [r7, #84]	@ 0x54
 8007588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800758c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007590:	f7f8 fe46 	bl	8000220 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4b63      	ldr	r3, [pc, #396]	@ (8007728 <UART_SetConfig+0x2f4>)
 800759a:	fba3 2302 	umull	r2, r3, r3, r2
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	011c      	lsls	r4, r3, #4
 80075a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	1891      	adds	r1, r2, r2
 80075ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075bc:	415b      	adcs	r3, r3
 80075be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075c4:	4641      	mov	r1, r8
 80075c6:	eb12 0a01 	adds.w	sl, r2, r1
 80075ca:	4649      	mov	r1, r9
 80075cc:	eb43 0b01 	adc.w	fp, r3, r1
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075e4:	4692      	mov	sl, r2
 80075e6:	469b      	mov	fp, r3
 80075e8:	4643      	mov	r3, r8
 80075ea:	eb1a 0303 	adds.w	r3, sl, r3
 80075ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075f2:	464b      	mov	r3, r9
 80075f4:	eb4b 0303 	adc.w	r3, fp, r3
 80075f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007608:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800760c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007610:	460b      	mov	r3, r1
 8007612:	18db      	adds	r3, r3, r3
 8007614:	643b      	str	r3, [r7, #64]	@ 0x40
 8007616:	4613      	mov	r3, r2
 8007618:	eb42 0303 	adc.w	r3, r2, r3
 800761c:	647b      	str	r3, [r7, #68]	@ 0x44
 800761e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007626:	f7f8 fdfb 	bl	8000220 <__aeabi_uldivmod>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4611      	mov	r1, r2
 8007630:	4b3d      	ldr	r3, [pc, #244]	@ (8007728 <UART_SetConfig+0x2f4>)
 8007632:	fba3 2301 	umull	r2, r3, r3, r1
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	2264      	movs	r2, #100	@ 0x64
 800763a:	fb02 f303 	mul.w	r3, r2, r3
 800763e:	1acb      	subs	r3, r1, r3
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007646:	4b38      	ldr	r3, [pc, #224]	@ (8007728 <UART_SetConfig+0x2f4>)
 8007648:	fba3 2302 	umull	r2, r3, r3, r2
 800764c:	095b      	lsrs	r3, r3, #5
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007654:	441c      	add	r4, r3
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007660:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007670:	415b      	adcs	r3, r3
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007678:	4641      	mov	r1, r8
 800767a:	1851      	adds	r1, r2, r1
 800767c:	6339      	str	r1, [r7, #48]	@ 0x30
 800767e:	4649      	mov	r1, r9
 8007680:	414b      	adcs	r3, r1
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007690:	4659      	mov	r1, fp
 8007692:	00cb      	lsls	r3, r1, #3
 8007694:	4651      	mov	r1, sl
 8007696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769a:	4651      	mov	r1, sl
 800769c:	00ca      	lsls	r2, r1, #3
 800769e:	4610      	mov	r0, r2
 80076a0:	4619      	mov	r1, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	4642      	mov	r2, r8
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076ac:	464b      	mov	r3, r9
 80076ae:	460a      	mov	r2, r1
 80076b0:	eb42 0303 	adc.w	r3, r2, r3
 80076b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076cc:	460b      	mov	r3, r1
 80076ce:	18db      	adds	r3, r3, r3
 80076d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d2:	4613      	mov	r3, r2
 80076d4:	eb42 0303 	adc.w	r3, r2, r3
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076e2:	f7f8 fd9d 	bl	8000220 <__aeabi_uldivmod>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007728 <UART_SetConfig+0x2f4>)
 80076ec:	fba3 1302 	umull	r1, r3, r3, r2
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	2164      	movs	r1, #100	@ 0x64
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	3332      	adds	r3, #50	@ 0x32
 80076fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <UART_SetConfig+0x2f4>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	f003 0207 	and.w	r2, r3, #7
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4422      	add	r2, r4
 8007712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007714:	e10a      	b.n	800792c <UART_SetConfig+0x4f8>
 8007716:	bf00      	nop
 8007718:	40011000 	.word	0x40011000
 800771c:	40011400 	.word	0x40011400
 8007720:	40011800 	.word	0x40011800
 8007724:	40011c00 	.word	0x40011c00
 8007728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800772c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007730:	2200      	movs	r2, #0
 8007732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800773a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	1891      	adds	r1, r2, r2
 8007744:	6239      	str	r1, [r7, #32]
 8007746:	415b      	adcs	r3, r3
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
 800774a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800774e:	4641      	mov	r1, r8
 8007750:	1854      	adds	r4, r2, r1
 8007752:	4649      	mov	r1, r9
 8007754:	eb43 0501 	adc.w	r5, r3, r1
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	00eb      	lsls	r3, r5, #3
 8007762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007766:	00e2      	lsls	r2, r4, #3
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	4643      	mov	r3, r8
 800776e:	18e3      	adds	r3, r4, r3
 8007770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007774:	464b      	mov	r3, r9
 8007776:	eb45 0303 	adc.w	r3, r5, r3
 800777a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800778a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800779a:	4629      	mov	r1, r5
 800779c:	008b      	lsls	r3, r1, #2
 800779e:	4621      	mov	r1, r4
 80077a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a4:	4621      	mov	r1, r4
 80077a6:	008a      	lsls	r2, r1, #2
 80077a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077ac:	f7f8 fd38 	bl	8000220 <__aeabi_uldivmod>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4b60      	ldr	r3, [pc, #384]	@ (8007938 <UART_SetConfig+0x504>)
 80077b6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	011c      	lsls	r4, r3, #4
 80077be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077d0:	4642      	mov	r2, r8
 80077d2:	464b      	mov	r3, r9
 80077d4:	1891      	adds	r1, r2, r2
 80077d6:	61b9      	str	r1, [r7, #24]
 80077d8:	415b      	adcs	r3, r3
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e0:	4641      	mov	r1, r8
 80077e2:	1851      	adds	r1, r2, r1
 80077e4:	6139      	str	r1, [r7, #16]
 80077e6:	4649      	mov	r1, r9
 80077e8:	414b      	adcs	r3, r1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077f8:	4659      	mov	r1, fp
 80077fa:	00cb      	lsls	r3, r1, #3
 80077fc:	4651      	mov	r1, sl
 80077fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007802:	4651      	mov	r1, sl
 8007804:	00ca      	lsls	r2, r1, #3
 8007806:	4610      	mov	r0, r2
 8007808:	4619      	mov	r1, r3
 800780a:	4603      	mov	r3, r0
 800780c:	4642      	mov	r2, r8
 800780e:	189b      	adds	r3, r3, r2
 8007810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007814:	464b      	mov	r3, r9
 8007816:	460a      	mov	r2, r1
 8007818:	eb42 0303 	adc.w	r3, r2, r3
 800781c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800782a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007838:	4649      	mov	r1, r9
 800783a:	008b      	lsls	r3, r1, #2
 800783c:	4641      	mov	r1, r8
 800783e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007842:	4641      	mov	r1, r8
 8007844:	008a      	lsls	r2, r1, #2
 8007846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800784a:	f7f8 fce9 	bl	8000220 <__aeabi_uldivmod>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4611      	mov	r1, r2
 8007854:	4b38      	ldr	r3, [pc, #224]	@ (8007938 <UART_SetConfig+0x504>)
 8007856:	fba3 2301 	umull	r2, r3, r3, r1
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2264      	movs	r2, #100	@ 0x64
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	1acb      	subs	r3, r1, r3
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	3332      	adds	r3, #50	@ 0x32
 8007868:	4a33      	ldr	r2, [pc, #204]	@ (8007938 <UART_SetConfig+0x504>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007874:	441c      	add	r4, r3
 8007876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787a:	2200      	movs	r2, #0
 800787c:	673b      	str	r3, [r7, #112]	@ 0x70
 800787e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	1891      	adds	r1, r2, r2
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	415b      	adcs	r3, r3
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007894:	4641      	mov	r1, r8
 8007896:	1851      	adds	r1, r2, r1
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	4649      	mov	r1, r9
 800789c:	414b      	adcs	r3, r1
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ac:	4659      	mov	r1, fp
 80078ae:	00cb      	lsls	r3, r1, #3
 80078b0:	4651      	mov	r1, sl
 80078b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078b6:	4651      	mov	r1, sl
 80078b8:	00ca      	lsls	r2, r1, #3
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	4642      	mov	r2, r8
 80078c2:	189b      	adds	r3, r3, r2
 80078c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078c6:	464b      	mov	r3, r9
 80078c8:	460a      	mov	r2, r1
 80078ca:	eb42 0303 	adc.w	r3, r2, r3
 80078ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80078da:	667a      	str	r2, [r7, #100]	@ 0x64
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078e8:	4649      	mov	r1, r9
 80078ea:	008b      	lsls	r3, r1, #2
 80078ec:	4641      	mov	r1, r8
 80078ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078f2:	4641      	mov	r1, r8
 80078f4:	008a      	lsls	r2, r1, #2
 80078f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078fa:	f7f8 fc91 	bl	8000220 <__aeabi_uldivmod>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <UART_SetConfig+0x504>)
 8007904:	fba3 1302 	umull	r1, r3, r3, r2
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	2164      	movs	r1, #100	@ 0x64
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	3332      	adds	r3, #50	@ 0x32
 8007916:	4a08      	ldr	r2, [pc, #32]	@ (8007938 <UART_SetConfig+0x504>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	f003 020f 	and.w	r2, r3, #15
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4422      	add	r2, r4
 800792a:	609a      	str	r2, [r3, #8]
}
 800792c:	bf00      	nop
 800792e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007938:	51eb851f 	.word	0x51eb851f

0800793c <__NVIC_SetPriority>:
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794c:	2b00      	cmp	r3, #0
 800794e:	db0a      	blt.n	8007966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	490c      	ldr	r1, [pc, #48]	@ (8007988 <__NVIC_SetPriority+0x4c>)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	440b      	add	r3, r1
 8007960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007964:	e00a      	b.n	800797c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4908      	ldr	r1, [pc, #32]	@ (800798c <__NVIC_SetPriority+0x50>)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	3b04      	subs	r3, #4
 8007974:	0112      	lsls	r2, r2, #4
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	440b      	add	r3, r1
 800797a:	761a      	strb	r2, [r3, #24]
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000e100 	.word	0xe000e100
 800798c:	e000ed00 	.word	0xe000ed00

08007990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007994:	2100      	movs	r1, #0
 8007996:	f06f 0004 	mvn.w	r0, #4
 800799a:	f7ff ffcf 	bl	800793c <__NVIC_SetPriority>
#endif
}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079aa:	f3ef 8305 	mrs	r3, IPSR
 80079ae:	603b      	str	r3, [r7, #0]
  return(result);
 80079b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079b6:	f06f 0305 	mvn.w	r3, #5
 80079ba:	607b      	str	r3, [r7, #4]
 80079bc:	e00c      	b.n	80079d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079be:	4b0a      	ldr	r3, [pc, #40]	@ (80079e8 <osKernelInitialize+0x44>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d105      	bne.n	80079d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079c6:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <osKernelInitialize+0x44>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	e002      	b.n	80079d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079d2:	f04f 33ff 	mov.w	r3, #4294967295
 80079d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079d8:	687b      	ldr	r3, [r7, #4]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200005a8 	.word	0x200005a8

080079ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f2:	f3ef 8305 	mrs	r3, IPSR
 80079f6:	603b      	str	r3, [r7, #0]
  return(result);
 80079f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osKernelStart+0x1a>
    stat = osErrorISR;
 80079fe:	f06f 0305 	mvn.w	r3, #5
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	e010      	b.n	8007a28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a06:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <osKernelStart+0x48>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d109      	bne.n	8007a22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a0e:	f7ff ffbf 	bl	8007990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a12:	4b08      	ldr	r3, [pc, #32]	@ (8007a34 <osKernelStart+0x48>)
 8007a14:	2202      	movs	r2, #2
 8007a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a18:	f001 fc16 	bl	8009248 <vTaskStartScheduler>
      stat = osOK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	e002      	b.n	8007a28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a28:	687b      	ldr	r3, [r7, #4]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200005a8 	.word	0x200005a8

08007a38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08e      	sub	sp, #56	@ 0x38
 8007a3c:	af04      	add	r7, sp, #16
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a48:	f3ef 8305 	mrs	r3, IPSR
 8007a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d17e      	bne.n	8007b52 <osThreadNew+0x11a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d07b      	beq.n	8007b52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a5a:	2380      	movs	r3, #128	@ 0x80
 8007a5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a5e:	2318      	movs	r3, #24
 8007a60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d045      	beq.n	8007afe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <osThreadNew+0x48>
        name = attr->name;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <osThreadNew+0x6e>
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b38      	cmp	r3, #56	@ 0x38
 8007a98:	d805      	bhi.n	8007aa6 <osThreadNew+0x6e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <osThreadNew+0x72>
        return (NULL);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e054      	b.n	8007b54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	089b      	lsrs	r3, r3, #2
 8007ab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <osThreadNew+0xa8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ac8:	d90a      	bls.n	8007ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d006      	beq.n	8007ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <osThreadNew+0xa8>
        mem = 1;
 8007ada:	2301      	movs	r3, #1
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	e010      	b.n	8007b02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <osThreadNew+0xca>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <osThreadNew+0xca>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <osThreadNew+0xca>
          mem = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	e001      	b.n	8007b02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d110      	bne.n	8007b2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b10:	9202      	str	r2, [sp, #8]
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6a3a      	ldr	r2, [r7, #32]
 8007b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 f9b6 	bl	8008e90 <xTaskCreateStatic>
 8007b24:	4603      	mov	r3, r0
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	e013      	b.n	8007b52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d110      	bne.n	8007b52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f107 0310 	add.w	r3, r7, #16
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fa04 	bl	8008f50 <xTaskCreate>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d001      	beq.n	8007b52 <osThreadNew+0x11a>
            hTask = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b52:	693b      	ldr	r3, [r7, #16]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3728      	adds	r7, #40	@ 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b64:	f3ef 8305 	mrs	r3, IPSR
 8007b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <osDelay+0x1c>
    stat = osErrorISR;
 8007b70:	f06f 0305 	mvn.w	r3, #5
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e007      	b.n	8007b88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fb2a 	bl	80091dc <vTaskDelay>
    }
  }

  return (stat);
 8007b88:	68fb      	ldr	r3, [r7, #12]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b088      	sub	sp, #32
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b9e:	f3ef 8305 	mrs	r3, IPSR
 8007ba2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ba4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d174      	bne.n	8007c94 <osMutexNew+0x102>
    if (attr != NULL) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	e001      	b.n	8007bbc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <osMutexNew+0x3a>
      rmtx = 1U;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	e001      	b.n	8007bd0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d15c      	bne.n	8007c94 <osMutexNew+0x102>
      mem = -1;
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295
 8007bde:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d015      	beq.n	8007c12 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d006      	beq.n	8007bfc <osMutexNew+0x6a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b4f      	cmp	r3, #79	@ 0x4f
 8007bf4:	d902      	bls.n	8007bfc <osMutexNew+0x6a>
          mem = 1;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	e00c      	b.n	8007c16 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d108      	bne.n	8007c16 <osMutexNew+0x84>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <osMutexNew+0x84>
            mem = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e001      	b.n	8007c16 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d112      	bne.n	8007c42 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4619      	mov	r1, r3
 8007c28:	2004      	movs	r0, #4
 8007c2a:	f000 fb92 	bl	8008352 <xQueueCreateMutexStatic>
 8007c2e:	61f8      	str	r0, [r7, #28]
 8007c30:	e016      	b.n	8007c60 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	4619      	mov	r1, r3
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f000 fb8a 	bl	8008352 <xQueueCreateMutexStatic>
 8007c3e:	61f8      	str	r0, [r7, #28]
 8007c40:	e00e      	b.n	8007c60 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10b      	bne.n	8007c60 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c4e:	2004      	movs	r0, #4
 8007c50:	f000 fb67 	bl	8008322 <xQueueCreateMutex>
 8007c54:	61f8      	str	r0, [r7, #28]
 8007c56:	e003      	b.n	8007c60 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007c58:	2001      	movs	r0, #1
 8007c5a:	f000 fb62 	bl	8008322 <xQueueCreateMutex>
 8007c5e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00c      	beq.n	8007c80 <osMutexNew+0xee>
        if (attr != NULL) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <osMutexNew+0xe2>
          name = attr->name;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e001      	b.n	8007c78 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007c78:	68f9      	ldr	r1, [r7, #12]
 8007c7a:	69f8      	ldr	r0, [r7, #28]
 8007c7c:	f001 f8aa 	bl	8008dd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <osMutexNew+0x102>
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007c94:	69fb      	ldr	r3, [r7, #28]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cbc:	f3ef 8305 	mrs	r3, IPSR
 8007cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007cc8:	f06f 0305 	mvn.w	r3, #5
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e02c      	b.n	8007d2a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007cd6:	f06f 0303 	mvn.w	r3, #3
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e025      	b.n	8007d2a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d011      	beq.n	8007d08 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6938      	ldr	r0, [r7, #16]
 8007ce8:	f000 fb83 	bl	80083f2 <xQueueTakeMutexRecursive>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d01b      	beq.n	8007d2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007cf8:	f06f 0301 	mvn.w	r3, #1
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	e014      	b.n	8007d2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d00:	f06f 0302 	mvn.w	r3, #2
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e010      	b.n	8007d2a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6938      	ldr	r0, [r7, #16]
 8007d0c:	f000 fe2a 	bl	8008964 <xQueueSemaphoreTake>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d009      	beq.n	8007d2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007d1c:	f06f 0301 	mvn.w	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e002      	b.n	8007d2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d24:	f06f 0302 	mvn.w	r3, #2
 8007d28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007d2a:	697b      	ldr	r3, [r7, #20]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d50:	f3ef 8305 	mrs	r3, IPSR
 8007d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007d5c:	f06f 0305 	mvn.w	r3, #5
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e01f      	b.n	8007da4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007d6a:	f06f 0303 	mvn.w	r3, #3
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e018      	b.n	8007da4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007d78:	6938      	ldr	r0, [r7, #16]
 8007d7a:	f000 fb05 	bl	8008388 <xQueueGiveMutexRecursive>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d00f      	beq.n	8007da4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d84:	f06f 0302 	mvn.w	r3, #2
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e00b      	b.n	8007da4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f000 fb64 	bl	8008460 <xQueueGenericSend>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d002      	beq.n	8007da4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d9e:	f06f 0302 	mvn.w	r3, #2
 8007da2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007da4:	697b      	ldr	r3, [r7, #20]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b08a      	sub	sp, #40	@ 0x28
 8007db2:	af02      	add	r7, sp, #8
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dbe:	f3ef 8305 	mrs	r3, IPSR
 8007dc2:	613b      	str	r3, [r7, #16]
  return(result);
 8007dc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d15f      	bne.n	8007e8a <osMessageQueueNew+0xdc>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d05c      	beq.n	8007e8a <osMessageQueueNew+0xdc>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d059      	beq.n	8007e8a <osMessageQueueNew+0xdc>
    mem = -1;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d029      	beq.n	8007e36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <osMessageQueueNew+0x62>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	2b4f      	cmp	r3, #79	@ 0x4f
 8007df0:	d90e      	bls.n	8007e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	fb01 f303 	mul.w	r3, r1, r3
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <osMessageQueueNew+0x62>
        mem = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e014      	b.n	8007e3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d110      	bne.n	8007e3a <osMessageQueueNew+0x8c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10c      	bne.n	8007e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d108      	bne.n	8007e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <osMessageQueueNew+0x8c>
          mem = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	e001      	b.n	8007e3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10b      	bne.n	8007e58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	9100      	str	r1, [sp, #0]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f972 	bl	8008138 <xQueueGenericCreateStatic>
 8007e54:	61f8      	str	r0, [r7, #28]
 8007e56:	e008      	b.n	8007e6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007e5e:	2200      	movs	r2, #0
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f9e5 	bl	8008232 <xQueueGenericCreate>
 8007e68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	e001      	b.n	8007e82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e82:	6979      	ldr	r1, [r7, #20]
 8007e84:	69f8      	ldr	r0, [r7, #28]
 8007e86:	f000 ffa5 	bl	8008dd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e8a:	69fb      	ldr	r3, [r7, #28]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a07      	ldr	r2, [pc, #28]	@ (8007ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	4a06      	ldr	r2, [pc, #24]	@ (8007ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8007eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2280      	movs	r2, #128	@ 0x80
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	200005ac 	.word	0x200005ac
 8007ec4:	20000608 	.word	0x20000608

08007ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a07      	ldr	r2, [pc, #28]	@ (8007ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	4a06      	ldr	r2, [pc, #24]	@ (8007ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8007ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ee6:	601a      	str	r2, [r3, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20000808 	.word	0x20000808
 8007ef8:	20000864 	.word	0x20000864

08007efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0208 	add.w	r2, r3, #8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f103 0208 	add.w	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f103 0208 	add.w	r2, r3, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d103      	bne.n	8007fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e00c      	b.n	8007fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e002      	b.n	8007fcc <vListInsert+0x2e>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d2f6      	bcs.n	8007fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6892      	ldr	r2, [r2, #8]
 8008026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6852      	ldr	r2, [r2, #4]
 8008030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d103      	bne.n	8008044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1e5a      	subs	r2, r3, #1
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10b      	bne.n	8008090 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008090:	f002 fba2 	bl	800a7d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c0:	3b01      	subs	r3, #1
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080c6:	fb01 f303 	mul.w	r3, r1, r3
 80080ca:	441a      	add	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	22ff      	movs	r2, #255	@ 0xff
 80080d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	22ff      	movs	r2, #255	@ 0xff
 80080dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d114      	bne.n	8008110 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01a      	beq.n	8008124 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3310      	adds	r3, #16
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fb36 	bl	8009764 <xTaskRemoveFromEventList>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d012      	beq.n	8008124 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <xQueueGenericReset+0xd0>)
 8008100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	e009      	b.n	8008124 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3310      	adds	r3, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fef1 	bl	8007efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3324      	adds	r3, #36	@ 0x24
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff feec 	bl	8007efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008124:	f002 fb8a 	bl	800a83c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008128:	2301      	movs	r3, #1
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08e      	sub	sp, #56	@ 0x38
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <xQueueGenericCreateStatic+0x56>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <xQueueGenericCreateStatic+0x5a>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <xQueueGenericCreateStatic+0x5c>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10b      	bne.n	80081b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	623b      	str	r3, [r7, #32]
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <xQueueGenericCreateStatic+0x84>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <xQueueGenericCreateStatic+0x88>
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <xQueueGenericCreateStatic+0x8a>
 80081c0:	2300      	movs	r3, #0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	61fb      	str	r3, [r7, #28]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081de:	2350      	movs	r3, #80	@ 0x50
 80081e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b50      	cmp	r3, #80	@ 0x50
 80081e6:	d00b      	beq.n	8008200 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	61bb      	str	r3, [r7, #24]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008200:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00d      	beq.n	8008228 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800820c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008214:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f840 	bl	80082a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800822a:	4618      	mov	r0, r3
 800822c:	3730      	adds	r7, #48	@ 0x30
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008232:	b580      	push	{r7, lr}
 8008234:	b08a      	sub	sp, #40	@ 0x28
 8008236:	af02      	add	r7, sp, #8
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	4613      	mov	r3, r2
 800823e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	613b      	str	r3, [r7, #16]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3350      	adds	r3, #80	@ 0x50
 800826c:	4618      	mov	r0, r3
 800826e:	f002 fbd5 	bl	800aa1c <pvPortMalloc>
 8008272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	3350      	adds	r3, #80	@ 0x50
 8008282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800828c:	79fa      	ldrb	r2, [r7, #7]
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	4613      	mov	r3, r2
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f805 	bl	80082a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800829e:	69bb      	ldr	r3, [r7, #24]
	}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	e002      	b.n	80082ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082d6:	2101      	movs	r1, #1
 80082d8:	69b8      	ldr	r0, [r7, #24]
 80082da:	f7ff fec3 	bl	8008064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800830e:	2300      	movs	r3, #0
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8a3 	bl	8008460 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	4603      	mov	r3, r0
 800832a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	461a      	mov	r2, r3
 8008338:	6939      	ldr	r1, [r7, #16]
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f7ff ff79 	bl	8008232 <xQueueGenericCreate>
 8008340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff ffd3 	bl	80082ee <prvInitialiseMutex>

		return xNewQueue;
 8008348:	68fb      	ldr	r3, [r7, #12]
	}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008352:	b580      	push	{r7, lr}
 8008354:	b088      	sub	sp, #32
 8008356:	af02      	add	r7, sp, #8
 8008358:	4603      	mov	r3, r0
 800835a:	6039      	str	r1, [r7, #0]
 800835c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800835e:	2301      	movs	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2200      	movs	r2, #0
 800836e:	6939      	ldr	r1, [r7, #16]
 8008370:	6978      	ldr	r0, [r7, #20]
 8008372:	f7ff fee1 	bl	8008138 <xQueueGenericCreateStatic>
 8008376:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff ffb8 	bl	80082ee <prvInitialiseMutex>

		return xNewQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
	}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60fb      	str	r3, [r7, #12]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	689c      	ldr	r4, [r3, #8]
 80083b6:	f001 fb95 	bl	8009ae4 <xTaskGetCurrentTaskHandle>
 80083ba:	4603      	mov	r3, r0
 80083bc:	429c      	cmp	r4, r3
 80083be:	d111      	bne.n	80083e4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80083d2:	2300      	movs	r3, #0
 80083d4:	2200      	movs	r2, #0
 80083d6:	2100      	movs	r1, #0
 80083d8:	6938      	ldr	r0, [r7, #16]
 80083da:	f000 f841 	bl	8008460 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80083de:	2301      	movs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e001      	b.n	80083e8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80083e8:	697b      	ldr	r3, [r7, #20]
	}
 80083ea:	4618      	mov	r0, r3
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd90      	pop	{r4, r7, pc}

080083f2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80083f2:	b590      	push	{r4, r7, lr}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	689c      	ldr	r4, [r3, #8]
 8008422:	f001 fb5f 	bl	8009ae4 <xTaskGetCurrentTaskHandle>
 8008426:	4603      	mov	r3, r0
 8008428:	429c      	cmp	r4, r3
 800842a:	d107      	bne.n	800843c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e00c      	b.n	8008456 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f000 fa90 	bl	8008964 <xQueueSemaphoreTake>
 8008444:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008456:	697b      	ldr	r3, [r7, #20]
	}
 8008458:	4618      	mov	r0, r3
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08e      	sub	sp, #56	@ 0x38
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800846e:	2300      	movs	r3, #0
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10b      	bne.n	8008494 <xQueueGenericSend+0x34>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	e7fd      	b.n	8008490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d103      	bne.n	80084a2 <xQueueGenericSend+0x42>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <xQueueGenericSend+0x46>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <xQueueGenericSend+0x48>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10b      	bne.n	80084c4 <xQueueGenericSend+0x64>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d103      	bne.n	80084d2 <xQueueGenericSend+0x72>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <xQueueGenericSend+0x76>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericSend+0x78>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xQueueGenericSend+0x94>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	623b      	str	r3, [r7, #32]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f4:	f001 fb06 	bl	8009b04 <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xQueueGenericSend+0xa4>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xQueueGenericSend+0xa8>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xQueueGenericSend+0xaa>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueGenericSend+0xc6>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61fb      	str	r3, [r7, #28]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008526:	f002 f957 	bl	800a7d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xQueueGenericSend+0xdc>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d129      	bne.n	8008590 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008542:	f000 fb37 	bl	8008bb4 <prvCopyDataToQueue>
 8008546:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	3324      	adds	r3, #36	@ 0x24
 8008554:	4618      	mov	r0, r3
 8008556:	f001 f905 	bl	8009764 <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d013      	beq.n	8008588 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008560:	4b3f      	ldr	r3, [pc, #252]	@ (8008660 <xQueueGenericSend+0x200>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e00a      	b.n	8008588 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008578:	4b39      	ldr	r3, [pc, #228]	@ (8008660 <xQueueGenericSend+0x200>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008588:	f002 f958 	bl	800a83c <vPortExitCritical>
				return pdPASS;
 800858c:	2301      	movs	r3, #1
 800858e:	e063      	b.n	8008658 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008596:	f002 f951 	bl	800a83c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800859a:	2300      	movs	r3, #0
 800859c:	e05c      	b.n	8008658 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f93f 	bl	800982c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085b2:	f002 f943 	bl	800a83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085b6:	f000 feaf 	bl	8009318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ba:	f002 f90d 	bl	800a7d8 <vPortEnterCritical>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d103      	bne.n	80085d4 <xQueueGenericSend+0x174>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085da:	b25b      	sxtb	r3, r3
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d103      	bne.n	80085ea <xQueueGenericSend+0x18a>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085ea:	f002 f927 	bl	800a83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ee:	1d3a      	adds	r2, r7, #4
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 f92e 	bl	8009858 <xTaskCheckForTimeOut>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d124      	bne.n	800864c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008602:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008604:	f000 fbce 	bl	8008da4 <prvIsQueueFull>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	3310      	adds	r3, #16
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f852 	bl	80096c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800861c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800861e:	f000 fb59 	bl	8008cd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008622:	f000 fe87 	bl	8009334 <xTaskResumeAll>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	f47f af7c 	bne.w	8008526 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800862e:	4b0c      	ldr	r3, [pc, #48]	@ (8008660 <xQueueGenericSend+0x200>)
 8008630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	e772      	b.n	8008526 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008642:	f000 fb47 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008646:	f000 fe75 	bl	8009334 <xTaskResumeAll>
 800864a:	e76c      	b.n	8008526 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800864c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800864e:	f000 fb41 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008652:	f000 fe6f 	bl	8009334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008658:	4618      	mov	r0, r3
 800865a:	3738      	adds	r7, #56	@ 0x38
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b090      	sub	sp, #64	@ 0x40
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	e7fd      	b.n	8008690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <xQueueGenericSendFromISR+0x3e>
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <xQueueGenericSendFromISR+0x42>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueGenericSendFromISR+0x44>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10b      	bne.n	80086c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d103      	bne.n	80086d2 <xQueueGenericSendFromISR+0x6e>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <xQueueGenericSendFromISR+0x72>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <xQueueGenericSendFromISR+0x74>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10b      	bne.n	80086f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	623b      	str	r3, [r7, #32]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086f4:	f002 f950 	bl	800a998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086f8:	f3ef 8211 	mrs	r2, BASEPRI
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61fa      	str	r2, [r7, #28]
 800870e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008710:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <xQueueGenericSendFromISR+0xc2>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d12f      	bne.n	8008786 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800872c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008734:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800873c:	f000 fa3a 	bl	8008bb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008740:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d112      	bne.n	8008770 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d016      	beq.n	8008780 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	3324      	adds	r3, #36	@ 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f804 	bl	8009764 <xTaskRemoveFromEventList>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00e      	beq.n	8008780 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e007      	b.n	8008780 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008774:	3301      	adds	r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	b25a      	sxtb	r2, r3
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008780:	2301      	movs	r3, #1
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008784:	e001      	b.n	800878a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008794:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008798:	4618      	mov	r0, r3
 800879a:	3740      	adds	r7, #64	@ 0x40
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <xQueueReceive+0x32>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	623b      	str	r3, [r7, #32]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <xQueueReceive+0x40>
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <xQueueReceive+0x44>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <xQueueReceive+0x46>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <xQueueReceive+0x62>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	61fb      	str	r3, [r7, #28]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008802:	f001 f97f 	bl	8009b04 <xTaskGetSchedulerState>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueReceive+0x72>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueReceive+0x76>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueReceive+0x78>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <xQueueReceive+0x94>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61bb      	str	r3, [r7, #24]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008834:	f001 ffd0 	bl	800a7d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01f      	beq.n	8008884 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008848:	f000 fa1e 	bl	8008c88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	1e5a      	subs	r2, r3, #1
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00f      	beq.n	800887c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	3310      	adds	r3, #16
 8008860:	4618      	mov	r0, r3
 8008862:	f000 ff7f 	bl	8009764 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b3c      	ldr	r3, [pc, #240]	@ (8008960 <xQueueReceive+0x1c0>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800887c:	f001 ffde 	bl	800a83c <vPortExitCritical>
				return pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	e069      	b.n	8008958 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d103      	bne.n	8008892 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888a:	f001 ffd7 	bl	800a83c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800888e:	2300      	movs	r3, #0
 8008890:	e062      	b.n	8008958 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ffc5 	bl	800982c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a2:	2301      	movs	r3, #1
 80088a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a6:	f001 ffc9 	bl	800a83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088aa:	f000 fd35 	bl	8009318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ae:	f001 ff93 	bl	800a7d8 <vPortEnterCritical>
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d103      	bne.n	80088c8 <xQueueReceive+0x128>
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d103      	bne.n	80088de <xQueueReceive+0x13e>
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088de:	f001 ffad 	bl	800a83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e2:	1d3a      	adds	r2, r7, #4
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 ffb4 	bl	8009858 <xTaskCheckForTimeOut>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d123      	bne.n	800893e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f8:	f000 fa3e 	bl	8008d78 <prvIsQueueEmpty>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	3324      	adds	r3, #36	@ 0x24
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fed8 	bl	80096c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008912:	f000 f9df 	bl	8008cd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008916:	f000 fd0d 	bl	8009334 <xTaskResumeAll>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d189      	bne.n	8008834 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008920:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <xQueueReceive+0x1c0>)
 8008922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	e780      	b.n	8008834 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008934:	f000 f9ce 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008938:	f000 fcfc 	bl	8009334 <xTaskResumeAll>
 800893c:	e77a      	b.n	8008834 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800893e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008940:	f000 f9c8 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008944:	f000 fcf6 	bl	8009334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800894a:	f000 fa15 	bl	8008d78 <prvIsQueueEmpty>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f43f af6f 	beq.w	8008834 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008956:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008958:	4618      	mov	r0, r3
 800895a:	3730      	adds	r7, #48	@ 0x30
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	@ 0x38
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61fb      	str	r3, [r7, #28]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089b8:	f001 f8a4 	bl	8009b04 <xTaskGetSchedulerState>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <xQueueSemaphoreTake+0x64>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <xQueueSemaphoreTake+0x68>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xQueueSemaphoreTake+0x6a>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61bb      	str	r3, [r7, #24]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ea:	f001 fef5 	bl	800a7d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d024      	beq.n	8008a44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008a0a:	f001 f9f5 	bl	8009df8 <pvTaskIncrementMutexHeldCount>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00f      	beq.n	8008a3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	3310      	adds	r3, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fe9f 	bl	8009764 <xTaskRemoveFromEventList>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b54      	ldr	r3, [pc, #336]	@ (8008b80 <xQueueSemaphoreTake+0x21c>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a3c:	f001 fefe 	bl	800a83c <vPortExitCritical>
				return pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e098      	b.n	8008b76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d112      	bne.n	8008a70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	617b      	str	r3, [r7, #20]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a68:	f001 fee8 	bl	800a83c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e082      	b.n	8008b76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fed6 	bl	800982c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a84:	f001 feda 	bl	800a83c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a88:	f000 fc46 	bl	8009318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a8c:	f001 fea4 	bl	800a7d8 <vPortEnterCritical>
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d103      	bne.n	8008aa6 <xQueueSemaphoreTake+0x142>
 8008a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d103      	bne.n	8008abc <xQueueSemaphoreTake+0x158>
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008abc:	f001 febe 	bl	800a83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ac0:	463a      	mov	r2, r7
 8008ac2:	f107 030c 	add.w	r3, r7, #12
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fec5 	bl	8009858 <xTaskCheckForTimeOut>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d132      	bne.n	8008b3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ad6:	f000 f94f 	bl	8008d78 <prvIsQueueEmpty>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d026      	beq.n	8008b2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ae8:	f001 fe76 	bl	800a7d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 f825 	bl	8009b40 <xTaskPriorityInherit>
 8008af6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008af8:	f001 fea0 	bl	800a83c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	3324      	adds	r3, #36	@ 0x24
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fddb 	bl	80096c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b0c:	f000 f8e2 	bl	8008cd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b10:	f000 fc10 	bl	8009334 <xTaskResumeAll>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f47f af67 	bne.w	80089ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008b1c:	4b18      	ldr	r3, [pc, #96]	@ (8008b80 <xQueueSemaphoreTake+0x21c>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	e75d      	b.n	80089ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b30:	f000 f8d0 	bl	8008cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b34:	f000 fbfe 	bl	8009334 <xTaskResumeAll>
 8008b38:	e757      	b.n	80089ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b3c:	f000 f8ca 	bl	8008cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b40:	f000 fbf8 	bl	8009334 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b46:	f000 f917 	bl	8008d78 <prvIsQueueEmpty>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f43f af4c 	beq.w	80089ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b58:	f001 fe3e 	bl	800a7d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b5e:	f000 f811 	bl	8008b84 <prvGetDisinheritPriorityAfterTimeout>
 8008b62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f8c0 	bl	8009cf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b70:	f001 fe64 	bl	800a83c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3738      	adds	r7, #56	@ 0x38
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d006      	beq.n	8008ba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e001      	b.n	8008ba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10d      	bne.n	8008bee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d14d      	bne.n	8008c76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 f816 	bl	8009c10 <xTaskPriorityDisinherit>
 8008be4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	e043      	b.n	8008c76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d119      	bne.n	8008c28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6858      	ldr	r0, [r3, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	f002 f93a 	bl	800ae78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d32b      	bcc.n	8008c76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]
 8008c26:	e026      	b.n	8008c76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68d8      	ldr	r0, [r3, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c30:	461a      	mov	r2, r3
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	f002 f920 	bl	800ae78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	425b      	negs	r3, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d207      	bcs.n	8008c64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	441a      	add	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d105      	bne.n	8008c76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d018      	beq.n	8008ccc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	441a      	add	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d303      	bcc.n	8008cbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68d9      	ldr	r1, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6838      	ldr	r0, [r7, #0]
 8008cc8:	f002 f8d6 	bl	800ae78 <memcpy>
	}
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cdc:	f001 fd7c 	bl	800a7d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ce6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ce8:	e011      	b.n	8008d0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d012      	beq.n	8008d18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3324      	adds	r3, #36	@ 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd34 	bl	8009764 <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d02:	f000 fe0d 	bl	8009920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dce9      	bgt.n	8008cea <prvUnlockQueue+0x16>
 8008d16:	e000      	b.n	8008d1a <prvUnlockQueue+0x46>
					break;
 8008d18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	22ff      	movs	r2, #255	@ 0xff
 8008d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d22:	f001 fd8b 	bl	800a83c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d26:	f001 fd57 	bl	800a7d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d32:	e011      	b.n	8008d58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d012      	beq.n	8008d62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fd0f 	bl	8009764 <xTaskRemoveFromEventList>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d4c:	f000 fde8 	bl	8009920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dce9      	bgt.n	8008d34 <prvUnlockQueue+0x60>
 8008d60:	e000      	b.n	8008d64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	22ff      	movs	r2, #255	@ 0xff
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d6c:	f001 fd66 	bl	800a83c <vPortExitCritical>
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d80:	f001 fd2a 	bl	800a7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e001      	b.n	8008d96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f001 fd51 	bl	800a83c <vPortExitCritical>

	return xReturn;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dac:	f001 fd14 	bl	800a7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d102      	bne.n	8008dc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e001      	b.n	8008dc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dc6:	f001 fd39 	bl	800a83c <vPortExitCritical>

	return xReturn;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	e014      	b.n	8008e0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008de4:	4a0f      	ldr	r2, [pc, #60]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008df0:	490c      	ldr	r1, [pc, #48]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8008e24 <vQueueAddToRegistry+0x50>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e06:	e006      	b.n	8008e16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b07      	cmp	r3, #7
 8008e12:	d9e7      	bls.n	8008de4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000c64 	.word	0x20000c64

08008e28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e38:	f001 fcce 	bl	800a7d8 <vPortEnterCritical>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d103      	bne.n	8008e52 <vQueueWaitForMessageRestricted+0x2a>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d103      	bne.n	8008e68 <vQueueWaitForMessageRestricted+0x40>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e68:	f001 fce8 	bl	800a83c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3324      	adds	r3, #36	@ 0x24
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fc45 	bl	800970c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e82:	6978      	ldr	r0, [r7, #20]
 8008e84:	f7ff ff26 	bl	8008cd4 <prvUnlockQueue>
	}
 8008e88:	bf00      	nop
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	@ 0x38
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	623b      	str	r3, [r7, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	e7fd      	b.n	8008eb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <xTaskCreateStatic+0x4a>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	61fb      	str	r3, [r7, #28]
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	e7fd      	b.n	8008ed6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eda:	235c      	movs	r3, #92	@ 0x5c
 8008edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ee2:	d00b      	beq.n	8008efc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	61bb      	str	r3, [r7, #24]
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01e      	beq.n	8008f42 <xTaskCreateStatic+0xb2>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01b      	beq.n	8008f42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	9302      	str	r3, [sp, #8]
 8008f24:	f107 0314 	add.w	r3, r7, #20
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f850 	bl	8008fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f3c:	f000 f8de 	bl	80090fc <prvAddNewTaskToReadyList>
 8008f40:	e001      	b.n	8008f46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f46:	697b      	ldr	r3, [r7, #20]
	}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3728      	adds	r7, #40	@ 0x28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08c      	sub	sp, #48	@ 0x30
 8008f54:	af04      	add	r7, sp, #16
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 fd59 	bl	800aa1c <pvPortMalloc>
 8008f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00e      	beq.n	8008f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f72:	205c      	movs	r0, #92	@ 0x5c
 8008f74:	f001 fd52 	bl	800aa1c <pvPortMalloc>
 8008f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f86:	e005      	b.n	8008f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f88:	6978      	ldr	r0, [r7, #20]
 8008f8a:	f001 fe15 	bl	800abb8 <vPortFree>
 8008f8e:	e001      	b.n	8008f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d017      	beq.n	8008fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f80e 	bl	8008fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fbe:	69f8      	ldr	r0, [r7, #28]
 8008fc0:	f000 f89c 	bl	80090fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e002      	b.n	8008fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fca:	f04f 33ff 	mov.w	r3, #4294967295
 8008fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	21a5      	movs	r1, #165	@ 0xa5
 8008ff4:	f001 ff00 	bl	800adf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009002:	3b01      	subs	r3, #1
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	617b      	str	r3, [r7, #20]
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	e7fd      	b.n	8009030 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01f      	beq.n	800907a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	e012      	b.n	8009066 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	7819      	ldrb	r1, [r3, #0]
 8009048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	3334      	adds	r3, #52	@ 0x34
 8009050:	460a      	mov	r2, r1
 8009052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3301      	adds	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	2b0f      	cmp	r3, #15
 800906a:	d9e9      	bls.n	8009040 <prvInitialiseNewTask+0x66>
 800906c:	e000      	b.n	8009070 <prvInitialiseNewTask+0x96>
			{
				break;
 800906e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009078:	e003      	b.n	8009082 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	2b37      	cmp	r3, #55	@ 0x37
 8009086:	d901      	bls.n	800908c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009088:	2337      	movs	r3, #55	@ 0x37
 800908a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009090:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009096:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909a:	2200      	movs	r2, #0
 800909c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a0:	3304      	adds	r3, #4
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe ff4a 	bl	8007f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090aa:	3318      	adds	r3, #24
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe ff45 	bl	8007f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	2200      	movs	r2, #0
 80090cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	69b8      	ldr	r0, [r7, #24]
 80090dc:	f001 fa4e 	bl	800a57c <pxPortInitialiseStack>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f2:	bf00      	nop
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009104:	f001 fb68 	bl	800a7d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009108:	4b2d      	ldr	r3, [pc, #180]	@ (80091c0 <prvAddNewTaskToReadyList+0xc4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3301      	adds	r3, #1
 800910e:	4a2c      	ldr	r2, [pc, #176]	@ (80091c0 <prvAddNewTaskToReadyList+0xc4>)
 8009110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009112:	4b2c      	ldr	r3, [pc, #176]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800911a:	4a2a      	ldr	r2, [pc, #168]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009120:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <prvAddNewTaskToReadyList+0xc4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d110      	bne.n	800914a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009128:	f000 fc1e 	bl	8009968 <prvInitialiseTaskLists>
 800912c:	e00d      	b.n	800914a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800912e:	4b26      	ldr	r3, [pc, #152]	@ (80091c8 <prvAddNewTaskToReadyList+0xcc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009136:	4b23      	ldr	r3, [pc, #140]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	429a      	cmp	r2, r3
 8009142:	d802      	bhi.n	800914a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009144:	4a1f      	ldr	r2, [pc, #124]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800914a:	4b20      	ldr	r3, [pc, #128]	@ (80091cc <prvAddNewTaskToReadyList+0xd0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	4a1e      	ldr	r2, [pc, #120]	@ (80091cc <prvAddNewTaskToReadyList+0xd0>)
 8009152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009154:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <prvAddNewTaskToReadyList+0xd0>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009160:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <prvAddNewTaskToReadyList+0xd4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d903      	bls.n	8009170 <prvAddNewTaskToReadyList+0x74>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	4a18      	ldr	r2, [pc, #96]	@ (80091d0 <prvAddNewTaskToReadyList+0xd4>)
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4a15      	ldr	r2, [pc, #84]	@ (80091d4 <prvAddNewTaskToReadyList+0xd8>)
 800917e:	441a      	add	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f7fe fee5 	bl	8007f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800918c:	f001 fb56 	bl	800a83c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009190:	4b0d      	ldr	r3, [pc, #52]	@ (80091c8 <prvAddNewTaskToReadyList+0xcc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00e      	beq.n	80091b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009198:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d207      	bcs.n	80091b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091a6:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <prvAddNewTaskToReadyList+0xdc>)
 80091a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20001178 	.word	0x20001178
 80091c4:	20000ca4 	.word	0x20000ca4
 80091c8:	20001184 	.word	0x20001184
 80091cc:	20001194 	.word	0x20001194
 80091d0:	20001180 	.word	0x20001180
 80091d4:	20000ca8 	.word	0x20000ca8
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d018      	beq.n	8009220 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091ee:	4b14      	ldr	r3, [pc, #80]	@ (8009240 <vTaskDelay+0x64>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <vTaskDelay+0x32>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800920e:	f000 f883 	bl	8009318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009212:	2100      	movs	r1, #0
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fe03 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800921a:	f000 f88b 	bl	8009334 <xTaskResumeAll>
 800921e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d107      	bne.n	8009236 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009226:	4b07      	ldr	r3, [pc, #28]	@ (8009244 <vTaskDelay+0x68>)
 8009228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200011a0 	.word	0x200011a0
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	@ 0x28
 800924c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009256:	463a      	mov	r2, r7
 8009258:	1d39      	adds	r1, r7, #4
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fe18 	bl	8007e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	9202      	str	r2, [sp, #8]
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	2300      	movs	r3, #0
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	460a      	mov	r2, r1
 8009276:	4922      	ldr	r1, [pc, #136]	@ (8009300 <vTaskStartScheduler+0xb8>)
 8009278:	4822      	ldr	r0, [pc, #136]	@ (8009304 <vTaskStartScheduler+0xbc>)
 800927a:	f7ff fe09 	bl	8008e90 <xTaskCreateStatic>
 800927e:	4603      	mov	r3, r0
 8009280:	4a21      	ldr	r2, [pc, #132]	@ (8009308 <vTaskStartScheduler+0xc0>)
 8009282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009284:	4b20      	ldr	r3, [pc, #128]	@ (8009308 <vTaskStartScheduler+0xc0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e001      	b.n	8009296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d102      	bne.n	80092a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800929c:	f000 fe14 	bl	8009ec8 <xTimerCreateTimerTask>
 80092a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d116      	bne.n	80092d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	613b      	str	r3, [r7, #16]
}
 80092ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092bc:	4b13      	ldr	r3, [pc, #76]	@ (800930c <vTaskStartScheduler+0xc4>)
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092c4:	4b12      	ldr	r3, [pc, #72]	@ (8009310 <vTaskStartScheduler+0xc8>)
 80092c6:	2201      	movs	r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092ca:	4b12      	ldr	r3, [pc, #72]	@ (8009314 <vTaskStartScheduler+0xcc>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092d0:	f001 f9de 	bl	800a690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092d4:	e00f      	b.n	80092f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d10b      	bne.n	80092f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <vTaskStartScheduler+0xaa>
}
 80092f6:	bf00      	nop
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0800af3c 	.word	0x0800af3c
 8009304:	08009939 	.word	0x08009939
 8009308:	2000119c 	.word	0x2000119c
 800930c:	20001198 	.word	0x20001198
 8009310:	20001184 	.word	0x20001184
 8009314:	2000117c 	.word	0x2000117c

08009318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800931c:	4b04      	ldr	r3, [pc, #16]	@ (8009330 <vTaskSuspendAll+0x18>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	4a03      	ldr	r2, [pc, #12]	@ (8009330 <vTaskSuspendAll+0x18>)
 8009324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009326:	bf00      	nop
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	200011a0 	.word	0x200011a0

08009334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009342:	4b42      	ldr	r3, [pc, #264]	@ (800944c <xTaskResumeAll+0x118>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <xTaskResumeAll+0x2e>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	603b      	str	r3, [r7, #0]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009362:	f001 fa39 	bl	800a7d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009366:	4b39      	ldr	r3, [pc, #228]	@ (800944c <xTaskResumeAll+0x118>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3b01      	subs	r3, #1
 800936c:	4a37      	ldr	r2, [pc, #220]	@ (800944c <xTaskResumeAll+0x118>)
 800936e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009370:	4b36      	ldr	r3, [pc, #216]	@ (800944c <xTaskResumeAll+0x118>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d162      	bne.n	800943e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009378:	4b35      	ldr	r3, [pc, #212]	@ (8009450 <xTaskResumeAll+0x11c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d05e      	beq.n	800943e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009380:	e02f      	b.n	80093e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009382:	4b34      	ldr	r3, [pc, #208]	@ (8009454 <xTaskResumeAll+0x120>)
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3318      	adds	r3, #24
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fe3e 	bl	8008010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3304      	adds	r3, #4
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fe39 	bl	8008010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009458 <xTaskResumeAll+0x124>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d903      	bls.n	80093b2 <xTaskResumeAll+0x7e>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009458 <xTaskResumeAll+0x124>)
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4a27      	ldr	r2, [pc, #156]	@ (800945c <xTaskResumeAll+0x128>)
 80093c0:	441a      	add	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f7fe fdc4 	bl	8007f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d2:	4b23      	ldr	r3, [pc, #140]	@ (8009460 <xTaskResumeAll+0x12c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80093dc:	4b21      	ldr	r3, [pc, #132]	@ (8009464 <xTaskResumeAll+0x130>)
 80093de:	2201      	movs	r2, #1
 80093e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009454 <xTaskResumeAll+0x120>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1cb      	bne.n	8009382 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093f0:	f000 fb58 	bl	8009aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009468 <xTaskResumeAll+0x134>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d010      	beq.n	8009422 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009400:	f000 f846 	bl	8009490 <xTaskIncrementTick>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800940a:	4b16      	ldr	r3, [pc, #88]	@ (8009464 <xTaskResumeAll+0x130>)
 800940c:	2201      	movs	r2, #1
 800940e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3b01      	subs	r3, #1
 8009414:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f1      	bne.n	8009400 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800941c:	4b12      	ldr	r3, [pc, #72]	@ (8009468 <xTaskResumeAll+0x134>)
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009422:	4b10      	ldr	r3, [pc, #64]	@ (8009464 <xTaskResumeAll+0x130>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800942e:	4b0f      	ldr	r3, [pc, #60]	@ (800946c <xTaskResumeAll+0x138>)
 8009430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800943e:	f001 f9fd 	bl	800a83c <vPortExitCritical>

	return xAlreadyYielded;
 8009442:	68bb      	ldr	r3, [r7, #8]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	200011a0 	.word	0x200011a0
 8009450:	20001178 	.word	0x20001178
 8009454:	20001138 	.word	0x20001138
 8009458:	20001180 	.word	0x20001180
 800945c:	20000ca8 	.word	0x20000ca8
 8009460:	20000ca4 	.word	0x20000ca4
 8009464:	2000118c 	.word	0x2000118c
 8009468:	20001188 	.word	0x20001188
 800946c:	e000ed04 	.word	0xe000ed04

08009470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009476:	4b05      	ldr	r3, [pc, #20]	@ (800948c <xTaskGetTickCount+0x1c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800947c:	687b      	ldr	r3, [r7, #4]
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	2000117c 	.word	0x2000117c

08009490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b4f      	ldr	r3, [pc, #316]	@ (80095d8 <xTaskIncrementTick+0x148>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 8090 	bne.w	80095c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094a4:	4b4d      	ldr	r3, [pc, #308]	@ (80095dc <xTaskIncrementTick+0x14c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3301      	adds	r3, #1
 80094aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094ac:	4a4b      	ldr	r2, [pc, #300]	@ (80095dc <xTaskIncrementTick+0x14c>)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d121      	bne.n	80094fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80094b8:	4b49      	ldr	r3, [pc, #292]	@ (80095e0 <xTaskIncrementTick+0x150>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00b      	beq.n	80094da <xTaskIncrementTick+0x4a>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	603b      	str	r3, [r7, #0]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <xTaskIncrementTick+0x46>
 80094da:	4b41      	ldr	r3, [pc, #260]	@ (80095e0 <xTaskIncrementTick+0x150>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	4b40      	ldr	r3, [pc, #256]	@ (80095e4 <xTaskIncrementTick+0x154>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a3e      	ldr	r2, [pc, #248]	@ (80095e0 <xTaskIncrementTick+0x150>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4a3e      	ldr	r2, [pc, #248]	@ (80095e4 <xTaskIncrementTick+0x154>)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	4b3e      	ldr	r3, [pc, #248]	@ (80095e8 <xTaskIncrementTick+0x158>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a3c      	ldr	r2, [pc, #240]	@ (80095e8 <xTaskIncrementTick+0x158>)
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	f000 fad4 	bl	8009aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094fc:	4b3b      	ldr	r3, [pc, #236]	@ (80095ec <xTaskIncrementTick+0x15c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	429a      	cmp	r2, r3
 8009504:	d349      	bcc.n	800959a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009506:	4b36      	ldr	r3, [pc, #216]	@ (80095e0 <xTaskIncrementTick+0x150>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009510:	4b36      	ldr	r3, [pc, #216]	@ (80095ec <xTaskIncrementTick+0x15c>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	601a      	str	r2, [r3, #0]
					break;
 8009518:	e03f      	b.n	800959a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b31      	ldr	r3, [pc, #196]	@ (80095e0 <xTaskIncrementTick+0x150>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	429a      	cmp	r2, r3
 8009530:	d203      	bcs.n	800953a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009532:	4a2e      	ldr	r2, [pc, #184]	@ (80095ec <xTaskIncrementTick+0x15c>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009538:	e02f      	b.n	800959a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	3304      	adds	r3, #4
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe fd66 	bl	8008010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3318      	adds	r3, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fd5d 	bl	8008010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	4b25      	ldr	r3, [pc, #148]	@ (80095f0 <xTaskIncrementTick+0x160>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d903      	bls.n	800956a <xTaskIncrementTick+0xda>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	4a22      	ldr	r2, [pc, #136]	@ (80095f0 <xTaskIncrementTick+0x160>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4a1f      	ldr	r2, [pc, #124]	@ (80095f4 <xTaskIncrementTick+0x164>)
 8009578:	441a      	add	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3304      	adds	r3, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fe fce8 	bl	8007f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958a:	4b1b      	ldr	r3, [pc, #108]	@ (80095f8 <xTaskIncrementTick+0x168>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	429a      	cmp	r2, r3
 8009592:	d3b8      	bcc.n	8009506 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009598:	e7b5      	b.n	8009506 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800959a:	4b17      	ldr	r3, [pc, #92]	@ (80095f8 <xTaskIncrementTick+0x168>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4914      	ldr	r1, [pc, #80]	@ (80095f4 <xTaskIncrementTick+0x164>)
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d901      	bls.n	80095b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095b6:	4b11      	ldr	r3, [pc, #68]	@ (80095fc <xTaskIncrementTick+0x16c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d007      	beq.n	80095ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80095be:	2301      	movs	r3, #1
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e004      	b.n	80095ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009600 <xTaskIncrementTick+0x170>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009600 <xTaskIncrementTick+0x170>)
 80095cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095ce:	697b      	ldr	r3, [r7, #20]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	200011a0 	.word	0x200011a0
 80095dc:	2000117c 	.word	0x2000117c
 80095e0:	20001130 	.word	0x20001130
 80095e4:	20001134 	.word	0x20001134
 80095e8:	20001190 	.word	0x20001190
 80095ec:	20001198 	.word	0x20001198
 80095f0:	20001180 	.word	0x20001180
 80095f4:	20000ca8 	.word	0x20000ca8
 80095f8:	20000ca4 	.word	0x20000ca4
 80095fc:	2000118c 	.word	0x2000118c
 8009600:	20001188 	.word	0x20001188

08009604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800960a:	4b28      	ldr	r3, [pc, #160]	@ (80096ac <vTaskSwitchContext+0xa8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009612:	4b27      	ldr	r3, [pc, #156]	@ (80096b0 <vTaskSwitchContext+0xac>)
 8009614:	2201      	movs	r2, #1
 8009616:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009618:	e042      	b.n	80096a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800961a:	4b25      	ldr	r3, [pc, #148]	@ (80096b0 <vTaskSwitchContext+0xac>)
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009620:	4b24      	ldr	r3, [pc, #144]	@ (80096b4 <vTaskSwitchContext+0xb0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	e011      	b.n	800964c <vTaskSwitchContext+0x48>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <vTaskSwitchContext+0x42>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <vTaskSwitchContext+0x3e>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3b01      	subs	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	491a      	ldr	r1, [pc, #104]	@ (80096b8 <vTaskSwitchContext+0xb4>)
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0e3      	beq.n	8009628 <vTaskSwitchContext+0x24>
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4a13      	ldr	r2, [pc, #76]	@ (80096b8 <vTaskSwitchContext+0xb4>)
 800966c:	4413      	add	r3, r2
 800966e:	60bb      	str	r3, [r7, #8]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	605a      	str	r2, [r3, #4]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	3308      	adds	r3, #8
 8009682:	429a      	cmp	r2, r3
 8009684:	d104      	bne.n	8009690 <vTaskSwitchContext+0x8c>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	605a      	str	r2, [r3, #4]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	4a09      	ldr	r2, [pc, #36]	@ (80096bc <vTaskSwitchContext+0xb8>)
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	4a06      	ldr	r2, [pc, #24]	@ (80096b4 <vTaskSwitchContext+0xb0>)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6013      	str	r3, [r2, #0]
}
 80096a0:	bf00      	nop
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	200011a0 	.word	0x200011a0
 80096b0:	2000118c 	.word	0x2000118c
 80096b4:	20001180 	.word	0x20001180
 80096b8:	20000ca8 	.word	0x20000ca8
 80096bc:	20000ca4 	.word	0x20000ca4

080096c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096e8:	4b07      	ldr	r3, [pc, #28]	@ (8009708 <vTaskPlaceOnEventList+0x48>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3318      	adds	r3, #24
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7fe fc54 	bl	8007f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096f6:	2101      	movs	r1, #1
 80096f8:	6838      	ldr	r0, [r7, #0]
 80096fa:	f000 fb91 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000ca4 	.word	0x20000ca4

0800970c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	617b      	str	r3, [r7, #20]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009736:	4b0a      	ldr	r3, [pc, #40]	@ (8009760 <vTaskPlaceOnEventListRestricted+0x54>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3318      	adds	r3, #24
 800973c:	4619      	mov	r1, r3
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7fe fc09 	bl	8007f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	68b8      	ldr	r0, [r7, #8]
 8009754:	f000 fb64 	bl	8009e20 <prvAddCurrentTaskToDelayedList>
	}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000ca4 	.word	0x20000ca4

08009764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10b      	bne.n	8009792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	60fb      	str	r3, [r7, #12]
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3318      	adds	r3, #24
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fc3a 	bl	8008010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979c:	4b1d      	ldr	r3, [pc, #116]	@ (8009814 <xTaskRemoveFromEventList+0xb0>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11d      	bne.n	80097e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fc31 	bl	8008010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b2:	4b19      	ldr	r3, [pc, #100]	@ (8009818 <xTaskRemoveFromEventList+0xb4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d903      	bls.n	80097c2 <xTaskRemoveFromEventList+0x5e>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	4a16      	ldr	r2, [pc, #88]	@ (8009818 <xTaskRemoveFromEventList+0xb4>)
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4a13      	ldr	r2, [pc, #76]	@ (800981c <xTaskRemoveFromEventList+0xb8>)
 80097d0:	441a      	add	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7fe fbbc 	bl	8007f56 <vListInsertEnd>
 80097de:	e005      	b.n	80097ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	3318      	adds	r3, #24
 80097e4:	4619      	mov	r1, r3
 80097e6:	480e      	ldr	r0, [pc, #56]	@ (8009820 <xTaskRemoveFromEventList+0xbc>)
 80097e8:	f7fe fbb5 	bl	8007f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009824 <xTaskRemoveFromEventList+0xc0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d905      	bls.n	8009806 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097fa:	2301      	movs	r3, #1
 80097fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <xTaskRemoveFromEventList+0xc4>)
 8009800:	2201      	movs	r2, #1
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	e001      	b.n	800980a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800980a:	697b      	ldr	r3, [r7, #20]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	200011a0 	.word	0x200011a0
 8009818:	20001180 	.word	0x20001180
 800981c:	20000ca8 	.word	0x20000ca8
 8009820:	20001138 	.word	0x20001138
 8009824:	20000ca4 	.word	0x20000ca4
 8009828:	2000118c 	.word	0x2000118c

0800982c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009834:	4b06      	ldr	r3, [pc, #24]	@ (8009850 <vTaskInternalSetTimeOutState+0x24>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <vTaskInternalSetTimeOutState+0x28>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	605a      	str	r2, [r3, #4]
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20001190 	.word	0x20001190
 8009854:	2000117c 	.word	0x2000117c

08009858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	613b      	str	r3, [r7, #16]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60fb      	str	r3, [r7, #12]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800989e:	f000 ff9b 	bl	800a7d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009918 <xTaskCheckForTimeOut+0xc0>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d102      	bne.n	80098c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e023      	b.n	800990a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b15      	ldr	r3, [pc, #84]	@ (800991c <xTaskCheckForTimeOut+0xc4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d007      	beq.n	80098de <xTaskCheckForTimeOut+0x86>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	e015      	b.n	800990a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d20b      	bcs.n	8009900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff ff99 	bl	800982c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	e004      	b.n	800990a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009906:	2301      	movs	r3, #1
 8009908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800990a:	f000 ff97 	bl	800a83c <vPortExitCritical>

	return xReturn;
 800990e:	69fb      	ldr	r3, [r7, #28]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	2000117c 	.word	0x2000117c
 800991c:	20001190 	.word	0x20001190

08009920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009924:	4b03      	ldr	r3, [pc, #12]	@ (8009934 <vTaskMissedYield+0x14>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	2000118c 	.word	0x2000118c

08009938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009940:	f000 f852 	bl	80099e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009944:	4b06      	ldr	r3, [pc, #24]	@ (8009960 <prvIdleTask+0x28>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d9f9      	bls.n	8009940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800994c:	4b05      	ldr	r3, [pc, #20]	@ (8009964 <prvIdleTask+0x2c>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800995c:	e7f0      	b.n	8009940 <prvIdleTask+0x8>
 800995e:	bf00      	nop
 8009960:	20000ca8 	.word	0x20000ca8
 8009964:	e000ed04 	.word	0xe000ed04

08009968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
 8009972:	e00c      	b.n	800998e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4a12      	ldr	r2, [pc, #72]	@ (80099c8 <prvInitialiseTaskLists+0x60>)
 8009980:	4413      	add	r3, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe faba 	bl	8007efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3301      	adds	r3, #1
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b37      	cmp	r3, #55	@ 0x37
 8009992:	d9ef      	bls.n	8009974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009994:	480d      	ldr	r0, [pc, #52]	@ (80099cc <prvInitialiseTaskLists+0x64>)
 8009996:	f7fe fab1 	bl	8007efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800999a:	480d      	ldr	r0, [pc, #52]	@ (80099d0 <prvInitialiseTaskLists+0x68>)
 800999c:	f7fe faae 	bl	8007efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099a0:	480c      	ldr	r0, [pc, #48]	@ (80099d4 <prvInitialiseTaskLists+0x6c>)
 80099a2:	f7fe faab 	bl	8007efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099a6:	480c      	ldr	r0, [pc, #48]	@ (80099d8 <prvInitialiseTaskLists+0x70>)
 80099a8:	f7fe faa8 	bl	8007efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099ac:	480b      	ldr	r0, [pc, #44]	@ (80099dc <prvInitialiseTaskLists+0x74>)
 80099ae:	f7fe faa5 	bl	8007efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099b2:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <prvInitialiseTaskLists+0x78>)
 80099b4:	4a05      	ldr	r2, [pc, #20]	@ (80099cc <prvInitialiseTaskLists+0x64>)
 80099b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099b8:	4b0a      	ldr	r3, [pc, #40]	@ (80099e4 <prvInitialiseTaskLists+0x7c>)
 80099ba:	4a05      	ldr	r2, [pc, #20]	@ (80099d0 <prvInitialiseTaskLists+0x68>)
 80099bc:	601a      	str	r2, [r3, #0]
}
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000ca8 	.word	0x20000ca8
 80099cc:	20001108 	.word	0x20001108
 80099d0:	2000111c 	.word	0x2000111c
 80099d4:	20001138 	.word	0x20001138
 80099d8:	2000114c 	.word	0x2000114c
 80099dc:	20001164 	.word	0x20001164
 80099e0:	20001130 	.word	0x20001130
 80099e4:	20001134 	.word	0x20001134

080099e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ee:	e019      	b.n	8009a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099f0:	f000 fef2 	bl	800a7d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f4:	4b10      	ldr	r3, [pc, #64]	@ (8009a38 <prvCheckTasksWaitingTermination+0x50>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe fb05 	bl	8008010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <prvCheckTasksWaitingTermination+0x54>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a3c <prvCheckTasksWaitingTermination+0x54>)
 8009a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a10:	4b0b      	ldr	r3, [pc, #44]	@ (8009a40 <prvCheckTasksWaitingTermination+0x58>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <prvCheckTasksWaitingTermination+0x58>)
 8009a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a1a:	f000 ff0f 	bl	800a83c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f810 	bl	8009a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <prvCheckTasksWaitingTermination+0x58>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e1      	bne.n	80099f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	2000114c 	.word	0x2000114c
 8009a3c:	20001178 	.word	0x20001178
 8009a40:	20001160 	.word	0x20001160

08009a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d108      	bne.n	8009a68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 f8ac 	bl	800abb8 <vPortFree>
				vPortFree( pxTCB );
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f8a9 	bl	800abb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a66:	e019      	b.n	8009a9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d103      	bne.n	8009a7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 f8a0 	bl	800abb8 <vPortFree>
	}
 8009a78:	e010      	b.n	8009a9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d00b      	beq.n	8009a9c <prvDeleteTCB+0x58>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	60fb      	str	r3, [r7, #12]
}
 8009a96:	bf00      	nop
 8009a98:	bf00      	nop
 8009a9a:	e7fd      	b.n	8009a98 <prvDeleteTCB+0x54>
	}
 8009a9c:	bf00      	nop
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8009adc <prvResetNextTaskUnblockTime+0x38>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009abc:	e008      	b.n	8009ad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009abe:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <prvResetNextTaskUnblockTime+0x38>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	4a04      	ldr	r2, [pc, #16]	@ (8009ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ace:	6013      	str	r3, [r2, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	20001130 	.word	0x20001130
 8009ae0:	20001198 	.word	0x20001198

08009ae4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009aea:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <xTaskGetCurrentTaskHandle+0x1c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009af0:	687b      	ldr	r3, [r7, #4]
	}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20000ca4 	.word	0x20000ca4

08009b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b38 <xTaskGetSchedulerState+0x34>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b12:	2301      	movs	r3, #1
 8009b14:	607b      	str	r3, [r7, #4]
 8009b16:	e008      	b.n	8009b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b18:	4b08      	ldr	r3, [pc, #32]	@ (8009b3c <xTaskGetSchedulerState+0x38>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b20:	2302      	movs	r3, #2
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	e001      	b.n	8009b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b2a:	687b      	ldr	r3, [r7, #4]
	}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	20001184 	.word	0x20001184
 8009b3c:	200011a0 	.word	0x200011a0

08009b40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d051      	beq.n	8009bfa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8009c04 <xTaskPriorityInherit+0xc4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d241      	bcs.n	8009be8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	db06      	blt.n	8009b7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6c:	4b25      	ldr	r3, [pc, #148]	@ (8009c04 <xTaskPriorityInherit+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6959      	ldr	r1, [r3, #20]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b82:	4613      	mov	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c08 <xTaskPriorityInherit+0xc8>)
 8009b8c:	4413      	add	r3, r2
 8009b8e:	4299      	cmp	r1, r3
 8009b90:	d122      	bne.n	8009bd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fa3a 	bl	8008010 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b9c:	4b19      	ldr	r3, [pc, #100]	@ (8009c04 <xTaskPriorityInherit+0xc4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009baa:	4b18      	ldr	r3, [pc, #96]	@ (8009c0c <xTaskPriorityInherit+0xcc>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d903      	bls.n	8009bba <xTaskPriorityInherit+0x7a>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb6:	4a15      	ldr	r2, [pc, #84]	@ (8009c0c <xTaskPriorityInherit+0xcc>)
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4a10      	ldr	r2, [pc, #64]	@ (8009c08 <xTaskPriorityInherit+0xc8>)
 8009bc8:	441a      	add	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fe f9c0 	bl	8007f56 <vListInsertEnd>
 8009bd6:	e004      	b.n	8009be2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <xTaskPriorityInherit+0xc4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009be2:	2301      	movs	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	e008      	b.n	8009bfa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <xTaskPriorityInherit+0xc4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d201      	bcs.n	8009bfa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
	}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000ca4 	.word	0x20000ca4
 8009c08:	20000ca8 	.word	0x20000ca8
 8009c0c:	20001180 	.word	0x20001180

08009c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d058      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c26:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce4 <xTaskPriorityDisinherit+0xd4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d00b      	beq.n	8009c48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10b      	bne.n	8009c68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60bb      	str	r3, [r7, #8]
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6c:	1e5a      	subs	r2, r3, #1
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d02c      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d128      	bne.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe f9c0 	bl	8008010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce8 <xTaskPriorityDisinherit+0xd8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <xTaskPriorityDisinherit+0xa8>
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8009ce8 <xTaskPriorityDisinherit+0xd8>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a09      	ldr	r2, [pc, #36]	@ (8009cec <xTaskPriorityDisinherit+0xdc>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe f941 	bl	8007f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd8:	697b      	ldr	r3, [r7, #20]
	}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000ca4 	.word	0x20000ca4
 8009ce8:	20001180 	.word	0x20001180
 8009cec:	20000ca8 	.word	0x20000ca8

08009cf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d06c      	beq.n	8009de2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10b      	bne.n	8009d28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d902      	bls.n	8009d38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	e002      	b.n	8009d3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d04c      	beq.n	8009de2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d147      	bne.n	8009de2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d52:	4b26      	ldr	r3, [pc, #152]	@ (8009dec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d10b      	bne.n	8009d74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60bb      	str	r3, [r7, #8]
}
 8009d6e:	bf00      	nop
 8009d70:	bf00      	nop
 8009d72:	e7fd      	b.n	8009d70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	db04      	blt.n	8009d92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	6959      	ldr	r1, [r3, #20]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4a13      	ldr	r2, [pc, #76]	@ (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009da2:	4413      	add	r3, r2
 8009da4:	4299      	cmp	r1, r3
 8009da6:	d11c      	bne.n	8009de2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe f92f 	bl	8008010 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db6:	4b0f      	ldr	r3, [pc, #60]	@ (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d903      	bls.n	8009dc6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4a07      	ldr	r2, [pc, #28]	@ (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009dd4:	441a      	add	r2, r3
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7fe f8ba 	bl	8007f56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009de2:	bf00      	nop
 8009de4:	3720      	adds	r7, #32
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000ca4 	.word	0x20000ca4
 8009df0:	20000ca8 	.word	0x20000ca8
 8009df4:	20001180 	.word	0x20001180

08009df8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009dfc:	4b07      	ldr	r3, [pc, #28]	@ (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d004      	beq.n	8009e0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e04:	4b05      	ldr	r3, [pc, #20]	@ (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009e0e:	4b03      	ldr	r3, [pc, #12]	@ (8009e1c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e10:	681b      	ldr	r3, [r3, #0]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20000ca4 	.word	0x20000ca4

08009e20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e2a:	4b21      	ldr	r3, [pc, #132]	@ (8009eb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e30:	4b20      	ldr	r3, [pc, #128]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe f8ea 	bl	8008010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d10a      	bne.n	8009e5a <prvAddCurrentTaskToDelayedList+0x3a>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4819      	ldr	r0, [pc, #100]	@ (8009eb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e54:	f7fe f87f 	bl	8007f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e58:	e026      	b.n	8009ea8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4413      	add	r3, r2
 8009e60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e62:	4b14      	ldr	r3, [pc, #80]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d209      	bcs.n	8009e86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe f88d 	bl	8007f9e <vListInsert>
}
 8009e84:	e010      	b.n	8009ea8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e86:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fe f883 	bl	8007f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d202      	bcs.n	8009ea8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ea2:	4a08      	ldr	r2, [pc, #32]	@ (8009ec4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6013      	str	r3, [r2, #0]
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	2000117c 	.word	0x2000117c
 8009eb4:	20000ca4 	.word	0x20000ca4
 8009eb8:	20001164 	.word	0x20001164
 8009ebc:	20001134 	.word	0x20001134
 8009ec0:	20001130 	.word	0x20001130
 8009ec4:	20001198 	.word	0x20001198

08009ec8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	@ 0x28
 8009ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ed2:	f000 fb13 	bl	800a4fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f4c <xTimerCreateTimerTask+0x84>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d021      	beq.n	8009f22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ee6:	1d3a      	adds	r2, r7, #4
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fd ffe9 	bl	8007ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	9202      	str	r2, [sp, #8]
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	2302      	movs	r3, #2
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	460a      	mov	r2, r1
 8009f08:	4911      	ldr	r1, [pc, #68]	@ (8009f50 <xTimerCreateTimerTask+0x88>)
 8009f0a:	4812      	ldr	r0, [pc, #72]	@ (8009f54 <xTimerCreateTimerTask+0x8c>)
 8009f0c:	f7fe ffc0 	bl	8008e90 <xTaskCreateStatic>
 8009f10:	4603      	mov	r3, r0
 8009f12:	4a11      	ldr	r2, [pc, #68]	@ (8009f58 <xTimerCreateTimerTask+0x90>)
 8009f14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f16:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <xTimerCreateTimerTask+0x90>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	613b      	str	r3, [r7, #16]
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	e7fd      	b.n	8009f3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f40:	697b      	ldr	r3, [r7, #20]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200011d4 	.word	0x200011d4
 8009f50:	0800af44 	.word	0x0800af44
 8009f54:	0800a095 	.word	0x0800a095
 8009f58:	200011d8 	.word	0x200011d8

08009f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	@ 0x28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10b      	bne.n	8009f8c <xTimerGenericCommand+0x30>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	e7fd      	b.n	8009f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f8c:	4b19      	ldr	r3, [pc, #100]	@ (8009ff4 <xTimerGenericCommand+0x98>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02a      	beq.n	8009fea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b05      	cmp	r3, #5
 8009fa4:	dc18      	bgt.n	8009fd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fa6:	f7ff fdad 	bl	8009b04 <xTaskGetSchedulerState>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d109      	bne.n	8009fc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fb0:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <xTimerGenericCommand+0x98>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	f107 0110 	add.w	r1, r7, #16
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fbc:	f7fe fa50 	bl	8008460 <xQueueGenericSend>
 8009fc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fc2:	e012      	b.n	8009fea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff4 <xTimerGenericCommand+0x98>)
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	f107 0110 	add.w	r1, r7, #16
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f7fe fa46 	bl	8008460 <xQueueGenericSend>
 8009fd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fd6:	e008      	b.n	8009fea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fd8:	4b06      	ldr	r3, [pc, #24]	@ (8009ff4 <xTimerGenericCommand+0x98>)
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	f107 0110 	add.w	r1, r7, #16
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	f7fe fb3e 	bl	8008664 <xQueueGenericSendFromISR>
 8009fe8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3728      	adds	r7, #40	@ 0x28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	200011d4 	.word	0x200011d4

08009ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b088      	sub	sp, #32
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a002:	4b23      	ldr	r3, [pc, #140]	@ (800a090 <prvProcessExpiredTimer+0x98>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fd fffd 	bl	8008010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d023      	beq.n	800a06c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	699a      	ldr	r2, [r3, #24]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	18d1      	adds	r1, r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	6978      	ldr	r0, [r7, #20]
 800a032:	f000 f8d5 	bl	800a1e0 <prvInsertTimerInActiveList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d020      	beq.n	800a07e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a03c:	2300      	movs	r3, #0
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2300      	movs	r3, #0
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	2100      	movs	r1, #0
 800a046:	6978      	ldr	r0, [r7, #20]
 800a048:	f7ff ff88 	bl	8009f5c <xTimerGenericCommand>
 800a04c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d114      	bne.n	800a07e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	b2da      	uxtb	r2, r3
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	6978      	ldr	r0, [r7, #20]
 800a084:	4798      	blx	r3
}
 800a086:	bf00      	nop
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200011cc 	.word	0x200011cc

0800a094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f859 	bl	800a158 <prvGetNextExpireTime>
 800a0a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f805 	bl	800a0bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0b2:	f000 f8d7 	bl	800a264 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0b6:	bf00      	nop
 800a0b8:	e7f0      	b.n	800a09c <prvTimerTask+0x8>
	...

0800a0bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0c6:	f7ff f927 	bl	8009318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f866 	bl	800a1a0 <prvSampleTimeNow>
 800a0d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d130      	bne.n	800a13e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <prvProcessTimerOrBlockTask+0x3c>
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d806      	bhi.n	800a0f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0ea:	f7ff f923 	bl	8009334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff ff81 	bl	8009ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0f6:	e024      	b.n	800a142 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0fe:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <prvProcessTimerOrBlockTask+0x90>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <prvProcessTimerOrBlockTask+0x50>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <prvProcessTimerOrBlockTask+0x52>
 800a10c:	2300      	movs	r3, #0
 800a10e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a110:	4b0f      	ldr	r3, [pc, #60]	@ (800a150 <prvProcessTimerOrBlockTask+0x94>)
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	4619      	mov	r1, r3
 800a11e:	f7fe fe83 	bl	8008e28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a122:	f7ff f907 	bl	8009334 <xTaskResumeAll>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a12c:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <prvProcessTimerOrBlockTask+0x98>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	f3bf 8f6f 	isb	sy
}
 800a13c:	e001      	b.n	800a142 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a13e:	f7ff f8f9 	bl	8009334 <xTaskResumeAll>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	200011d0 	.word	0x200011d0
 800a150:	200011d4 	.word	0x200011d4
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a160:	4b0e      	ldr	r3, [pc, #56]	@ (800a19c <prvGetNextExpireTime+0x44>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <prvGetNextExpireTime+0x16>
 800a16a:	2201      	movs	r2, #1
 800a16c:	e000      	b.n	800a170 <prvGetNextExpireTime+0x18>
 800a16e:	2200      	movs	r2, #0
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d105      	bne.n	800a188 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a17c:	4b07      	ldr	r3, [pc, #28]	@ (800a19c <prvGetNextExpireTime+0x44>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	e001      	b.n	800a18c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a18c:	68fb      	ldr	r3, [r7, #12]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	200011cc 	.word	0x200011cc

0800a1a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1a8:	f7ff f962 	bl	8009470 <xTaskGetTickCount>
 800a1ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <prvSampleTimeNow+0x3c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d205      	bcs.n	800a1c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1b8:	f000 f93a 	bl	800a430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1ca:	4a04      	ldr	r2, [pc, #16]	@ (800a1dc <prvSampleTimeNow+0x3c>)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200011dc 	.word	0x200011dc

0800a1e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
 800a1ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d812      	bhi.n	800a22c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	429a      	cmp	r2, r3
 800a212:	d302      	bcc.n	800a21a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a214:	2301      	movs	r3, #1
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	e01b      	b.n	800a252 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a21a:	4b10      	ldr	r3, [pc, #64]	@ (800a25c <prvInsertTimerInActiveList+0x7c>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fd feba 	bl	8007f9e <vListInsert>
 800a22a:	e012      	b.n	800a252 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	429a      	cmp	r2, r3
 800a232:	d206      	bcs.n	800a242 <prvInsertTimerInActiveList+0x62>
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d302      	bcc.n	800a242 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a23c:	2301      	movs	r3, #1
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	e007      	b.n	800a252 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a242:	4b07      	ldr	r3, [pc, #28]	@ (800a260 <prvInsertTimerInActiveList+0x80>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3304      	adds	r3, #4
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f7fd fea6 	bl	8007f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a252:	697b      	ldr	r3, [r7, #20]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	200011d0 	.word	0x200011d0
 800a260:	200011cc 	.word	0x200011cc

0800a264 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08e      	sub	sp, #56	@ 0x38
 800a268:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a26a:	e0ce      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da19      	bge.n	800a2a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	3304      	adds	r3, #4
 800a276:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10b      	bne.n	800a296 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	61fb      	str	r3, [r7, #28]
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	e7fd      	b.n	800a292 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a29c:	6850      	ldr	r0, [r2, #4]
 800a29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a0:	6892      	ldr	r2, [r2, #8]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f2c0 80ae 	blt.w	800a40a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fd fea6 	bl	8008010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2c4:	463b      	mov	r3, r7
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff ff6a 	bl	800a1a0 <prvSampleTimeNow>
 800a2cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	f200 8097 	bhi.w	800a404 <prvProcessReceivedCommands+0x1a0>
 800a2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <prvProcessReceivedCommands+0x78>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a305 	.word	0x0800a305
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a37b 	.word	0x0800a37b
 800a2ec:	0800a38f 	.word	0x0800a38f
 800a2f0:	0800a3db 	.word	0x0800a3db
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a305 	.word	0x0800a305
 800a2fc:	0800a37b 	.word	0x0800a37b
 800a300:	0800a38f 	.word	0x0800a38f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a30a:	f043 0301 	orr.w	r3, r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	18d1      	adds	r1, r2, r3
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a324:	f7ff ff5c 	bl	800a1e0 <prvInsertTimerInActiveList>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d06c      	beq.n	800a408 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a334:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d061      	beq.n	800a408 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	441a      	add	r2, r3
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	2100      	movs	r1, #0
 800a354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a356:	f7ff fe01 	bl	8009f5c <xTimerGenericCommand>
 800a35a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d152      	bne.n	800a408 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	61bb      	str	r3, [r7, #24]
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop
 800a378:	e7fd      	b.n	800a376 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	b2da      	uxtb	r2, r3
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a38c:	e03d      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a394:	f043 0301 	orr.w	r3, r3, #1
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10b      	bne.n	800a3c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	617b      	str	r3, [r7, #20]
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	e7fd      	b.n	800a3c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	18d1      	adds	r1, r2, r3
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d4:	f7ff ff04 	bl	800a1e0 <prvInsertTimerInActiveList>
					break;
 800a3d8:	e017      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ea:	f000 fbe5 	bl	800abb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3ee:	e00c      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f6:	f023 0301 	bic.w	r3, r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a402:	e002      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a404:	bf00      	nop
 800a406:	e000      	b.n	800a40a <prvProcessReceivedCommands+0x1a6>
					break;
 800a408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a40a:	4b08      	ldr	r3, [pc, #32]	@ (800a42c <prvProcessReceivedCommands+0x1c8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	1d39      	adds	r1, r7, #4
 800a410:	2200      	movs	r2, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe f9c4 	bl	80087a0 <xQueueReceive>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f47f af26 	bne.w	800a26c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	3730      	adds	r7, #48	@ 0x30
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	200011d4 	.word	0x200011d4

0800a430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a436:	e049      	b.n	800a4cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a438:	4b2e      	ldr	r3, [pc, #184]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a442:	4b2c      	ldr	r3, [pc, #176]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3304      	adds	r3, #4
 800a450:	4618      	mov	r0, r3
 800a452:	f7fd fddd 	bl	8008010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d02f      	beq.n	800a4cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	4413      	add	r3, r2
 800a474:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d90e      	bls.n	800a49c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a48a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3304      	adds	r3, #4
 800a492:	4619      	mov	r1, r3
 800a494:	4610      	mov	r0, r2
 800a496:	f7fd fd82 	bl	8007f9e <vListInsert>
 800a49a:	e017      	b.n	800a4cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a49c:	2300      	movs	r3, #0
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fd58 	bl	8009f5c <xTimerGenericCommand>
 800a4ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10b      	bne.n	800a4cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	603b      	str	r3, [r7, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	bf00      	nop
 800a4ca:	e7fd      	b.n	800a4c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4cc:	4b09      	ldr	r3, [pc, #36]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1b0      	bne.n	800a438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4d6:	4b07      	ldr	r3, [pc, #28]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <prvSwitchTimerLists+0xc8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a04      	ldr	r2, [pc, #16]	@ (800a4f4 <prvSwitchTimerLists+0xc4>)
 800a4e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4e4:	4a04      	ldr	r2, [pc, #16]	@ (800a4f8 <prvSwitchTimerLists+0xc8>)
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	6013      	str	r3, [r2, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200011cc 	.word	0x200011cc
 800a4f8:	200011d0 	.word	0x200011d0

0800a4fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a502:	f000 f969 	bl	800a7d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a506:	4b15      	ldr	r3, [pc, #84]	@ (800a55c <prvCheckForValidListAndQueue+0x60>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d120      	bne.n	800a550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a50e:	4814      	ldr	r0, [pc, #80]	@ (800a560 <prvCheckForValidListAndQueue+0x64>)
 800a510:	f7fd fcf4 	bl	8007efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a514:	4813      	ldr	r0, [pc, #76]	@ (800a564 <prvCheckForValidListAndQueue+0x68>)
 800a516:	f7fd fcf1 	bl	8007efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a51a:	4b13      	ldr	r3, [pc, #76]	@ (800a568 <prvCheckForValidListAndQueue+0x6c>)
 800a51c:	4a10      	ldr	r2, [pc, #64]	@ (800a560 <prvCheckForValidListAndQueue+0x64>)
 800a51e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a520:	4b12      	ldr	r3, [pc, #72]	@ (800a56c <prvCheckForValidListAndQueue+0x70>)
 800a522:	4a10      	ldr	r2, [pc, #64]	@ (800a564 <prvCheckForValidListAndQueue+0x68>)
 800a524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a526:	2300      	movs	r3, #0
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <prvCheckForValidListAndQueue+0x74>)
 800a52c:	4a11      	ldr	r2, [pc, #68]	@ (800a574 <prvCheckForValidListAndQueue+0x78>)
 800a52e:	2110      	movs	r1, #16
 800a530:	200a      	movs	r0, #10
 800a532:	f7fd fe01 	bl	8008138 <xQueueGenericCreateStatic>
 800a536:	4603      	mov	r3, r0
 800a538:	4a08      	ldr	r2, [pc, #32]	@ (800a55c <prvCheckForValidListAndQueue+0x60>)
 800a53a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a53c:	4b07      	ldr	r3, [pc, #28]	@ (800a55c <prvCheckForValidListAndQueue+0x60>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a544:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <prvCheckForValidListAndQueue+0x60>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	490b      	ldr	r1, [pc, #44]	@ (800a578 <prvCheckForValidListAndQueue+0x7c>)
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fc42 	bl	8008dd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a550:	f000 f974 	bl	800a83c <vPortExitCritical>
}
 800a554:	bf00      	nop
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200011d4 	.word	0x200011d4
 800a560:	200011a4 	.word	0x200011a4
 800a564:	200011b8 	.word	0x200011b8
 800a568:	200011cc 	.word	0x200011cc
 800a56c:	200011d0 	.word	0x200011d0
 800a570:	20001280 	.word	0x20001280
 800a574:	200011e0 	.word	0x200011e0
 800a578:	0800af4c 	.word	0x0800af4c

0800a57c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3b04      	subs	r3, #4
 800a58c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3b04      	subs	r3, #4
 800a59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f023 0201 	bic.w	r2, r3, #1
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5ac:	4a0c      	ldr	r2, [pc, #48]	@ (800a5e0 <pxPortInitialiseStack+0x64>)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3b14      	subs	r3, #20
 800a5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f06f 0202 	mvn.w	r2, #2
 800a5ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	3b20      	subs	r3, #32
 800a5d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	0800a5e5 	.word	0x0800a5e5

0800a5e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5ee:	4b13      	ldr	r3, [pc, #76]	@ (800a63c <prvTaskExitError+0x58>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d00b      	beq.n	800a610 <prvTaskExitError+0x2c>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60fb      	str	r3, [r7, #12]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <prvTaskExitError+0x28>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	60bb      	str	r3, [r7, #8]
}
 800a622:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a624:	bf00      	nop
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0fc      	beq.n	800a626 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	2000000c 	.word	0x2000000c

0800a640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a640:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <pxCurrentTCBConst2>)
 800a642:	6819      	ldr	r1, [r3, #0]
 800a644:	6808      	ldr	r0, [r1, #0]
 800a646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64a:	f380 8809 	msr	PSP, r0
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f04f 0000 	mov.w	r0, #0
 800a656:	f380 8811 	msr	BASEPRI, r0
 800a65a:	4770      	bx	lr
 800a65c:	f3af 8000 	nop.w

0800a660 <pxCurrentTCBConst2>:
 800a660:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop

0800a668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a668:	4808      	ldr	r0, [pc, #32]	@ (800a68c <prvPortStartFirstTask+0x24>)
 800a66a:	6800      	ldr	r0, [r0, #0]
 800a66c:	6800      	ldr	r0, [r0, #0]
 800a66e:	f380 8808 	msr	MSP, r0
 800a672:	f04f 0000 	mov.w	r0, #0
 800a676:	f380 8814 	msr	CONTROL, r0
 800a67a:	b662      	cpsie	i
 800a67c:	b661      	cpsie	f
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	df00      	svc	0
 800a688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a68a:	bf00      	nop
 800a68c:	e000ed08 	.word	0xe000ed08

0800a690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a696:	4b47      	ldr	r3, [pc, #284]	@ (800a7b4 <xPortStartScheduler+0x124>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a47      	ldr	r2, [pc, #284]	@ (800a7b8 <xPortStartScheduler+0x128>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d10b      	bne.n	800a6b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	60fb      	str	r3, [r7, #12]
}
 800a6b2:	bf00      	nop
 800a6b4:	bf00      	nop
 800a6b6:	e7fd      	b.n	800a6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7b4 <xPortStartScheduler+0x124>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a7bc <xPortStartScheduler+0x12c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d10b      	bne.n	800a6da <xPortStartScheduler+0x4a>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	613b      	str	r3, [r7, #16]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6da:	4b39      	ldr	r3, [pc, #228]	@ (800a7c0 <xPortStartScheduler+0x130>)
 800a6dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	22ff      	movs	r2, #255	@ 0xff
 800a6ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	4b31      	ldr	r3, [pc, #196]	@ (800a7c4 <xPortStartScheduler+0x134>)
 800a700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a702:	4b31      	ldr	r3, [pc, #196]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a704:	2207      	movs	r2, #7
 800a706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a708:	e009      	b.n	800a71e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a70a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3b01      	subs	r3, #1
 800a710:	4a2d      	ldr	r2, [pc, #180]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a726:	2b80      	cmp	r3, #128	@ 0x80
 800a728:	d0ef      	beq.n	800a70a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a72a:	4b27      	ldr	r3, [pc, #156]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f1c3 0307 	rsb	r3, r3, #7
 800a732:	2b04      	cmp	r3, #4
 800a734:	d00b      	beq.n	800a74e <xPortStartScheduler+0xbe>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60bb      	str	r3, [r7, #8]
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a74e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a758:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a760:	4a19      	ldr	r2, [pc, #100]	@ (800a7c8 <xPortStartScheduler+0x138>)
 800a762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	b2da      	uxtb	r2, r3
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a76c:	4b17      	ldr	r3, [pc, #92]	@ (800a7cc <xPortStartScheduler+0x13c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	@ (800a7cc <xPortStartScheduler+0x13c>)
 800a772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a778:	4b14      	ldr	r3, [pc, #80]	@ (800a7cc <xPortStartScheduler+0x13c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a13      	ldr	r2, [pc, #76]	@ (800a7cc <xPortStartScheduler+0x13c>)
 800a77e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a784:	f000 f8da 	bl	800a93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a788:	4b11      	ldr	r3, [pc, #68]	@ (800a7d0 <xPortStartScheduler+0x140>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a78e:	f000 f8f9 	bl	800a984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a792:	4b10      	ldr	r3, [pc, #64]	@ (800a7d4 <xPortStartScheduler+0x144>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a0f      	ldr	r2, [pc, #60]	@ (800a7d4 <xPortStartScheduler+0x144>)
 800a798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a79c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a79e:	f7ff ff63 	bl	800a668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7a2:	f7fe ff2f 	bl	8009604 <vTaskSwitchContext>
	prvTaskExitError();
 800a7a6:	f7ff ff1d 	bl	800a5e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	e000ed00 	.word	0xe000ed00
 800a7b8:	410fc271 	.word	0x410fc271
 800a7bc:	410fc270 	.word	0x410fc270
 800a7c0:	e000e400 	.word	0xe000e400
 800a7c4:	200012d0 	.word	0x200012d0
 800a7c8:	200012d4 	.word	0x200012d4
 800a7cc:	e000ed20 	.word	0xe000ed20
 800a7d0:	2000000c 	.word	0x2000000c
 800a7d4:	e000ef34 	.word	0xe000ef34

0800a7d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7f2:	4b10      	ldr	r3, [pc, #64]	@ (800a834 <vPortEnterCritical+0x5c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a834 <vPortEnterCritical+0x5c>)
 800a7fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a834 <vPortEnterCritical+0x5c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d110      	bne.n	800a826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a804:	4b0c      	ldr	r3, [pc, #48]	@ (800a838 <vPortEnterCritical+0x60>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <vPortEnterCritical+0x4e>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	603b      	str	r3, [r7, #0]
}
 800a820:	bf00      	nop
 800a822:	bf00      	nop
 800a824:	e7fd      	b.n	800a822 <vPortEnterCritical+0x4a>
	}
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	2000000c 	.word	0x2000000c
 800a838:	e000ed04 	.word	0xe000ed04

0800a83c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a842:	4b12      	ldr	r3, [pc, #72]	@ (800a88c <vPortExitCritical+0x50>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10b      	bne.n	800a862 <vPortExitCritical+0x26>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	607b      	str	r3, [r7, #4]
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	e7fd      	b.n	800a85e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a862:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <vPortExitCritical+0x50>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3b01      	subs	r3, #1
 800a868:	4a08      	ldr	r2, [pc, #32]	@ (800a88c <vPortExitCritical+0x50>)
 800a86a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a86c:	4b07      	ldr	r3, [pc, #28]	@ (800a88c <vPortExitCritical+0x50>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <vPortExitCritical+0x44>
 800a874:	2300      	movs	r3, #0
 800a876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f383 8811 	msr	BASEPRI, r3
}
 800a87e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	2000000c 	.word	0x2000000c

0800a890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a890:	f3ef 8009 	mrs	r0, PSP
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	4b15      	ldr	r3, [pc, #84]	@ (800a8f0 <pxCurrentTCBConst>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	f01e 0f10 	tst.w	lr, #16
 800a8a0:	bf08      	it	eq
 800a8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8b4:	f380 8811 	msr	BASEPRI, r0
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f7fe fea0 	bl	8009604 <vTaskSwitchContext>
 800a8c4:	f04f 0000 	mov.w	r0, #0
 800a8c8:	f380 8811 	msr	BASEPRI, r0
 800a8cc:	bc09      	pop	{r0, r3}
 800a8ce:	6819      	ldr	r1, [r3, #0]
 800a8d0:	6808      	ldr	r0, [r1, #0]
 800a8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d6:	f01e 0f10 	tst.w	lr, #16
 800a8da:	bf08      	it	eq
 800a8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8e0:	f380 8809 	msr	PSP, r0
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst>:
 800a8f0:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	607b      	str	r3, [r7, #4]
}
 800a910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a912:	f7fe fdbd 	bl	8009490 <xTaskIncrementTick>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a91c:	4b06      	ldr	r3, [pc, #24]	@ (800a938 <xPortSysTickHandler+0x40>)
 800a91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	2300      	movs	r3, #0
 800a926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f383 8811 	msr	BASEPRI, r3
}
 800a92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a930:	bf00      	nop
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a940:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <vPortSetupTimerInterrupt+0x34>)
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a946:	4b0b      	ldr	r3, [pc, #44]	@ (800a974 <vPortSetupTimerInterrupt+0x38>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a94c:	4b0a      	ldr	r3, [pc, #40]	@ (800a978 <vPortSetupTimerInterrupt+0x3c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a0a      	ldr	r2, [pc, #40]	@ (800a97c <vPortSetupTimerInterrupt+0x40>)
 800a952:	fba2 2303 	umull	r2, r3, r2, r3
 800a956:	099b      	lsrs	r3, r3, #6
 800a958:	4a09      	ldr	r2, [pc, #36]	@ (800a980 <vPortSetupTimerInterrupt+0x44>)
 800a95a:	3b01      	subs	r3, #1
 800a95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a95e:	4b04      	ldr	r3, [pc, #16]	@ (800a970 <vPortSetupTimerInterrupt+0x34>)
 800a960:	2207      	movs	r2, #7
 800a962:	601a      	str	r2, [r3, #0]
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	e000e010 	.word	0xe000e010
 800a974:	e000e018 	.word	0xe000e018
 800a978:	20000000 	.word	0x20000000
 800a97c:	10624dd3 	.word	0x10624dd3
 800a980:	e000e014 	.word	0xe000e014

0800a984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a994 <vPortEnableVFP+0x10>
 800a988:	6801      	ldr	r1, [r0, #0]
 800a98a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a98e:	6001      	str	r1, [r0, #0]
 800a990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a992:	bf00      	nop
 800a994:	e000ed88 	.word	0xe000ed88

0800a998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a99e:	f3ef 8305 	mrs	r3, IPSR
 800a9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b0f      	cmp	r3, #15
 800a9a8:	d915      	bls.n	800a9d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9aa:	4a18      	ldr	r2, [pc, #96]	@ (800aa0c <vPortValidateInterruptPriority+0x74>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9b4:	4b16      	ldr	r3, [pc, #88]	@ (800aa10 <vPortValidateInterruptPriority+0x78>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	7afa      	ldrb	r2, [r7, #11]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d20b      	bcs.n	800a9d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
}
 800a9d0:	bf00      	nop
 800a9d2:	bf00      	nop
 800a9d4:	e7fd      	b.n	800a9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa14 <vPortValidateInterruptPriority+0x7c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a9de:	4b0e      	ldr	r3, [pc, #56]	@ (800aa18 <vPortValidateInterruptPriority+0x80>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d90b      	bls.n	800a9fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	603b      	str	r3, [r7, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <vPortValidateInterruptPriority+0x62>
	}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	e000e3f0 	.word	0xe000e3f0
 800aa10:	200012d0 	.word	0x200012d0
 800aa14:	e000ed0c 	.word	0xe000ed0c
 800aa18:	200012d4 	.word	0x200012d4

0800aa1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	@ 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa28:	f7fe fc76 	bl	8009318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aba0 <pvPortMalloc+0x184>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa34:	f000 f924 	bl	800ac80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa38:	4b5a      	ldr	r3, [pc, #360]	@ (800aba4 <pvPortMalloc+0x188>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4013      	ands	r3, r2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8095 	bne.w	800ab70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01e      	beq.n	800aa8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d015      	beq.n	800aa8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	3308      	adds	r3, #8
 800aa66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00b      	beq.n	800aa8a <pvPortMalloc+0x6e>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	617b      	str	r3, [r7, #20]
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	e7fd      	b.n	800aa86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d06f      	beq.n	800ab70 <pvPortMalloc+0x154>
 800aa90:	4b45      	ldr	r3, [pc, #276]	@ (800aba8 <pvPortMalloc+0x18c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d86a      	bhi.n	800ab70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa9a:	4b44      	ldr	r3, [pc, #272]	@ (800abac <pvPortMalloc+0x190>)
 800aa9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa9e:	4b43      	ldr	r3, [pc, #268]	@ (800abac <pvPortMalloc+0x190>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa4:	e004      	b.n	800aab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d903      	bls.n	800aac2 <pvPortMalloc+0xa6>
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f1      	bne.n	800aaa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aac2:	4b37      	ldr	r3, [pc, #220]	@ (800aba0 <pvPortMalloc+0x184>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d051      	beq.n	800ab70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2208      	movs	r2, #8
 800aad2:	4413      	add	r3, r2
 800aad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	2308      	movs	r3, #8
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d920      	bls.n	800ab30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00b      	beq.n	800ab18 <pvPortMalloc+0xfc>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	e7fd      	b.n	800ab14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1ad2      	subs	r2, r2, r3
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab2a:	69b8      	ldr	r0, [r7, #24]
 800ab2c:	f000 f90a 	bl	800ad44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab30:	4b1d      	ldr	r3, [pc, #116]	@ (800aba8 <pvPortMalloc+0x18c>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aba8 <pvPortMalloc+0x18c>)
 800ab3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aba8 <pvPortMalloc+0x18c>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4b1b      	ldr	r3, [pc, #108]	@ (800abb0 <pvPortMalloc+0x194>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d203      	bcs.n	800ab52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab4a:	4b17      	ldr	r3, [pc, #92]	@ (800aba8 <pvPortMalloc+0x18c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	@ (800abb0 <pvPortMalloc+0x194>)
 800ab50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	4b13      	ldr	r3, [pc, #76]	@ (800aba4 <pvPortMalloc+0x188>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab66:	4b13      	ldr	r3, [pc, #76]	@ (800abb4 <pvPortMalloc+0x198>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	4a11      	ldr	r2, [pc, #68]	@ (800abb4 <pvPortMalloc+0x198>)
 800ab6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab70:	f7fe fbe0 	bl	8009334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <pvPortMalloc+0x17a>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	60fb      	str	r3, [r7, #12]
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	e7fd      	b.n	800ab92 <pvPortMalloc+0x176>
	return pvReturn;
 800ab96:	69fb      	ldr	r3, [r7, #28]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3728      	adds	r7, #40	@ 0x28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20004ee0 	.word	0x20004ee0
 800aba4:	20004ef4 	.word	0x20004ef4
 800aba8:	20004ee4 	.word	0x20004ee4
 800abac:	20004ed8 	.word	0x20004ed8
 800abb0:	20004ee8 	.word	0x20004ee8
 800abb4:	20004eec 	.word	0x20004eec

0800abb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d04f      	beq.n	800ac6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abca:	2308      	movs	r3, #8
 800abcc:	425b      	negs	r3, r3
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	4b25      	ldr	r3, [pc, #148]	@ (800ac74 <vPortFree+0xbc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10b      	bne.n	800abfe <vPortFree+0x46>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60fb      	str	r3, [r7, #12]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <vPortFree+0x66>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	60bb      	str	r3, [r7, #8]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	4b14      	ldr	r3, [pc, #80]	@ (800ac74 <vPortFree+0xbc>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4013      	ands	r3, r2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01e      	beq.n	800ac6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d11a      	bne.n	800ac6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	4b0e      	ldr	r3, [pc, #56]	@ (800ac74 <vPortFree+0xbc>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	401a      	ands	r2, r3
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac44:	f7fe fb68 	bl	8009318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac78 <vPortFree+0xc0>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4413      	add	r3, r2
 800ac52:	4a09      	ldr	r2, [pc, #36]	@ (800ac78 <vPortFree+0xc0>)
 800ac54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac56:	6938      	ldr	r0, [r7, #16]
 800ac58:	f000 f874 	bl	800ad44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac5c:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <vPortFree+0xc4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	4a06      	ldr	r2, [pc, #24]	@ (800ac7c <vPortFree+0xc4>)
 800ac64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac66:	f7fe fb65 	bl	8009334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac6a:	bf00      	nop
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20004ef4 	.word	0x20004ef4
 800ac78:	20004ee4 	.word	0x20004ee4
 800ac7c:	20004ef0 	.word	0x20004ef0

0800ac80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac8c:	4b27      	ldr	r3, [pc, #156]	@ (800ad2c <prvHeapInit+0xac>)
 800ac8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00c      	beq.n	800acb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0307 	bic.w	r3, r3, #7
 800aca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	4a1f      	ldr	r2, [pc, #124]	@ (800ad2c <prvHeapInit+0xac>)
 800acb0:	4413      	add	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad30 <prvHeapInit+0xb0>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ad30 <prvHeapInit+0xb0>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	4413      	add	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800accc:	2208      	movs	r2, #8
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1a9b      	subs	r3, r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0307 	bic.w	r3, r3, #7
 800acda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4a15      	ldr	r2, [pc, #84]	@ (800ad34 <prvHeapInit+0xb4>)
 800ace0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ace2:	4b14      	ldr	r3, [pc, #80]	@ (800ad34 <prvHeapInit+0xb4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acea:	4b12      	ldr	r3, [pc, #72]	@ (800ad34 <prvHeapInit+0xb4>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	1ad2      	subs	r2, r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad00:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <prvHeapInit+0xb4>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ad38 <prvHeapInit+0xb8>)
 800ad0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4a09      	ldr	r2, [pc, #36]	@ (800ad3c <prvHeapInit+0xbc>)
 800ad16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad18:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <prvHeapInit+0xc0>)
 800ad1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad1e:	601a      	str	r2, [r3, #0]
}
 800ad20:	bf00      	nop
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	200012d8 	.word	0x200012d8
 800ad30:	20004ed8 	.word	0x20004ed8
 800ad34:	20004ee0 	.word	0x20004ee0
 800ad38:	20004ee8 	.word	0x20004ee8
 800ad3c:	20004ee4 	.word	0x20004ee4
 800ad40:	20004ef4 	.word	0x20004ef4

0800ad44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad4c:	4b28      	ldr	r3, [pc, #160]	@ (800adf0 <prvInsertBlockIntoFreeList+0xac>)
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	e002      	b.n	800ad58 <prvInsertBlockIntoFreeList+0x14>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d8f7      	bhi.n	800ad52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d108      	bne.n	800ad86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	441a      	add	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	441a      	add	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d118      	bne.n	800adcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	4b15      	ldr	r3, [pc, #84]	@ (800adf4 <prvInsertBlockIntoFreeList+0xb0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d00d      	beq.n	800adc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	441a      	add	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	e008      	b.n	800add4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adc2:	4b0c      	ldr	r3, [pc, #48]	@ (800adf4 <prvInsertBlockIntoFreeList+0xb0>)
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	e003      	b.n	800add4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d002      	beq.n	800ade2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20004ed8 	.word	0x20004ed8
 800adf4:	20004ee0 	.word	0x20004ee0

0800adf8 <memset>:
 800adf8:	4402      	add	r2, r0
 800adfa:	4603      	mov	r3, r0
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d100      	bne.n	800ae02 <memset+0xa>
 800ae00:	4770      	bx	lr
 800ae02:	f803 1b01 	strb.w	r1, [r3], #1
 800ae06:	e7f9      	b.n	800adfc <memset+0x4>

0800ae08 <strncpy>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	3901      	subs	r1, #1
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	b132      	cbz	r2, 800ae1e <strncpy+0x16>
 800ae10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae14:	f803 4b01 	strb.w	r4, [r3], #1
 800ae18:	3a01      	subs	r2, #1
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	d1f7      	bne.n	800ae0e <strncpy+0x6>
 800ae1e:	441a      	add	r2, r3
 800ae20:	2100      	movs	r1, #0
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d100      	bne.n	800ae28 <strncpy+0x20>
 800ae26:	bd10      	pop	{r4, pc}
 800ae28:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2c:	e7f9      	b.n	800ae22 <strncpy+0x1a>
	...

0800ae30 <__libc_init_array>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	4d0d      	ldr	r5, [pc, #52]	@ (800ae68 <__libc_init_array+0x38>)
 800ae34:	4c0d      	ldr	r4, [pc, #52]	@ (800ae6c <__libc_init_array+0x3c>)
 800ae36:	1b64      	subs	r4, r4, r5
 800ae38:	10a4      	asrs	r4, r4, #2
 800ae3a:	2600      	movs	r6, #0
 800ae3c:	42a6      	cmp	r6, r4
 800ae3e:	d109      	bne.n	800ae54 <__libc_init_array+0x24>
 800ae40:	4d0b      	ldr	r5, [pc, #44]	@ (800ae70 <__libc_init_array+0x40>)
 800ae42:	4c0c      	ldr	r4, [pc, #48]	@ (800ae74 <__libc_init_array+0x44>)
 800ae44:	f000 f826 	bl	800ae94 <_init>
 800ae48:	1b64      	subs	r4, r4, r5
 800ae4a:	10a4      	asrs	r4, r4, #2
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	42a6      	cmp	r6, r4
 800ae50:	d105      	bne.n	800ae5e <__libc_init_array+0x2e>
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae58:	4798      	blx	r3
 800ae5a:	3601      	adds	r6, #1
 800ae5c:	e7ee      	b.n	800ae3c <__libc_init_array+0xc>
 800ae5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae62:	4798      	blx	r3
 800ae64:	3601      	adds	r6, #1
 800ae66:	e7f2      	b.n	800ae4e <__libc_init_array+0x1e>
 800ae68:	0800b07c 	.word	0x0800b07c
 800ae6c:	0800b07c 	.word	0x0800b07c
 800ae70:	0800b07c 	.word	0x0800b07c
 800ae74:	0800b080 	.word	0x0800b080

0800ae78 <memcpy>:
 800ae78:	440a      	add	r2, r1
 800ae7a:	4291      	cmp	r1, r2
 800ae7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae80:	d100      	bne.n	800ae84 <memcpy+0xc>
 800ae82:	4770      	bx	lr
 800ae84:	b510      	push	{r4, lr}
 800ae86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8e:	4291      	cmp	r1, r2
 800ae90:	d1f9      	bne.n	800ae86 <memcpy+0xe>
 800ae92:	bd10      	pop	{r4, pc}

0800ae94 <_init>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr

0800aea0 <_fini>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

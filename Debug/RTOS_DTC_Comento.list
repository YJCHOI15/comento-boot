
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a454  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800a634  0800a634  0000b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a794  0800a794  0000c010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a794  0800a794  0000b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a79c  0800a79c  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a79c  0800a79c  0000b79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7a0  0800a7a0  0000b7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a7a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea0  20000010  0800a7b4  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004eb0  0800a7b4  0000ceb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b33d  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad9  00000000  00000000  0002737d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011cc  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a19  00000000  00000000  0002d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab68  00000000  00000000  0003110d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e20db  00000000  00000000  0004bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dd50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  0012dd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00133dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a61c 	.word	0x0800a61c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800a61c 	.word	0x0800a61c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f001 f8c8 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f874 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 faae 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 fa46 	bl	80009ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000560:	f000 f8cc 	bl	80006fc <MX_ADC1_Init>
  MX_CAN1_Init();
 8000564:	f000 f91c 	bl	80007a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000568:	f000 f94e 	bl	8000808 <MX_I2C1_Init>
  MX_I2C2_Init();
 800056c:	f000 f97a 	bl	8000864 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000570:	f000 f9a6 	bl	80008c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000574:	f000 f9da 	bl	800092c <MX_SPI2_Init>
  MX_UART4_Init();
 8000578:	f000 fa0e 	bl	8000998 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f006 fdea 	bl	8007154 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000580:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <main+0xa8>)
 8000582:	f006 fede 	bl	8007342 <osMutexNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <main+0xac>)
 800058a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <main+0xb0>)
 800058e:	2108      	movs	r1, #8
 8000590:	2008      	movs	r0, #8
 8000592:	f006 ffe4 	bl	800755e <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <main+0xb4>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <main+0xb8>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4819      	ldr	r0, [pc, #100]	@ (8000608 <main+0xbc>)
 80005a2:	f006 fe21 	bl	80071e8 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <main+0xc0>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 80005ac:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <main+0xc4>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4818      	ldr	r0, [pc, #96]	@ (8000614 <main+0xc8>)
 80005b2:	f006 fe19 	bl	80071e8 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <main+0xcc>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 80005bc:	4a17      	ldr	r2, [pc, #92]	@ (800061c <main+0xd0>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <main+0xd4>)
 80005c2:	f006 fe11 	bl	80071e8 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <main+0xd8>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 80005cc:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <main+0xdc>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <main+0xe0>)
 80005d2:	f006 fe09 	bl	80071e8 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <main+0xe4>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80005dc:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <main+0xe8>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4815      	ldr	r0, [pc, #84]	@ (8000638 <main+0xec>)
 80005e2:	f006 fe01 	bl	80071e8 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	@ (800063c <main+0xf0>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f006 fdd6 	bl	800719c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0xa4>
 80005f4:	0800a764 	.word	0x0800a764
 80005f8:	20000550 	.word	0x20000550
 80005fc:	0800a74c 	.word	0x0800a74c
 8000600:	2000054c 	.word	0x2000054c
 8000604:	0800a698 	.word	0x0800a698
 8000608:	08000bad 	.word	0x08000bad
 800060c:	20000538 	.word	0x20000538
 8000610:	0800a6bc 	.word	0x0800a6bc
 8000614:	08000bbd 	.word	0x08000bbd
 8000618:	2000053c 	.word	0x2000053c
 800061c:	0800a6e0 	.word	0x0800a6e0
 8000620:	08000c19 	.word	0x08000c19
 8000624:	20000540 	.word	0x20000540
 8000628:	0800a704 	.word	0x0800a704
 800062c:	08000c29 	.word	0x08000c29
 8000630:	20000544 	.word	0x20000544
 8000634:	0800a728 	.word	0x0800a728
 8000638:	08000c39 	.word	0x08000c39
 800063c:	20000548 	.word	0x20000548

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	@ 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 ffaa 	bl	800a5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xb4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <SystemClock_Config+0xb8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 f9cb 	bl	8005a4c <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006bc:	f000 fac4 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 ffd6 	bl	800568c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006e6:	f000 faaf 	bl	8000c48 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_ADC1_Init+0x98>)
 800073c:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_ADC1_Init+0xa0>)
 800073e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_ADC1_Init+0x98>)
 800075c:	f001 f834 	bl	80017c8 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fa6f 	bl	8000c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800076a:	2302      	movs	r3, #2
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <MX_ADC1_Init+0x98>)
 800077c:	f001 f868 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fa5f 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_CAN1_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ee:	f001 fa5d 	bl	8001cac <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fa26 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000074 	.word	0x20000074
 8000804:	40006400 	.word	0x40006400

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f002 fc41 	bl	80030cc <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 f9fa 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000009c 	.word	0x2000009c
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <MX_I2C2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <MX_I2C2_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_I2C2_Init+0x50>)
 80008a2:	f002 fc13 	bl	80030cc <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 f9cc 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000f0 	.word	0x200000f0
 80008b8:	40005800 	.word	0x40005800
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f005 fb1f 	bl	8005f54 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f994 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200002c4 	.word	0x200002c4
 8000928:	40013000 	.word	0x40013000

0800092c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_SPI2_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_SPI2_Init+0x64>)
 800097e:	f005 fae9 	bl	8005f54 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f95e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000031c 	.word	0x2000031c
 8000994:	40003800 	.word	0x40003800

08000998 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_UART4_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_UART4_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009d0:	f005 fc68 	bl	80062a4 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f935 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200004f4 	.word	0x200004f4
 80009e8:	40004c00 	.word	0x40004c00

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a27      	ldr	r2, [pc, #156]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	200b      	movs	r0, #11
 8000a30:	f001 fd4b 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a34:	200b      	movs	r0, #11
 8000a36:	f001 fd64 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	200d      	movs	r0, #13
 8000a40:	f001 fd43 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a44:	200d      	movs	r0, #13
 8000a46:	f001 fd5c 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	200e      	movs	r0, #14
 8000a50:	f001 fd3b 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a54:	200e      	movs	r0, #14
 8000a56:	f001 fd54 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f001 fd33 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a64:	200f      	movs	r0, #15
 8000a66:	f001 fd4c 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2011      	movs	r0, #17
 8000a70:	f001 fd2b 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a74:	2011      	movs	r0, #17
 8000a76:	f001 fd44 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	202f      	movs	r0, #47	@ 0x2f
 8000a80:	f001 fd23 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a84:	202f      	movs	r0, #47	@ 0x2f
 8000a86:	f001 fd3c 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2038      	movs	r0, #56	@ 0x38
 8000a90:	f001 fd1b 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a94:	2038      	movs	r0, #56	@ 0x38
 8000a96:	f001 fd34 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	203b      	movs	r0, #59	@ 0x3b
 8000aa0:	f001 fd13 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa4:	203b      	movs	r0, #59	@ 0x3b
 8000aa6:	f001 fd2c 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a33      	ldr	r2, [pc, #204]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b60:	f002 fa9a 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b64:	2303      	movs	r3, #3
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b7c:	f002 f8f8 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b84:	2311      	movs	r3, #17
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b98:	f002 f8ea 	bl	8002d70 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400

08000bac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f006 fba9 	bl	800730c <osDelay>
 8000bba:	e7fb      	b.n	8000bb4 <StartDefaultTask+0x8>

08000bbc <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  /* Infinite loop */
  for(;;)
  {
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <StartI2CTask+0x50>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fc3e 	bl	800744e <osMutexAcquire>

    if (PMIC_RequestFaultStatus_DMA() == HAL_OK) {
 8000bd2:	f000 f83f 	bl	8000c54 <PMIC_RequestFaultStatus_DMA>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10e      	bne.n	8000bfa <StartI2CTask+0x3e>
        // Wait completion
        while(!pmic_dma_done) osDelay(1);
 8000bdc:	e002      	b.n	8000be4 <StartI2CTask+0x28>
 8000bde:	2001      	movs	r0, #1
 8000be0:	f006 fb94 	bl	800730c <osDelay>
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <StartI2CTask+0x54>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f7      	beq.n	8000bde <StartI2CTask+0x22>

        if (pmic_uv_status.bits.BUCKA_UV || pmic_oc_status.bits.BUCKA_OC) {
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <StartI2CTask+0x58>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
          // DTC 저장 요청 함수 호출 등 수행
        }
    }

    osMutexRelease(CommMutexHandleHandle);
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <StartI2CTask+0x50>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f006 fc70 	bl	80074e4 <osMutexRelease>

    osDelay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f006 fb81 	bl	800730c <osDelay>
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000c0a:	e7db      	b.n	8000bc4 <StartI2CTask+0x8>
 8000c0c:	20000550 	.word	0x20000550
 8000c10:	20000559 	.word	0x20000559
 8000c14:	20000554 	.word	0x20000554

08000c18 <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPITask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f006 fb73 	bl	800730c <osDelay>
 8000c26:	e7fb      	b.n	8000c20 <StartSPITask+0x8>

08000c28 <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f006 fb6b 	bl	800730c <osDelay>
 8000c36:	e7fb      	b.n	8000c30 <StartCANTask+0x8>

08000c38 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f006 fb63 	bl	800730c <osDelay>
 8000c46:	e7fb      	b.n	8000c40 <StartUARTTask+0x8>

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <PMIC_RequestFaultStatus_DMA>:

PMIC_FaultStatus1_t pmic_uv_status;
PMIC_FaultStatus2_t pmic_oc_status;
volatile uint8_t pmic_dma_done = 0;

HAL_StatusTypeDef PMIC_RequestFaultStatus_DMA(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef ret;

    // Initialize DMA completion flag
    pmic_dma_done = 0;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <PMIC_RequestFaultStatus_DMA+0x30>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]

    // Read 0x07 register (UV/OV status)
    ret = HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000c60:	2301      	movs	r3, #1
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <PMIC_RequestFaultStatus_DMA+0x34>)
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	21c0      	movs	r1, #192	@ 0xc0
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <PMIC_RequestFaultStatus_DMA+0x38>)
 8000c70:	f002 fb70 	bl	8003354 <HAL_I2C_Mem_Read_DMA>
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
                                &pmic_uv_status.all,
                                1);

    // DMA is asynchronous and does not gaurantee sequential execution
    // -> After UV status is read, OC status is read in the callback
    return ret;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000559 	.word	0x20000559
 8000c88:	20000554 	.word	0x20000554
 8000c8c:	2000009c 	.word	0x2000009c

08000c90 <HAL_I2C_MemRxCpltCallback>:

// DMA receive complete callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <HAL_I2C_MemRxCpltCallback+0x34>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10c      	bne.n	8000cbc <HAL_I2C_MemRxCpltCallback+0x2c>
        HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_I2C_MemRxCpltCallback+0x38>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	2208      	movs	r2, #8
 8000cae:	21c0      	movs	r1, #192	@ 0xc0
 8000cb0:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <HAL_I2C_MemRxCpltCallback+0x3c>)
 8000cb2:	f002 fb4f 	bl	8003354 <HAL_I2C_Mem_Read_DMA>
                                PMIC_REG_FAULT_STATUS2,
                                I2C_MEMADD_SIZE_8BIT,
                                &pmic_oc_status.all,
                                1);

        pmic_dma_done = 1;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_I2C_MemRxCpltCallback+0x40>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
    }
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	20000558 	.word	0x20000558
 8000ccc:	2000009c 	.word	0x2000009c
 8000cd0:	20000559 	.word	0x20000559

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <HAL_MspInit+0x54>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_MspInit+0x54>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_MspInit+0x54>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_MspInit+0x54>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f001 fbd6 	bl	80024ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_ADC_MspInit+0x7c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d127      	bne.n	8000d9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_ADC_MspInit+0x80>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <HAL_ADC_MspInit+0x84>)
 8000d9a:	f001 ffe9 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012000 	.word	0x40012000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a21      	ldr	r2, [pc, #132]	@ (8000e58 <HAL_CAN_MspInit+0xa4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d13b      	bne.n	8000e4e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_CAN_MspInit+0xa8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e1e:	2309      	movs	r3, #9
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <HAL_CAN_MspInit+0xac>)
 8000e2a:	f001 ffa1 	bl	8002d70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2013      	movs	r0, #19
 8000e34:	f001 fb49 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e38:	2013      	movs	r0, #19
 8000e3a:	f001 fb62 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2105      	movs	r1, #5
 8000e42:	2014      	movs	r0, #20
 8000e44:	f001 fb41 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e48:	2014      	movs	r0, #20
 8000e4a:	f001 fb5a 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40021800 	.word	0x40021800

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a9c      	ldr	r2, [pc, #624]	@ (80010f4 <HAL_I2C_MspInit+0x290>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	f040 809b 	bne.w	8000fbe <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	4b9a      	ldr	r3, [pc, #616]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	4a99      	ldr	r2, [pc, #612]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e98:	4b97      	ldr	r3, [pc, #604]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	@ 0xc0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	488f      	ldr	r0, [pc, #572]	@ (80010fc <HAL_I2C_MspInit+0x298>)
 8000ec0:	f001 ff56 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	4b8b      	ldr	r3, [pc, #556]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a8a      	ldr	r2, [pc, #552]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b88      	ldr	r3, [pc, #544]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ee0:	4b87      	ldr	r3, [pc, #540]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000ee2:	4a88      	ldr	r2, [pc, #544]	@ (8001104 <HAL_I2C_MspInit+0x2a0>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ee6:	4b86      	ldr	r3, [pc, #536]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b84      	ldr	r3, [pc, #528]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b82      	ldr	r3, [pc, #520]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b81      	ldr	r3, [pc, #516]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f00:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f02:	4b7f      	ldr	r3, [pc, #508]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f08:	4b7d      	ldr	r3, [pc, #500]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f14:	4b7a      	ldr	r3, [pc, #488]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1c:	4b78      	ldr	r3, [pc, #480]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f22:	4877      	ldr	r0, [pc, #476]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f24:	f001 fb08 	bl	8002538 <HAL_DMA_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000f2e:	f7ff fe8b 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a72      	ldr	r2, [pc, #456]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f38:	4a71      	ldr	r2, [pc, #452]	@ (8001100 <HAL_I2C_MspInit+0x29c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f3e:	4b72      	ldr	r3, [pc, #456]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f40:	4a72      	ldr	r2, [pc, #456]	@ (800110c <HAL_I2C_MspInit+0x2a8>)
 8000f42:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f44:	4b70      	ldr	r3, [pc, #448]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4c:	4b6e      	ldr	r3, [pc, #440]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f4e:	2240      	movs	r2, #64	@ 0x40
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b6d      	ldr	r3, [pc, #436]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f60:	4b69      	ldr	r3, [pc, #420]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f66:	4b68      	ldr	r3, [pc, #416]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f6c:	4b66      	ldr	r3, [pc, #408]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f72:	4b65      	ldr	r3, [pc, #404]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f78:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f7a:	4b63      	ldr	r3, [pc, #396]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f80:	4861      	ldr	r0, [pc, #388]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f82:	f001 fad9 	bl	8002538 <HAL_DMA_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8000f8c:	f7ff fe5c 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a5d      	ldr	r2, [pc, #372]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f96:	4a5c      	ldr	r2, [pc, #368]	@ (8001108 <HAL_I2C_MspInit+0x2a4>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	201f      	movs	r0, #31
 8000fa2:	f001 fa92 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fa6:	201f      	movs	r0, #31
 8000fa8:	f001 faab 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2105      	movs	r1, #5
 8000fb0:	2020      	movs	r0, #32
 8000fb2:	f001 fa8a 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fb6:	2020      	movs	r0, #32
 8000fb8:	f001 faa3 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fbc:	e095      	b.n	80010ea <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a53      	ldr	r2, [pc, #332]	@ (8001110 <HAL_I2C_MspInit+0x2ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f040 8090 	bne.w	80010ea <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4844      	ldr	r0, [pc, #272]	@ (8001114 <HAL_I2C_MspInit+0x2b0>)
 8001002:	f001 feb5 	bl	8002d70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a3a      	ldr	r2, [pc, #232]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8001010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <HAL_I2C_MspInit+0x294>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001022:	4b3d      	ldr	r3, [pc, #244]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001024:	4a3d      	ldr	r2, [pc, #244]	@ (800111c <HAL_I2C_MspInit+0x2b8>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001028:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 800102a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800102e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001030:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 800103e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001042:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104a:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001062:	482d      	ldr	r0, [pc, #180]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001064:	f001 fa68 	bl	8002538 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 800106e:	f7ff fdeb 	bl	8000c48 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 8001076:	639a      	str	r2, [r3, #56]	@ 0x38
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <HAL_I2C_MspInit+0x2b4>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 8001080:	4a28      	ldr	r2, [pc, #160]	@ (8001124 <HAL_I2C_MspInit+0x2c0>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001084:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 8001086:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800108a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108c:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 800108e:	2240      	movs	r2, #64	@ 0x40
 8001090:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 800109a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010c0:	f001 fa3a 	bl	8002538 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80010ca:	f7ff fdbd 	bl	8000c48 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <HAL_I2C_MspInit+0x2bc>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2021      	movs	r0, #33	@ 0x21
 80010e0:	f001 f9f3 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010e4:	2021      	movs	r0, #33	@ 0x21
 80010e6:	f001 fa0c 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3730      	adds	r7, #48	@ 0x30
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000144 	.word	0x20000144
 8001104:	40026010 	.word	0x40026010
 8001108:	200001a4 	.word	0x200001a4
 800110c:	400260a0 	.word	0x400260a0
 8001110:	40005800 	.word	0x40005800
 8001114:	40021400 	.word	0x40021400
 8001118:	20000204 	.word	0x20000204
 800111c:	40026040 	.word	0x40026040
 8001120:	20000264 	.word	0x20000264
 8001124:	400260b8 	.word	0x400260b8

08001128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a4a      	ldr	r2, [pc, #296]	@ (8001270 <HAL_SPI_MspInit+0x148>)
 8001146:	4293      	cmp	r3, r2
 8001148:	f040 80a0 	bne.w	800128c <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	4b48      	ldr	r3, [pc, #288]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 8001152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001154:	4a47      	ldr	r2, [pc, #284]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 8001156:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115a:	6453      	str	r3, [r2, #68]	@ 0x44
 800115c:	4b45      	ldr	r3, [pc, #276]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 800115e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	4a40      	ldr	r2, [pc, #256]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6313      	str	r3, [r2, #48]	@ 0x30
 8001178:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <HAL_SPI_MspInit+0x14c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001184:	23e0      	movs	r3, #224	@ 0xe0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001194:	2305      	movs	r3, #5
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4836      	ldr	r0, [pc, #216]	@ (8001278 <HAL_SPI_MspInit+0x150>)
 80011a0:	f001 fde6 	bl	8002d70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011a6:	4a36      	ldr	r2, [pc, #216]	@ (8001280 <HAL_SPI_MspInit+0x158>)
 80011a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011ac:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b2:	4b32      	ldr	r3, [pc, #200]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b28      	ldr	r3, [pc, #160]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80011e4:	4825      	ldr	r0, [pc, #148]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011e6:	f001 f9a7 	bl	8002538 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80011f0:	f7ff fd2a 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a21      	ldr	r2, [pc, #132]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011fa:	4a20      	ldr	r2, [pc, #128]	@ (800127c <HAL_SPI_MspInit+0x154>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001202:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <HAL_SPI_MspInit+0x160>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001208:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800120c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001210:	2240      	movs	r2, #64	@ 0x40
 8001212:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001220:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001242:	f001 f979 	bl	8002538 <HAL_DMA_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800124c:	f7ff fcfc 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001254:	649a      	str	r2, [r3, #72]	@ 0x48
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_SPI_MspInit+0x15c>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2105      	movs	r1, #5
 8001260:	2023      	movs	r0, #35	@ 0x23
 8001262:	f001 f932 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001266:	2023      	movs	r0, #35	@ 0x23
 8001268:	f001 f94b 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800126c:	e0c1      	b.n	80013f2 <HAL_SPI_MspInit+0x2ca>
 800126e:	bf00      	nop
 8001270:	40013000 	.word	0x40013000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	20000374 	.word	0x20000374
 8001280:	40026410 	.word	0x40026410
 8001284:	200003d4 	.word	0x200003d4
 8001288:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a5a      	ldr	r2, [pc, #360]	@ (80013fc <HAL_SPI_MspInit+0x2d4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	f040 80ad 	bne.w	80013f2 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b55      	ldr	r3, [pc, #340]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b51      	ldr	r3, [pc, #324]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a50      	ldr	r2, [pc, #320]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a49      	ldr	r2, [pc, #292]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b47      	ldr	r3, [pc, #284]	@ (8001400 <HAL_SPI_MspInit+0x2d8>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ec:	230c      	movs	r3, #12
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fc:	2305      	movs	r3, #5
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	483f      	ldr	r0, [pc, #252]	@ (8001404 <HAL_SPI_MspInit+0x2dc>)
 8001308:	f001 fd32 	bl	8002d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131e:	2305      	movs	r3, #5
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4837      	ldr	r0, [pc, #220]	@ (8001408 <HAL_SPI_MspInit+0x2e0>)
 800132a:	f001 fd21 	bl	8002d70 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001330:	4a37      	ldr	r2, [pc, #220]	@ (8001410 <HAL_SPI_MspInit+0x2e8>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001348:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800136c:	4827      	ldr	r0, [pc, #156]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 800136e:	f001 f8e3 	bl	8002538 <HAL_DMA_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001378:	f7ff fc66 	bl	8000c48 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a23      	ldr	r2, [pc, #140]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001380:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001382:	4a22      	ldr	r2, [pc, #136]	@ (800140c <HAL_SPI_MspInit+0x2e4>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 800138a:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_SPI_MspInit+0x2f0>)
 800138c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 8001396:	2240      	movs	r2, #64	@ 0x40
 8001398:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013c6:	4813      	ldr	r0, [pc, #76]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013c8:	f001 f8b6 	bl	8002538 <HAL_DMA_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 80013d2:	f7ff fc39 	bl	8000c48 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013da:	649a      	str	r2, [r3, #72]	@ 0x48
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <HAL_SPI_MspInit+0x2ec>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2024      	movs	r0, #36	@ 0x24
 80013e8:	f001 f86f 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013ec:	2024      	movs	r0, #36	@ 0x24
 80013ee:	f001 f888 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	@ 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40003800 	.word	0x40003800
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020400 	.word	0x40020400
 800140c:	20000434 	.word	0x20000434
 8001410:	40026058 	.word	0x40026058
 8001414:	20000494 	.word	0x20000494
 8001418:	40026070 	.word	0x40026070

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a25      	ldr	r2, [pc, #148]	@ (80014d0 <HAL_UART_MspInit+0xb4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d144      	bne.n	80014c8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 8001448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_UART_MspInit+0xb8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001486:	2308      	movs	r3, #8
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <HAL_UART_MspInit+0xbc>)
 8001492:	f001 fc6d 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001496:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 80014a8:	230b      	movs	r3, #11
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <HAL_UART_MspInit+0xbc>)
 80014b4:	f001 fc5c 	bl	8002d70 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2105      	movs	r1, #5
 80014bc:	2034      	movs	r0, #52	@ 0x34
 80014be:	f001 f804 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014c2:	2034      	movs	r0, #52	@ 0x34
 80014c4:	f001 f81d 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40004c00 	.word	0x40004c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f937 	bl	8001788 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800151a:	f007 fecb 	bl	80092b4 <xTaskGetSchedulerState>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d001      	beq.n	8001528 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001524:	f008 fdc0 	bl	800a0a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA1_Stream0_IRQHandler+0x10>)
 8001532:	f001 f999 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000144 	.word	0x20000144

08001540 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Stream2_IRQHandler+0x10>)
 8001546:	f001 f98f 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000204 	.word	0x20000204

08001554 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DMA1_Stream3_IRQHandler+0x10>)
 800155a:	f001 f985 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000434 	.word	0x20000434

08001568 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <DMA1_Stream4_IRQHandler+0x10>)
 800156e:	f001 f97b 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000494 	.word	0x20000494

0800157c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <DMA1_Stream6_IRQHandler+0x10>)
 8001582:	f001 f971 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001a4 	.word	0x200001a4

08001590 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <CAN1_TX_IRQHandler+0x10>)
 8001596:	f000 fc84 	bl	8001ea2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000074 	.word	0x20000074

080015a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <CAN1_RX0_IRQHandler+0x10>)
 80015aa:	f000 fc7a 	bl	8001ea2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000074 	.word	0x20000074

080015b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <I2C1_EV_IRQHandler+0x10>)
 80015be:	f002 f85d 	bl	800367c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000009c 	.word	0x2000009c

080015cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <I2C1_ER_IRQHandler+0x10>)
 80015d2:	f002 f9c4 	bl	800395e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000009c 	.word	0x2000009c

080015e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <I2C2_EV_IRQHandler+0x10>)
 80015e6:	f002 f849 	bl	800367c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000f0 	.word	0x200000f0

080015f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <SPI1_IRQHandler+0x10>)
 80015fa:	f004 fd35 	bl	8006068 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002c4 	.word	0x200002c4

08001608 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <SPI2_IRQHandler+0x10>)
 800160e:	f004 fd2b 	bl	8006068 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000031c 	.word	0x2000031c

0800161c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DMA1_Stream7_IRQHandler+0x10>)
 8001622:	f001 f921 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000264 	.word	0x20000264

08001630 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <UART4_IRQHandler+0x10>)
 8001636:	f004 fe83 	bl	8006340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200004f4 	.word	0x200004f4

08001644 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <DMA2_Stream0_IRQHandler+0x10>)
 800164a:	f001 f90d 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000374 	.word	0x20000374

08001658 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <DMA2_Stream3_IRQHandler+0x10>)
 800165e:	f001 f903 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200003d4 	.word	0x200003d4

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	@ (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	@ (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f008 ff7b 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7fe ff43 	bl	800054c <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016d4:	0800a7a4 	.word	0x0800a7a4
  ldr r2, =_sbss
 80016d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016dc:	20004eb0 	.word	0x20004eb0

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fed1 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fadc 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fee9 	bl	800251e <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 feb1 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000055c 	.word	0x2000055c

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000055c 	.word	0x2000055c

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff faa0 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f94a 	bl	8001ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1c>
 8001868:	2302      	movs	r3, #2
 800186a:	e113      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x244>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b09      	cmp	r3, #9
 800187a:	d925      	bls.n	80018c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4403      	add	r3, r0
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e022      	b.n	800190e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	2207      	movs	r2, #7
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d824      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b05      	subs	r3, #5
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
 800195e:	e04c      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	@ 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	@ 0x23
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b0:	e023      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b41      	subs	r3, #65	@ 0x41
 80019c4:	221f      	movs	r2, #31
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	@ 0x41
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x250>)
 80019fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d10f      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12b      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x1f4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d122      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_ADC_ConfigChannel+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x260>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	10000012 	.word	0x10000012
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b79      	ldr	r3, [pc, #484]	@ (8001ca4 <ADC_Init+0x1f0>)
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <ADC_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e00f      	b.n	8001bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0202 	bic.w	r2, r2, #2
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	035a      	lsls	r2, r3, #13
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e007      	b.n	8001c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	051a      	lsls	r2, r3, #20
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6a:	025a      	lsls	r2, r3, #9
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	029a      	lsls	r2, r3, #10
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0ed      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f872 	bl	8000db4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7ff fd66 	bl	80017b0 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce6:	e012      	b.n	8001d0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce8:	f7ff fd62 	bl	80017b0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d90b      	bls.n	8001d0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0c5      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0e5      	beq.n	8001ce8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0202 	bic.w	r2, r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7ff fd40 	bl	80017b0 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d32:	e012      	b.n	8001d5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d34:	f7ff fd3c 	bl	80017b0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d90b      	bls.n	8001d5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e09f      	b.n	8001e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e5      	bne.n	8001d34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e5b      	ldrb	r3, [r3, #25]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e9b      	ldrb	r3, [r3, #26]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0220 	bic.w	r2, r2, #32
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7edb      	ldrb	r3, [r3, #27]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0210 	bic.w	r2, r2, #16
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7f1b      	ldrb	r3, [r3, #28]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e007      	b.n	8001e3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0208 	bic.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f5b      	ldrb	r3, [r3, #29]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	ea42 0103 	orr.w	r1, r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b08a      	sub	sp, #40	@ 0x28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d07c      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d023      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f983 	bl	8002210 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f0a:	e016      	b.n	8001f3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1e:	e00c      	b.n	8001f3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	e002      	b.n	8001f3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f989 	bl	800224c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d024      	beq.n	8001f8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f963 	bl	8002224 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f5e:	e016      	b.n	8001f8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f72:	e00c      	b.n	8001f8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f86:	e002      	b.n	8001f8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f969 	bl	8002260 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d024      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f943 	bl	8002238 <HAL_CAN_TxMailbox2CompleteCallback>
 8001fb2:	e016      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc6:	e00c      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e002      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f949 	bl	8002274 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2210      	movs	r2, #16
 8002004:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2208      	movs	r2, #8
 8002020:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f93a 	bl	800229c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f921 	bl	8002288 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2210      	movs	r2, #16
 8002068:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2208      	movs	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f91c 	bl	80022c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f903 	bl	80022b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2210      	movs	r2, #16
 80020c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f906 	bl	80022d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8ff 	bl	80022ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d07b      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d072      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d043      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03e      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002170:	2b60      	cmp	r3, #96	@ 0x60
 8002172:	d02b      	beq.n	80021cc <HAL_CAN_IRQHandler+0x32a>
 8002174:	2b60      	cmp	r3, #96	@ 0x60
 8002176:	d82e      	bhi.n	80021d6 <HAL_CAN_IRQHandler+0x334>
 8002178:	2b50      	cmp	r3, #80	@ 0x50
 800217a:	d022      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x320>
 800217c:	2b50      	cmp	r3, #80	@ 0x50
 800217e:	d82a      	bhi.n	80021d6 <HAL_CAN_IRQHandler+0x334>
 8002180:	2b40      	cmp	r3, #64	@ 0x40
 8002182:	d019      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x316>
 8002184:	2b40      	cmp	r3, #64	@ 0x40
 8002186:	d826      	bhi.n	80021d6 <HAL_CAN_IRQHandler+0x334>
 8002188:	2b30      	cmp	r3, #48	@ 0x30
 800218a:	d010      	beq.n	80021ae <HAL_CAN_IRQHandler+0x30c>
 800218c:	2b30      	cmp	r3, #48	@ 0x30
 800218e:	d822      	bhi.n	80021d6 <HAL_CAN_IRQHandler+0x334>
 8002190:	2b10      	cmp	r3, #16
 8002192:	d002      	beq.n	800219a <HAL_CAN_IRQHandler+0x2f8>
 8002194:	2b20      	cmp	r3, #32
 8002196:	d005      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002198:	e01d      	b.n	80021d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021a2:	e019      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	f043 0310 	orr.w	r3, r3, #16
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ac:	e014      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f043 0320 	orr.w	r3, r3, #32
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021b6:	e00f      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c0:	e00a      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ca:	e005      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d4:	e000      	b.n	80021d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80021d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f87c 	bl	8002300 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	@ 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff f934 	bl	80017b0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e099      	b.n	8002688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002574:	e00f      	b.n	8002596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002576:	f7ff f91b 	bl	80017b0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b05      	cmp	r3, #5
 8002582:	d908      	bls.n	8002596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e078      	b.n	8002688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e8      	bne.n	8002576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_DMA_Init+0x158>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0307 	bic.w	r3, r3, #7
 8002616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	2b04      	cmp	r3, #4
 8002628:	d117      	bne.n	800265a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb1b 	bl	8002c78 <DMA_CheckFifoParam>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2240      	movs	r2, #64	@ 0x40
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002656:	2301      	movs	r3, #1
 8002658:	e016      	b.n	8002688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fad2 	bl	8002c0c <DMA_CalcBaseAndBitshift>
 8002668:	4603      	mov	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	223f      	movs	r2, #63	@ 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	e010803f 	.word	0xe010803f

08002694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Start_IT+0x26>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e040      	b.n	800273c <HAL_DMA_Start_IT+0xa8>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12f      	bne.n	800272e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa64 	bl	8002bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	223f      	movs	r2, #63	@ 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0216 	orr.w	r2, r2, #22
 8002702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002752:	f7ff f82d 	bl	80017b0 <HAL_GetTick>
 8002756:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e052      	b.n	800281c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0216 	bic.w	r2, r2, #22
 8002784:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002794:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_DMA_Abort+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0208 	bic.w	r2, r2, #8
 80027b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c6:	e013      	b.n	80027f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c8:	f7fe fff2 	bl	80017b0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d90c      	bls.n	80027f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e015      	b.n	800281c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e4      	bne.n	80027c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	223f      	movs	r2, #63	@ 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00c      	b.n	800285c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2205      	movs	r2, #5
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002874:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab0 <HAL_DMA_IRQHandler+0x248>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab4 <HAL_DMA_IRQHandler+0x24c>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2208      	movs	r2, #8
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0204 	bic.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2208      	movs	r2, #8
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2204      	movs	r2, #4
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	2210      	movs	r2, #16
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2210      	movs	r2, #16
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d018      	beq.n	80029aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d108      	bne.n	8002998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e01f      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0208 	bic.w	r2, r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2220      	movs	r2, #32
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 808f 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8087 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2220      	movs	r2, #32
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d136      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0216 	bic.w	r2, r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x1da>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	223f      	movs	r2, #63	@ 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07e      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
        }
        return;
 8002a7e:	e079      	b.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e02c      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d023      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
 8002ac8:	e01e      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10f      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0210 	bic.w	r2, r2, #16
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d032      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d307      	bcc.n	8002b50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x2cc>
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b74:	bf00      	nop
    }
  }
}
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b40      	cmp	r3, #64	@ 0x40
 8002bdc:	d108      	bne.n	8002bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bee:	e007      	b.n	8002c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3b10      	subs	r3, #16
 8002c1c:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <DMA_CalcBaseAndBitshift+0x64>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c26:	4a13      	ldr	r2, [pc, #76]	@ (8002c74 <DMA_CalcBaseAndBitshift+0x68>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d909      	bls.n	8002c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	1d1a      	adds	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c4c:	e007      	b.n	8002c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	aaaaaaab 	.word	0xaaaaaaab
 8002c74:	0800a78c 	.word	0x0800a78c

08002c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d856      	bhi.n	8002d46 <DMA_CheckFifoParam+0xce>
 8002c98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <DMA_CheckFifoParam+0x28>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002d47 	.word	0x08002d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d046      	beq.n	8002d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc0:	e043      	b.n	8002d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cca:	d140      	bne.n	8002d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e03d      	b.n	8002d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cda:	d121      	bne.n	8002d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d837      	bhi.n	8002d52 <DMA_CheckFifoParam+0xda>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <DMA_CheckFifoParam+0x70>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002cff 	.word	0x08002cff
 8002cf0:	08002cf9 	.word	0x08002cf9
 8002cf4:	08002d11 	.word	0x08002d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfc:	e030      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d025      	beq.n	8002d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e022      	b.n	8002d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d1e:	e01c      	b.n	8002d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d903      	bls.n	8002d2e <DMA_CheckFifoParam+0xb6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d003      	beq.n	8002d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d2c:	e018      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      break;
 8002d32:	e015      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e00b      	b.n	8002d5e <DMA_CheckFifoParam+0xe6>
      break;
 8002d46:	bf00      	nop
 8002d48:	e00a      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e008      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e006      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e004      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	@ 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e165      	b.n	8003058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 8154 	bne.w	8003052 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d005      	beq.n	8002dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80ae 	beq.w	8003052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a5c      	ldr	r2, [pc, #368]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b5a      	ldr	r3, [pc, #360]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_GPIO_Init+0x304>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4f      	ldr	r2, [pc, #316]	@ (8003078 <HAL_GPIO_Init+0x308>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_GPIO_Init+0x30c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4d      	ldr	r2, [pc, #308]	@ (8003080 <HAL_GPIO_Init+0x310>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x212>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	@ (8003084 <HAL_GPIO_Init+0x314>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	@ (8003088 <HAL_GPIO_Init+0x318>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x20a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <HAL_GPIO_Init+0x31c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x206>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a49      	ldr	r2, [pc, #292]	@ (8003090 <HAL_GPIO_Init+0x320>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x202>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9c:	4935      	ldr	r1, [pc, #212]	@ (8003074 <HAL_GPIO_Init+0x304>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002faa:	4b3a      	ldr	r3, [pc, #232]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fce:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffe:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003028:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_GPIO_Init+0x324>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <HAL_GPIO_Init+0x324>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f67f ae96 	bls.w	8002d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd feb6 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	@ 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f002 fc64 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	@ (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	@ (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	@ (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	@ (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	@ (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	@ (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	@ (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	@ 0x30
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336e:	f7fe fa1f 	bl	80017b0 <HAL_GetTick>
 8003372:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 8176 	bne.w	8003672 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003386:	4b95      	ldr	r3, [pc, #596]	@ (80035dc <HAL_I2C_Mem_Read_DMA+0x288>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	08db      	lsrs	r3, r3, #3
 800338c:	4a94      	ldr	r2, [pc, #592]	@ (80035e0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	0a1a      	lsrs	r2, r3, #8
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d116      	bne.n	80033da <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e14c      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d0db      	beq.n	80033a0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Read_DMA+0xa2>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e13e      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d007      	beq.n	800341c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800342a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2222      	movs	r2, #34	@ 0x22
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	@ 0x40
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800344c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a62      	ldr	r2, [pc, #392]	@ (80035e4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800345e:	897a      	ldrh	r2, [r7, #10]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003464:	893a      	ldrh	r2, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80cc 	beq.w	8003618 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02d      	beq.n	80034e4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	4a56      	ldr	r2, [pc, #344]	@ (80035e8 <HAL_I2C_Mem_Read_DMA+0x294>)
 800348e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	4a55      	ldr	r2, [pc, #340]	@ (80035ec <HAL_I2C_Mem_Read_DMA+0x298>)
 8003496:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	2200      	movs	r2, #0
 80034a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	2200      	movs	r2, #0
 80034ae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3310      	adds	r3, #16
 80034c2:	4619      	mov	r1, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	461a      	mov	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	f7ff f8e1 	bl	8002694 <HAL_DMA_Start_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80034d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8087 	bne.w	80035f0 <HAL_I2C_Mem_Read_DMA+0x29c>
 80034e2:	e013      	b.n	800350c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b3      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800350c:	88f8      	ldrh	r0, [r7, #6]
 800350e:	893a      	ldrh	r2, [r7, #8]
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2323      	movs	r3, #35	@ 0x23
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4603      	mov	r3, r0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f001 fc7f 	bl	8004e20 <I2C_RequestMemoryRead>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d023      	beq.n	8003570 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f979 	bl	8002824 <HAL_DMA_Abort_IT>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	2200      	movs	r2, #0
 800353e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e081      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003598:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	e049      	b.n	800366e <HAL_I2C_Mem_Read_DMA+0x31a>
 80035da:	bf00      	nop
 80035dc:	20000000 	.word	0x20000000
 80035e0:	14f8b589 	.word	0x14f8b589
 80035e4:	ffff0000 	.word	0xffff0000
 80035e8:	08004ff1 	.word	0x08004ff1
 80035ec:	0800519b 	.word	0x0800519b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0210 	orr.w	r2, r3, #16
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e02d      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003618:	88f8      	ldrh	r0, [r7, #6]
 800361a:	893a      	ldrh	r2, [r7, #8]
 800361c:	8979      	ldrh	r1, [r7, #10]
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2323      	movs	r3, #35	@ 0x23
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4603      	mov	r3, r0
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f001 fbf9 	bl	8004e20 <I2C_RequestMemoryRead>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e01d      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	@ 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800369c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d003      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x38>
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	f040 80c1 	bne.w	8003836 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_I2C_EV_IRQHandler+0x6e>
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80036d4:	d003      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x62>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_EV_IRQHandler+0x66>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_EV_IRQHandler+0x68>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f000 8132 	beq.w	800394e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00c      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x92>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	0a5b      	lsrs	r3, r3, #9
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f001 ffa8 	bl	8005656 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fd6f 	bl	80041ea <I2C_Master_SB>
 800370c:	e092      	b.n	8003834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xb2>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fde5 	bl	80042f6 <I2C_Master_ADD10>
 800372c:	e082      	b.n	8003834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0xd2>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	0a5b      	lsrs	r3, r3, #9
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fdff 	bl	800434a <I2C_Master_ADDR>
 800374c:	e072      	b.n	8003834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03b      	beq.n	80037d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003768:	f000 80f3 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	09db      	lsrs	r3, r3, #7
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <HAL_I2C_EV_IRQHandler+0x11c>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_I2C_EV_IRQHandler+0x11c>
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9e9 	bl	8003b68 <I2C_MasterTransmit_TXE>
 8003796:	e04d      	b.n	8003834 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80d6 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	0a5b      	lsrs	r3, r3, #9
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80cf 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	2b21      	cmp	r3, #33	@ 0x21
 80037b8:	d103      	bne.n	80037c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa70 	bl	8003ca0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c0:	e0c7      	b.n	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	f040 80c4 	bne.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fade 	bl	8003d8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d0:	e0bf      	b.n	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037e0:	f000 80b7 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00f      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x194>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x194>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb53 	bl	8003eb4 <I2C_MasterReceive_RXNE>
 800380e:	e011      	b.n	8003834 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 809a 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	0a5b      	lsrs	r3, r3, #9
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8093 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fbf2 	bl	8004016 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003832:	e08e      	b.n	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003834:	e08d      	b.n	8003952 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e007      	b.n	8003858 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x20e>
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	0a5b      	lsrs	r3, r3, #9
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ffb0 	bl	80047e8 <I2C_Slave_ADDR>
 8003888:	e066      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x22e>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	0a5b      	lsrs	r3, r3, #9
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 ffea 	bl	800487c <I2C_Slave_STOPF>
 80038a8:	e056      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	2b21      	cmp	r3, #33	@ 0x21
 80038ae:	d002      	beq.n	80038b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	2b29      	cmp	r3, #41	@ 0x29
 80038b4:	d125      	bne.n	8003902 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	09db      	lsrs	r3, r3, #7
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x266>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	0a9b      	lsrs	r3, r3, #10
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x266>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fec6 	bl	800466c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e0:	e039      	b.n	8003956 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d033      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x2da>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	0a5b      	lsrs	r3, r3, #9
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02d      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fef3 	bl	80046e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003900:	e029      	b.n	8003956 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <HAL_I2C_EV_IRQHandler+0x2b2>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	0a9b      	lsrs	r3, r3, #10
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_I2C_EV_IRQHandler+0x2b2>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fefe 	bl	8004728 <I2C_SlaveReceive_RXNE>
 800392c:	e014      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	0a5b      	lsrs	r3, r3, #9
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 ff2c 	bl	80047a4 <I2C_SlaveReceive_BTF>
 800394c:	e004      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003956:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b08a      	sub	sp, #40	@ 0x28
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003980:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <HAL_I2C_ER_IRQHandler+0x4e>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	0a5b      	lsrs	r3, r3, #9
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0x78>
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80039d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	0a9b      	lsrs	r3, r3, #10
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03f      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x104>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d039      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80039ee:	7efb      	ldrb	r3, [r7, #27]
 80039f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a08:	7ebb      	ldrb	r3, [r7, #26]
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d112      	bne.n	8003a34 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b21      	cmp	r3, #33	@ 0x21
 8003a18:	d008      	beq.n	8003a2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b29      	cmp	r3, #41	@ 0x29
 8003a1e:	d005      	beq.n	8003a2c <HAL_I2C_ER_IRQHandler+0xce>
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b28      	cmp	r3, #40	@ 0x28
 8003a24:	d106      	bne.n	8003a34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b21      	cmp	r3, #33	@ 0x21
 8003a2a:	d103      	bne.n	8003a34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 f855 	bl	8004adc <I2C_Slave_AF>
 8003a32:	e016      	b.n	8003a62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a46:	7efb      	ldrb	r3, [r7, #27]
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d002      	beq.n	8003a52 <HAL_I2C_ER_IRQHandler+0xf4>
 8003a4c:	7efb      	ldrb	r3, [r7, #27]
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d107      	bne.n	8003a62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	0adb      	lsrs	r3, r3, #11
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00e      	beq.n	8003a8c <HAL_I2C_ER_IRQHandler+0x12e>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003a8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 f88c 	bl	8004bbc <I2C_ITError>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3728      	adds	r7, #40	@ 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d150      	bne.n	8003c30 <I2C_MasterTransmit_TXE+0xc8>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b21      	cmp	r3, #33	@ 0x21
 8003b92:	d14d      	bne.n	8003c30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d01d      	beq.n	8003bd6 <I2C_MasterTransmit_TXE+0x6e>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d01a      	beq.n	8003bd6 <I2C_MasterTransmit_TXE+0x6e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ba6:	d016      	beq.n	8003bd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bb6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2211      	movs	r2, #17
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff6c 	bl	8003aac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bd4:	e060      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003be4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	d107      	bne.n	8003c20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff87 	bl	8003b2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c1e:	e03b      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff3f 	bl	8003aac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c2e:	e033      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b21      	cmp	r3, #33	@ 0x21
 8003c34:	d005      	beq.n	8003c42 <I2C_MasterTransmit_TXE+0xda>
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	d12d      	bne.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b22      	cmp	r3, #34	@ 0x22
 8003c40:	d12a      	bne.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c5c:	e01c      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d103      	bne.n	8003c72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f88e 	bl	8003d8c <I2C_MemoryTransmit_TXE_BTF>
}
 8003c70:	e012      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c96:	e7ff      	b.n	8003c98 <I2C_MasterTransmit_TXE+0x130>
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d164      	bne.n	8003d84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ce8:	e04c      	b.n	8003d84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d01d      	beq.n	8003d2c <I2C_MasterTransmit_BTF+0x8c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d01a      	beq.n	8003d2c <I2C_MasterTransmit_BTF+0x8c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cfc:	d016      	beq.n	8003d2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2211      	movs	r2, #17
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fec1 	bl	8003aac <HAL_I2C_MasterTxCpltCallback>
}
 8003d2a:	e02b      	b.n	8003d84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d107      	bne.n	8003d76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fedc 	bl	8003b2c <HAL_I2C_MemTxCpltCallback>
}
 8003d74:	e006      	b.n	8003d84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe94 	bl	8003aac <HAL_I2C_MasterTxCpltCallback>
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11d      	bne.n	8003de0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10b      	bne.n	8003dc4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003dc2:	e073      	b.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	121b      	asrs	r3, r3, #8
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dde:	e065      	b.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dfe:	e055      	b.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d151      	bne.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b22      	cmp	r3, #34	@ 0x22
 8003e0c:	d10d      	bne.n	8003e2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e28:	e040      	b.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b21      	cmp	r3, #33	@ 0x21
 8003e38:	d112      	bne.n	8003e60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e5e:	e025      	b.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d120      	bne.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b21      	cmp	r3, #33	@ 0x21
 8003e6e:	d11d      	bne.n	8003eac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe40 	bl	8003b2c <HAL_I2C_MemTxCpltCallback>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b22      	cmp	r3, #34	@ 0x22
 8003ec6:	f040 80a2 	bne.w	800400e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d921      	bls.n	8003f1c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	f040 8082 	bne.w	800400e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f18:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003f1a:	e078      	b.n	800400e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d074      	beq.n	800400e <I2C_MasterReceive_RXNE+0x15a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d002      	beq.n	8003f30 <I2C_MasterReceive_RXNE+0x7c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d16e      	bne.n	800400e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f001 fb2f 	bl	8005594 <I2C_WaitOnSTOPRequestThroughIT>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d142      	bne.n	8003fc2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d10a      	bne.n	8003fac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fc fe73 	bl	8000c90 <HAL_I2C_MemRxCpltCallback>
}
 8003faa:	e030      	b.n	800400e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2212      	movs	r2, #18
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fd80 	bl	8003ac0 <HAL_I2C_MasterRxCpltCallback>
}
 8003fc0:	e025      	b.n	800400e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fd0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fd99 	bl	8003b40 <HAL_I2C_ErrorCallback>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b04      	cmp	r3, #4
 800402c:	d11b      	bne.n	8004066 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004064:	e0bd      	b.n	80041e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d129      	bne.n	80040c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d00a      	beq.n	800409c <I2C_MasterReceive_BTF+0x86>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d007      	beq.n	800409c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040c2:	e08e      	b.n	80041e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d176      	bne.n	80041bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <I2C_MasterReceive_BTF+0xc4>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d108      	bne.n	80040ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e019      	b.n	8004120 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d002      	beq.n	80040f8 <I2C_MasterReceive_BTF+0xe2>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d108      	bne.n	800410a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e00a      	b.n	8004120 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d007      	beq.n	8004120 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800417a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b40      	cmp	r3, #64	@ 0x40
 800418e:	d10a      	bne.n	80041a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fd76 	bl	8000c90 <HAL_I2C_MemRxCpltCallback>
}
 80041a4:	e01d      	b.n	80041e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2212      	movs	r2, #18
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fc83 	bl	8003ac0 <HAL_I2C_MasterRxCpltCallback>
}
 80041ba:	e012      	b.n	80041e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d117      	bne.n	800422e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004216:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004218:	e067      	b.n	80042ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
}
 800422c:	e05d      	b.n	80042ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004236:	d133      	bne.n	80042a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b21      	cmp	r3, #33	@ 0x21
 8004242:	d109      	bne.n	8004258 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	e008      	b.n	800426a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <I2C_Master_SB+0x92>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d108      	bne.n	800428e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d032      	beq.n	80042ea <I2C_Master_SB+0x100>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02d      	beq.n	80042ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800429c:	605a      	str	r2, [r3, #4]
}
 800429e:	e024      	b.n	80042ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10e      	bne.n	80042c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	11db      	asrs	r3, r3, #7
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f063 030f 	orn	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]
}
 80042c4:	e011      	b.n	80042ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	11db      	asrs	r3, r3, #7
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0306 	and.w	r3, r3, #6
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f063 030e 	orn	r3, r3, #14
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	b2da      	uxtb	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <I2C_Master_ADD10+0x26>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <I2C_Master_ADD10+0x48>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800433c:	605a      	str	r2, [r3, #4]
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800434a:	b480      	push	{r7}
 800434c:	b091      	sub	sp, #68	@ 0x44
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b22      	cmp	r3, #34	@ 0x22
 8004372:	f040 8169 	bne.w	8004648 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <I2C_Master_ADDR+0x54>
 800437e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d10b      	bne.n	800439e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	633b      	str	r3, [r7, #48]	@ 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	e160      	b.n	8004660 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <I2C_Master_ADDR+0x98>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043ae:	d118      	bne.n	80043e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	651a      	str	r2, [r3, #80]	@ 0x50
 80043e0:	e13e      	b.n	8004660 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d113      	bne.n	8004414 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ec:	2300      	movs	r3, #0
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e115      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	f040 808a 	bne.w	8004534 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004422:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004426:	d137      	bne.n	8004498 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004436:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004446:	d113      	bne.n	8004470 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004456:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	e0e7      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004470:	2300      	movs	r3, #0
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e0d3      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449a:	2b08      	cmp	r3, #8
 800449c:	d02e      	beq.n	80044fc <I2C_Master_ADDR+0x1b2>
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d02b      	beq.n	80044fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	2b12      	cmp	r3, #18
 80044a8:	d102      	bne.n	80044b0 <I2C_Master_ADDR+0x166>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d125      	bne.n	80044fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d00e      	beq.n	80044d4 <I2C_Master_ADDR+0x18a>
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d00b      	beq.n	80044d4 <I2C_Master_ADDR+0x18a>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d008      	beq.n	80044d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e007      	b.n	80044e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	e0a1      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e085      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d14d      	bne.n	80045da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	2b04      	cmp	r3, #4
 8004542:	d016      	beq.n	8004572 <I2C_Master_ADDR+0x228>
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	2b02      	cmp	r3, #2
 8004548:	d013      	beq.n	8004572 <I2C_Master_ADDR+0x228>
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	2b10      	cmp	r3, #16
 800454e:	d010      	beq.n	8004572 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e007      	b.n	8004582 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004580:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004590:	d117      	bne.n	80045c2 <I2C_Master_ADDR+0x278>
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004598:	d00b      	beq.n	80045b2 <I2C_Master_ADDR+0x268>
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	2b01      	cmp	r3, #1
 800459e:	d008      	beq.n	80045b2 <I2C_Master_ADDR+0x268>
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d005      	beq.n	80045b2 <I2C_Master_ADDR+0x268>
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d002      	beq.n	80045b2 <I2C_Master_ADDR+0x268>
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d107      	bne.n	80045c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	e032      	b.n	8004640 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f8:	d117      	bne.n	800462a <I2C_Master_ADDR+0x2e0>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004600:	d00b      	beq.n	800461a <I2C_Master_ADDR+0x2d0>
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	2b01      	cmp	r3, #1
 8004606:	d008      	beq.n	800461a <I2C_Master_ADDR+0x2d0>
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	2b08      	cmp	r3, #8
 800460c:	d005      	beq.n	800461a <I2C_Master_ADDR+0x2d0>
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	2b10      	cmp	r3, #16
 8004612:	d002      	beq.n	800461a <I2C_Master_ADDR+0x2d0>
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	2b20      	cmp	r3, #32
 8004618:	d107      	bne.n	800462a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004628:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004646:	e00b      	b.n	8004660 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	e7ff      	b.n	8004660 <I2C_Master_ADDR+0x316>
 8004660:	bf00      	nop
 8004662:	3744      	adds	r7, #68	@ 0x44
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02b      	beq.n	80046de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d114      	bne.n	80046de <I2C_SlaveTransmit_TXE+0x72>
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b29      	cmp	r3, #41	@ 0x29
 80046b8:	d111      	bne.n	80046de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2221      	movs	r2, #33	@ 0x21
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2228      	movs	r2, #40	@ 0x28
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff f9fb 	bl	8003ad4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d011      	beq.n	800471c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004736:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02c      	beq.n	800479c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d114      	bne.n	800479c <I2C_SlaveReceive_RXNE+0x74>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b2a      	cmp	r3, #42	@ 0x2a
 8004776:	d111      	bne.n	800479c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004786:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2222      	movs	r2, #34	@ 0x22
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2228      	movs	r2, #40	@ 0x28
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff f9a6 	bl	8003ae8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004802:	2b28      	cmp	r3, #40	@ 0x28
 8004804:	d127      	bne.n	8004856 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004814:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	09db      	lsrs	r3, r3, #7
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	81bb      	strh	r3, [r7, #12]
 8004838:	e002      	b.n	8004840 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004848:	89ba      	ldrh	r2, [r7, #12]
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff f954 	bl	8003afc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004854:	e00e      	b.n	8004874 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800489a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d8:	d172      	bne.n	80049c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b22      	cmp	r3, #34	@ 0x22
 80048de:	d002      	beq.n	80048e6 <I2C_Slave_STOPF+0x6a>
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e4:	d135      	bne.n	8004952 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004918:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe f92c 	bl	8002b7c <HAL_DMA_GetState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d049      	beq.n	80049be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	4a69      	ldr	r2, [pc, #420]	@ (8004ad4 <I2C_Slave_STOPF+0x258>)
 8004930:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd ff74 	bl	8002824 <HAL_DMA_Abort_IT>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d03d      	beq.n	80049be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004950:	e035      	b.n	80049be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004984:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f8f6 	bl	8002b7c <HAL_DMA_GetState>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d014      	beq.n	80049c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499a:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad4 <I2C_Slave_STOPF+0x258>)
 800499c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd ff3e 	bl	8002824 <HAL_DMA_Abort_IT>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049b8:	4610      	mov	r0, r2
 80049ba:	4798      	blx	r3
 80049bc:	e000      	b.n	80049c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03e      	beq.n	8004a48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d112      	bne.n	80049fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b40      	cmp	r3, #64	@ 0x40
 8004a0a:	d112      	bne.n	8004a32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8b3 	bl	8004bbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a56:	e039      	b.n	8004acc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5c:	d109      	bne.n	8004a72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2228      	movs	r2, #40	@ 0x28
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff f83b 	bl	8003ae8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b28      	cmp	r3, #40	@ 0x28
 8004a7c:	d111      	bne.n	8004aa2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a15      	ldr	r2, [pc, #84]	@ (8004ad8 <I2C_Slave_STOPF+0x25c>)
 8004a82:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff f83c 	bl	8003b18 <HAL_I2C_ListenCpltCallback>
}
 8004aa0:	e014      	b.n	8004acc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	2b22      	cmp	r3, #34	@ 0x22
 8004aa8:	d002      	beq.n	8004ab0 <I2C_Slave_STOPF+0x234>
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b22      	cmp	r3, #34	@ 0x22
 8004aae:	d10d      	bne.n	8004acc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff f80e 	bl	8003ae8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08005215 	.word	0x08005215
 8004ad8:	ffff0000 	.word	0xffff0000

08004adc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d002      	beq.n	8004afe <I2C_Slave_AF+0x22>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d129      	bne.n	8004b52 <I2C_Slave_AF+0x76>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b28      	cmp	r3, #40	@ 0x28
 8004b02:	d126      	bne.n	8004b52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb8 <I2C_Slave_AF+0xdc>)
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fe ffe4 	bl	8003b18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b50:	e02e      	b.n	8004bb0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b21      	cmp	r3, #33	@ 0x21
 8004b56:	d126      	bne.n	8004ba6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	@ (8004bb8 <I2C_Slave_AF+0xdc>)
 8004b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2221      	movs	r2, #33	@ 0x21
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fe ff98 	bl	8003ad4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ba4:	e004      	b.n	8004bb0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bae:	615a      	str	r2, [r3, #20]
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	ffff0000 	.word	0xffff0000

08004bbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d002      	beq.n	8004be0 <I2C_ITError+0x24>
 8004bda:	7bbb      	ldrb	r3, [r7, #14]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d10a      	bne.n	8004bf6 <I2C_ITError+0x3a>
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b22      	cmp	r3, #34	@ 0x22
 8004be4:	d107      	bne.n	8004bf6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bfc:	2b28      	cmp	r3, #40	@ 0x28
 8004bfe:	d107      	bne.n	8004c10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2228      	movs	r2, #40	@ 0x28
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c0e:	e015      	b.n	8004c3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1e:	d00a      	beq.n	8004c36 <I2C_ITError+0x7a>
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b60      	cmp	r3, #96	@ 0x60
 8004c24:	d007      	beq.n	8004c36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4a:	d162      	bne.n	8004d12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d020      	beq.n	8004cac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e18 <I2C_ITError+0x25c>)
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fdd4 	bl	8002824 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8089 	beq.w	8004d96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
 8004caa:	e074      	b.n	8004d96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	4a59      	ldr	r2, [pc, #356]	@ (8004e18 <I2C_ITError+0x25c>)
 8004cb2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fdb3 	bl	8002824 <HAL_DMA_Abort_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d068      	beq.n	8004d96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d10b      	bne.n	8004cea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
 8004d10:	e041      	b.n	8004d96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b60      	cmp	r3, #96	@ 0x60
 8004d1c:	d125      	bne.n	8004d6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d10b      	bne.n	8004d52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fe fef6 	bl	8003b54 <HAL_I2C_AbortCpltCallback>
 8004d68:	e015      	b.n	8004d96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d10b      	bne.n	8004d90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7fe fed5 	bl	8003b40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10e      	bne.n	8004dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d113      	bne.n	8004e10 <I2C_ITError+0x254>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b28      	cmp	r3, #40	@ 0x28
 8004dec:	d110      	bne.n	8004e10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e1c <I2C_ITError+0x260>)
 8004df2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fe fe84 	bl	8003b18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08005215 	.word	0x08005215
 8004e1c:	ffff0000 	.word	0xffff0000

08004e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	460b      	mov	r3, r1
 8004e34:	813b      	strh	r3, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa7c 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e80:	d103      	bne.n	8004e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e0aa      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	4952      	ldr	r1, [pc, #328]	@ (8004fec <I2C_RequestMemoryRead+0x1cc>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fab4 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e097      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fb1e 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e076      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]
 8004f06:	e021      	b.n	8004f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 faf8 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d107      	bne.n	8004f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e050      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f42:	893b      	ldrh	r3, [r7, #8]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4e:	6a39      	ldr	r1, [r7, #32]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fadd 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d107      	bne.n	8004f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e035      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f9e5 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fae:	d103      	bne.n	8004fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e013      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	6a3a      	ldr	r2, [r7, #32]
 8004fd0:	4906      	ldr	r1, [pc, #24]	@ (8004fec <I2C_RequestMemoryRead+0x1cc>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa1d 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	00010002 	.word	0x00010002

08004ff0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005004:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800500c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005022:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005030:	2200      	movs	r2, #0
 8005032:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	2200      	movs	r2, #0
 8005042:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800504a:	2b21      	cmp	r3, #33	@ 0x21
 800504c:	d007      	beq.n	800505e <I2C_DMAXferCplt+0x6e>
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005054:	2b22      	cmp	r3, #34	@ 0x22
 8005056:	d131      	bne.n	80050bc <I2C_DMAXferCplt+0xcc>
 8005058:	7cbb      	ldrb	r3, [r7, #18]
 800505a:	2b20      	cmp	r3, #32
 800505c:	d12e      	bne.n	80050bc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800506c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b29      	cmp	r3, #41	@ 0x29
 8005078:	d10a      	bne.n	8005090 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2221      	movs	r2, #33	@ 0x21
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2228      	movs	r2, #40	@ 0x28
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005088:	6978      	ldr	r0, [r7, #20]
 800508a:	f7fe fd23 	bl	8003ad4 <HAL_I2C_SlaveTxCpltCallback>
 800508e:	e00c      	b.n	80050aa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	2b2a      	cmp	r3, #42	@ 0x2a
 8005094:	d109      	bne.n	80050aa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2222      	movs	r2, #34	@ 0x22
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2228      	movs	r2, #40	@ 0x28
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f7fe fd1f 	bl	8003ae8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80050b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050ba:	e06a      	b.n	8005192 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d064      	beq.n	8005192 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050f8:	d009      	beq.n	800510e <I2C_DMAXferCplt+0x11e>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d006      	beq.n	800510e <I2C_DMAXferCplt+0x11e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005106:	d002      	beq.n	800510e <I2C_DMAXferCplt+0x11e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b20      	cmp	r3, #32
 800510c:	d107      	bne.n	800511e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800512c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800513c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800514c:	6978      	ldr	r0, [r7, #20]
 800514e:	f7fe fcf7 	bl	8003b40 <HAL_I2C_ErrorCallback>
}
 8005152:	e01e      	b.n	8005192 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d10a      	bne.n	800517e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7fb fd8a 	bl	8000c90 <HAL_I2C_MemRxCpltCallback>
}
 800517c:	e009      	b.n	8005192 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2212      	movs	r2, #18
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7fe fc97 	bl	8003ac0 <HAL_I2C_MasterRxCpltCallback>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	2200      	movs	r2, #0
 80051b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2200      	movs	r2, #0
 80051c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fd fce5 	bl	8002b98 <HAL_DMA_GetError>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d01b      	beq.n	800520c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f043 0210 	orr.w	r2, r3, #16
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7fe fc9a 	bl	8003b40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800522c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800522e:	4b4b      	ldr	r3, [pc, #300]	@ (800535c <I2C_DMAAbort+0x148>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	08db      	lsrs	r3, r3, #3
 8005234:	4a4a      	ldr	r2, [pc, #296]	@ (8005360 <I2C_DMAAbort+0x14c>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	0a1a      	lsrs	r2, r3, #8
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800525a:	e00a      	b.n	8005272 <I2C_DMAAbort+0x5e>
    }
    count--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800526c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005270:	d0ea      	beq.n	8005248 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	2200      	movs	r2, #0
 8005280:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	2200      	movs	r2, #0
 8005290:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b4:	2200      	movs	r2, #0
 80052b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	2200      	movs	r2, #0
 80052c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b60      	cmp	r3, #96	@ 0x60
 80052e2:	d10e      	bne.n	8005302 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052fa:	6978      	ldr	r0, [r7, #20]
 80052fc:	f7fe fc2a 	bl	8003b54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005300:	e027      	b.n	8005352 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005308:	2b28      	cmp	r3, #40	@ 0x28
 800530a:	d117      	bne.n	800533c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800532a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2228      	movs	r2, #40	@ 0x28
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800533a:	e007      	b.n	800534c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f7fe fbf7 	bl	8003b40 <HAL_I2C_ErrorCallback>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000
 8005360:	14f8b589 	.word	0x14f8b589

08005364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	e025      	b.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d021      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fc fa17 	bl	80017b0 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e023      	b.n	800540a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	e00c      	b.n	8005402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d0b6      	beq.n	8005376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005420:	e051      	b.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005430:	d123      	bne.n	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800544a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e046      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d021      	beq.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fc f995 	bl	80017b0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e020      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e00b      	b.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d18d      	bne.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800551c:	e02d      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f86a 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02d      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d021      	beq.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fc f93b 	bl	80017b0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d116      	bne.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005584:	2b80      	cmp	r3, #128	@ 0x80
 8005586:	d1ca      	bne.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	0a1a      	lsrs	r2, r3, #8
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e008      	b.n	80055e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e0:	d0e9      	beq.n	80055b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20000000 	.word	0x20000000
 80055f4:	14f8b589 	.word	0x14f8b589

080055f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560e:	d11b      	bne.n	8005648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005634:	f043 0204 	orr.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005666:	d103      	bne.n	8005670 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800566e:	e007      	b.n	8005680 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005678:	d102      	bne.n	8005680 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2208      	movs	r2, #8
 800567e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0cc      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b68      	ldr	r3, [pc, #416]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90c      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b65      	ldr	r3, [pc, #404]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b63      	ldr	r3, [pc, #396]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b8      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a58      	ldr	r2, [pc, #352]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f8:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a52      	ldr	r2, [pc, #328]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b50      	ldr	r3, [pc, #320]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	494d      	ldr	r1, [pc, #308]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d044      	beq.n	80057ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b47      	ldr	r3, [pc, #284]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d119      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e07f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d003      	beq.n	800574a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	2b03      	cmp	r3, #3
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575a:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e067      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576a:	4b37      	ldr	r3, [pc, #220]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4934      	ldr	r1, [pc, #208]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7fc f818 	bl	80017b0 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	e00a      	b.n	800579a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005784:	f7fc f814 	bl	80017b0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 020c 	and.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1eb      	bne.n	8005784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b25      	ldr	r3, [pc, #148]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d20c      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b22      	ldr	r3, [pc, #136]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	@ (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b19      	ldr	r3, [pc, #100]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4916      	ldr	r1, [pc, #88]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	490e      	ldr	r1, [pc, #56]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005812:	f000 f821 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	490a      	ldr	r1, [pc, #40]	@ (800584c <HAL_RCC_ClockConfig+0x1c0>)
 8005824:	5ccb      	ldrb	r3, [r1, r3]
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	@ (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	@ (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb ff78 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	0800a774 	.word	0x0800a774
 8005850:	20000000 	.word	0x20000000
 8005854:	20000004 	.word	0x20000004

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b090      	sub	sp, #64	@ 0x40
 800585e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005868:	2300      	movs	r3, #0
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005870:	4b59      	ldr	r3, [pc, #356]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800587c:	2b08      	cmp	r3, #8
 800587e:	f200 80a1 	bhi.w	80059c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800588a:	e09b      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 800588e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005890:	e09b      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b53      	ldr	r3, [pc, #332]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005894:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005896:	e098      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005898:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a2:	4b4d      	ldr	r3, [pc, #308]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d028      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ae:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058c0:	2100      	movs	r1, #0
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058c4:	fb03 f201 	mul.w	r2, r3, r1
 80058c8:	2300      	movs	r3, #0
 80058ca:	fb00 f303 	mul.w	r3, r0, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	4a43      	ldr	r2, [pc, #268]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058d2:	fba0 1202 	umull	r1, r2, r0, r2
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	460a      	mov	r2, r1
 80058da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80058dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058de:	4413      	add	r3, r2
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e4:	2200      	movs	r2, #0
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	61fa      	str	r2, [r7, #28]
 80058ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80058f2:	f7fa fc95 	bl	8000220 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4613      	mov	r3, r2
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058fe:	e053      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005900:	4b35      	ldr	r3, [pc, #212]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	2200      	movs	r2, #0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	617a      	str	r2, [r7, #20]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005912:	f04f 0b00 	mov.w	fp, #0
 8005916:	4652      	mov	r2, sl
 8005918:	465b      	mov	r3, fp
 800591a:	f04f 0000 	mov.w	r0, #0
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	0159      	lsls	r1, r3, #5
 8005924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005928:	0150      	lsls	r0, r2, #5
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	ebb2 080a 	subs.w	r8, r2, sl
 8005932:	eb63 090b 	sbc.w	r9, r3, fp
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005942:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005946:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800594a:	ebb2 0408 	subs.w	r4, r2, r8
 800594e:	eb63 0509 	sbc.w	r5, r3, r9
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	00eb      	lsls	r3, r5, #3
 800595c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005960:	00e2      	lsls	r2, r4, #3
 8005962:	4614      	mov	r4, r2
 8005964:	461d      	mov	r5, r3
 8005966:	eb14 030a 	adds.w	r3, r4, sl
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	eb45 030b 	adc.w	r3, r5, fp
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597e:	4629      	mov	r1, r5
 8005980:	028b      	lsls	r3, r1, #10
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005988:	4621      	mov	r1, r4
 800598a:	028a      	lsls	r2, r1, #10
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	2200      	movs	r2, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	60fa      	str	r2, [r7, #12]
 8005998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599c:	f7fa fc40 	bl	8000220 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80059b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 80059c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3740      	adds	r7, #64	@ 0x40
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	017d7840 	.word	0x017d7840

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	@ (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000000 	.word	0x20000000

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	@ (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800a784 	.word	0x0800a784

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	@ (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	0800a784 	.word	0x0800a784

08005a4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e273      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d075      	beq.n	8005b56 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a6a:	4b88      	ldr	r3, [pc, #544]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d00c      	beq.n	8005a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a76:	4b85      	ldr	r3, [pc, #532]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d112      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a82:	4b82      	ldr	r3, [pc, #520]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a90:	4b7e      	ldr	r3, [pc, #504]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05b      	beq.n	8005b54 <HAL_RCC_OscConfig+0x108>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d157      	bne.n	8005b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e24e      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab0:	d106      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x74>
 8005ab2:	4b76      	ldr	r3, [pc, #472]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a75      	ldr	r2, [pc, #468]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e01d      	b.n	8005afc <HAL_RCC_OscConfig+0xb0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x98>
 8005aca:	4b70      	ldr	r3, [pc, #448]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6f      	ldr	r2, [pc, #444]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6c      	ldr	r2, [pc, #432]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0xb0>
 8005ae4:	4b69      	ldr	r3, [pc, #420]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a68      	ldr	r2, [pc, #416]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4b66      	ldr	r3, [pc, #408]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a65      	ldr	r2, [pc, #404]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d013      	beq.n	8005b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fb fe54 	bl	80017b0 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fb fe50 	bl	80017b0 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	@ 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e213      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0xc0>
 8005b2a:	e014      	b.n	8005b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fb fe40 	bl	80017b0 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fb fe3c 	bl	80017b0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	@ 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e1ff      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b46:	4b51      	ldr	r3, [pc, #324]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0xe8>
 8005b52:	e000      	b.n	8005b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d063      	beq.n	8005c2a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b62:	4b4a      	ldr	r3, [pc, #296]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6e:	4b47      	ldr	r3, [pc, #284]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d11c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7a:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d116      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	4b41      	ldr	r3, [pc, #260]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_RCC_OscConfig+0x152>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e1d3      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4937      	ldr	r1, [pc, #220]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb2:	e03a      	b.n	8005c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbc:	4b34      	ldr	r3, [pc, #208]	@ (8005c90 <HAL_RCC_OscConfig+0x244>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc2:	f7fb fdf5 	bl	80017b0 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bca:	f7fb fdf1 	bl	80017b0 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e1b4      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be8:	4b28      	ldr	r3, [pc, #160]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4925      	ldr	r1, [pc, #148]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	e015      	b.n	8005c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfe:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <HAL_RCC_OscConfig+0x244>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c04:	f7fb fdd4 	bl	80017b0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c0c:	f7fb fdd0 	bl	80017b0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e193      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d036      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b15      	ldr	r3, [pc, #84]	@ (8005c94 <HAL_RCC_OscConfig+0x248>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fb fdb4 	bl	80017b0 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fb fdb0 	bl	80017b0 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e173      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <HAL_RCC_OscConfig+0x240>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x200>
 8005c6a:	e01b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6c:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <HAL_RCC_OscConfig+0x248>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c72:	f7fb fd9d 	bl	80017b0 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	e00e      	b.n	8005c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c7a:	f7fb fd99 	bl	80017b0 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d907      	bls.n	8005c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e15c      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	42470000 	.word	0x42470000
 8005c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c98:	4b8a      	ldr	r3, [pc, #552]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ea      	bne.n	8005c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8097 	beq.w	8005de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb6:	4b83      	ldr	r3, [pc, #524]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce2:	4b79      	ldr	r3, [pc, #484]	@ (8005ec8 <HAL_RCC_OscConfig+0x47c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d118      	bne.n	8005d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cee:	4b76      	ldr	r3, [pc, #472]	@ (8005ec8 <HAL_RCC_OscConfig+0x47c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a75      	ldr	r2, [pc, #468]	@ (8005ec8 <HAL_RCC_OscConfig+0x47c>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfa:	f7fb fd59 	bl	80017b0 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d02:	f7fb fd55 	bl	80017b0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e118      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d14:	4b6c      	ldr	r3, [pc, #432]	@ (8005ec8 <HAL_RCC_OscConfig+0x47c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x2ea>
 8005d28:	4b66      	ldr	r3, [pc, #408]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2c:	4a65      	ldr	r2, [pc, #404]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d34:	e01c      	b.n	8005d70 <HAL_RCC_OscConfig+0x324>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x30c>
 8005d3e:	4b61      	ldr	r3, [pc, #388]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	4a60      	ldr	r2, [pc, #384]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d56:	e00b      	b.n	8005d70 <HAL_RCC_OscConfig+0x324>
 8005d58:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a59      	ldr	r2, [pc, #356]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d64:	4b57      	ldr	r3, [pc, #348]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	4a56      	ldr	r2, [pc, #344]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d6a:	f023 0304 	bic.w	r3, r3, #4
 8005d6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d015      	beq.n	8005da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d78:	f7fb fd1a 	bl	80017b0 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fb fd16 	bl	80017b0 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0d7      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d96:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ee      	beq.n	8005d80 <HAL_RCC_OscConfig+0x334>
 8005da2:	e014      	b.n	8005dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fb fd04 	bl	80017b0 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dac:	f7fb fd00 	bl	80017b0 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0c1      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc2:	4b40      	ldr	r3, [pc, #256]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1ee      	bne.n	8005dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80ad 	beq.w	8005f44 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dea:	4b36      	ldr	r3, [pc, #216]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d060      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d145      	bne.n	8005e8a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b33      	ldr	r3, [pc, #204]	@ (8005ecc <HAL_RCC_OscConfig+0x480>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fb fcd4 	bl	80017b0 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0c:	f7fb fcd0 	bl	80017b0 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e093      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	019b      	lsls	r3, r3, #6
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e54:	071b      	lsls	r3, r3, #28
 8005e56:	491b      	ldr	r1, [pc, #108]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ecc <HAL_RCC_OscConfig+0x480>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fb fca5 	bl	80017b0 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fb fca1 	bl	80017b0 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e064      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x41e>
 8005e88:	e05c      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <HAL_RCC_OscConfig+0x480>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fb fc8e 	bl	80017b0 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fb fc8a 	bl	80017b0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e04d      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <HAL_RCC_OscConfig+0x478>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x44c>
 8005eb6:	e045      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e040      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d030      	beq.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d129      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d122      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f00:	4013      	ands	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d119      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d10f      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023800 	.word	0x40023800

08005f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e07b      	b.n	800605e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f76:	d009      	beq.n	8005f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	61da      	str	r2, [r3, #28]
 8005f7e:	e005      	b.n	8005f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fb f8be 	bl	8001128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006010:	ea42 0103 	orr.w	r1, r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	f003 0104 	and.w	r1, r3, #4
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	f003 0210 	and.w	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800604c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10f      	bne.n	80060ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
    return;
 80060aa:	e0d7      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_SPI_IRQHandler+0x66>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
    return;
 80060cc:	e0c6      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_SPI_IRQHandler+0x8c>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80b4 	beq.w	800625c <HAL_SPI_IRQHandler+0x1f4>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80ad 	beq.w	800625c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	099b      	lsrs	r3, r3, #6
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d023      	beq.n	8006156 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b03      	cmp	r3, #3
 8006118:	d011      	beq.n	800613e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f043 0204 	orr.w	r2, r3, #4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	e00b      	b.n	8006156 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	693b      	ldr	r3, [r7, #16]
        return;
 8006154:	e082      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619c:	f043 0208 	orr.w	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d04f      	beq.n	800625a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_SPI_IRQHandler+0x17e>
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d034      	beq.n	8006250 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0203 	bic.w	r2, r2, #3
 80061f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006202:	4a18      	ldr	r2, [pc, #96]	@ (8006264 <HAL_SPI_IRQHandler+0x1fc>)
 8006204:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620a:	4618      	mov	r0, r3
 800620c:	f7fc fb0a 	bl	8002824 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800622e:	4a0d      	ldr	r2, [pc, #52]	@ (8006264 <HAL_SPI_IRQHandler+0x1fc>)
 8006230:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006236:	4618      	mov	r0, r3
 8006238:	f7fc faf4 	bl	8002824 <HAL_DMA_Abort_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006246:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800624e:	e003      	b.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f809 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006256:	e000      	b.n	800625a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006258:	bf00      	nop
    return;
 800625a:	bf00      	nop
  }
}
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	0800627d 	.word	0x0800627d

08006268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff ffe6 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e03f      	b.n	8006336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f8a6 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2224      	movs	r2, #36	@ 0x24
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc7b 	bl	8006be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800630c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800631c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b0ba      	sub	sp, #232	@ 0xe8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800637e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10f      	bne.n	80063a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_UART_IRQHandler+0x66>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fb65 	bl	8006a6e <UART_Receive_IT>
      return;
 80063a4:	e256      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80de 	beq.w	800656c <HAL_UART_IRQHandler+0x22c>
 80063b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80d1 	beq.w	800656c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_UART_IRQHandler+0xae>
 80063d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	f043 0201 	orr.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f043 0202 	orr.w	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <HAL_UART_IRQHandler+0xf6>
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	f043 0204 	orr.w	r2, r3, #4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d011      	beq.n	8006466 <HAL_UART_IRQHandler+0x126>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800644e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f043 0208 	orr.w	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 81ed 	beq.w	800684a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_UART_IRQHandler+0x14e>
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 faf0 	bl	8006a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <HAL_UART_IRQHandler+0x17a>
 80064b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d04f      	beq.n	800655a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9f8 	bl	80068b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d141      	bne.n	8006552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3314      	adds	r3, #20
 80064d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3314      	adds	r3, #20
 80064f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d9      	bne.n	80064ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	4a7d      	ldr	r2, [pc, #500]	@ (800671c <HAL_UART_IRQHandler+0x3dc>)
 8006528:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	4618      	mov	r0, r3
 8006530:	f7fc f978 	bl	8002824 <HAL_DMA_Abort_IT>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e00e      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f99a 	bl	8006884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	e00a      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f996 	bl	8006884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	e006      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f992 	bl	8006884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006566:	e170      	b.n	800684a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	bf00      	nop
    return;
 800656a:	e16e      	b.n	800684a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	2b01      	cmp	r3, #1
 8006572:	f040 814a 	bne.w	800680a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8143 	beq.w	800680a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 813c 	beq.w	800680a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	f040 80b4 	bne.w	8006720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8140 	beq.w	800684e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d6:	429a      	cmp	r2, r3
 80065d8:	f080 8139 	bcs.w	800684e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ee:	f000 8088 	beq.w	8006702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800660c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800661e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800662a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1d9      	bne.n	80065f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3314      	adds	r3, #20
 8006644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800664e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800666a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e1      	bne.n	800663e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3314      	adds	r3, #20
 8006680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800668a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800669e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e3      	bne.n	800667a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d2:	f023 0310 	bic.w	r3, r3, #16
 80066d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e3      	bne.n	80066c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fc f821 	bl	8002744 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800670a:	b29b      	uxth	r3, r3
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	b29b      	uxth	r3, r3
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f8c0 	bl	8006898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006718:	e099      	b.n	800684e <HAL_UART_IRQHandler+0x50e>
 800671a:	bf00      	nop
 800671c:	08006977 	.word	0x08006977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006728:	b29b      	uxth	r3, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 808b 	beq.w	8006852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800673c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8086 	beq.w	8006852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800676a:	647a      	str	r2, [r7, #68]	@ 0x44
 800676c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e3      	bne.n	8006746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	623b      	str	r3, [r7, #32]
   return(result);
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e3      	bne.n	800677e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0310 	bic.w	r3, r3, #16
 80067da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067e8:	61fa      	str	r2, [r7, #28]
 80067ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	69b9      	ldr	r1, [r7, #24]
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	617b      	str	r3, [r7, #20]
   return(result);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e3      	bne.n	80067c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f848 	bl	8006898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006808:	e023      	b.n	8006852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <HAL_UART_IRQHandler+0x4ea>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8bb 	bl	800699e <UART_Transmit_IT>
    return;
 8006828:	e014      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <HAL_UART_IRQHandler+0x514>
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8fb 	bl	8006a3e <UART_EndTransmit_IT>
    return;
 8006848:	e004      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
    return;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
      return;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
      return;
 8006852:	bf00      	nop
  }
}
 8006854:	37e8      	adds	r7, #232	@ 0xe8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop

0800685c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b095      	sub	sp, #84	@ 0x54
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d119      	bne.n	800695c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60bb      	str	r3, [r7, #8]
   return(result);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006948:	61ba      	str	r2, [r7, #24]
 800694a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6979      	ldr	r1, [r7, #20]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	613b      	str	r3, [r7, #16]
   return(result);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800696a:	bf00      	nop
 800696c:	3754      	adds	r7, #84	@ 0x54
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff ff77 	bl	8006884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b21      	cmp	r3, #33	@ 0x21
 80069b0:	d13e      	bne.n	8006a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ba:	d114      	bne.n	80069e6 <UART_Transmit_IT+0x48>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d110      	bne.n	80069e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	621a      	str	r2, [r3, #32]
 80069e4:	e008      	b.n	80069f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6211      	str	r1, [r2, #32]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4619      	mov	r1, r3
 8006a06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10f      	bne.n	8006a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fefc 	bl	800685c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b08c      	sub	sp, #48	@ 0x30
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b22      	cmp	r3, #34	@ 0x22
 8006a80:	f040 80ab 	bne.w	8006bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8c:	d117      	bne.n	8006abe <UART_Receive_IT+0x50>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d113      	bne.n	8006abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	@ 0x28
 8006abc:	e026      	b.n	8006b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad0:	d007      	beq.n	8006ae2 <UART_Receive_IT+0x74>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <UART_Receive_IT+0x82>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e008      	b.n	8006b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d15a      	bne.n	8006bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0220 	bic.w	r2, r2, #32
 8006b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d135      	bne.n	8006bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b86:	623a      	str	r2, [r7, #32]
 8006b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d10a      	bne.n	8006bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff fe67 	bl	8006898 <HAL_UARTEx_RxEventCallback>
 8006bca:	e002      	b.n	8006bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fe4f 	bl	8006870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e002      	b.n	8006bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e000      	b.n	8006bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
  }
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3730      	adds	r7, #48	@ 0x30
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b0c0      	sub	sp, #256	@ 0x100
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	68d9      	ldr	r1, [r3, #12]
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	ea40 0301 	orr.w	r3, r0, r1
 8006c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c3c:	f021 010c 	bic.w	r1, r1, #12
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5e:	6999      	ldr	r1, [r3, #24]
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	ea40 0301 	orr.w	r3, r0, r1
 8006c6a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b95      	ldr	r3, [pc, #596]	@ (8006ec8 <UART_SetConfig+0x2e4>)
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d011      	beq.n	8006c9c <UART_SetConfig+0xb8>
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b93      	ldr	r3, [pc, #588]	@ (8006ecc <UART_SetConfig+0x2e8>)
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d00b      	beq.n	8006c9c <UART_SetConfig+0xb8>
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b91      	ldr	r3, [pc, #580]	@ (8006ed0 <UART_SetConfig+0x2ec>)
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d005      	beq.n	8006c9c <UART_SetConfig+0xb8>
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed4 <UART_SetConfig+0x2f0>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d104      	bne.n	8006ca6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fe fec2 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ca4:	e003      	b.n	8006cae <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ca6:	f7fe fea9 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8006caa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	f040 8110 	bne.w	8006edc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	1891      	adds	r1, r2, r2
 8006cd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cd6:	415b      	adcs	r3, r3
 8006cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cde:	4621      	mov	r1, r4
 8006ce0:	eb12 0801 	adds.w	r8, r2, r1
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	eb43 0901 	adc.w	r9, r3, r1
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfe:	4690      	mov	r8, r2
 8006d00:	4699      	mov	r9, r3
 8006d02:	4623      	mov	r3, r4
 8006d04:	eb18 0303 	adds.w	r3, r8, r3
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	eb49 0303 	adc.w	r3, r9, r3
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	18db      	adds	r3, r3, r3
 8006d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d30:	4613      	mov	r3, r2
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d40:	f7f9 fa6e 	bl	8000220 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4b63      	ldr	r3, [pc, #396]	@ (8006ed8 <UART_SetConfig+0x2f4>)
 8006d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	011c      	lsls	r4, r3, #4
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d74:	4641      	mov	r1, r8
 8006d76:	eb12 0a01 	adds.w	sl, r2, r1
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d94:	4692      	mov	sl, r2
 8006d96:	469b      	mov	fp, r3
 8006d98:	4643      	mov	r3, r8
 8006d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006da2:	464b      	mov	r3, r9
 8006da4:	eb4b 0303 	adc.w	r3, fp, r3
 8006da8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dd6:	f7f9 fa23 	bl	8000220 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ed8 <UART_SetConfig+0x2f4>)
 8006de2:	fba3 2301 	umull	r2, r3, r3, r1
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2264      	movs	r2, #100	@ 0x64
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	1acb      	subs	r3, r1, r3
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006df6:	4b38      	ldr	r3, [pc, #224]	@ (8006ed8 <UART_SetConfig+0x2f4>)
 8006df8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e04:	441c      	add	r4, r3
 8006e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e20:	415b      	adcs	r3, r3
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e28:	4641      	mov	r1, r8
 8006e2a:	1851      	adds	r1, r2, r1
 8006e2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e2e:	4649      	mov	r1, r9
 8006e30:	414b      	adcs	r3, r1
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e40:	4659      	mov	r1, fp
 8006e42:	00cb      	lsls	r3, r1, #3
 8006e44:	4651      	mov	r1, sl
 8006e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	00ca      	lsls	r2, r1, #3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	4642      	mov	r2, r8
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	460a      	mov	r2, r1
 8006e60:	eb42 0303 	adc.w	r3, r2, r3
 8006e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	18db      	adds	r3, r3, r3
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e82:	4613      	mov	r3, r2
 8006e84:	eb42 0303 	adc.w	r3, r2, r3
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e92:	f7f9 f9c5 	bl	8000220 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <UART_SetConfig+0x2f4>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	@ 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	3332      	adds	r3, #50	@ 0x32
 8006eae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed8 <UART_SetConfig+0x2f4>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f003 0207 	and.w	r2, r3, #7
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4422      	add	r2, r4
 8006ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec4:	e10a      	b.n	80070dc <UART_SetConfig+0x4f8>
 8006ec6:	bf00      	nop
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	40011800 	.word	0x40011800
 8006ed4:	40011c00 	.word	0x40011c00
 8006ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006eee:	4642      	mov	r2, r8
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	1891      	adds	r1, r2, r2
 8006ef4:	6239      	str	r1, [r7, #32]
 8006ef6:	415b      	adcs	r3, r3
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006efe:	4641      	mov	r1, r8
 8006f00:	1854      	adds	r4, r2, r1
 8006f02:	4649      	mov	r1, r9
 8006f04:	eb43 0501 	adc.w	r5, r3, r1
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	00eb      	lsls	r3, r5, #3
 8006f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f16:	00e2      	lsls	r2, r4, #3
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	4643      	mov	r3, r8
 8006f1e:	18e3      	adds	r3, r4, r3
 8006f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f24:	464b      	mov	r3, r9
 8006f26:	eb45 0303 	adc.w	r3, r5, r3
 8006f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	008b      	lsls	r3, r1, #2
 8006f4e:	4621      	mov	r1, r4
 8006f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f54:	4621      	mov	r1, r4
 8006f56:	008a      	lsls	r2, r1, #2
 8006f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f5c:	f7f9 f960 	bl	8000220 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4b60      	ldr	r3, [pc, #384]	@ (80070e8 <UART_SetConfig+0x504>)
 8006f66:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	011c      	lsls	r4, r3, #4
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	61b9      	str	r1, [r7, #24]
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f90:	4641      	mov	r1, r8
 8006f92:	1851      	adds	r1, r2, r1
 8006f94:	6139      	str	r1, [r7, #16]
 8006f96:	4649      	mov	r1, r9
 8006f98:	414b      	adcs	r3, r1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa8:	4659      	mov	r1, fp
 8006faa:	00cb      	lsls	r3, r1, #3
 8006fac:	4651      	mov	r1, sl
 8006fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	00ca      	lsls	r2, r1, #3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fe8:	4649      	mov	r1, r9
 8006fea:	008b      	lsls	r3, r1, #2
 8006fec:	4641      	mov	r1, r8
 8006fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff2:	4641      	mov	r1, r8
 8006ff4:	008a      	lsls	r2, r1, #2
 8006ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ffa:	f7f9 f911 	bl	8000220 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4611      	mov	r1, r2
 8007004:	4b38      	ldr	r3, [pc, #224]	@ (80070e8 <UART_SetConfig+0x504>)
 8007006:	fba3 2301 	umull	r2, r3, r3, r1
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2264      	movs	r2, #100	@ 0x64
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	1acb      	subs	r3, r1, r3
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	3332      	adds	r3, #50	@ 0x32
 8007018:	4a33      	ldr	r2, [pc, #204]	@ (80070e8 <UART_SetConfig+0x504>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007024:	441c      	add	r4, r3
 8007026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702a:	2200      	movs	r2, #0
 800702c:	673b      	str	r3, [r7, #112]	@ 0x70
 800702e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	1891      	adds	r1, r2, r2
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	415b      	adcs	r3, r3
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007044:	4641      	mov	r1, r8
 8007046:	1851      	adds	r1, r2, r1
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	4649      	mov	r1, r9
 800704c:	414b      	adcs	r3, r1
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800705c:	4659      	mov	r1, fp
 800705e:	00cb      	lsls	r3, r1, #3
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007066:	4651      	mov	r1, sl
 8007068:	00ca      	lsls	r2, r1, #3
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	4603      	mov	r3, r0
 8007070:	4642      	mov	r2, r8
 8007072:	189b      	adds	r3, r3, r2
 8007074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007076:	464b      	mov	r3, r9
 8007078:	460a      	mov	r2, r1
 800707a:	eb42 0303 	adc.w	r3, r2, r3
 800707e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	663b      	str	r3, [r7, #96]	@ 0x60
 800708a:	667a      	str	r2, [r7, #100]	@ 0x64
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007098:	4649      	mov	r1, r9
 800709a:	008b      	lsls	r3, r1, #2
 800709c:	4641      	mov	r1, r8
 800709e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a2:	4641      	mov	r1, r8
 80070a4:	008a      	lsls	r2, r1, #2
 80070a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070aa:	f7f9 f8b9 	bl	8000220 <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <UART_SetConfig+0x504>)
 80070b4:	fba3 1302 	umull	r1, r3, r3, r2
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	2164      	movs	r1, #100	@ 0x64
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	3332      	adds	r3, #50	@ 0x32
 80070c6:	4a08      	ldr	r2, [pc, #32]	@ (80070e8 <UART_SetConfig+0x504>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	095b      	lsrs	r3, r3, #5
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4422      	add	r2, r4
 80070da:	609a      	str	r2, [r3, #8]
}
 80070dc:	bf00      	nop
 80070de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070e2:	46bd      	mov	sp, r7
 80070e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e8:	51eb851f 	.word	0x51eb851f

080070ec <__NVIC_SetPriority>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db0a      	blt.n	8007116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	490c      	ldr	r1, [pc, #48]	@ (8007138 <__NVIC_SetPriority+0x4c>)
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	0112      	lsls	r2, r2, #4
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	440b      	add	r3, r1
 8007110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007114:	e00a      	b.n	800712c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4908      	ldr	r1, [pc, #32]	@ (800713c <__NVIC_SetPriority+0x50>)
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	3b04      	subs	r3, #4
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	440b      	add	r3, r1
 800712a:	761a      	strb	r2, [r3, #24]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	e000e100 	.word	0xe000e100
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007144:	2100      	movs	r1, #0
 8007146:	f06f 0004 	mvn.w	r0, #4
 800714a:	f7ff ffcf 	bl	80070ec <__NVIC_SetPriority>
#endif
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715a:	f3ef 8305 	mrs	r3, IPSR
 800715e:	603b      	str	r3, [r7, #0]
  return(result);
 8007160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007166:	f06f 0305 	mvn.w	r3, #5
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	e00c      	b.n	8007188 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800716e:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <osKernelInitialize+0x44>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007176:	4b08      	ldr	r3, [pc, #32]	@ (8007198 <osKernelInitialize+0x44>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800717c:	2300      	movs	r3, #0
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	e002      	b.n	8007188 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007188:	687b      	ldr	r3, [r7, #4]
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20000560 	.word	0x20000560

0800719c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	603b      	str	r3, [r7, #0]
  return(result);
 80071a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071ae:	f06f 0305 	mvn.w	r3, #5
 80071b2:	607b      	str	r3, [r7, #4]
 80071b4:	e010      	b.n	80071d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <osKernelStart+0x48>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d109      	bne.n	80071d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071be:	f7ff ffbf 	bl	8007140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <osKernelStart+0x48>)
 80071c4:	2202      	movs	r2, #2
 80071c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071c8:	f001 fc16 	bl	80089f8 <vTaskStartScheduler>
      stat = osOK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	e002      	b.n	80071d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071d8:	687b      	ldr	r3, [r7, #4]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000560 	.word	0x20000560

080071e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08e      	sub	sp, #56	@ 0x38
 80071ec:	af04      	add	r7, sp, #16
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f8:	f3ef 8305 	mrs	r3, IPSR
 80071fc:	617b      	str	r3, [r7, #20]
  return(result);
 80071fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007200:	2b00      	cmp	r3, #0
 8007202:	d17e      	bne.n	8007302 <osThreadNew+0x11a>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d07b      	beq.n	8007302 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800720a:	2380      	movs	r3, #128	@ 0x80
 800720c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800720e:	2318      	movs	r3, #24
 8007210:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d045      	beq.n	80072ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <osThreadNew+0x48>
        name = attr->name;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <osThreadNew+0x6e>
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b38      	cmp	r3, #56	@ 0x38
 8007248:	d805      	bhi.n	8007256 <osThreadNew+0x6e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <osThreadNew+0x72>
        return (NULL);
 8007256:	2300      	movs	r3, #0
 8007258:	e054      	b.n	8007304 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00e      	beq.n	8007290 <osThreadNew+0xa8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b5b      	cmp	r3, #91	@ 0x5b
 8007278:	d90a      	bls.n	8007290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <osThreadNew+0xa8>
        mem = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e010      	b.n	80072b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10c      	bne.n	80072b2 <osThreadNew+0xca>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d108      	bne.n	80072b2 <osThreadNew+0xca>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <osThreadNew+0xca>
          mem = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e001      	b.n	80072b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d110      	bne.n	80072da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c0:	9202      	str	r2, [sp, #8]
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f9b6 	bl	8008640 <xTaskCreateStatic>
 80072d4:	4603      	mov	r3, r0
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	e013      	b.n	8007302 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d110      	bne.n	8007302 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f001 fa04 	bl	8008700 <xTaskCreate>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d001      	beq.n	8007302 <osThreadNew+0x11a>
            hTask = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007302:	693b      	ldr	r3, [r7, #16]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	@ 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007314:	f3ef 8305 	mrs	r3, IPSR
 8007318:	60bb      	str	r3, [r7, #8]
  return(result);
 800731a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <osDelay+0x1c>
    stat = osErrorISR;
 8007320:	f06f 0305 	mvn.w	r3, #5
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e007      	b.n	8007338 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fb2a 	bl	800898c <vTaskDelay>
    }
  }

  return (stat);
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007342:	b580      	push	{r7, lr}
 8007344:	b088      	sub	sp, #32
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	60bb      	str	r3, [r7, #8]
  return(result);
 8007354:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007356:	2b00      	cmp	r3, #0
 8007358:	d174      	bne.n	8007444 <osMutexNew+0x102>
    if (attr != NULL) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	e001      	b.n	800736c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osMutexNew+0x3a>
      rmtx = 1U;
 8007376:	2301      	movs	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e001      	b.n	8007380 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d15c      	bne.n	8007444 <osMutexNew+0x102>
      mem = -1;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <osMutexNew+0x6a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80073a4:	d902      	bls.n	80073ac <osMutexNew+0x6a>
          mem = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e00c      	b.n	80073c6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d108      	bne.n	80073c6 <osMutexNew+0x84>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <osMutexNew+0x84>
            mem = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e001      	b.n	80073c6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d112      	bne.n	80073f2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	4619      	mov	r1, r3
 80073d8:	2004      	movs	r0, #4
 80073da:	f000 fb92 	bl	8007b02 <xQueueCreateMutexStatic>
 80073de:	61f8      	str	r0, [r7, #28]
 80073e0:	e016      	b.n	8007410 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	4619      	mov	r1, r3
 80073e8:	2001      	movs	r0, #1
 80073ea:	f000 fb8a 	bl	8007b02 <xQueueCreateMutexStatic>
 80073ee:	61f8      	str	r0, [r7, #28]
 80073f0:	e00e      	b.n	8007410 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80073fe:	2004      	movs	r0, #4
 8007400:	f000 fb67 	bl	8007ad2 <xQueueCreateMutex>
 8007404:	61f8      	str	r0, [r7, #28]
 8007406:	e003      	b.n	8007410 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007408:	2001      	movs	r0, #1
 800740a:	f000 fb62 	bl	8007ad2 <xQueueCreateMutex>
 800740e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <osMutexNew+0xee>
        if (attr != NULL) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <osMutexNew+0xe2>
          name = attr->name;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	e001      	b.n	8007428 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007428:	68f9      	ldr	r1, [r7, #12]
 800742a:	69f8      	ldr	r0, [r7, #28]
 800742c:	f001 f8aa 	bl	8008584 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d006      	beq.n	8007444 <osMutexNew+0x102>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007444:	69fb      	ldr	r3, [r7, #28]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746c:	f3ef 8305 	mrs	r3, IPSR
 8007470:	60bb      	str	r3, [r7, #8]
  return(result);
 8007472:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007478:	f06f 0305 	mvn.w	r3, #5
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e02c      	b.n	80074da <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007486:	f06f 0303 	mvn.w	r3, #3
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	e025      	b.n	80074da <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d011      	beq.n	80074b8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6938      	ldr	r0, [r7, #16]
 8007498:	f000 fb83 	bl	8007ba2 <xQueueTakeMutexRecursive>
 800749c:	4603      	mov	r3, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d01b      	beq.n	80074da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80074a8:	f06f 0301 	mvn.w	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	e014      	b.n	80074da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80074b0:	f06f 0302 	mvn.w	r3, #2
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	e010      	b.n	80074da <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f000 fe2a 	bl	8008114 <xQueueSemaphoreTake>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d009      	beq.n	80074da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80074cc:	f06f 0301 	mvn.w	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e002      	b.n	80074da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80074d4:	f06f 0302 	mvn.w	r3, #2
 80074d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007500:	f3ef 8305 	mrs	r3, IPSR
 8007504:	60bb      	str	r3, [r7, #8]
  return(result);
 8007506:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <osMutexRelease+0x30>
    stat = osErrorISR;
 800750c:	f06f 0305 	mvn.w	r3, #5
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e01f      	b.n	8007554 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800751a:	f06f 0303 	mvn.w	r3, #3
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e018      	b.n	8007554 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007528:	6938      	ldr	r0, [r7, #16]
 800752a:	f000 fb05 	bl	8007b38 <xQueueGiveMutexRecursive>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d00f      	beq.n	8007554 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007534:	f06f 0302 	mvn.w	r3, #2
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e00b      	b.n	8007554 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800753c:	2300      	movs	r3, #0
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	6938      	ldr	r0, [r7, #16]
 8007544:	f000 fb64 	bl	8007c10 <xQueueGenericSend>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d002      	beq.n	8007554 <osMutexRelease+0x70>
        stat = osErrorResource;
 800754e:	f06f 0302 	mvn.w	r3, #2
 8007552:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007554:	697b      	ldr	r3, [r7, #20]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800755e:	b580      	push	{r7, lr}
 8007560:	b08a      	sub	sp, #40	@ 0x28
 8007562:	af02      	add	r7, sp, #8
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756e:	f3ef 8305 	mrs	r3, IPSR
 8007572:	613b      	str	r3, [r7, #16]
  return(result);
 8007574:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007576:	2b00      	cmp	r3, #0
 8007578:	d15f      	bne.n	800763a <osMessageQueueNew+0xdc>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d05c      	beq.n	800763a <osMessageQueueNew+0xdc>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d059      	beq.n	800763a <osMessageQueueNew+0xdc>
    mem = -1;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d029      	beq.n	80075e6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d012      	beq.n	80075c0 <osMessageQueueNew+0x62>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2b4f      	cmp	r3, #79	@ 0x4f
 80075a0:	d90e      	bls.n	80075c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <osMessageQueueNew+0x62>
        mem = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e014      	b.n	80075ea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d110      	bne.n	80075ea <osMessageQueueNew+0x8c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <osMessageQueueNew+0x8c>
          mem = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	e001      	b.n	80075ea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10b      	bne.n	8007608 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2100      	movs	r1, #0
 80075fa:	9100      	str	r1, [sp, #0]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f972 	bl	80078e8 <xQueueGenericCreateStatic>
 8007604:	61f8      	str	r0, [r7, #28]
 8007606:	e008      	b.n	800761a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800760e:	2200      	movs	r2, #0
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f9e5 	bl	80079e2 <xQueueGenericCreate>
 8007618:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e001      	b.n	8007632 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 ffa5 	bl	8008584 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800763a:	69fb      	ldr	r3, [r7, #28]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a07      	ldr	r2, [pc, #28]	@ (8007670 <vApplicationGetIdleTaskMemory+0x2c>)
 8007654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4a06      	ldr	r2, [pc, #24]	@ (8007674 <vApplicationGetIdleTaskMemory+0x30>)
 800765a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2280      	movs	r2, #128	@ 0x80
 8007660:	601a      	str	r2, [r3, #0]
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000564 	.word	0x20000564
 8007674:	200005c0 	.word	0x200005c0

08007678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a07      	ldr	r2, [pc, #28]	@ (80076a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a06      	ldr	r2, [pc, #24]	@ (80076a8 <vApplicationGetTimerTaskMemory+0x30>)
 800768e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007696:	601a      	str	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	200007c0 	.word	0x200007c0
 80076a8:	2000081c 	.word	0x2000081c

080076ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0208 	add.w	r2, r3, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0208 	add.w	r2, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0208 	add.w	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e00c      	b.n	8007788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3308      	adds	r3, #8
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <vListInsert+0x2e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d2f6      	bcs.n	8007776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6892      	ldr	r2, [r2, #8]
 80077d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6852      	ldr	r2, [r2, #4]
 80077e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d103      	bne.n	80077f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	1e5a      	subs	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007840:	f002 fba2 	bl	8009f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784c:	68f9      	ldr	r1, [r7, #12]
 800784e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007870:	3b01      	subs	r3, #1
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007876:	fb01 f303 	mul.w	r3, r1, r3
 800787a:	441a      	add	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	22ff      	movs	r2, #255	@ 0xff
 8007884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	22ff      	movs	r2, #255	@ 0xff
 800788c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d114      	bne.n	80078c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01a      	beq.n	80078d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3310      	adds	r3, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fb36 	bl	8008f14 <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d012      	beq.n	80078d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078ae:	4b0d      	ldr	r3, [pc, #52]	@ (80078e4 <xQueueGenericReset+0xd0>)
 80078b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	e009      	b.n	80078d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3310      	adds	r3, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fef1 	bl	80076ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3324      	adds	r3, #36	@ 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff feec 	bl	80076ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078d4:	f002 fb8a 	bl	8009fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078d8:	2301      	movs	r3, #1
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08e      	sub	sp, #56	@ 0x38
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800790e:	bf00      	nop
 8007910:	bf00      	nop
 8007912:	e7fd      	b.n	8007910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	e7fd      	b.n	800792e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <xQueueGenericCreateStatic+0x56>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <xQueueGenericCreateStatic+0x5a>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <xQueueGenericCreateStatic+0x5c>
 8007942:	2300      	movs	r3, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	623b      	str	r3, [r7, #32]
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <xQueueGenericCreateStatic+0x84>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <xQueueGenericCreateStatic+0x88>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <xQueueGenericCreateStatic+0x8a>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	61fb      	str	r3, [r7, #28]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800798e:	2350      	movs	r3, #80	@ 0x50
 8007990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b50      	cmp	r3, #80	@ 0x50
 8007996:	d00b      	beq.n	80079b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	61bb      	str	r3, [r7, #24]
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00d      	beq.n	80079d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f840 	bl	8007a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079da:	4618      	mov	r0, r3
 80079dc:	3730      	adds	r7, #48	@ 0x30
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b08a      	sub	sp, #40	@ 0x28
 80079e6:	af02      	add	r7, sp, #8
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10b      	bne.n	8007a0e <xQueueGenericCreate+0x2c>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	613b      	str	r3, [r7, #16]
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	e7fd      	b.n	8007a0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	3350      	adds	r3, #80	@ 0x50
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f002 fbd5 	bl	800a1cc <pvPortMalloc>
 8007a22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	3350      	adds	r3, #80	@ 0x50
 8007a32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a3c:	79fa      	ldrb	r2, [r7, #7]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	4613      	mov	r3, r2
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f805 	bl	8007a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a86:	2101      	movs	r1, #1
 8007a88:	69b8      	ldr	r0, [r7, #24]
 8007a8a:	f7ff fec3 	bl	8007814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00e      	beq.n	8007aca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8a3 	bl	8007c10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	4603      	mov	r3, r0
 8007ada:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007adc:	2301      	movs	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6939      	ldr	r1, [r7, #16]
 8007aea:	6978      	ldr	r0, [r7, #20]
 8007aec:	f7ff ff79 	bl	80079e2 <xQueueGenericCreate>
 8007af0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff ffd3 	bl	8007a9e <prvInitialiseMutex>

		return xNewQueue;
 8007af8:	68fb      	ldr	r3, [r7, #12]
	}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b088      	sub	sp, #32
 8007b06:	af02      	add	r7, sp, #8
 8007b08:	4603      	mov	r3, r0
 8007b0a:	6039      	str	r1, [r7, #0]
 8007b0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	2300      	movs	r3, #0
 8007b14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	6939      	ldr	r1, [r7, #16]
 8007b20:	6978      	ldr	r0, [r7, #20]
 8007b22:	f7ff fee1 	bl	80078e8 <xQueueGenericCreateStatic>
 8007b26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ffb8 	bl	8007a9e <prvInitialiseMutex>

		return xNewQueue;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	689c      	ldr	r4, [r3, #8]
 8007b66:	f001 fb95 	bl	8009294 <xTaskGetCurrentTaskHandle>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	d111      	bne.n	8007b94 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d105      	bne.n	8007b8e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007b82:	2300      	movs	r3, #0
 8007b84:	2200      	movs	r2, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	6938      	ldr	r0, [r7, #16]
 8007b8a:	f000 f841 	bl	8007c10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e001      	b.n	8007b98 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007b98:	697b      	ldr	r3, [r7, #20]
	}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}

08007ba2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007ba2:	b590      	push	{r4, r7, lr}
 8007ba4:	b087      	sub	sp, #28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	689c      	ldr	r4, [r3, #8]
 8007bd2:	f001 fb5f 	bl	8009294 <xTaskGetCurrentTaskHandle>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d107      	bne.n	8007bec <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e00c      	b.n	8007c06 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6938      	ldr	r0, [r7, #16]
 8007bf0:	f000 fa90 	bl	8008114 <xQueueSemaphoreTake>
 8007bf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c06:	697b      	ldr	r3, [r7, #20]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd90      	pop	{r4, r7, pc}

08007c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	@ 0x38
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10b      	bne.n	8007c44 <xQueueGenericSend+0x34>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSend+0x42>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <xQueueGenericSend+0x46>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericSend+0x48>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <xQueueGenericSend+0x64>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d103      	bne.n	8007c82 <xQueueGenericSend+0x72>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <xQueueGenericSend+0x76>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueGenericSend+0x78>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xQueueGenericSend+0x94>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	623b      	str	r3, [r7, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ca4:	f001 fb06 	bl	80092b4 <xTaskGetSchedulerState>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <xQueueGenericSend+0xa4>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueGenericSend+0xa8>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <xQueueGenericSend+0xaa>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	61fb      	str	r3, [r7, #28]
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cd6:	f002 f957 	bl	8009f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <xQueueGenericSend+0xdc>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d129      	bne.n	8007d40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cf2:	f000 fb37 	bl	8008364 <prvCopyDataToQueue>
 8007cf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d010      	beq.n	8007d22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	3324      	adds	r3, #36	@ 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f905 	bl	8008f14 <xTaskRemoveFromEventList>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d013      	beq.n	8007d38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d10:	4b3f      	ldr	r3, [pc, #252]	@ (8007e10 <xQueueGenericSend+0x200>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	e00a      	b.n	8007d38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d28:	4b39      	ldr	r3, [pc, #228]	@ (8007e10 <xQueueGenericSend+0x200>)
 8007d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d38:	f002 f958 	bl	8009fec <vPortExitCritical>
				return pdPASS;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e063      	b.n	8007e08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d103      	bne.n	8007d4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d46:	f002 f951 	bl	8009fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e05c      	b.n	8007e08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d54:	f107 0314 	add.w	r3, r7, #20
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 f93f 	bl	8008fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d62:	f002 f943 	bl	8009fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d66:	f000 feaf 	bl	8008ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d6a:	f002 f90d 	bl	8009f88 <vPortEnterCritical>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d74:	b25b      	sxtb	r3, r3
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d103      	bne.n	8007d84 <xQueueGenericSend+0x174>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x18a>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d9a:	f002 f927 	bl	8009fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d9e:	1d3a      	adds	r2, r7, #4
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 f92e 	bl	8009008 <xTaskCheckForTimeOut>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d124      	bne.n	8007dfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007db4:	f000 fbce 	bl	8008554 <prvIsQueueFull>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d018      	beq.n	8007df0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f852 	bl	8008e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dce:	f000 fb59 	bl	8008484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f000 fe87 	bl	8008ae4 <xTaskResumeAll>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f47f af7c 	bne.w	8007cd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007dde:	4b0c      	ldr	r3, [pc, #48]	@ (8007e10 <xQueueGenericSend+0x200>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	e772      	b.n	8007cd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007df2:	f000 fb47 	bl	8008484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007df6:	f000 fe75 	bl	8008ae4 <xTaskResumeAll>
 8007dfa:	e76c      	b.n	8007cd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dfe:	f000 fb41 	bl	8008484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e02:	f000 fe6f 	bl	8008ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3738      	adds	r7, #56	@ 0x38
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b090      	sub	sp, #64	@ 0x40
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <xQueueGenericSendFromISR+0x3e>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <xQueueGenericSendFromISR+0x42>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <xQueueGenericSendFromISR+0x44>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10b      	bne.n	8007e74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	e7fd      	b.n	8007e70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d103      	bne.n	8007e82 <xQueueGenericSendFromISR+0x6e>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <xQueueGenericSendFromISR+0x72>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <xQueueGenericSendFromISR+0x74>
 8007e86:	2300      	movs	r3, #0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	623b      	str	r3, [r7, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ea4:	f002 f950 	bl	800a148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	61fa      	str	r2, [r7, #28]
 8007ebe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <xQueueGenericSendFromISR+0xc2>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d12f      	bne.n	8007f36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007eec:	f000 fa3a 	bl	8008364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ef0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d112      	bne.n	8007f20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	3324      	adds	r3, #36	@ 0x24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 f804 	bl	8008f14 <xTaskRemoveFromEventList>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00e      	beq.n	8007f30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e007      	b.n	8007f30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f24:	3301      	adds	r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	b25a      	sxtb	r2, r3
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f34:	e001      	b.n	8007f3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3740      	adds	r7, #64	@ 0x40
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08c      	sub	sp, #48	@ 0x30
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <xQueueReceive+0x32>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	623b      	str	r3, [r7, #32]
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	e7fd      	b.n	8007f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <xQueueReceive+0x40>
 8007f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <xQueueReceive+0x44>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <xQueueReceive+0x46>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <xQueueReceive+0x62>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61fb      	str	r3, [r7, #28]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb2:	f001 f97f 	bl	80092b4 <xTaskGetSchedulerState>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <xQueueReceive+0x72>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <xQueueReceive+0x76>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueReceive+0x78>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10b      	bne.n	8007fe4 <xQueueReceive+0x94>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	61bb      	str	r3, [r7, #24]
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fe4:	f001 ffd0 	bl	8009f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01f      	beq.n	8008034 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff8:	f000 fa1e 	bl	8008438 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	1e5a      	subs	r2, r3, #1
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00f      	beq.n	800802c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	3310      	adds	r3, #16
 8008010:	4618      	mov	r0, r3
 8008012:	f000 ff7f 	bl	8008f14 <xTaskRemoveFromEventList>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b3c      	ldr	r3, [pc, #240]	@ (8008110 <xQueueReceive+0x1c0>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800802c:	f001 ffde 	bl	8009fec <vPortExitCritical>
				return pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	e069      	b.n	8008108 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800803a:	f001 ffd7 	bl	8009fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800803e:	2300      	movs	r3, #0
 8008040:	e062      	b.n	8008108 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008048:	f107 0310 	add.w	r3, r7, #16
 800804c:	4618      	mov	r0, r3
 800804e:	f000 ffc5 	bl	8008fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008056:	f001 ffc9 	bl	8009fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800805a:	f000 fd35 	bl	8008ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800805e:	f001 ff93 	bl	8009f88 <vPortEnterCritical>
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008068:	b25b      	sxtb	r3, r3
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d103      	bne.n	8008078 <xQueueReceive+0x128>
 8008070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800807e:	b25b      	sxtb	r3, r3
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d103      	bne.n	800808e <xQueueReceive+0x13e>
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800808e:	f001 ffad 	bl	8009fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f000 ffb4 	bl	8009008 <xTaskCheckForTimeOut>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d123      	bne.n	80080ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080a8:	f000 fa3e 	bl	8008528 <prvIsQueueEmpty>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d017      	beq.n	80080e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	3324      	adds	r3, #36	@ 0x24
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fed8 	bl	8008e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080c2:	f000 f9df 	bl	8008484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080c6:	f000 fd0d 	bl	8008ae4 <xTaskResumeAll>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d189      	bne.n	8007fe4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80080d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008110 <xQueueReceive+0x1c0>)
 80080d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	e780      	b.n	8007fe4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e4:	f000 f9ce 	bl	8008484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080e8:	f000 fcfc 	bl	8008ae4 <xTaskResumeAll>
 80080ec:	e77a      	b.n	8007fe4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080f0:	f000 f9c8 	bl	8008484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f4:	f000 fcf6 	bl	8008ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080fa:	f000 fa15 	bl	8008528 <prvIsQueueEmpty>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	f43f af6f 	beq.w	8007fe4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008106:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	@ 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08e      	sub	sp, #56	@ 0x38
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	623b      	str	r3, [r7, #32]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61fb      	str	r3, [r7, #28]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008168:	f001 f8a4 	bl	80092b4 <xTaskGetSchedulerState>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <xQueueSemaphoreTake+0x64>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <xQueueSemaphoreTake+0x68>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <xQueueSemaphoreTake+0x6a>
 800817c:	2300      	movs	r3, #0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	61bb      	str	r3, [r7, #24]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800819a:	f001 fef5 	bl	8009f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800819e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d024      	beq.n	80081f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081ba:	f001 f9f5 	bl	80095a8 <pvTaskIncrementMutexHeldCount>
 80081be:	4602      	mov	r2, r0
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00f      	beq.n	80081ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	3310      	adds	r3, #16
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fe9f 	bl	8008f14 <xTaskRemoveFromEventList>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081dc:	4b54      	ldr	r3, [pc, #336]	@ (8008330 <xQueueSemaphoreTake+0x21c>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081ec:	f001 fefe 	bl	8009fec <vPortExitCritical>
				return pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e098      	b.n	8008326 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d112      	bne.n	8008220 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	617b      	str	r3, [r7, #20]
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008218:	f001 fee8 	bl	8009fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800821c:	2300      	movs	r3, #0
 800821e:	e082      	b.n	8008326 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008226:	f107 030c 	add.w	r3, r7, #12
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fed6 	bl	8008fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008234:	f001 feda 	bl	8009fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008238:	f000 fc46 	bl	8008ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800823c:	f001 fea4 	bl	8009f88 <vPortEnterCritical>
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008242:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008246:	b25b      	sxtb	r3, r3
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d103      	bne.n	8008256 <xQueueSemaphoreTake+0x142>
 800824e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800825c:	b25b      	sxtb	r3, r3
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d103      	bne.n	800826c <xQueueSemaphoreTake+0x158>
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800826c:	f001 febe 	bl	8009fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008270:	463a      	mov	r2, r7
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fec5 	bl	8009008 <xTaskCheckForTimeOut>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d132      	bne.n	80082ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008286:	f000 f94f 	bl	8008528 <prvIsQueueEmpty>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d026      	beq.n	80082de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d109      	bne.n	80082ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008298:	f001 fe76 	bl	8009f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 f825 	bl	80092f0 <xTaskPriorityInherit>
 80082a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80082a8:	f001 fea0 	bl	8009fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ae:	3324      	adds	r3, #36	@ 0x24
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fddb 	bl	8008e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082bc:	f000 f8e2 	bl	8008484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082c0:	f000 fc10 	bl	8008ae4 <xTaskResumeAll>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f47f af67 	bne.w	800819a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80082cc:	4b18      	ldr	r3, [pc, #96]	@ (8008330 <xQueueSemaphoreTake+0x21c>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	e75d      	b.n	800819a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082e0:	f000 f8d0 	bl	8008484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082e4:	f000 fbfe 	bl	8008ae4 <xTaskResumeAll>
 80082e8:	e757      	b.n	800819a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082ec:	f000 f8ca 	bl	8008484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082f0:	f000 fbf8 	bl	8008ae4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082f6:	f000 f917 	bl	8008528 <prvIsQueueEmpty>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f43f af4c 	beq.w	800819a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00d      	beq.n	8008324 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008308:	f001 fe3e 	bl	8009f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800830c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800830e:	f000 f811 	bl	8008334 <prvGetDisinheritPriorityAfterTimeout>
 8008312:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f8c0 	bl	80094a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008320:	f001 fe64 	bl	8009fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008326:	4618      	mov	r0, r3
 8008328:	3738      	adds	r7, #56	@ 0x38
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d006      	beq.n	8008352 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e001      	b.n	8008356 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008356:	68fb      	ldr	r3, [r7, #12]
	}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10d      	bne.n	800839e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d14d      	bne.n	8008426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f816 	bl	80093c0 <xTaskPriorityDisinherit>
 8008394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	609a      	str	r2, [r3, #8]
 800839c:	e043      	b.n	8008426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d119      	bne.n	80083d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6858      	ldr	r0, [r3, #4]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ac:	461a      	mov	r2, r3
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	f002 f926 	bl	800a600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083bc:	441a      	add	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d32b      	bcc.n	8008426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	e026      	b.n	8008426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68d8      	ldr	r0, [r3, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e0:	461a      	mov	r2, r3
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	f002 f90c 	bl	800a600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f0:	425b      	negs	r3, r3
 80083f2:	441a      	add	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d207      	bcs.n	8008414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	425b      	negs	r3, r3
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d105      	bne.n	8008426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3b01      	subs	r3, #1
 8008424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800842e:	697b      	ldr	r3, [r7, #20]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d018      	beq.n	800847c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	441a      	add	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	429a      	cmp	r2, r3
 8008462:	d303      	bcc.n	800846c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68d9      	ldr	r1, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	461a      	mov	r2, r3
 8008476:	6838      	ldr	r0, [r7, #0]
 8008478:	f002 f8c2 	bl	800a600 <memcpy>
	}
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800848c:	f001 fd7c 	bl	8009f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008498:	e011      	b.n	80084be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d012      	beq.n	80084c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3324      	adds	r3, #36	@ 0x24
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fd34 	bl	8008f14 <xTaskRemoveFromEventList>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084b2:	f000 fe0d 	bl	80090d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dce9      	bgt.n	800849a <prvUnlockQueue+0x16>
 80084c6:	e000      	b.n	80084ca <prvUnlockQueue+0x46>
					break;
 80084c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	22ff      	movs	r2, #255	@ 0xff
 80084ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084d2:	f001 fd8b 	bl	8009fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084d6:	f001 fd57 	bl	8009f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084e2:	e011      	b.n	8008508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d012      	beq.n	8008512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3310      	adds	r3, #16
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fd0f 	bl	8008f14 <xTaskRemoveFromEventList>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084fc:	f000 fde8 	bl	80090d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	3b01      	subs	r3, #1
 8008504:	b2db      	uxtb	r3, r3
 8008506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850c:	2b00      	cmp	r3, #0
 800850e:	dce9      	bgt.n	80084e4 <prvUnlockQueue+0x60>
 8008510:	e000      	b.n	8008514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	22ff      	movs	r2, #255	@ 0xff
 8008518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800851c:	f001 fd66 	bl	8009fec <vPortExitCritical>
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008530:	f001 fd2a 	bl	8009f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e001      	b.n	8008546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008546:	f001 fd51 	bl	8009fec <vPortExitCritical>

	return xReturn;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800855c:	f001 fd14 	bl	8009f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008568:	429a      	cmp	r2, r3
 800856a:	d102      	bne.n	8008572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e001      	b.n	8008576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008576:	f001 fd39 	bl	8009fec <vPortExitCritical>

	return xReturn;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	e014      	b.n	80085be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008594:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <vQueueAddToRegistry+0x50>)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10b      	bne.n	80085b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085a0:	490c      	ldr	r1, [pc, #48]	@ (80085d4 <vQueueAddToRegistry+0x50>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085aa:	4a0a      	ldr	r2, [pc, #40]	@ (80085d4 <vQueueAddToRegistry+0x50>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085b6:	e006      	b.n	80085c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b07      	cmp	r3, #7
 80085c2:	d9e7      	bls.n	8008594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000c1c 	.word	0x20000c1c

080085d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085e8:	f001 fcce 	bl	8009f88 <vPortEnterCritical>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085f2:	b25b      	sxtb	r3, r3
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d103      	bne.n	8008602 <vQueueWaitForMessageRestricted+0x2a>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008608:	b25b      	sxtb	r3, r3
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d103      	bne.n	8008618 <vQueueWaitForMessageRestricted+0x40>
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008618:	f001 fce8 	bl	8009fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3324      	adds	r3, #36	@ 0x24
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fc45 	bl	8008ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008632:	6978      	ldr	r0, [r7, #20]
 8008634:	f7ff ff26 	bl	8008484 <prvUnlockQueue>
	}
 8008638:	bf00      	nop
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08e      	sub	sp, #56	@ 0x38
 8008644:	af04      	add	r7, sp, #16
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	623b      	str	r3, [r7, #32]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800866c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10b      	bne.n	800868a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	61fb      	str	r3, [r7, #28]
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	e7fd      	b.n	8008686 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800868a:	235c      	movs	r3, #92	@ 0x5c
 800868c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b5c      	cmp	r3, #92	@ 0x5c
 8008692:	d00b      	beq.n	80086ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61bb      	str	r3, [r7, #24]
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01e      	beq.n	80086f2 <xTaskCreateStatic+0xb2>
 80086b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01b      	beq.n	80086f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086cc:	2300      	movs	r3, #0
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f850 	bl	800878a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086ec:	f000 f8de 	bl	80088ac <prvAddNewTaskToReadyList>
 80086f0:	e001      	b.n	80086f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086f6:	697b      	ldr	r3, [r7, #20]
	}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3728      	adds	r7, #40	@ 0x28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08c      	sub	sp, #48	@ 0x30
 8008704:	af04      	add	r7, sp, #16
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	4613      	mov	r3, r2
 800870e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fd59 	bl	800a1cc <pvPortMalloc>
 800871a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00e      	beq.n	8008740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008722:	205c      	movs	r0, #92	@ 0x5c
 8008724:	f001 fd52 	bl	800a1cc <pvPortMalloc>
 8008728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	631a      	str	r2, [r3, #48]	@ 0x30
 8008736:	e005      	b.n	8008744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008738:	6978      	ldr	r0, [r7, #20]
 800873a:	f001 fe15 	bl	800a368 <vPortFree>
 800873e:	e001      	b.n	8008744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008740:	2300      	movs	r3, #0
 8008742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	2300      	movs	r3, #0
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f80e 	bl	800878a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	f000 f89c 	bl	80088ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008774:	2301      	movs	r3, #1
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	e002      	b.n	8008780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008780:	69bb      	ldr	r3, [r7, #24]
	}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b088      	sub	sp, #32
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	461a      	mov	r2, r3
 80087a2:	21a5      	movs	r1, #165	@ 0xa5
 80087a4:	f001 ff00 	bl	800a5a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087b2:	3b01      	subs	r3, #1
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f023 0307 	bic.w	r3, r3, #7
 80087c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	617b      	str	r3, [r7, #20]
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	e7fd      	b.n	80087e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01f      	beq.n	800882a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	e012      	b.n	8008816 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	7819      	ldrb	r1, [r3, #0]
 80087f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	3334      	adds	r3, #52	@ 0x34
 8008800:	460a      	mov	r2, r1
 8008802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2b0f      	cmp	r3, #15
 800881a:	d9e9      	bls.n	80087f0 <prvInitialiseNewTask+0x66>
 800881c:	e000      	b.n	8008820 <prvInitialiseNewTask+0x96>
			{
				break;
 800881e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008828:	e003      	b.n	8008832 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008834:	2b37      	cmp	r3, #55	@ 0x37
 8008836:	d901      	bls.n	800883c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008838:	2337      	movs	r3, #55	@ 0x37
 800883a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008840:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008846:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	2200      	movs	r2, #0
 800884c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	3304      	adds	r3, #4
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe ff4a 	bl	80076ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	3318      	adds	r3, #24
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe ff45 	bl	80076ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008876:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	68f9      	ldr	r1, [r7, #12]
 800888a:	69b8      	ldr	r0, [r7, #24]
 800888c:	f001 fa4e 	bl	8009d2c <pxPortInitialiseStack>
 8008890:	4602      	mov	r2, r0
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a2:	bf00      	nop
 80088a4:	3720      	adds	r7, #32
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088b4:	f001 fb68 	bl	8009f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008970 <prvAddNewTaskToReadyList+0xc4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	4a2c      	ldr	r2, [pc, #176]	@ (8008970 <prvAddNewTaskToReadyList+0xc4>)
 80088c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008974 <prvAddNewTaskToReadyList+0xc8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d109      	bne.n	80088de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008974 <prvAddNewTaskToReadyList+0xc8>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088d0:	4b27      	ldr	r3, [pc, #156]	@ (8008970 <prvAddNewTaskToReadyList+0xc4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d110      	bne.n	80088fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088d8:	f000 fc1e 	bl	8009118 <prvInitialiseTaskLists>
 80088dc:	e00d      	b.n	80088fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088de:	4b26      	ldr	r3, [pc, #152]	@ (8008978 <prvAddNewTaskToReadyList+0xcc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088e6:	4b23      	ldr	r3, [pc, #140]	@ (8008974 <prvAddNewTaskToReadyList+0xc8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d802      	bhi.n	80088fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008974 <prvAddNewTaskToReadyList+0xc8>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088fa:	4b20      	ldr	r3, [pc, #128]	@ (800897c <prvAddNewTaskToReadyList+0xd0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3301      	adds	r3, #1
 8008900:	4a1e      	ldr	r2, [pc, #120]	@ (800897c <prvAddNewTaskToReadyList+0xd0>)
 8008902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008904:	4b1d      	ldr	r3, [pc, #116]	@ (800897c <prvAddNewTaskToReadyList+0xd0>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008910:	4b1b      	ldr	r3, [pc, #108]	@ (8008980 <prvAddNewTaskToReadyList+0xd4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d903      	bls.n	8008920 <prvAddNewTaskToReadyList+0x74>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891c:	4a18      	ldr	r2, [pc, #96]	@ (8008980 <prvAddNewTaskToReadyList+0xd4>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4a15      	ldr	r2, [pc, #84]	@ (8008984 <prvAddNewTaskToReadyList+0xd8>)
 800892e:	441a      	add	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fee5 	bl	8007706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800893c:	f001 fb56 	bl	8009fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008940:	4b0d      	ldr	r3, [pc, #52]	@ (8008978 <prvAddNewTaskToReadyList+0xcc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008948:	4b0a      	ldr	r3, [pc, #40]	@ (8008974 <prvAddNewTaskToReadyList+0xc8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008952:	429a      	cmp	r2, r3
 8008954:	d207      	bcs.n	8008966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008956:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <prvAddNewTaskToReadyList+0xdc>)
 8008958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20001130 	.word	0x20001130
 8008974:	20000c5c 	.word	0x20000c5c
 8008978:	2000113c 	.word	0x2000113c
 800897c:	2000114c 	.word	0x2000114c
 8008980:	20001138 	.word	0x20001138
 8008984:	20000c60 	.word	0x20000c60
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800899e:	4b14      	ldr	r3, [pc, #80]	@ (80089f0 <vTaskDelay+0x64>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <vTaskDelay+0x32>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089be:	f000 f883 	bl	8008ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fe03 	bl	80095d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089ca:	f000 f88b 	bl	8008ae4 <xTaskResumeAll>
 80089ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089d6:	4b07      	ldr	r3, [pc, #28]	@ (80089f4 <vTaskDelay+0x68>)
 80089d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001158 	.word	0x20001158
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	@ 0x28
 80089fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a06:	463a      	mov	r2, r7
 8008a08:	1d39      	adds	r1, r7, #4
 8008a0a:	f107 0308 	add.w	r3, r7, #8
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fe18 	bl	8007644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	9202      	str	r2, [sp, #8]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	460a      	mov	r2, r1
 8008a26:	4922      	ldr	r1, [pc, #136]	@ (8008ab0 <vTaskStartScheduler+0xb8>)
 8008a28:	4822      	ldr	r0, [pc, #136]	@ (8008ab4 <vTaskStartScheduler+0xbc>)
 8008a2a:	f7ff fe09 	bl	8008640 <xTaskCreateStatic>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4a21      	ldr	r2, [pc, #132]	@ (8008ab8 <vTaskStartScheduler+0xc0>)
 8008a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a34:	4b20      	ldr	r3, [pc, #128]	@ (8008ab8 <vTaskStartScheduler+0xc0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	e001      	b.n	8008a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d102      	bne.n	8008a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a4c:	f000 fe14 	bl	8009678 <xTimerCreateTimerTask>
 8008a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d116      	bne.n	8008a86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	613b      	str	r3, [r7, #16]
}
 8008a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a6c:	4b13      	ldr	r3, [pc, #76]	@ (8008abc <vTaskStartScheduler+0xc4>)
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a74:	4b12      	ldr	r3, [pc, #72]	@ (8008ac0 <vTaskStartScheduler+0xc8>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ac4 <vTaskStartScheduler+0xcc>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a80:	f001 f9de 	bl	8009e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a84:	e00f      	b.n	8008aa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d10b      	bne.n	8008aa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <vTaskStartScheduler+0xaa>
}
 8008aa6:	bf00      	nop
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	0800a680 	.word	0x0800a680
 8008ab4:	080090e9 	.word	0x080090e9
 8008ab8:	20001154 	.word	0x20001154
 8008abc:	20001150 	.word	0x20001150
 8008ac0:	2000113c 	.word	0x2000113c
 8008ac4:	20001134 	.word	0x20001134

08008ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008acc:	4b04      	ldr	r3, [pc, #16]	@ (8008ae0 <vTaskSuspendAll+0x18>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	4a03      	ldr	r2, [pc, #12]	@ (8008ae0 <vTaskSuspendAll+0x18>)
 8008ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20001158 	.word	0x20001158

08008ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008af2:	4b42      	ldr	r3, [pc, #264]	@ (8008bfc <xTaskResumeAll+0x118>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <xTaskResumeAll+0x2e>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	603b      	str	r3, [r7, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b12:	f001 fa39 	bl	8009f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b16:	4b39      	ldr	r3, [pc, #228]	@ (8008bfc <xTaskResumeAll+0x118>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a37      	ldr	r2, [pc, #220]	@ (8008bfc <xTaskResumeAll+0x118>)
 8008b1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b20:	4b36      	ldr	r3, [pc, #216]	@ (8008bfc <xTaskResumeAll+0x118>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d162      	bne.n	8008bee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b28:	4b35      	ldr	r3, [pc, #212]	@ (8008c00 <xTaskResumeAll+0x11c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d05e      	beq.n	8008bee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b30:	e02f      	b.n	8008b92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	4b34      	ldr	r3, [pc, #208]	@ (8008c04 <xTaskResumeAll+0x120>)
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3318      	adds	r3, #24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fe3e 	bl	80077c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe fe39 	bl	80077c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	4b2d      	ldr	r3, [pc, #180]	@ (8008c08 <xTaskResumeAll+0x124>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d903      	bls.n	8008b62 <xTaskResumeAll+0x7e>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008c08 <xTaskResumeAll+0x124>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a27      	ldr	r2, [pc, #156]	@ (8008c0c <xTaskResumeAll+0x128>)
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fe fdc4 	bl	8007706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b82:	4b23      	ldr	r3, [pc, #140]	@ (8008c10 <xTaskResumeAll+0x12c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b8c:	4b21      	ldr	r3, [pc, #132]	@ (8008c14 <xTaskResumeAll+0x130>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b92:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <xTaskResumeAll+0x120>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1cb      	bne.n	8008b32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ba0:	f000 fb58 	bl	8009254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c18 <xTaskResumeAll+0x134>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bb0:	f000 f846 	bl	8008c40 <xTaskIncrementTick>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008bba:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <xTaskResumeAll+0x130>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f1      	bne.n	8008bb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008bcc:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <xTaskResumeAll+0x134>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bd2:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <xTaskResumeAll+0x130>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bde:	4b0f      	ldr	r3, [pc, #60]	@ (8008c1c <xTaskResumeAll+0x138>)
 8008be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bee:	f001 f9fd 	bl	8009fec <vPortExitCritical>

	return xAlreadyYielded;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20001158 	.word	0x20001158
 8008c00:	20001130 	.word	0x20001130
 8008c04:	200010f0 	.word	0x200010f0
 8008c08:	20001138 	.word	0x20001138
 8008c0c:	20000c60 	.word	0x20000c60
 8008c10:	20000c5c 	.word	0x20000c5c
 8008c14:	20001144 	.word	0x20001144
 8008c18:	20001140 	.word	0x20001140
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c26:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <xTaskGetTickCount+0x1c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c2c:	687b      	ldr	r3, [r7, #4]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20001134 	.word	0x20001134

08008c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d88 <xTaskIncrementTick+0x148>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f040 8090 	bne.w	8008d74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c54:	4b4d      	ldr	r3, [pc, #308]	@ (8008d8c <xTaskIncrementTick+0x14c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8008d8c <xTaskIncrementTick+0x14c>)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d121      	bne.n	8008cac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c68:	4b49      	ldr	r3, [pc, #292]	@ (8008d90 <xTaskIncrementTick+0x150>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	603b      	str	r3, [r7, #0]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <xTaskIncrementTick+0x46>
 8008c8a:	4b41      	ldr	r3, [pc, #260]	@ (8008d90 <xTaskIncrementTick+0x150>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	4b40      	ldr	r3, [pc, #256]	@ (8008d94 <xTaskIncrementTick+0x154>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a3e      	ldr	r2, [pc, #248]	@ (8008d90 <xTaskIncrementTick+0x150>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	4a3e      	ldr	r2, [pc, #248]	@ (8008d94 <xTaskIncrementTick+0x154>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d98 <xTaskIncrementTick+0x158>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8008d98 <xTaskIncrementTick+0x158>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	f000 fad4 	bl	8009254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cac:	4b3b      	ldr	r3, [pc, #236]	@ (8008d9c <xTaskIncrementTick+0x15c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d349      	bcc.n	8008d4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb6:	4b36      	ldr	r3, [pc, #216]	@ (8008d90 <xTaskIncrementTick+0x150>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc0:	4b36      	ldr	r3, [pc, #216]	@ (8008d9c <xTaskIncrementTick+0x15c>)
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc6:	601a      	str	r2, [r3, #0]
					break;
 8008cc8:	e03f      	b.n	8008d4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cca:	4b31      	ldr	r3, [pc, #196]	@ (8008d90 <xTaskIncrementTick+0x150>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d203      	bcs.n	8008cea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d9c <xTaskIncrementTick+0x15c>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ce8:	e02f      	b.n	8008d4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fd66 	bl	80077c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fd5d 	bl	80077c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0a:	4b25      	ldr	r3, [pc, #148]	@ (8008da0 <xTaskIncrementTick+0x160>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d903      	bls.n	8008d1a <xTaskIncrementTick+0xda>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	4a22      	ldr	r2, [pc, #136]	@ (8008da0 <xTaskIncrementTick+0x160>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4a1f      	ldr	r2, [pc, #124]	@ (8008da4 <xTaskIncrementTick+0x164>)
 8008d28:	441a      	add	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7fe fce8 	bl	8007706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <xTaskIncrementTick+0x168>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d3b8      	bcc.n	8008cb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d44:	2301      	movs	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d48:	e7b5      	b.n	8008cb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d4a:	4b17      	ldr	r3, [pc, #92]	@ (8008da8 <xTaskIncrementTick+0x168>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d50:	4914      	ldr	r1, [pc, #80]	@ (8008da4 <xTaskIncrementTick+0x164>)
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d901      	bls.n	8008d66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d66:	4b11      	ldr	r3, [pc, #68]	@ (8008dac <xTaskIncrementTick+0x16c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e004      	b.n	8008d7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d74:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <xTaskIncrementTick+0x170>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008db0 <xTaskIncrementTick+0x170>)
 8008d7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d7e:	697b      	ldr	r3, [r7, #20]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20001158 	.word	0x20001158
 8008d8c:	20001134 	.word	0x20001134
 8008d90:	200010e8 	.word	0x200010e8
 8008d94:	200010ec 	.word	0x200010ec
 8008d98:	20001148 	.word	0x20001148
 8008d9c:	20001150 	.word	0x20001150
 8008da0:	20001138 	.word	0x20001138
 8008da4:	20000c60 	.word	0x20000c60
 8008da8:	20000c5c 	.word	0x20000c5c
 8008dac:	20001144 	.word	0x20001144
 8008db0:	20001140 	.word	0x20001140

08008db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dba:	4b28      	ldr	r3, [pc, #160]	@ (8008e5c <vTaskSwitchContext+0xa8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dc2:	4b27      	ldr	r3, [pc, #156]	@ (8008e60 <vTaskSwitchContext+0xac>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dc8:	e042      	b.n	8008e50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008dca:	4b25      	ldr	r3, [pc, #148]	@ (8008e60 <vTaskSwitchContext+0xac>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd0:	4b24      	ldr	r3, [pc, #144]	@ (8008e64 <vTaskSwitchContext+0xb0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e011      	b.n	8008dfc <vTaskSwitchContext+0x48>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10b      	bne.n	8008df6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vTaskSwitchContext+0x3e>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	491a      	ldr	r1, [pc, #104]	@ (8008e68 <vTaskSwitchContext+0xb4>)
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0e3      	beq.n	8008dd8 <vTaskSwitchContext+0x24>
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4a13      	ldr	r2, [pc, #76]	@ (8008e68 <vTaskSwitchContext+0xb4>)
 8008e1c:	4413      	add	r3, r2
 8008e1e:	60bb      	str	r3, [r7, #8]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	3308      	adds	r3, #8
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d104      	bne.n	8008e40 <vTaskSwitchContext+0x8c>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	4a09      	ldr	r2, [pc, #36]	@ (8008e6c <vTaskSwitchContext+0xb8>)
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4a06      	ldr	r2, [pc, #24]	@ (8008e64 <vTaskSwitchContext+0xb0>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6013      	str	r3, [r2, #0]
}
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20001158 	.word	0x20001158
 8008e60:	20001144 	.word	0x20001144
 8008e64:	20001138 	.word	0x20001138
 8008e68:	20000c60 	.word	0x20000c60
 8008e6c:	20000c5c 	.word	0x20000c5c

08008e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e98:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <vTaskPlaceOnEventList+0x48>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3318      	adds	r3, #24
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7fe fc54 	bl	800774e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	6838      	ldr	r0, [r7, #0]
 8008eaa:	f000 fb91 	bl	80095d0 <prvAddCurrentTaskToDelayedList>
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000c5c 	.word	0x20000c5c

08008ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	617b      	str	r3, [r7, #20]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3318      	adds	r3, #24
 8008eec:	4619      	mov	r1, r3
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7fe fc09 	bl	8007706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295
 8008efe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	68b8      	ldr	r0, [r7, #8]
 8008f04:	f000 fb64 	bl	80095d0 <prvAddCurrentTaskToDelayedList>
	}
 8008f08:	bf00      	nop
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000c5c 	.word	0x20000c5c

08008f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	60fb      	str	r3, [r7, #12]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3318      	adds	r3, #24
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc3a 	bl	80077c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc4 <xTaskRemoveFromEventList+0xb0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11d      	bne.n	8008f90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fc31 	bl	80077c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f62:	4b19      	ldr	r3, [pc, #100]	@ (8008fc8 <xTaskRemoveFromEventList+0xb4>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d903      	bls.n	8008f72 <xTaskRemoveFromEventList+0x5e>
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	4a16      	ldr	r2, [pc, #88]	@ (8008fc8 <xTaskRemoveFromEventList+0xb4>)
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4a13      	ldr	r2, [pc, #76]	@ (8008fcc <xTaskRemoveFromEventList+0xb8>)
 8008f80:	441a      	add	r2, r3
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fe fbbc 	bl	8007706 <vListInsertEnd>
 8008f8e:	e005      	b.n	8008f9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	3318      	adds	r3, #24
 8008f94:	4619      	mov	r1, r3
 8008f96:	480e      	ldr	r0, [pc, #56]	@ (8008fd0 <xTaskRemoveFromEventList+0xbc>)
 8008f98:	f7fe fbb5 	bl	8007706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <xTaskRemoveFromEventList+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d905      	bls.n	8008fb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fae:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <xTaskRemoveFromEventList+0xc4>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e001      	b.n	8008fba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fba:	697b      	ldr	r3, [r7, #20]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20001158 	.word	0x20001158
 8008fc8:	20001138 	.word	0x20001138
 8008fcc:	20000c60 	.word	0x20000c60
 8008fd0:	200010f0 	.word	0x200010f0
 8008fd4:	20000c5c 	.word	0x20000c5c
 8008fd8:	20001144 	.word	0x20001144

08008fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fe4:	4b06      	ldr	r3, [pc, #24]	@ (8009000 <vTaskInternalSetTimeOutState+0x24>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fec:	4b05      	ldr	r3, [pc, #20]	@ (8009004 <vTaskInternalSetTimeOutState+0x28>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	605a      	str	r2, [r3, #4]
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	20001148 	.word	0x20001148
 8009004:	20001134 	.word	0x20001134

08009008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10b      	bne.n	8009030 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	613b      	str	r3, [r7, #16]
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60fb      	str	r3, [r7, #12]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800904e:	f000 ff9b 	bl	8009f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009052:	4b1d      	ldr	r3, [pc, #116]	@ (80090c8 <xTaskCheckForTimeOut+0xc0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d102      	bne.n	8009072 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	e023      	b.n	80090ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b15      	ldr	r3, [pc, #84]	@ (80090cc <xTaskCheckForTimeOut+0xc4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d007      	beq.n	800908e <xTaskCheckForTimeOut+0x86>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	429a      	cmp	r2, r3
 8009086:	d302      	bcc.n	800908e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	e015      	b.n	80090ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	429a      	cmp	r2, r3
 8009096:	d20b      	bcs.n	80090b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff ff99 	bl	8008fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
 80090ae:	e004      	b.n	80090ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090b6:	2301      	movs	r3, #1
 80090b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090ba:	f000 ff97 	bl	8009fec <vPortExitCritical>

	return xReturn;
 80090be:	69fb      	ldr	r3, [r7, #28]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3720      	adds	r7, #32
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20001134 	.word	0x20001134
 80090cc:	20001148 	.word	0x20001148

080090d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090d4:	4b03      	ldr	r3, [pc, #12]	@ (80090e4 <vTaskMissedYield+0x14>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	20001144 	.word	0x20001144

080090e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090f0:	f000 f852 	bl	8009198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090f4:	4b06      	ldr	r3, [pc, #24]	@ (8009110 <prvIdleTask+0x28>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d9f9      	bls.n	80090f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090fc:	4b05      	ldr	r3, [pc, #20]	@ (8009114 <prvIdleTask+0x2c>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800910c:	e7f0      	b.n	80090f0 <prvIdleTask+0x8>
 800910e:	bf00      	nop
 8009110:	20000c60 	.word	0x20000c60
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
 8009122:	e00c      	b.n	800913e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4a12      	ldr	r2, [pc, #72]	@ (8009178 <prvInitialiseTaskLists+0x60>)
 8009130:	4413      	add	r3, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe faba 	bl	80076ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3301      	adds	r3, #1
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b37      	cmp	r3, #55	@ 0x37
 8009142:	d9ef      	bls.n	8009124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009144:	480d      	ldr	r0, [pc, #52]	@ (800917c <prvInitialiseTaskLists+0x64>)
 8009146:	f7fe fab1 	bl	80076ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800914a:	480d      	ldr	r0, [pc, #52]	@ (8009180 <prvInitialiseTaskLists+0x68>)
 800914c:	f7fe faae 	bl	80076ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009150:	480c      	ldr	r0, [pc, #48]	@ (8009184 <prvInitialiseTaskLists+0x6c>)
 8009152:	f7fe faab 	bl	80076ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009156:	480c      	ldr	r0, [pc, #48]	@ (8009188 <prvInitialiseTaskLists+0x70>)
 8009158:	f7fe faa8 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800915c:	480b      	ldr	r0, [pc, #44]	@ (800918c <prvInitialiseTaskLists+0x74>)
 800915e:	f7fe faa5 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009162:	4b0b      	ldr	r3, [pc, #44]	@ (8009190 <prvInitialiseTaskLists+0x78>)
 8009164:	4a05      	ldr	r2, [pc, #20]	@ (800917c <prvInitialiseTaskLists+0x64>)
 8009166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <prvInitialiseTaskLists+0x7c>)
 800916a:	4a05      	ldr	r2, [pc, #20]	@ (8009180 <prvInitialiseTaskLists+0x68>)
 800916c:	601a      	str	r2, [r3, #0]
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000c60 	.word	0x20000c60
 800917c:	200010c0 	.word	0x200010c0
 8009180:	200010d4 	.word	0x200010d4
 8009184:	200010f0 	.word	0x200010f0
 8009188:	20001104 	.word	0x20001104
 800918c:	2000111c 	.word	0x2000111c
 8009190:	200010e8 	.word	0x200010e8
 8009194:	200010ec 	.word	0x200010ec

08009198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800919e:	e019      	b.n	80091d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091a0:	f000 fef2 	bl	8009f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a4:	4b10      	ldr	r3, [pc, #64]	@ (80091e8 <prvCheckTasksWaitingTermination+0x50>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fb05 	bl	80077c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091b6:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <prvCheckTasksWaitingTermination+0x54>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4a0b      	ldr	r2, [pc, #44]	@ (80091ec <prvCheckTasksWaitingTermination+0x54>)
 80091be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091c0:	4b0b      	ldr	r3, [pc, #44]	@ (80091f0 <prvCheckTasksWaitingTermination+0x58>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	4a0a      	ldr	r2, [pc, #40]	@ (80091f0 <prvCheckTasksWaitingTermination+0x58>)
 80091c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ca:	f000 ff0f 	bl	8009fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f810 	bl	80091f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091d4:	4b06      	ldr	r3, [pc, #24]	@ (80091f0 <prvCheckTasksWaitingTermination+0x58>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e1      	bne.n	80091a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20001104 	.word	0x20001104
 80091ec:	20001130 	.word	0x20001130
 80091f0:	20001118 	.word	0x20001118

080091f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009202:	2b00      	cmp	r3, #0
 8009204:	d108      	bne.n	8009218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920a:	4618      	mov	r0, r3
 800920c:	f001 f8ac 	bl	800a368 <vPortFree>
				vPortFree( pxTCB );
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 f8a9 	bl	800a368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009216:	e019      	b.n	800924c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800921e:	2b01      	cmp	r3, #1
 8009220:	d103      	bne.n	800922a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 f8a0 	bl	800a368 <vPortFree>
	}
 8009228:	e010      	b.n	800924c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009230:	2b02      	cmp	r3, #2
 8009232:	d00b      	beq.n	800924c <prvDeleteTCB+0x58>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <prvDeleteTCB+0x54>
	}
 800924c:	bf00      	nop
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800925a:	4b0c      	ldr	r3, [pc, #48]	@ (800928c <prvResetNextTaskUnblockTime+0x38>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d104      	bne.n	800926e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009264:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <prvResetNextTaskUnblockTime+0x3c>)
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800926c:	e008      	b.n	8009280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926e:	4b07      	ldr	r3, [pc, #28]	@ (800928c <prvResetNextTaskUnblockTime+0x38>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4a04      	ldr	r2, [pc, #16]	@ (8009290 <prvResetNextTaskUnblockTime+0x3c>)
 800927e:	6013      	str	r3, [r2, #0]
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	200010e8 	.word	0x200010e8
 8009290:	20001150 	.word	0x20001150

08009294 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800929a:	4b05      	ldr	r3, [pc, #20]	@ (80092b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80092a0:	687b      	ldr	r3, [r7, #4]
	}
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	20000c5c 	.word	0x20000c5c

080092b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <xTaskGetSchedulerState+0x34>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092c2:	2301      	movs	r3, #1
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	e008      	b.n	80092da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c8:	4b08      	ldr	r3, [pc, #32]	@ (80092ec <xTaskGetSchedulerState+0x38>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092d0:	2302      	movs	r3, #2
 80092d2:	607b      	str	r3, [r7, #4]
 80092d4:	e001      	b.n	80092da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092da:	687b      	ldr	r3, [r7, #4]
	}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	2000113c 	.word	0x2000113c
 80092ec:	20001158 	.word	0x20001158

080092f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d051      	beq.n	80093aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800930a:	4b2a      	ldr	r3, [pc, #168]	@ (80093b4 <xTaskPriorityInherit+0xc4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009310:	429a      	cmp	r2, r3
 8009312:	d241      	bcs.n	8009398 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	db06      	blt.n	800932a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931c:	4b25      	ldr	r3, [pc, #148]	@ (80093b4 <xTaskPriorityInherit+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6959      	ldr	r1, [r3, #20]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4a1f      	ldr	r2, [pc, #124]	@ (80093b8 <xTaskPriorityInherit+0xc8>)
 800933c:	4413      	add	r3, r2
 800933e:	4299      	cmp	r1, r3
 8009340:	d122      	bne.n	8009388 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	3304      	adds	r3, #4
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fa3a 	bl	80077c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800934c:	4b19      	ldr	r3, [pc, #100]	@ (80093b4 <xTaskPriorityInherit+0xc4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935a:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <xTaskPriorityInherit+0xcc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d903      	bls.n	800936a <xTaskPriorityInherit+0x7a>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009366:	4a15      	ldr	r2, [pc, #84]	@ (80093bc <xTaskPriorityInherit+0xcc>)
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4a10      	ldr	r2, [pc, #64]	@ (80093b8 <xTaskPriorityInherit+0xc8>)
 8009378:	441a      	add	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fe f9c0 	bl	8007706 <vListInsertEnd>
 8009386:	e004      	b.n	8009392 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009388:	4b0a      	ldr	r3, [pc, #40]	@ (80093b4 <xTaskPriorityInherit+0xc4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009392:	2301      	movs	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e008      	b.n	80093aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800939c:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <xTaskPriorityInherit+0xc4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d201      	bcs.n	80093aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093a6:	2301      	movs	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093aa:	68fb      	ldr	r3, [r7, #12]
	}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000c5c 	.word	0x20000c5c
 80093b8:	20000c60 	.word	0x20000c60
 80093bc:	20001138 	.word	0x20001138

080093c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d058      	beq.n	8009488 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009494 <xTaskPriorityDisinherit+0xd4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d00b      	beq.n	80093f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	60bb      	str	r3, [r7, #8]
}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941c:	1e5a      	subs	r2, r3, #1
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800942a:	429a      	cmp	r2, r3
 800942c:	d02c      	beq.n	8009488 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009432:	2b00      	cmp	r3, #0
 8009434:	d128      	bne.n	8009488 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	3304      	adds	r3, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe f9c0 	bl	80077c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009458:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <xTaskPriorityDisinherit+0xd8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <xTaskPriorityDisinherit+0xa8>
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a0c      	ldr	r2, [pc, #48]	@ (8009498 <xTaskPriorityDisinherit+0xd8>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a09      	ldr	r2, [pc, #36]	@ (800949c <xTaskPriorityDisinherit+0xdc>)
 8009476:	441a      	add	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe f941 	bl	8007706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009488:	697b      	ldr	r3, [r7, #20]
	}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20000c5c 	.word	0x20000c5c
 8009498:	20001138 	.word	0x20001138
 800949c:	20000c60 	.word	0x20000c60

080094a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80094ae:	2301      	movs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d06c      	beq.n	8009592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10b      	bne.n	80094d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60fb      	str	r3, [r7, #12]
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	e7fd      	b.n	80094d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d902      	bls.n	80094e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	e002      	b.n	80094ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d04c      	beq.n	8009592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d147      	bne.n	8009592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009502:	4b26      	ldr	r3, [pc, #152]	@ (800959c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	429a      	cmp	r2, r3
 800950a:	d10b      	bne.n	8009524 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60bb      	str	r3, [r7, #8]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	db04      	blt.n	8009542 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	6959      	ldr	r1, [r3, #20]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4a13      	ldr	r2, [pc, #76]	@ (80095a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009552:	4413      	add	r3, r2
 8009554:	4299      	cmp	r1, r3
 8009556:	d11c      	bne.n	8009592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	3304      	adds	r3, #4
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe f92f 	bl	80077c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009566:	4b0f      	ldr	r3, [pc, #60]	@ (80095a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d903      	bls.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009572:	4a0c      	ldr	r2, [pc, #48]	@ (80095a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4a07      	ldr	r2, [pc, #28]	@ (80095a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009584:	441a      	add	r2, r3
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7fe f8ba 	bl	8007706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009592:	bf00      	nop
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000c5c 	.word	0x20000c5c
 80095a0:	20000c60 	.word	0x20000c60
 80095a4:	20001138 	.word	0x20001138

080095a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095ac:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <pvTaskIncrementMutexHeldCount+0x24>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095b4:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <pvTaskIncrementMutexHeldCount+0x24>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095ba:	3201      	adds	r2, #1
 80095bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80095be:	4b03      	ldr	r3, [pc, #12]	@ (80095cc <pvTaskIncrementMutexHeldCount+0x24>)
 80095c0:	681b      	ldr	r3, [r3, #0]
	}
 80095c2:	4618      	mov	r0, r3
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20000c5c 	.word	0x20000c5c

080095d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095da:	4b21      	ldr	r3, [pc, #132]	@ (8009660 <prvAddCurrentTaskToDelayedList+0x90>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e0:	4b20      	ldr	r3, [pc, #128]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe f8ea 	bl	80077c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d10a      	bne.n	800960a <prvAddCurrentTaskToDelayedList+0x3a>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x94>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3304      	adds	r3, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4819      	ldr	r0, [pc, #100]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x98>)
 8009604:	f7fe f87f 	bl	8007706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009608:	e026      	b.n	8009658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009612:	4b14      	ldr	r3, [pc, #80]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x94>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	429a      	cmp	r2, r3
 8009620:	d209      	bcs.n	8009636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009622:	4b12      	ldr	r3, [pc, #72]	@ (800966c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x94>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f7fe f88d 	bl	800774e <vListInsert>
}
 8009634:	e010      	b.n	8009658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009636:	4b0e      	ldr	r3, [pc, #56]	@ (8009670 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b0a      	ldr	r3, [pc, #40]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x94>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	f7fe f883 	bl	800774e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009648:	4b0a      	ldr	r3, [pc, #40]	@ (8009674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	429a      	cmp	r2, r3
 8009650:	d202      	bcs.n	8009658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009652:	4a08      	ldr	r2, [pc, #32]	@ (8009674 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6013      	str	r3, [r2, #0]
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20001134 	.word	0x20001134
 8009664:	20000c5c 	.word	0x20000c5c
 8009668:	2000111c 	.word	0x2000111c
 800966c:	200010ec 	.word	0x200010ec
 8009670:	200010e8 	.word	0x200010e8
 8009674:	20001150 	.word	0x20001150

08009678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	@ 0x28
 800967c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009682:	f000 fb13 	bl	8009cac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009686:	4b1d      	ldr	r3, [pc, #116]	@ (80096fc <xTimerCreateTimerTask+0x84>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d021      	beq.n	80096d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009696:	1d3a      	adds	r2, r7, #4
 8009698:	f107 0108 	add.w	r1, r7, #8
 800969c:	f107 030c 	add.w	r3, r7, #12
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fd ffe9 	bl	8007678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	9202      	str	r2, [sp, #8]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	2302      	movs	r3, #2
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	460a      	mov	r2, r1
 80096b8:	4911      	ldr	r1, [pc, #68]	@ (8009700 <xTimerCreateTimerTask+0x88>)
 80096ba:	4812      	ldr	r0, [pc, #72]	@ (8009704 <xTimerCreateTimerTask+0x8c>)
 80096bc:	f7fe ffc0 	bl	8008640 <xTaskCreateStatic>
 80096c0:	4603      	mov	r3, r0
 80096c2:	4a11      	ldr	r2, [pc, #68]	@ (8009708 <xTimerCreateTimerTask+0x90>)
 80096c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096c6:	4b10      	ldr	r3, [pc, #64]	@ (8009708 <xTimerCreateTimerTask+0x90>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096ce:	2301      	movs	r3, #1
 80096d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	613b      	str	r3, [r7, #16]
}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	e7fd      	b.n	80096ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096f0:	697b      	ldr	r3, [r7, #20]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	2000118c 	.word	0x2000118c
 8009700:	0800a688 	.word	0x0800a688
 8009704:	08009845 	.word	0x08009845
 8009708:	20001190 	.word	0x20001190

0800970c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	@ 0x28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800971a:	2300      	movs	r3, #0
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <xTimerGenericCommand+0x30>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800973c:	4b19      	ldr	r3, [pc, #100]	@ (80097a4 <xTimerGenericCommand+0x98>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02a      	beq.n	800979a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b05      	cmp	r3, #5
 8009754:	dc18      	bgt.n	8009788 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009756:	f7ff fdad 	bl	80092b4 <xTaskGetSchedulerState>
 800975a:	4603      	mov	r3, r0
 800975c:	2b02      	cmp	r3, #2
 800975e:	d109      	bne.n	8009774 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009760:	4b10      	ldr	r3, [pc, #64]	@ (80097a4 <xTimerGenericCommand+0x98>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	f107 0110 	add.w	r1, r7, #16
 8009768:	2300      	movs	r3, #0
 800976a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800976c:	f7fe fa50 	bl	8007c10 <xQueueGenericSend>
 8009770:	6278      	str	r0, [r7, #36]	@ 0x24
 8009772:	e012      	b.n	800979a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009774:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <xTimerGenericCommand+0x98>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	f107 0110 	add.w	r1, r7, #16
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	f7fe fa46 	bl	8007c10 <xQueueGenericSend>
 8009784:	6278      	str	r0, [r7, #36]	@ 0x24
 8009786:	e008      	b.n	800979a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009788:	4b06      	ldr	r3, [pc, #24]	@ (80097a4 <xTimerGenericCommand+0x98>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	f107 0110 	add.w	r1, r7, #16
 8009790:	2300      	movs	r3, #0
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	f7fe fb3e 	bl	8007e14 <xQueueGenericSendFromISR>
 8009798:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	@ 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	2000118c 	.word	0x2000118c

080097a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b2:	4b23      	ldr	r3, [pc, #140]	@ (8009840 <prvProcessExpiredTimer+0x98>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3304      	adds	r3, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fffd 	bl	80077c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d023      	beq.n	800981c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	18d1      	adds	r1, r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	6978      	ldr	r0, [r7, #20]
 80097e2:	f000 f8d5 	bl	8009990 <prvInsertTimerInActiveList>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d020      	beq.n	800982e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097ec:	2300      	movs	r3, #0
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	2300      	movs	r3, #0
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	6978      	ldr	r0, [r7, #20]
 80097f8:	f7ff ff88 	bl	800970c <xTimerGenericCommand>
 80097fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d114      	bne.n	800982e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	60fb      	str	r3, [r7, #12]
}
 8009816:	bf00      	nop
 8009818:	bf00      	nop
 800981a:	e7fd      	b.n	8009818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	4798      	blx	r3
}
 8009836:	bf00      	nop
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20001184 	.word	0x20001184

08009844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	4618      	mov	r0, r3
 8009852:	f000 f859 	bl	8009908 <prvGetNextExpireTime>
 8009856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4619      	mov	r1, r3
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f805 	bl	800986c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009862:	f000 f8d7 	bl	8009a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009866:	bf00      	nop
 8009868:	e7f0      	b.n	800984c <prvTimerTask+0x8>
	...

0800986c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009876:	f7ff f927 	bl	8008ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800987a:	f107 0308 	add.w	r3, r7, #8
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f866 	bl	8009950 <prvSampleTimeNow>
 8009884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d130      	bne.n	80098ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10a      	bne.n	80098a8 <prvProcessTimerOrBlockTask+0x3c>
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	429a      	cmp	r2, r3
 8009898:	d806      	bhi.n	80098a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800989a:	f7ff f923 	bl	8008ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ff81 	bl	80097a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098a6:	e024      	b.n	80098f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098ae:	4b13      	ldr	r3, [pc, #76]	@ (80098fc <prvProcessTimerOrBlockTask+0x90>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <prvProcessTimerOrBlockTask+0x50>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e000      	b.n	80098be <prvProcessTimerOrBlockTask+0x52>
 80098bc:	2300      	movs	r3, #0
 80098be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <prvProcessTimerOrBlockTask+0x94>)
 80098c2:	6818      	ldr	r0, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7fe fe83 	bl	80085d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098d2:	f7ff f907 	bl	8008ae4 <xTaskResumeAll>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098dc:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <prvProcessTimerOrBlockTask+0x98>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	f3bf 8f6f 	isb	sy
}
 80098ec:	e001      	b.n	80098f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098ee:	f7ff f8f9 	bl	8008ae4 <xTaskResumeAll>
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20001188 	.word	0x20001188
 8009900:	2000118c 	.word	0x2000118c
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009910:	4b0e      	ldr	r3, [pc, #56]	@ (800994c <prvGetNextExpireTime+0x44>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <prvGetNextExpireTime+0x16>
 800991a:	2201      	movs	r2, #1
 800991c:	e000      	b.n	8009920 <prvGetNextExpireTime+0x18>
 800991e:	2200      	movs	r2, #0
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d105      	bne.n	8009938 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800992c:	4b07      	ldr	r3, [pc, #28]	@ (800994c <prvGetNextExpireTime+0x44>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e001      	b.n	800993c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800993c:	68fb      	ldr	r3, [r7, #12]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20001184 	.word	0x20001184

08009950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009958:	f7ff f962 	bl	8008c20 <xTaskGetTickCount>
 800995c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800995e:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <prvSampleTimeNow+0x3c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	429a      	cmp	r2, r3
 8009966:	d205      	bcs.n	8009974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009968:	f000 f93a 	bl	8009be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	e002      	b.n	800997a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800997a:	4a04      	ldr	r2, [pc, #16]	@ (800998c <prvSampleTimeNow+0x3c>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009980:	68fb      	ldr	r3, [r7, #12]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20001194 	.word	0x20001194

08009990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d812      	bhi.n	80099dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	1ad2      	subs	r2, r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d302      	bcc.n	80099ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099c4:	2301      	movs	r3, #1
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	e01b      	b.n	8009a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099ca:	4b10      	ldr	r3, [pc, #64]	@ (8009a0c <prvInsertTimerInActiveList+0x7c>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4619      	mov	r1, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	f7fd feba 	bl	800774e <vListInsert>
 80099da:	e012      	b.n	8009a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d206      	bcs.n	80099f2 <prvInsertTimerInActiveList+0x62>
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d302      	bcc.n	80099f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099ec:	2301      	movs	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e007      	b.n	8009a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099f2:	4b07      	ldr	r3, [pc, #28]	@ (8009a10 <prvInsertTimerInActiveList+0x80>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	f7fd fea6 	bl	800774e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a02:	697b      	ldr	r3, [r7, #20]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20001188 	.word	0x20001188
 8009a10:	20001184 	.word	0x20001184

08009a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08e      	sub	sp, #56	@ 0x38
 8009a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a1a:	e0ce      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	da19      	bge.n	8009a56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a22:	1d3b      	adds	r3, r7, #4
 8009a24:	3304      	adds	r3, #4
 8009a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	61fb      	str	r3, [r7, #28]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a4c:	6850      	ldr	r0, [r2, #4]
 8009a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a50:	6892      	ldr	r2, [r2, #8]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f2c0 80ae 	blt.w	8009bba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fd fea6 	bl	80077c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a74:	463b      	mov	r3, r7
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff ff6a 	bl	8009950 <prvSampleTimeNow>
 8009a7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b09      	cmp	r3, #9
 8009a82:	f200 8097 	bhi.w	8009bb4 <prvProcessReceivedCommands+0x1a0>
 8009a86:	a201      	add	r2, pc, #4	@ (adr r2, 8009a8c <prvProcessReceivedCommands+0x78>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009ab5 	.word	0x08009ab5
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009ab5 	.word	0x08009ab5
 8009a98:	08009b2b 	.word	0x08009b2b
 8009a9c:	08009b3f 	.word	0x08009b3f
 8009aa0:	08009b8b 	.word	0x08009b8b
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009ab5 	.word	0x08009ab5
 8009aac:	08009b2b 	.word	0x08009b2b
 8009ab0:	08009b3f 	.word	0x08009b3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	18d1      	adds	r1, r2, r3
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad4:	f7ff ff5c 	bl	8009990 <prvInsertTimerInActiveList>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d06c      	beq.n	8009bb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d061      	beq.n	8009bb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	441a      	add	r2, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	2300      	movs	r3, #0
 8009b02:	2100      	movs	r1, #0
 8009b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b06:	f7ff fe01 	bl	800970c <xTimerGenericCommand>
 8009b0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d152      	bne.n	8009bb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	61bb      	str	r3, [r7, #24]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b30:	f023 0301 	bic.w	r3, r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b3c:	e03d      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b44:	f043 0301 	orr.w	r3, r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	617b      	str	r3, [r7, #20]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	699a      	ldr	r2, [r3, #24]
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	18d1      	adds	r1, r2, r3
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b84:	f7ff ff04 	bl	8009990 <prvInsertTimerInActiveList>
					break;
 8009b88:	e017      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b90:	f003 0302 	and.w	r3, r3, #2
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9a:	f000 fbe5 	bl	800a368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b9e:	e00c      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba6:	f023 0301 	bic.w	r3, r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bb2:	e002      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <prvProcessReceivedCommands+0x1a6>
					break;
 8009bb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bba:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <prvProcessReceivedCommands+0x1c8>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	1d39      	adds	r1, r7, #4
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe f9c4 	bl	8007f50 <xQueueReceive>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f47f af26 	bne.w	8009a1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	3730      	adds	r7, #48	@ 0x30
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000118c 	.word	0x2000118c

08009be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009be6:	e049      	b.n	8009c7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009be8:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fd fddd 	bl	80077c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d02f      	beq.n	8009c7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4413      	add	r3, r2
 8009c24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d90e      	bls.n	8009c4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fd fd82 	bl	800774e <vListInsert>
 8009c4a:	e017      	b.n	8009c7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	2100      	movs	r1, #0
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff fd58 	bl	800970c <xTimerGenericCommand>
 8009c5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	603b      	str	r3, [r7, #0]
}
 8009c76:	bf00      	nop
 8009c78:	bf00      	nop
 8009c7a:	e7fd      	b.n	8009c78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c7c:	4b09      	ldr	r3, [pc, #36]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1b0      	bne.n	8009be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c86:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ca8 <prvSwitchTimerLists+0xc8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a04      	ldr	r2, [pc, #16]	@ (8009ca4 <prvSwitchTimerLists+0xc4>)
 8009c92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c94:	4a04      	ldr	r2, [pc, #16]	@ (8009ca8 <prvSwitchTimerLists+0xc8>)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6013      	str	r3, [r2, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20001184 	.word	0x20001184
 8009ca8:	20001188 	.word	0x20001188

08009cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cb2:	f000 f969 	bl	8009f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cb6:	4b15      	ldr	r3, [pc, #84]	@ (8009d0c <prvCheckForValidListAndQueue+0x60>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d120      	bne.n	8009d00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cbe:	4814      	ldr	r0, [pc, #80]	@ (8009d10 <prvCheckForValidListAndQueue+0x64>)
 8009cc0:	f7fd fcf4 	bl	80076ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cc4:	4813      	ldr	r0, [pc, #76]	@ (8009d14 <prvCheckForValidListAndQueue+0x68>)
 8009cc6:	f7fd fcf1 	bl	80076ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cca:	4b13      	ldr	r3, [pc, #76]	@ (8009d18 <prvCheckForValidListAndQueue+0x6c>)
 8009ccc:	4a10      	ldr	r2, [pc, #64]	@ (8009d10 <prvCheckForValidListAndQueue+0x64>)
 8009cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cd0:	4b12      	ldr	r3, [pc, #72]	@ (8009d1c <prvCheckForValidListAndQueue+0x70>)
 8009cd2:	4a10      	ldr	r2, [pc, #64]	@ (8009d14 <prvCheckForValidListAndQueue+0x68>)
 8009cd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <prvCheckForValidListAndQueue+0x74>)
 8009cdc:	4a11      	ldr	r2, [pc, #68]	@ (8009d24 <prvCheckForValidListAndQueue+0x78>)
 8009cde:	2110      	movs	r1, #16
 8009ce0:	200a      	movs	r0, #10
 8009ce2:	f7fd fe01 	bl	80078e8 <xQueueGenericCreateStatic>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	4a08      	ldr	r2, [pc, #32]	@ (8009d0c <prvCheckForValidListAndQueue+0x60>)
 8009cea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cec:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <prvCheckForValidListAndQueue+0x60>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d005      	beq.n	8009d00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cf4:	4b05      	ldr	r3, [pc, #20]	@ (8009d0c <prvCheckForValidListAndQueue+0x60>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	490b      	ldr	r1, [pc, #44]	@ (8009d28 <prvCheckForValidListAndQueue+0x7c>)
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fc42 	bl	8008584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d00:	f000 f974 	bl	8009fec <vPortExitCritical>
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000118c 	.word	0x2000118c
 8009d10:	2000115c 	.word	0x2000115c
 8009d14:	20001170 	.word	0x20001170
 8009d18:	20001184 	.word	0x20001184
 8009d1c:	20001188 	.word	0x20001188
 8009d20:	20001238 	.word	0x20001238
 8009d24:	20001198 	.word	0x20001198
 8009d28:	0800a690 	.word	0x0800a690

08009d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3b04      	subs	r3, #4
 8009d3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f023 0201 	bic.w	r2, r3, #1
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3b04      	subs	r3, #4
 8009d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009d90 <pxPortInitialiseStack+0x64>)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3b14      	subs	r3, #20
 8009d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3b04      	subs	r3, #4
 8009d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f06f 0202 	mvn.w	r2, #2
 8009d7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3b20      	subs	r3, #32
 8009d80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d82:	68fb      	ldr	r3, [r7, #12]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	08009d95 	.word	0x08009d95

08009d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d9e:	4b13      	ldr	r3, [pc, #76]	@ (8009dec <prvTaskExitError+0x58>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d00b      	beq.n	8009dc0 <prvTaskExitError+0x2c>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	60fb      	str	r3, [r7, #12]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <prvTaskExitError+0x28>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60bb      	str	r3, [r7, #8]
}
 8009dd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dd4:	bf00      	nop
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0fc      	beq.n	8009dd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ddc:	bf00      	nop
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	2000000c 	.word	0x2000000c

08009df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009df0:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <pxCurrentTCBConst2>)
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	6808      	ldr	r0, [r1, #0]
 8009df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	f380 8809 	msr	PSP, r0
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8811 	msr	BASEPRI, r0
 8009e0a:	4770      	bx	lr
 8009e0c:	f3af 8000 	nop.w

08009e10 <pxCurrentTCBConst2>:
 8009e10:	20000c5c 	.word	0x20000c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop

08009e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e18:	4808      	ldr	r0, [pc, #32]	@ (8009e3c <prvPortStartFirstTask+0x24>)
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	6800      	ldr	r0, [r0, #0]
 8009e1e:	f380 8808 	msr	MSP, r0
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8814 	msr	CONTROL, r0
 8009e2a:	b662      	cpsie	i
 8009e2c:	b661      	cpsie	f
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	df00      	svc	0
 8009e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e3a:	bf00      	nop
 8009e3c:	e000ed08 	.word	0xe000ed08

08009e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e46:	4b47      	ldr	r3, [pc, #284]	@ (8009f64 <xPortStartScheduler+0x124>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a47      	ldr	r2, [pc, #284]	@ (8009f68 <xPortStartScheduler+0x128>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d10b      	bne.n	8009e68 <xPortStartScheduler+0x28>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	60fb      	str	r3, [r7, #12]
}
 8009e62:	bf00      	nop
 8009e64:	bf00      	nop
 8009e66:	e7fd      	b.n	8009e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e68:	4b3e      	ldr	r3, [pc, #248]	@ (8009f64 <xPortStartScheduler+0x124>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f6c <xPortStartScheduler+0x12c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d10b      	bne.n	8009e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	613b      	str	r3, [r7, #16]
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e8a:	4b39      	ldr	r3, [pc, #228]	@ (8009f70 <xPortStartScheduler+0x130>)
 8009e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	22ff      	movs	r2, #255	@ 0xff
 8009e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	4b31      	ldr	r3, [pc, #196]	@ (8009f74 <xPortStartScheduler+0x134>)
 8009eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009eb2:	4b31      	ldr	r3, [pc, #196]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009eb4:	2207      	movs	r2, #7
 8009eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eb8:	e009      	b.n	8009ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009eba:	4b2f      	ldr	r3, [pc, #188]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed6:	2b80      	cmp	r3, #128	@ 0x80
 8009ed8:	d0ef      	beq.n	8009eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eda:	4b27      	ldr	r3, [pc, #156]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f1c3 0307 	rsb	r3, r3, #7
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d00b      	beq.n	8009efe <xPortStartScheduler+0xbe>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009efe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	4a1c      	ldr	r2, [pc, #112]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f08:	4b1b      	ldr	r3, [pc, #108]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f10:	4a19      	ldr	r2, [pc, #100]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f1c:	4b17      	ldr	r3, [pc, #92]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a16      	ldr	r2, [pc, #88]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f28:	4b14      	ldr	r3, [pc, #80]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a13      	ldr	r2, [pc, #76]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f34:	f000 f8da 	bl	800a0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f38:	4b11      	ldr	r3, [pc, #68]	@ (8009f80 <xPortStartScheduler+0x140>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f3e:	f000 f8f9 	bl	800a134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f42:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <xPortStartScheduler+0x144>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a0f      	ldr	r2, [pc, #60]	@ (8009f84 <xPortStartScheduler+0x144>)
 8009f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f4e:	f7ff ff63 	bl	8009e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f52:	f7fe ff2f 	bl	8008db4 <vTaskSwitchContext>
	prvTaskExitError();
 8009f56:	f7ff ff1d 	bl	8009d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	e000ed00 	.word	0xe000ed00
 8009f68:	410fc271 	.word	0x410fc271
 8009f6c:	410fc270 	.word	0x410fc270
 8009f70:	e000e400 	.word	0xe000e400
 8009f74:	20001288 	.word	0x20001288
 8009f78:	2000128c 	.word	0x2000128c
 8009f7c:	e000ed20 	.word	0xe000ed20
 8009f80:	2000000c 	.word	0x2000000c
 8009f84:	e000ef34 	.word	0xe000ef34

08009f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fac:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d110      	bne.n	8009fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <vPortEnterCritical+0x60>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	603b      	str	r3, [r7, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	e7fd      	b.n	8009fd2 <vPortEnterCritical+0x4a>
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	2000000c 	.word	0x2000000c
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ff2:	4b12      	ldr	r3, [pc, #72]	@ (800a03c <vPortExitCritical+0x50>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <vPortExitCritical+0x26>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	607b      	str	r3, [r7, #4]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a012:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <vPortExitCritical+0x50>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3b01      	subs	r3, #1
 800a018:	4a08      	ldr	r2, [pc, #32]	@ (800a03c <vPortExitCritical+0x50>)
 800a01a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a01c:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <vPortExitCritical+0x50>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d105      	bne.n	800a030 <vPortExitCritical+0x44>
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	2000000c 	.word	0x2000000c

0800a040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a040:	f3ef 8009 	mrs	r0, PSP
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	4b15      	ldr	r3, [pc, #84]	@ (800a0a0 <pxCurrentTCBConst>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	f01e 0f10 	tst.w	lr, #16
 800a050:	bf08      	it	eq
 800a052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05a:	6010      	str	r0, [r2, #0]
 800a05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a064:	f380 8811 	msr	BASEPRI, r0
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f7fe fea0 	bl	8008db4 <vTaskSwitchContext>
 800a074:	f04f 0000 	mov.w	r0, #0
 800a078:	f380 8811 	msr	BASEPRI, r0
 800a07c:	bc09      	pop	{r0, r3}
 800a07e:	6819      	ldr	r1, [r3, #0]
 800a080:	6808      	ldr	r0, [r1, #0]
 800a082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a086:	f01e 0f10 	tst.w	lr, #16
 800a08a:	bf08      	it	eq
 800a08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a090:	f380 8809 	msr	PSP, r0
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst>:
 800a0a0:	20000c5c 	.word	0x20000c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0c2:	f7fe fdbd 	bl	8008c40 <xTaskIncrementTick>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <xPortSysTickHandler+0x40>)
 800a0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f383 8811 	msr	BASEPRI, r3
}
 800a0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed04 	.word	0xe000ed04

0800a0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a120 <vPortSetupTimerInterrupt+0x34>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a124 <vPortSetupTimerInterrupt+0x38>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <vPortSetupTimerInterrupt+0x3c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0a      	ldr	r2, [pc, #40]	@ (800a12c <vPortSetupTimerInterrupt+0x40>)
 800a102:	fba2 2303 	umull	r2, r3, r2, r3
 800a106:	099b      	lsrs	r3, r3, #6
 800a108:	4a09      	ldr	r2, [pc, #36]	@ (800a130 <vPortSetupTimerInterrupt+0x44>)
 800a10a:	3b01      	subs	r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a10e:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <vPortSetupTimerInterrupt+0x34>)
 800a110:	2207      	movs	r2, #7
 800a112:	601a      	str	r2, [r3, #0]
}
 800a114:	bf00      	nop
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	e000e010 	.word	0xe000e010
 800a124:	e000e018 	.word	0xe000e018
 800a128:	20000000 	.word	0x20000000
 800a12c:	10624dd3 	.word	0x10624dd3
 800a130:	e000e014 	.word	0xe000e014

0800a134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a144 <vPortEnableVFP+0x10>
 800a138:	6801      	ldr	r1, [r0, #0]
 800a13a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a13e:	6001      	str	r1, [r0, #0]
 800a140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a142:	bf00      	nop
 800a144:	e000ed88 	.word	0xe000ed88

0800a148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a14e:	f3ef 8305 	mrs	r3, IPSR
 800a152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b0f      	cmp	r3, #15
 800a158:	d915      	bls.n	800a186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a15a:	4a18      	ldr	r2, [pc, #96]	@ (800a1bc <vPortValidateInterruptPriority+0x74>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a164:	4b16      	ldr	r3, [pc, #88]	@ (800a1c0 <vPortValidateInterruptPriority+0x78>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	7afa      	ldrb	r2, [r7, #11]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d20b      	bcs.n	800a186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	607b      	str	r3, [r7, #4]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a186:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <vPortValidateInterruptPriority+0x7c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a18e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <vPortValidateInterruptPriority+0x80>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d90b      	bls.n	800a1ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	603b      	str	r3, [r7, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <vPortValidateInterruptPriority+0x62>
	}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	e000e3f0 	.word	0xe000e3f0
 800a1c0:	20001288 	.word	0x20001288
 800a1c4:	e000ed0c 	.word	0xe000ed0c
 800a1c8:	2000128c 	.word	0x2000128c

0800a1cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08a      	sub	sp, #40	@ 0x28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1d8:	f7fe fc76 	bl	8008ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a350 <pvPortMalloc+0x184>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1e4:	f000 f924 	bl	800a430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a354 <pvPortMalloc+0x188>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f040 8095 	bne.w	800a320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01e      	beq.n	800a23a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4413      	add	r3, r2
 800a202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d015      	beq.n	800a23a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	3308      	adds	r3, #8
 800a216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00b      	beq.n	800a23a <pvPortMalloc+0x6e>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	617b      	str	r3, [r7, #20]
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	e7fd      	b.n	800a236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d06f      	beq.n	800a320 <pvPortMalloc+0x154>
 800a240:	4b45      	ldr	r3, [pc, #276]	@ (800a358 <pvPortMalloc+0x18c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	429a      	cmp	r2, r3
 800a248:	d86a      	bhi.n	800a320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a24a:	4b44      	ldr	r3, [pc, #272]	@ (800a35c <pvPortMalloc+0x190>)
 800a24c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a24e:	4b43      	ldr	r3, [pc, #268]	@ (800a35c <pvPortMalloc+0x190>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a254:	e004      	b.n	800a260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d903      	bls.n	800a272 <pvPortMalloc+0xa6>
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f1      	bne.n	800a256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a272:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <pvPortMalloc+0x184>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a278:	429a      	cmp	r2, r3
 800a27a:	d051      	beq.n	800a320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2208      	movs	r2, #8
 800a282:	4413      	add	r3, r2
 800a284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	2308      	movs	r3, #8
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d920      	bls.n	800a2e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a29e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	613b      	str	r3, [r7, #16]
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	e7fd      	b.n	800a2c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2da:	69b8      	ldr	r0, [r7, #24]
 800a2dc:	f000 f90a 	bl	800a4f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a360 <pvPortMalloc+0x194>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d203      	bcs.n	800a302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2fa:	4b17      	ldr	r3, [pc, #92]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a18      	ldr	r2, [pc, #96]	@ (800a360 <pvPortMalloc+0x194>)
 800a300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <pvPortMalloc+0x188>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <pvPortMalloc+0x198>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	4a11      	ldr	r2, [pc, #68]	@ (800a364 <pvPortMalloc+0x198>)
 800a31e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a320:	f7fe fbe0 	bl	8008ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <pvPortMalloc+0x17a>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60fb      	str	r3, [r7, #12]
}
 800a340:	bf00      	nop
 800a342:	bf00      	nop
 800a344:	e7fd      	b.n	800a342 <pvPortMalloc+0x176>
	return pvReturn;
 800a346:	69fb      	ldr	r3, [r7, #28]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3728      	adds	r7, #40	@ 0x28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20004e98 	.word	0x20004e98
 800a354:	20004eac 	.word	0x20004eac
 800a358:	20004e9c 	.word	0x20004e9c
 800a35c:	20004e90 	.word	0x20004e90
 800a360:	20004ea0 	.word	0x20004ea0
 800a364:	20004ea4 	.word	0x20004ea4

0800a368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d04f      	beq.n	800a41a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a37a:	2308      	movs	r3, #8
 800a37c:	425b      	negs	r3, r3
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4413      	add	r3, r2
 800a382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	4b25      	ldr	r3, [pc, #148]	@ (800a424 <vPortFree+0xbc>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4013      	ands	r3, r2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <vPortFree+0x46>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	60fb      	str	r3, [r7, #12]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00b      	beq.n	800a3ce <vPortFree+0x66>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60bb      	str	r3, [r7, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	4b14      	ldr	r3, [pc, #80]	@ (800a424 <vPortFree+0xbc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01e      	beq.n	800a41a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d11a      	bne.n	800a41a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a424 <vPortFree+0xbc>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	401a      	ands	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3f4:	f7fe fb68 	bl	8008ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a428 <vPortFree+0xc0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4413      	add	r3, r2
 800a402:	4a09      	ldr	r2, [pc, #36]	@ (800a428 <vPortFree+0xc0>)
 800a404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a406:	6938      	ldr	r0, [r7, #16]
 800a408:	f000 f874 	bl	800a4f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a40c:	4b07      	ldr	r3, [pc, #28]	@ (800a42c <vPortFree+0xc4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a06      	ldr	r2, [pc, #24]	@ (800a42c <vPortFree+0xc4>)
 800a414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a416:	f7fe fb65 	bl	8008ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a41a:	bf00      	nop
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20004eac 	.word	0x20004eac
 800a428:	20004e9c 	.word	0x20004e9c
 800a42c:	20004ea8 	.word	0x20004ea8

0800a430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a43a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a43c:	4b27      	ldr	r3, [pc, #156]	@ (800a4dc <prvHeapInit+0xac>)
 800a43e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3307      	adds	r3, #7
 800a44e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0307 	bic.w	r3, r3, #7
 800a456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4dc <prvHeapInit+0xac>)
 800a460:	4413      	add	r3, r2
 800a462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a468:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e0 <prvHeapInit+0xb0>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a46e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e0 <prvHeapInit+0xb0>)
 800a470:	2200      	movs	r2, #0
 800a472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4413      	add	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a47c:	2208      	movs	r2, #8
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0307 	bic.w	r3, r3, #7
 800a48a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a15      	ldr	r2, [pc, #84]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2200      	movs	r2, #0
 800a498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a49a:	4b12      	ldr	r3, [pc, #72]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e8 <prvHeapInit+0xb8>)
 800a4be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4a09      	ldr	r2, [pc, #36]	@ (800a4ec <prvHeapInit+0xbc>)
 800a4c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4c8:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <prvHeapInit+0xc0>)
 800a4ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a4ce:	601a      	str	r2, [r3, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20001290 	.word	0x20001290
 800a4e0:	20004e90 	.word	0x20004e90
 800a4e4:	20004e98 	.word	0x20004e98
 800a4e8:	20004ea0 	.word	0x20004ea0
 800a4ec:	20004e9c 	.word	0x20004e9c
 800a4f0:	20004eac 	.word	0x20004eac

0800a4f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4fc:	4b28      	ldr	r3, [pc, #160]	@ (800a5a0 <prvInsertBlockIntoFreeList+0xac>)
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	e002      	b.n	800a508 <prvInsertBlockIntoFreeList+0x14>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d8f7      	bhi.n	800a502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	4413      	add	r3, r2
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d108      	bne.n	800a536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	441a      	add	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	441a      	add	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d118      	bne.n	800a57c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d00d      	beq.n	800a572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	441a      	add	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e008      	b.n	800a584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a572:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e003      	b.n	800a584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d002      	beq.n	800a592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a592:	bf00      	nop
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20004e90 	.word	0x20004e90
 800a5a4:	20004e98 	.word	0x20004e98

0800a5a8 <memset>:
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d100      	bne.n	800a5b2 <memset+0xa>
 800a5b0:	4770      	bx	lr
 800a5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b6:	e7f9      	b.n	800a5ac <memset+0x4>

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4d0d      	ldr	r5, [pc, #52]	@ (800a5f0 <__libc_init_array+0x38>)
 800a5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800a5f4 <__libc_init_array+0x3c>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	4d0b      	ldr	r5, [pc, #44]	@ (800a5f8 <__libc_init_array+0x40>)
 800a5ca:	4c0c      	ldr	r4, [pc, #48]	@ (800a5fc <__libc_init_array+0x44>)
 800a5cc:	f000 f826 	bl	800a61c <_init>
 800a5d0:	1b64      	subs	r4, r4, r5
 800a5d2:	10a4      	asrs	r4, r4, #2
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800a79c 	.word	0x0800a79c
 800a5f4:	0800a79c 	.word	0x0800a79c
 800a5f8:	0800a79c 	.word	0x0800a79c
 800a5fc:	0800a7a0 	.word	0x0800a7a0

0800a600 <memcpy>:
 800a600:	440a      	add	r2, r1
 800a602:	4291      	cmp	r1, r2
 800a604:	f100 33ff 	add.w	r3, r0, #4294967295
 800a608:	d100      	bne.n	800a60c <memcpy+0xc>
 800a60a:	4770      	bx	lr
 800a60c:	b510      	push	{r4, lr}
 800a60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a616:	4291      	cmp	r1, r2
 800a618:	d1f9      	bne.n	800a60e <memcpy+0xe>
 800a61a:	bd10      	pop	{r4, pc}

0800a61c <_init>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr

0800a628 <_fini>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr

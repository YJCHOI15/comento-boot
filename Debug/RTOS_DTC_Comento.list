
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800ae8c  0800ae8c  0000be8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b024  0800b024  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b024  0800b024  0000c024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b02c  0800b02c  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b02c  0800b02c  0000c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b030  0800b030  0000c030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b034  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee0  20000010  0800b044  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ef0  0800b044  0000def0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc8a  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf6  00000000  00000000  00028cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f2  00000000  00000000  0002e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024296  00000000  00000000  0002f2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6b6  00000000  00000000  00053550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22f4  00000000  00000000  0006ec06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  00150f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00157070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae74 	.word	0x0800ae74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800ae74 	.word	0x0800ae74

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HAL_SPI_TxCpltCallback>:
volatile uint8_t dtc_write_done = 0;

// CMD + ADDrH + ADDrL + Data(1Page)
static uint8_t tx_buf[sizeof(DTC_Table_t) + 3];

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <HAL_SPI_TxCpltCallback+0x2c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d107      	bne.n	800056e <HAL_SPI_TxCpltCallback+0x22>
        dtc_write_done = 1;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <HAL_SPI_TxCpltCallback+0x30>)
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN,  GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_SPI_TxCpltCallback+0x34>)
 800056a:	f002 fe5f 	bl	800322c <HAL_GPIO_WritePin>
    }
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013000 	.word	0x40013000
 800057c:	2000002c 	.word	0x2000002c
 8000580:	40020400 	.word	0x40020400

08000584 <EEPROM_WriteEnable>:

// Send WREN CMD (Polling)
static HAL_StatusTypeDef EEPROM_WriteEnable(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 800058a:	2306      	movs	r3, #6
 800058c:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_RESET);  // EEPROM CS LOW
 800058e:	2200      	movs	r2, #0
 8000590:	2104      	movs	r1, #4
 8000592:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <EEPROM_WriteEnable+0x3c>)
 8000594:	f002 fe4a 	bl	800322c <HAL_GPIO_WritePin>
    
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY /* no timeout */);
 8000598:	1db9      	adds	r1, r7, #6
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2201      	movs	r2, #1
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <EEPROM_WriteEnable+0x40>)
 80005a2:	f005 fe2a 	bl	80061fa <HAL_SPI_Transmit>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    
    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_SET);    // EEPROM CS HIGH
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <EEPROM_WriteEnable+0x3c>)
 80005b0:	f002 fe3c 	bl	800322c <HAL_GPIO_WritePin>
   
    return ret;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400
 80005c4:	20000304 	.word	0x20000304

080005c8 <DTC_WriteToEEPROM_DMA>:

// Request DTC SPI DMA store
HAL_StatusTypeDef DTC_WriteToEEPROM_DMA(uint16_t address, DTC_Table_t *dtc) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	80fb      	strh	r3, [r7, #6]
    if (EEPROM_WriteEnable() != HAL_OK) return HAL_ERROR;
 80005d4:	f7ff ffd6 	bl	8000584 <EEPROM_WriteEnable>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <DTC_WriteToEEPROM_DMA+0x1a>
 80005de:	2301      	movs	r3, #1
 80005e0:	e01f      	b.n	8000622 <DTC_WriteToEEPROM_DMA+0x5a>

    tx_buf[0] = EEPROM_CMD_WRITE;       // CMD
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = (address >> 8) & 0xFF;  // AddrH
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005f2:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = (address >> 0) & 0xFF;  // AddrL
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 80005fa:	709a      	strb	r2, [r3, #2]
    
    memcpy(&tx_buf[3], dtc, sizeof(DTC_Table_t));
 80005fc:	2236      	movs	r2, #54	@ 0x36
 80005fe:	6839      	ldr	r1, [r7, #0]
 8000600:	480b      	ldr	r0, [pc, #44]	@ (8000630 <DTC_WriteToEEPROM_DMA+0x68>)
 8000602:	f00a fc29 	bl	800ae58 <memcpy>

    dtc_write_done = 0;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <DTC_WriteToEEPROM_DMA+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

    //Start sending
    HAL_GPIO_WritePin(EEPROM_CS_GPIO_PORT, GPIO_CS_PIN, GPIO_PIN_RESET);  // CS LOW
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <DTC_WriteToEEPROM_DMA+0x70>)
 8000612:	f002 fe0b 	bl	800322c <HAL_GPIO_WritePin>
    return HAL_SPI_Transmit_DMA(&hspi1, tx_buf, sizeof(DTC_Table_t) + 3);
 8000616:	2239      	movs	r2, #57	@ 0x39
 8000618:	4904      	ldr	r1, [pc, #16]	@ (800062c <DTC_WriteToEEPROM_DMA+0x64>)
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <DTC_WriteToEEPROM_DMA+0x74>)
 800061c:	f005 ff2a 	bl	8006474 <HAL_SPI_Transmit_DMA>
 8000620:	4603      	mov	r3, r0
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000030 	.word	0x20000030
 8000630:	20000033 	.word	0x20000033
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40020400 	.word	0x40020400
 800063c:	20000304 	.word	0x20000304

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f001 f918 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f874 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 faae 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 fa46 	bl	8000ae0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000654:	f000 f8cc 	bl	80007f0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000658:	f000 f91c 	bl	8000894 <MX_CAN1_Init>
  MX_I2C1_Init();
 800065c:	f000 f94e 	bl	80008fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000660:	f000 f97a 	bl	8000958 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000664:	f000 f9a6 	bl	80009b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000668:	f000 f9da 	bl	8000a20 <MX_SPI2_Init>
  MX_UART4_Init();
 800066c:	f000 fa0e 	bl	8000a8c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f007 f982 	bl	8007978 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000674:	481c      	ldr	r0, [pc, #112]	@ (80006e8 <main+0xa8>)
 8000676:	f007 fa76 	bl	8007b66 <osMutexNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <main+0xac>)
 800067e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <main+0xb0>)
 8000682:	2108      	movs	r1, #8
 8000684:	2008      	movs	r0, #8
 8000686:	f007 fb7c 	bl	8007d82 <osMessageQueueNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a19      	ldr	r2, [pc, #100]	@ (80006f4 <main+0xb4>)
 800068e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000690:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <main+0xb8>)
 8000692:	2100      	movs	r1, #0
 8000694:	4819      	ldr	r0, [pc, #100]	@ (80006fc <main+0xbc>)
 8000696:	f007 f9b9 	bl	8007a0c <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <main+0xc0>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 80006a0:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <main+0xc4>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4818      	ldr	r0, [pc, #96]	@ (8000708 <main+0xc8>)
 80006a6:	f007 f9b1 	bl	8007a0c <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a17      	ldr	r2, [pc, #92]	@ (800070c <main+0xcc>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 80006b0:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <main+0xd0>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4817      	ldr	r0, [pc, #92]	@ (8000714 <main+0xd4>)
 80006b6:	f007 f9a9 	bl	8007a0c <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <main+0xd8>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <main+0xdc>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4816      	ldr	r0, [pc, #88]	@ (8000720 <main+0xe0>)
 80006c6:	f007 f9a1 	bl	8007a0c <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <main+0xe4>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80006d0:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <main+0xe8>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4815      	ldr	r0, [pc, #84]	@ (800072c <main+0xec>)
 80006d6:	f007 f999 	bl	8007a0c <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <main+0xf0>)
 80006de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e0:	f007 f96e 	bl	80079c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0xa4>
 80006e8:	0800aff4 	.word	0x0800aff4
 80006ec:	20000590 	.word	0x20000590
 80006f0:	0800afdc 	.word	0x0800afdc
 80006f4:	2000058c 	.word	0x2000058c
 80006f8:	0800af28 	.word	0x0800af28
 80006fc:	08000ca1 	.word	0x08000ca1
 8000700:	20000578 	.word	0x20000578
 8000704:	0800af4c 	.word	0x0800af4c
 8000708:	08000d25 	.word	0x08000d25
 800070c:	2000057c 	.word	0x2000057c
 8000710:	0800af70 	.word	0x0800af70
 8000714:	08000dad 	.word	0x08000dad
 8000718:	20000580 	.word	0x20000580
 800071c:	0800af94 	.word	0x0800af94
 8000720:	08000dbd 	.word	0x08000dbd
 8000724:	20000584 	.word	0x20000584
 8000728:	0800afb8 	.word	0x0800afb8
 800072c:	08000dcd 	.word	0x08000dcd
 8000730:	20000588 	.word	0x20000588

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00a fb48 	bl	800add8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <SystemClock_Config+0xb4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <SystemClock_Config+0xb4>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <SystemClock_Config+0xb4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <SystemClock_Config+0xb8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <SystemClock_Config+0xb8>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <SystemClock_Config+0xb8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 fa1b 	bl	8005be0 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007b0:	f000 fb14 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 f826 	bl	8005820 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007da:	f000 faff 	bl	8000ddc <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	@ 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <MX_ADC1_Init+0x9c>)
 8000806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <MX_ADC1_Init+0xa0>)
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_ADC1_Init+0x98>)
 800083c:	2201      	movs	r2, #1
 800083e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_ADC1_Init+0x98>)
 800084a:	2201      	movs	r2, #1
 800084c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000850:	f001 f884 	bl	800195c <HAL_ADC_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fabf 	bl	8000ddc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800085e:	2302      	movs	r3, #2
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0x98>)
 8000870:	f001 f8b8 	bl	80019e4 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800087a:	f000 faaf 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000006c 	.word	0x2000006c
 800088c:	40012000 	.word	0x40012000
 8000890:	0f000001 	.word	0x0f000001

08000894 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_CAN1_Init+0x60>)
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <MX_CAN1_Init+0x64>)
 800089c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008a0:	2210      	movs	r2, #16
 80008a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008dc:	2200      	movs	r2, #0
 80008de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_CAN1_Init+0x60>)
 80008e2:	f001 faad 	bl	8001e40 <HAL_CAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fa76 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000b4 	.word	0x200000b4
 80008f8:	40006400 	.word	0x40006400

080008fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_I2C1_Init+0x50>)
 8000902:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <MX_I2C1_Init+0x54>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_I2C1_Init+0x50>)
 8000908:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_I2C1_Init+0x58>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_I2C1_Init+0x50>)
 800091a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800091e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <MX_I2C1_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_I2C1_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_I2C1_Init+0x50>)
 800093a:	f002 fc91 	bl	8003260 <HAL_I2C_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000944:	f000 fa4a 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000dc 	.word	0x200000dc
 8000950:	40005400 	.word	0x40005400
 8000954:	000186a0 	.word	0x000186a0

08000958 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C2_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <MX_I2C2_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_I2C2_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C2_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_I2C2_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_I2C2_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_I2C2_Init+0x50>)
 8000996:	f002 fc63 	bl	8003260 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fa1c 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000130 	.word	0x20000130
 80009ac:	40005800 	.word	0x40005800
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009ba:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <MX_SPI1_Init+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_SPI1_Init+0x64>)
 8000a00:	220a      	movs	r2, #10
 8000a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_SPI1_Init+0x64>)
 8000a06:	f005 fb6f 	bl	80060e8 <HAL_SPI_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a10:	f000 f9e4 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000304 	.word	0x20000304
 8000a1c:	40013000 	.word	0x40013000

08000a20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <MX_SPI2_Init+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_SPI2_Init+0x64>)
 8000a72:	f005 fb39 	bl	80060e8 <HAL_SPI_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a7c:	f000 f9ae 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000035c 	.word	0x2000035c
 8000a88:	40003800 	.word	0x40003800

08000a8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_UART4_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_UART4_Init+0x4c>)
 8000ac4:	f006 f800 	bl	8006ac8 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f985 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000534 	.word	0x20000534
 8000adc:	40004c00 	.word	0x40004c00

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000af0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <MX_DMA_Init+0xc8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2105      	movs	r1, #5
 8000b22:	200b      	movs	r0, #11
 8000b24:	f001 fd9b 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b28:	200b      	movs	r0, #11
 8000b2a:	f001 fdb4 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2105      	movs	r1, #5
 8000b32:	200d      	movs	r0, #13
 8000b34:	f001 fd93 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b38:	200d      	movs	r0, #13
 8000b3a:	f001 fdac 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2105      	movs	r1, #5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f001 fd8b 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b48:	200e      	movs	r0, #14
 8000b4a:	f001 fda4 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	200f      	movs	r0, #15
 8000b54:	f001 fd83 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b58:	200f      	movs	r0, #15
 8000b5a:	f001 fd9c 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2011      	movs	r0, #17
 8000b64:	f001 fd7b 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b68:	2011      	movs	r0, #17
 8000b6a:	f001 fd94 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2105      	movs	r1, #5
 8000b72:	202f      	movs	r0, #47	@ 0x2f
 8000b74:	f001 fd73 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000b78:	202f      	movs	r0, #47	@ 0x2f
 8000b7a:	f001 fd8c 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2105      	movs	r1, #5
 8000b82:	2038      	movs	r0, #56	@ 0x38
 8000b84:	f001 fd6b 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b88:	2038      	movs	r0, #56	@ 0x38
 8000b8a:	f001 fd84 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	203b      	movs	r0, #59	@ 0x3b
 8000b94:	f001 fd63 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b98:	203b      	movs	r0, #59	@ 0x3b
 8000b9a:	f001 fd7c 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a25      	ldr	r2, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_GPIO_Init+0xec>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2107      	movs	r1, #7
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <MX_GPIO_Init+0xf0>)
 8000c54:	f002 faea 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c64:	2301      	movs	r3, #1
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <MX_GPIO_Init+0xf0>)
 8000c70:	f002 f948 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c74:	2304      	movs	r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c78:	2311      	movs	r3, #17
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_GPIO_Init+0xf0>)
 8000c8c:	f002 f93a 	bl	8002f04 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	@ 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f006 ff41 	bl	8007b30 <osDelay>
 8000cae:	e7fb      	b.n	8000ca8 <StartDefaultTask+0x8>

08000cb0 <WriteDTC_IfFault>:
* @param argument: Not used
* @retval None
*/

void WriteDTC_IfFault(uint8_t condition, uint16_t code, const char *desc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	@ 0x40
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	80bb      	strh	r3, [r7, #4]
    if (condition)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d026      	beq.n	8000d14 <WriteDTC_IfFault+0x64>
    {
        DTC_Table_t dtc;
        dtc.DTC_Code = code;
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	813b      	strh	r3, [r7, #8]
        strncpy(dtc.Description, desc, sizeof(dtc.Description));
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	3302      	adds	r3, #2
 8000cd0:	2232      	movs	r2, #50	@ 0x32
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00a f887 	bl	800ade8 <strncpy>
        dtc.Description[sizeof(dtc.Description) - 1] = '\0';
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        dtc.active = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

        DTC_WriteToEEPROM_DMA(dtc_eeprom_addr, &dtc);
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <WriteDTC_IfFault+0x6c>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	f107 0208 	add.w	r2, r7, #8
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc69 	bl	80005c8 <DTC_WriteToEEPROM_DMA>
        while (!dtc_write_done) osDelay(1);
 8000cf6:	e002      	b.n	8000cfe <WriteDTC_IfFault+0x4e>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f006 ff19 	bl	8007b30 <osDelay>
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <WriteDTC_IfFault+0x70>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f7      	beq.n	8000cf8 <WriteDTC_IfFault+0x48>
        dtc_eeprom_addr += sizeof(DTC_Table_t);
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <WriteDTC_IfFault+0x6c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	3336      	adds	r3, #54	@ 0x36
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b02      	ldr	r3, [pc, #8]	@ (8000d1c <WriteDTC_IfFault+0x6c>)
 8000d12:	801a      	strh	r2, [r3, #0]
    }
}
 8000d14:	bf00      	nop
 8000d16:	3740      	adds	r7, #64	@ 0x40
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000006a 	.word	0x2000006a
 8000d20:	2000002c 	.word	0x2000002c

08000d24 <StartI2CTask>:

/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  /* Infinite loop */
  for(;;)
  {
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <StartI2CTask+0x70>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 ff9c 	bl	8007c72 <osMutexAcquire>

    if (PMIC_ReadFaultStatus_DMA() == HAL_OK) {
 8000d3a:	f000 f855 	bl	8000de8 <PMIC_ReadFaultStatus_DMA>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11e      	bne.n	8000d82 <StartI2CTask+0x5e>

        while(!pmic_dma_done) osDelay(1);
 8000d44:	e002      	b.n	8000d4c <StartI2CTask+0x28>
 8000d46:	2001      	movs	r0, #1
 8000d48:	f006 fef2 	bl	8007b30 <osDelay>
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <StartI2CTask+0x74>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f7      	beq.n	8000d46 <StartI2CTask+0x22>

        WriteDTC_IfFault(pmic_uv_status.bits.BUCKA_UV, DTC_PMIC_UV_A, "[C600] UV_FAULT_A Detected");
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <StartI2CTask+0x78>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <StartI2CTask+0x7c>)
 8000d62:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffa2 	bl	8000cb0 <WriteDTC_IfFault>
        WriteDTC_IfFault(pmic_oc_status.bits.BUCKA_OC, DTC_PMIC_OC_A, "[C610] OC_FAULT_A Detected");
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <StartI2CTask+0x80>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4a0c      	ldr	r2, [pc, #48]	@ (8000da8 <StartI2CTask+0x84>)
 8000d78:	f24c 6110 	movw	r1, #50704	@ 0xc610
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff97 	bl	8000cb0 <WriteDTC_IfFault>
    }

    osMutexRelease(CommMutexHandleHandle);
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <StartI2CTask+0x70>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 ffbe 	bl	8007d08 <osMutexRelease>

    osDelay(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f006 fecf 	bl	8007b30 <osDelay>
    osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000d92:	e7cb      	b.n	8000d2c <StartI2CTask+0x8>
 8000d94:	20000590 	.word	0x20000590
 8000d98:	20000599 	.word	0x20000599
 8000d9c:	20000594 	.word	0x20000594
 8000da0:	0800aed8 	.word	0x0800aed8
 8000da4:	20000598 	.word	0x20000598
 8000da8:	0800aef4 	.word	0x0800aef4

08000dac <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPITask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f006 febb 	bl	8007b30 <osDelay>
 8000dba:	e7fb      	b.n	8000db4 <StartSPITask+0x8>

08000dbc <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f006 feb3 	bl	8007b30 <osDelay>
 8000dca:	e7fb      	b.n	8000dc4 <StartCANTask+0x8>

08000dcc <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f006 feab 	bl	8007b30 <osDelay>
 8000dda:	e7fb      	b.n	8000dd4 <StartUARTTask+0x8>

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <PMIC_ReadFaultStatus_DMA>:

PMIC_FaultStatus1_t pmic_uv_status;
PMIC_FaultStatus2_t pmic_oc_status;
volatile uint8_t pmic_dma_done = 0;

HAL_StatusTypeDef PMIC_ReadFaultStatus_DMA(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef ret;

    // Initialize DMA completion flag
    pmic_dma_done = 0;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <PMIC_ReadFaultStatus_DMA+0x30>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

    // Read 0x07 register (UV/OV status)
    ret = HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <PMIC_ReadFaultStatus_DMA+0x34>)
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	2207      	movs	r2, #7
 8000e00:	21c0      	movs	r1, #192	@ 0xc0
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <PMIC_ReadFaultStatus_DMA+0x38>)
 8000e04:	f002 fb70 	bl	80034e8 <HAL_I2C_Mem_Read_DMA>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
                                &pmic_uv_status.all,
                                1);

    // DMA is asynchronous and does not gaurantee sequential execution
    // -> After UV status is read, OC status is read in the callback
    return ret;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000599 	.word	0x20000599
 8000e1c:	20000594 	.word	0x20000594
 8000e20:	200000dc 	.word	0x200000dc

08000e24 <HAL_I2C_MemRxCpltCallback>:

// DMA receive complete callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <HAL_I2C_MemRxCpltCallback+0x34>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10c      	bne.n	8000e50 <HAL_I2C_MemRxCpltCallback+0x2c>
        HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_I2C_ADDR,
 8000e36:	2301      	movs	r3, #1
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_I2C_MemRxCpltCallback+0x38>)
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	2208      	movs	r2, #8
 8000e42:	21c0      	movs	r1, #192	@ 0xc0
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8000e46:	f002 fb4f 	bl	80034e8 <HAL_I2C_Mem_Read_DMA>
                                PMIC_REG_FAULT_STATUS2,
                                I2C_MEMADD_SIZE_8BIT,
                                &pmic_oc_status.all,
                                1);

        pmic_dma_done = 1;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_I2C_MemRxCpltCallback+0x40>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
    }
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	20000598 	.word	0x20000598
 8000e60:	200000dc 	.word	0x200000dc
 8000e64:	20000599 	.word	0x20000599

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a11      	ldr	r2, [pc, #68]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_MspInit+0x54>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	f06f 0001 	mvn.w	r0, #1
 8000eae:	f001 fbd6 	bl	800265e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <HAL_ADC_MspInit+0x7c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d127      	bne.n	8000f32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_ADC_MspInit+0x84>)
 8000f2e:	f001 ffe9 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	@ 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012000 	.word	0x40012000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <HAL_CAN_MspInit+0xa4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d13b      	bne.n	8000fe2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_CAN_MspInit+0xa8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fb2:	2309      	movs	r3, #9
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <HAL_CAN_MspInit+0xac>)
 8000fbe:	f001 ffa1 	bl	8002f04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	2013      	movs	r0, #19
 8000fc8:	f001 fb49 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000fcc:	2013      	movs	r0, #19
 8000fce:	f001 fb62 	bl	8002696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	2014      	movs	r0, #20
 8000fd8:	f001 fb41 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fdc:	2014      	movs	r0, #20
 8000fde:	f001 fb5a 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40006400 	.word	0x40006400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40021800 	.word	0x40021800

08000ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a9c      	ldr	r2, [pc, #624]	@ (8001288 <HAL_I2C_MspInit+0x290>)
 8001016:	4293      	cmp	r3, r2
 8001018:	f040 809b 	bne.w	8001152 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	4b9a      	ldr	r3, [pc, #616]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	4a99      	ldr	r2, [pc, #612]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	6313      	str	r3, [r2, #48]	@ 0x30
 800102c:	4b97      	ldr	r3, [pc, #604]	@ (800128c <HAL_I2C_MspInit+0x294>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001038:	23c0      	movs	r3, #192	@ 0xc0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001048:	2304      	movs	r3, #4
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	488f      	ldr	r0, [pc, #572]	@ (8001290 <HAL_I2C_MspInit+0x298>)
 8001054:	f001 ff56 	bl	8002f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	4b8b      	ldr	r3, [pc, #556]	@ (800128c <HAL_I2C_MspInit+0x294>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a8a      	ldr	r2, [pc, #552]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b88      	ldr	r3, [pc, #544]	@ (800128c <HAL_I2C_MspInit+0x294>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001074:	4b87      	ldr	r3, [pc, #540]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 8001076:	4a88      	ldr	r2, [pc, #544]	@ (8001298 <HAL_I2C_MspInit+0x2a0>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800107a:	4b86      	ldr	r3, [pc, #536]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 800107c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001080:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001082:	4b84      	ldr	r3, [pc, #528]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001088:	4b82      	ldr	r3, [pc, #520]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800108e:	4b81      	ldr	r3, [pc, #516]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 8001090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001094:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001096:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109c:	4b7d      	ldr	r3, [pc, #500]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010ae:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b0:	4b78      	ldr	r3, [pc, #480]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010b6:	4877      	ldr	r0, [pc, #476]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010b8:	f001 fb08 	bl	80026cc <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80010c2:	f7ff fe8b 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a72      	ldr	r2, [pc, #456]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80010cc:	4a71      	ldr	r2, [pc, #452]	@ (8001294 <HAL_I2C_MspInit+0x29c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80010d2:	4b72      	ldr	r3, [pc, #456]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010d4:	4a72      	ldr	r2, [pc, #456]	@ (80012a0 <HAL_I2C_MspInit+0x2a8>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80010d8:	4b70      	ldr	r3, [pc, #448]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e0:	4b6e      	ldr	r3, [pc, #440]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010e2:	2240      	movs	r2, #64	@ 0x40
 80010e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ec:	4b6b      	ldr	r3, [pc, #428]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f4:	4b69      	ldr	r3, [pc, #420]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fa:	4b68      	ldr	r3, [pc, #416]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001106:	4b65      	ldr	r3, [pc, #404]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 8001108:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110e:	4b63      	ldr	r3, [pc, #396]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001114:	4861      	ldr	r0, [pc, #388]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 8001116:	f001 fad9 	bl	80026cc <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001120:	f7ff fe5c 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a5d      	ldr	r2, [pc, #372]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	4a5c      	ldr	r2, [pc, #368]	@ (800129c <HAL_I2C_MspInit+0x2a4>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2105      	movs	r1, #5
 8001134:	201f      	movs	r0, #31
 8001136:	f001 fa92 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800113a:	201f      	movs	r0, #31
 800113c:	f001 faab 	bl	8002696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2020      	movs	r0, #32
 8001146:	f001 fa8a 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800114a:	2020      	movs	r0, #32
 800114c:	f001 faa3 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001150:	e095      	b.n	800127e <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a53      	ldr	r2, [pc, #332]	@ (80012a4 <HAL_I2C_MspInit+0x2ac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	f040 8090 	bne.w	800127e <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b4a      	ldr	r3, [pc, #296]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_I2C_MspInit+0x294>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117a:	2303      	movs	r3, #3
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800118a:	2304      	movs	r3, #4
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4844      	ldr	r0, [pc, #272]	@ (80012a8 <HAL_I2C_MspInit+0x2b0>)
 8001196:	f001 feb5 	bl	8002f04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_I2C_MspInit+0x294>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a3a      	ldr	r2, [pc, #232]	@ (800128c <HAL_I2C_MspInit+0x294>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <HAL_I2C_MspInit+0x294>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80011b6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011b8:	4a3d      	ldr	r2, [pc, #244]	@ (80012b0 <HAL_I2C_MspInit+0x2b8>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011bc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011be:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c4:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d8:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011de:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011f6:	482d      	ldr	r0, [pc, #180]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 80011f8:	f001 fa68 	bl	80026cc <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8001202:	f7ff fdeb 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 800120a:	639a      	str	r2, [r3, #56]	@ 0x38
 800120c:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <HAL_I2C_MspInit+0x2b4>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001214:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <HAL_I2C_MspInit+0x2c0>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001218:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 800121a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800121e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001222:	2240      	movs	r2, #64	@ 0x40
 8001224:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 800122e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001232:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001254:	f001 fa3a 	bl	80026cc <HAL_DMA_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 800125e:	f7ff fdbd 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 8001266:	635a      	str	r2, [r3, #52]	@ 0x34
 8001268:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <HAL_I2C_MspInit+0x2bc>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2105      	movs	r1, #5
 8001272:	2021      	movs	r0, #33	@ 0x21
 8001274:	f001 f9f3 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001278:	2021      	movs	r0, #33	@ 0x21
 800127a:	f001 fa0c 	bl	8002696 <HAL_NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	@ 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40005400 	.word	0x40005400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	20000184 	.word	0x20000184
 8001298:	40026010 	.word	0x40026010
 800129c:	200001e4 	.word	0x200001e4
 80012a0:	400260a0 	.word	0x400260a0
 80012a4:	40005800 	.word	0x40005800
 80012a8:	40021400 	.word	0x40021400
 80012ac:	20000244 	.word	0x20000244
 80012b0:	40026040 	.word	0x40026040
 80012b4:	200002a4 	.word	0x200002a4
 80012b8:	400260b8 	.word	0x400260b8

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	@ 0x30
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001404 <HAL_SPI_MspInit+0x148>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 80a0 	bne.w	8001420 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e8:	4a47      	ldr	r2, [pc, #284]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 80012ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f0:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	4b41      	ldr	r3, [pc, #260]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a40      	ldr	r2, [pc, #256]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
 800130c:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <HAL_SPI_MspInit+0x14c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001318:	23e0      	movs	r3, #224	@ 0xe0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001328:	2305      	movs	r3, #5
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4836      	ldr	r0, [pc, #216]	@ (800140c <HAL_SPI_MspInit+0x150>)
 8001334:	f001 fde6 	bl	8002f04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001338:	4b35      	ldr	r3, [pc, #212]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800133a:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <HAL_SPI_MspInit+0x158>)
 800133c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001340:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001344:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001346:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001358:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800135a:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001366:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001378:	4825      	ldr	r0, [pc, #148]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800137a:	f001 f9a7 	bl	80026cc <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001384:	f7ff fd2a 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800138e:	4a20      	ldr	r2, [pc, #128]	@ (8001410 <HAL_SPI_MspInit+0x154>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001394:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 8001396:	4a21      	ldr	r2, [pc, #132]	@ (800141c <HAL_SPI_MspInit+0x160>)
 8001398:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 800139c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013a4:	2240      	movs	r2, #64	@ 0x40
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d4:	4810      	ldr	r0, [pc, #64]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013d6:	f001 f979 	bl	80026cc <HAL_DMA_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80013e0:	f7ff fcfc 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013e8:	649a      	str	r2, [r3, #72]	@ 0x48
 80013ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <HAL_SPI_MspInit+0x15c>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2105      	movs	r1, #5
 80013f4:	2023      	movs	r0, #35	@ 0x23
 80013f6:	f001 f932 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013fa:	2023      	movs	r0, #35	@ 0x23
 80013fc:	f001 f94b 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001400:	e0c1      	b.n	8001586 <HAL_SPI_MspInit+0x2ca>
 8001402:	bf00      	nop
 8001404:	40013000 	.word	0x40013000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	200003b4 	.word	0x200003b4
 8001414:	40026410 	.word	0x40026410
 8001418:	20000414 	.word	0x20000414
 800141c:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5a      	ldr	r2, [pc, #360]	@ (8001590 <HAL_SPI_MspInit+0x2d4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	f040 80ad 	bne.w	8001586 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a57      	ldr	r2, [pc, #348]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a50      	ldr	r2, [pc, #320]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b4e      	ldr	r3, [pc, #312]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	4a49      	ldr	r2, [pc, #292]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	6313      	str	r3, [r2, #48]	@ 0x30
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <HAL_SPI_MspInit+0x2d8>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001480:	230c      	movs	r3, #12
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	483f      	ldr	r0, [pc, #252]	@ (8001598 <HAL_SPI_MspInit+0x2dc>)
 800149c:	f001 fd32 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b2:	2305      	movs	r3, #5
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4837      	ldr	r0, [pc, #220]	@ (800159c <HAL_SPI_MspInit+0x2e0>)
 80014be:	f001 fd21 	bl	8002f04 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014c4:	4a37      	ldr	r2, [pc, #220]	@ (80015a4 <HAL_SPI_MspInit+0x2e8>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014c8:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001500:	4827      	ldr	r0, [pc, #156]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 8001502:	f001 f8e3 	bl	80026cc <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 800150c:	f7ff fc66 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 8001514:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_SPI_MspInit+0x2e4>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800151e:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_SPI_MspInit+0x2f0>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800152a:	2240      	movs	r2, #64	@ 0x40
 800152c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800155c:	f001 f8b6 	bl	80026cc <HAL_DMA_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001566:	f7ff fc39 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 800156e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <HAL_SPI_MspInit+0x2ec>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2105      	movs	r1, #5
 800157a:	2024      	movs	r0, #36	@ 0x24
 800157c:	f001 f86f 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001580:	2024      	movs	r0, #36	@ 0x24
 8001582:	f001 f888 	bl	8002696 <HAL_NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3730      	adds	r7, #48	@ 0x30
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40003800 	.word	0x40003800
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800
 800159c:	40020400 	.word	0x40020400
 80015a0:	20000474 	.word	0x20000474
 80015a4:	40026058 	.word	0x40026058
 80015a8:	200004d4 	.word	0x200004d4
 80015ac:	40026070 	.word	0x40026070

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a25      	ldr	r2, [pc, #148]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d144      	bne.n	800165c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 80015dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_UART_MspInit+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160a:	2301      	movs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800161a:	2308      	movs	r3, #8
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4811      	ldr	r0, [pc, #68]	@ (800166c <HAL_UART_MspInit+0xbc>)
 8001626:	f001 fc6d 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800162a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 800163c:	230b      	movs	r3, #11
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4809      	ldr	r0, [pc, #36]	@ (800166c <HAL_UART_MspInit+0xbc>)
 8001648:	f001 fc5c 	bl	8002f04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	2034      	movs	r0, #52	@ 0x34
 8001652:	f001 f804 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001656:	2034      	movs	r0, #52	@ 0x34
 8001658:	f001 f81d 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	@ 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40004c00 	.word	0x40004c00
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <UsageFault_Handler+0x4>

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 f937 	bl	800191c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016ae:	f008 fa13 	bl	8009ad8 <xTaskGetSchedulerState>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d001      	beq.n	80016bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016b8:	f009 f90e 	bl	800a8d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA1_Stream0_IRQHandler+0x10>)
 80016c6:	f001 f999 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000184 	.word	0x20000184

080016d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <DMA1_Stream2_IRQHandler+0x10>)
 80016da:	f001 f98f 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000244 	.word	0x20000244

080016e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <DMA1_Stream3_IRQHandler+0x10>)
 80016ee:	f001 f985 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000474 	.word	0x20000474

080016fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Stream4_IRQHandler+0x10>)
 8001702:	f001 f97b 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200004d4 	.word	0x200004d4

08001710 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Stream6_IRQHandler+0x10>)
 8001716:	f001 f971 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001e4 	.word	0x200001e4

08001724 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <CAN1_TX_IRQHandler+0x10>)
 800172a:	f000 fc84 	bl	8002036 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000b4 	.word	0x200000b4

08001738 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <CAN1_RX0_IRQHandler+0x10>)
 800173e:	f000 fc7a 	bl	8002036 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000b4 	.word	0x200000b4

0800174c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <I2C1_EV_IRQHandler+0x10>)
 8001752:	f002 f85d 	bl	8003810 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200000dc 	.word	0x200000dc

08001760 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <I2C1_ER_IRQHandler+0x10>)
 8001766:	f002 f9c4 	bl	8003af2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000dc 	.word	0x200000dc

08001774 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <I2C2_EV_IRQHandler+0x10>)
 800177a:	f002 f849 	bl	8003810 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000130 	.word	0x20000130

08001788 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <SPI1_IRQHandler+0x10>)
 800178e:	f004 ff27 	bl	80065e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000304 	.word	0x20000304

0800179c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <SPI2_IRQHandler+0x10>)
 80017a2:	f004 ff1d 	bl	80065e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000035c 	.word	0x2000035c

080017b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA1_Stream7_IRQHandler+0x10>)
 80017b6:	f001 f921 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002a4 	.word	0x200002a4

080017c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <UART4_IRQHandler+0x10>)
 80017ca:	f005 f9cb 	bl	8006b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000534 	.word	0x20000534

080017d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <DMA2_Stream0_IRQHandler+0x10>)
 80017de:	f001 f90d 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200003b4 	.word	0x200003b4

080017ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <DMA2_Stream3_IRQHandler+0x10>)
 80017f2:	f001 f903 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000414 	.word	0x20000414

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	@ (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	@ (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f009 fadd 	bl	800ae10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7fe fef3 	bl	8000640 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800185c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001868:	0800b034 	.word	0x0800b034
  ldr r2, =_sbss
 800186c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001870:	20004ef0 	.word	0x20004ef0

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 fed1 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fadc 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fee9 	bl	80026b2 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 feb1 	bl	800265e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000008 	.word	0x20000008
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	2000059c 	.word	0x2000059c

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000059c 	.word	0x2000059c

0800195c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e033      	b.n	80019da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff faa0 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f94a 	bl	8001c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e113      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x244>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d925      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	e022      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	2207      	movs	r2, #7
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4403      	add	r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d824      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	221f      	movs	r2, #31
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b05      	subs	r3, #5
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af2:	e04c      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d824      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	@ 0x23
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b23      	subs	r3, #35	@ 0x23
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b44:	e023      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	@ 0x41
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b41      	subs	r3, #65	@ 0x41
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_ADC_ConfigChannel+0x250>)
 8001b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <HAL_ADC_ConfigChannel+0x254>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d10f      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1d8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d10b      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_ADC_ConfigChannel+0x254>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12b      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x23a>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <HAL_ADC_ConfigChannel+0x258>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d003      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d122      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a11      	ldr	r2, [pc, #68]	@ (8001c3c <HAL_ADC_ConfigChannel+0x258>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d111      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_ADC_ConfigChannel+0x25c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_ADC_ConfigChannel+0x260>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	0c9a      	lsrs	r2, r3, #18
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40012300 	.word	0x40012300
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	10000012 	.word	0x10000012
 8001c40:	20000000 	.word	0x20000000
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	4b79      	ldr	r3, [pc, #484]	@ (8001e38 <ADC_Init+0x1f0>)
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	021a      	lsls	r2, r3, #8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	4a58      	ldr	r2, [pc, #352]	@ (8001e3c <ADC_Init+0x1f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e00f      	b.n	8001d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0202 	bic.w	r2, r2, #2
 8001d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e1b      	ldrb	r3, [r3, #24]
 8001d60:	005a      	lsls	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	035a      	lsls	r2, r3, #13
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	e007      	b.n	8001dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051a      	lsls	r2, r3, #20
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dfe:	025a      	lsls	r2, r3, #9
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	029a      	lsls	r2, r3, #10
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	0f000001 	.word	0x0f000001

08001e40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0ed      	b.n	800202e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff f872 	bl	8000f48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e74:	f7ff fd66 	bl	8001944 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7a:	e012      	b.n	8001ea2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e7c:	f7ff fd62 	bl	8001944 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b0a      	cmp	r3, #10
 8001e88:	d90b      	bls.n	8001ea2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0c5      	b.n	800202e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0e5      	beq.n	8001e7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0202 	bic.w	r2, r2, #2
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec0:	f7ff fd40 	bl	8001944 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ec6:	e012      	b.n	8001eee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec8:	f7ff fd3c 	bl	8001944 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b0a      	cmp	r3, #10
 8001ed4:	d90b      	bls.n	8001eee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e09f      	b.n	800202e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e5      	bne.n	8001ec8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7e1b      	ldrb	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d108      	bne.n	8001f16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e007      	b.n	8001f26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7e5b      	ldrb	r3, [r3, #25]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e007      	b.n	8001f50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e9b      	ldrb	r3, [r3, #26]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d108      	bne.n	8001f6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e007      	b.n	8001f7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0220 	bic.w	r2, r2, #32
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7edb      	ldrb	r3, [r3, #27]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0210 	bic.w	r2, r2, #16
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e007      	b.n	8001fa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0210 	orr.w	r2, r2, #16
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7f1b      	ldrb	r3, [r3, #28]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d108      	bne.n	8001fbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0208 	orr.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e007      	b.n	8001fce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7f5b      	ldrb	r3, [r3, #29]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d108      	bne.n	8001fe8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0204 	orr.w	r2, r2, #4
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e007      	b.n	8001ff8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b08a      	sub	sp, #40	@ 0x28
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d07c      	beq.n	8002176 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f983 	bl	80023a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800209e:	e016      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	e00c      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c6:	e002      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f989 	bl	80023e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d024      	beq.n	8002122 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f963 	bl	80023b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80020f2:	e016      	b.n	8002122 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
 8002106:	e00c      	b.n	8002122 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
 800211a:	e002      	b.n	8002122 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f969 	bl	80023f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d024      	beq.n	8002176 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f943 	bl	80023cc <HAL_CAN_TxMailbox2CompleteCallback>
 8002146:	e016      	b.n	8002176 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	e00c      	b.n	8002176 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
 800216e:	e002      	b.n	8002176 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f949 	bl	8002408 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2210      	movs	r2, #16
 8002198:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2208      	movs	r2, #8
 80021b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f93a 	bl	8002430 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f921 	bl	800241c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2210      	movs	r2, #16
 80021fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2208      	movs	r2, #8
 8002218:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f91c 	bl	8002458 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f903 	bl	8002444 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f906 	bl	800246c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f8ff 	bl	8002480 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d07b      	beq.n	8002384 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d072      	beq.n	800237c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d043      	beq.n	800237c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03e      	beq.n	800237c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002304:	2b60      	cmp	r3, #96	@ 0x60
 8002306:	d02b      	beq.n	8002360 <HAL_CAN_IRQHandler+0x32a>
 8002308:	2b60      	cmp	r3, #96	@ 0x60
 800230a:	d82e      	bhi.n	800236a <HAL_CAN_IRQHandler+0x334>
 800230c:	2b50      	cmp	r3, #80	@ 0x50
 800230e:	d022      	beq.n	8002356 <HAL_CAN_IRQHandler+0x320>
 8002310:	2b50      	cmp	r3, #80	@ 0x50
 8002312:	d82a      	bhi.n	800236a <HAL_CAN_IRQHandler+0x334>
 8002314:	2b40      	cmp	r3, #64	@ 0x40
 8002316:	d019      	beq.n	800234c <HAL_CAN_IRQHandler+0x316>
 8002318:	2b40      	cmp	r3, #64	@ 0x40
 800231a:	d826      	bhi.n	800236a <HAL_CAN_IRQHandler+0x334>
 800231c:	2b30      	cmp	r3, #48	@ 0x30
 800231e:	d010      	beq.n	8002342 <HAL_CAN_IRQHandler+0x30c>
 8002320:	2b30      	cmp	r3, #48	@ 0x30
 8002322:	d822      	bhi.n	800236a <HAL_CAN_IRQHandler+0x334>
 8002324:	2b10      	cmp	r3, #16
 8002326:	d002      	beq.n	800232e <HAL_CAN_IRQHandler+0x2f8>
 8002328:	2b20      	cmp	r3, #32
 800232a:	d005      	beq.n	8002338 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800232c:	e01d      	b.n	800236a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002336:	e019      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002340:	e014      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800234a:	e00f      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002354:	e00a      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800235e:	e005      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002368:	e000      	b.n	800236c <HAL_CAN_IRQHandler+0x336>
            break;
 800236a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800237a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2204      	movs	r2, #4
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f87c 	bl	8002494 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	@ (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	@ (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff f934 	bl	8001944 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e099      	b.n	800281c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002708:	e00f      	b.n	800272a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270a:	f7ff f91b 	bl	8001944 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b05      	cmp	r3, #5
 8002716:	d908      	bls.n	800272a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e078      	b.n	800281c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e8      	bne.n	800270a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_DMA_Init+0x158>)
 8002744:	4013      	ands	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	4313      	orrs	r3, r2
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d117      	bne.n	80027ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fb1b 	bl	8002e0c <DMA_CheckFifoParam>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2240      	movs	r2, #64	@ 0x40
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027ea:	2301      	movs	r3, #1
 80027ec:	e016      	b.n	800281c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fad2 	bl	8002da0 <DMA_CalcBaseAndBitshift>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	223f      	movs	r2, #63	@ 0x3f
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	e010803f 	.word	0xe010803f

08002828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_DMA_Start_IT+0x26>
 800284a:	2302      	movs	r3, #2
 800284c:	e040      	b.n	80028d0 <HAL_DMA_Start_IT+0xa8>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12f      	bne.n	80028c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa64 	bl	8002d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	223f      	movs	r2, #63	@ 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0216 	orr.w	r2, r2, #22
 8002896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e005      	b.n	80028ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028e6:	f7ff f82d 	bl	8001944 <HAL_GetTick>
 80028ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e052      	b.n	80029b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0216 	bic.w	r2, r2, #22
 8002918:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002928:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_DMA_Abort+0x62>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295a:	e013      	b.n	8002984 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295c:	f7fe fff2 	bl	8001944 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b05      	cmp	r3, #5
 8002968:	d90c      	bls.n	8002984 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e015      	b.n	80029b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e4      	bne.n	800295c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	223f      	movs	r2, #63	@ 0x3f
 8002998:	409a      	lsls	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d004      	beq.n	80029d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2280      	movs	r2, #128	@ 0x80
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00c      	b.n	80029f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2205      	movs	r2, #5
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a08:	4b8e      	ldr	r3, [pc, #568]	@ (8002c44 <HAL_DMA_IRQHandler+0x248>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c48 <HAL_DMA_IRQHandler+0x24c>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	2208      	movs	r2, #8
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	2208      	movs	r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	2210      	movs	r2, #16
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d043      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03c      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2210      	movs	r2, #16
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d024      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e01f      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	2220      	movs	r2, #32
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 808f 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8087 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	2220      	movs	r2, #32
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d136      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0216 	bic.w	r2, r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x1da>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	223f      	movs	r2, #63	@ 0x3f
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07e      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
        }
        return;
 8002c12:	e079      	b.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d031      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
 8002c40:	e02c      	b.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000
 8002c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e01e      	b.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0210 	bic.w	r2, r2, #16
 8002c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d032      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2205      	movs	r2, #5
 8002cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d307      	bcc.n	8002ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f2      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x2cc>
 8002ce2:	e000      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d08:	bf00      	nop
    }
  }
}
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d1e:	b2db      	uxtb	r3, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d108      	bne.n	8002d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d82:	e007      	b.n	8002d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	3b10      	subs	r3, #16
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <DMA_CalcBaseAndBitshift+0x64>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dba:	4a13      	ldr	r2, [pc, #76]	@ (8002e08 <DMA_CalcBaseAndBitshift+0x68>)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d909      	bls.n	8002de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	659a      	str	r2, [r3, #88]	@ 0x58
 8002de0:	e007      	b.n	8002df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	aaaaaaab 	.word	0xaaaaaaab
 8002e08:	0800b01c 	.word	0x0800b01c

08002e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11f      	bne.n	8002e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d856      	bhi.n	8002eda <DMA_CheckFifoParam+0xce>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <DMA_CheckFifoParam+0x28>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e57 	.word	0x08002e57
 8002e3c:	08002e45 	.word	0x08002e45
 8002e40:	08002edb 	.word	0x08002edb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d046      	beq.n	8002ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e043      	b.n	8002ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e5e:	d140      	bne.n	8002ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e64:	e03d      	b.n	8002ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	d121      	bne.n	8002eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d837      	bhi.n	8002ee6 <DMA_CheckFifoParam+0xda>
 8002e76:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <DMA_CheckFifoParam+0x70>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e93 	.word	0x08002e93
 8002e84:	08002e8d 	.word	0x08002e8d
 8002e88:	08002ea5 	.word	0x08002ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e030      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d025      	beq.n	8002eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea2:	e022      	b.n	8002eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eac:	d11f      	bne.n	8002eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eb2:	e01c      	b.n	8002eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d903      	bls.n	8002ec2 <DMA_CheckFifoParam+0xb6>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d003      	beq.n	8002ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ec0:	e018      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec6:	e015      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00e      	beq.n	8002ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e00b      	b.n	8002ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eda:	bf00      	nop
 8002edc:	e00a      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e008      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e006      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e004      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e165      	b.n	80031ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8154 	bne.w	80031e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80ae 	beq.w	80031e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <HAL_GPIO_Init+0x300>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	4a5c      	ldr	r2, [pc, #368]	@ (8003204 <HAL_GPIO_Init+0x300>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003098:	6453      	str	r3, [r2, #68]	@ 0x44
 800309a:	4b5a      	ldr	r3, [pc, #360]	@ (8003204 <HAL_GPIO_Init+0x300>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a6:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_GPIO_Init+0x304>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	@ (800320c <HAL_GPIO_Init+0x308>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x21a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003210 <HAL_GPIO_Init+0x30c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003214 <HAL_GPIO_Init+0x310>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x212>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003218 <HAL_GPIO_Init+0x314>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_GPIO_Init+0x318>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x20a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <HAL_GPIO_Init+0x31c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x206>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <HAL_GPIO_Init+0x320>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x202>
 8003102:	2306      	movs	r3, #6
 8003104:	e00c      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003106:	2307      	movs	r3, #7
 8003108:	e00a      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800310e:	2304      	movs	r3, #4
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	@ (8003208 <HAL_GPIO_Init+0x304>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313e:	4b3a      	ldr	r3, [pc, #232]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003162:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_GPIO_Init+0x324>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318c:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_GPIO_Init+0x324>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f ae96 	bls.w	8002f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e12b      	b.n	80034ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd feb6 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	@ 0x24
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c4:	f002 fc64 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 80032c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a81      	ldr	r2, [pc, #516]	@ (80034d4 <HAL_I2C_Init+0x274>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d807      	bhi.n	80032e4 <HAL_I2C_Init+0x84>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a80      	ldr	r2, [pc, #512]	@ (80034d8 <HAL_I2C_Init+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	bf94      	ite	ls
 80032dc:	2301      	movls	r3, #1
 80032de:	2300      	movhi	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e006      	b.n	80032f2 <HAL_I2C_Init+0x92>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a7d      	ldr	r2, [pc, #500]	@ (80034dc <HAL_I2C_Init+0x27c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bf94      	ite	ls
 80032ec:	2301      	movls	r3, #1
 80032ee:	2300      	movhi	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0e7      	b.n	80034ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a78      	ldr	r2, [pc, #480]	@ (80034e0 <HAL_I2C_Init+0x280>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a6a      	ldr	r2, [pc, #424]	@ (80034d4 <HAL_I2C_Init+0x274>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d802      	bhi.n	8003334 <HAL_I2C_Init+0xd4>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3301      	adds	r3, #1
 8003332:	e009      	b.n	8003348 <HAL_I2C_Init+0xe8>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a69      	ldr	r2, [pc, #420]	@ (80034e4 <HAL_I2C_Init+0x284>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	3301      	adds	r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800335a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495c      	ldr	r1, [pc, #368]	@ (80034d4 <HAL_I2C_Init+0x274>)
 8003364:	428b      	cmp	r3, r1
 8003366:	d819      	bhi.n	800339c <HAL_I2C_Init+0x13c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e59      	subs	r1, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fbb1 f3f3 	udiv	r3, r1, r3
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800337c:	400b      	ands	r3, r1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_I2C_Init+0x138>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e59      	subs	r1, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003396:	e051      	b.n	800343c <HAL_I2C_Init+0x1dc>
 8003398:	2304      	movs	r3, #4
 800339a:	e04f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <HAL_I2C_Init+0x168>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e012      	b.n	80033ee <HAL_I2C_Init+0x18e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Init+0x196>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e022      	b.n	800343c <HAL_I2C_Init+0x1dc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <HAL_I2C_Init+0x1bc>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e58      	subs	r0, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	440b      	add	r3, r1
 800340c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800341a:	e00f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6809      	ldr	r1, [r1, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800346a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6911      	ldr	r1, [r2, #16]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	430b      	orrs	r3, r1
 800347e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	000186a0 	.word	0x000186a0
 80034d8:	001e847f 	.word	0x001e847f
 80034dc:	003d08ff 	.word	0x003d08ff
 80034e0:	431bde83 	.word	0x431bde83
 80034e4:	10624dd3 	.word	0x10624dd3

080034e8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	@ 0x30
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	460b      	mov	r3, r1
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003502:	f7fe fa1f 	bl	8001944 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	f040 8176 	bne.w	8003806 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800351a:	4b95      	ldr	r3, [pc, #596]	@ (8003770 <HAL_I2C_Mem_Read_DMA+0x288>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	08db      	lsrs	r3, r3, #3
 8003520:	4a94      	ldr	r2, [pc, #592]	@ (8003774 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0a1a      	lsrs	r2, r3, #8
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	3b01      	subs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d116      	bne.n	800356e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e14c      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d0db      	beq.n	8003534 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2C_Mem_Read_DMA+0xa2>
 8003586:	2302      	movs	r3, #2
 8003588:	e13e      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d007      	beq.n	80035b0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2222      	movs	r2, #34	@ 0x22
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a62      	ldr	r2, [pc, #392]	@ (8003778 <HAL_I2C_Mem_Read_DMA+0x290>)
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80035f2:	897a      	ldrh	r2, [r7, #10]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80cc 	beq.w	80037ac <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02d      	beq.n	8003678 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	4a56      	ldr	r2, [pc, #344]	@ (800377c <HAL_I2C_Mem_Read_DMA+0x294>)
 8003622:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	4a55      	ldr	r2, [pc, #340]	@ (8003780 <HAL_I2C_Mem_Read_DMA+0x298>)
 800362a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	2200      	movs	r2, #0
 8003642:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	2200      	movs	r2, #0
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3310      	adds	r3, #16
 8003656:	4619      	mov	r1, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	461a      	mov	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	f7ff f8e1 	bl	8002828 <HAL_DMA_Start_IT>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800366c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 8087 	bne.w	8003784 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003676:	e013      	b.n	80036a0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b3      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80036a0:	88f8      	ldrh	r0, [r7, #6]
 80036a2:	893a      	ldrh	r2, [r7, #8]
 80036a4:	8979      	ldrh	r1, [r7, #10]
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2323      	movs	r3, #35	@ 0x23
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4603      	mov	r3, r0
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f001 fc7f 	bl	8004fb4 <I2C_RequestMemoryRead>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f979 	bl	80029b8 <HAL_DMA_Abort_IT>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	2200      	movs	r2, #0
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e081      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	2b01      	cmp	r3, #1
 800370a:	d108      	bne.n	800371e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e007      	b.n	800372e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800372c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800375a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	e049      	b.n	8003802 <HAL_I2C_Mem_Read_DMA+0x31a>
 800376e:	bf00      	nop
 8003770:	20000000 	.word	0x20000000
 8003774:	14f8b589 	.word	0x14f8b589
 8003778:	ffff0000 	.word	0xffff0000
 800377c:	08005185 	.word	0x08005185
 8003780:	0800532f 	.word	0x0800532f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f043 0210 	orr.w	r2, r3, #16
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e02d      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80037ac:	88f8      	ldrh	r0, [r7, #6]
 80037ae:	893a      	ldrh	r2, [r7, #8]
 80037b0:	8979      	ldrh	r1, [r7, #10]
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2323      	movs	r3, #35	@ 0x23
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4603      	mov	r3, r0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f001 fbf9 	bl	8004fb4 <I2C_RequestMemoryRead>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01d      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	@ 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003830:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b10      	cmp	r3, #16
 800383e:	d003      	beq.n	8003848 <HAL_I2C_EV_IRQHandler+0x38>
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	f040 80c1 	bne.w	80039ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <HAL_I2C_EV_IRQHandler+0x6e>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003868:	d003      	beq.n	8003872 <HAL_I2C_EV_IRQHandler+0x62>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003870:	d101      	bne.n	8003876 <HAL_I2C_EV_IRQHandler+0x66>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_I2C_EV_IRQHandler+0x68>
 8003876:	2300      	movs	r3, #0
 8003878:	2b01      	cmp	r3, #1
 800387a:	f000 8132 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x92>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	0a5b      	lsrs	r3, r3, #9
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 ffa8 	bl	80057ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fd6f 	bl	800437e <I2C_Master_SB>
 80038a0:	e092      	b.n	80039c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fde5 	bl	800448a <I2C_Master_ADD10>
 80038c0:	e082      	b.n	80039c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	0a5b      	lsrs	r3, r3, #9
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fdff 	bl	80044de <I2C_Master_ADDR>
 80038e0:	e072      	b.n	80039c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03b      	beq.n	8003966 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fc:	f000 80f3 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	09db      	lsrs	r3, r3, #7
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00f      	beq.n	800392c <HAL_I2C_EV_IRQHandler+0x11c>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_I2C_EV_IRQHandler+0x11c>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9e9 	bl	8003cfc <I2C_MasterTransmit_TXE>
 800392a:	e04d      	b.n	80039c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80d6 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	0a5b      	lsrs	r3, r3, #9
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80cf 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b21      	cmp	r3, #33	@ 0x21
 800394c:	d103      	bne.n	8003956 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa70 	bl	8003e34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003954:	e0c7      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	f040 80c4 	bne.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fade 	bl	8003f20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003964:	e0bf      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003974:	f000 80b7 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_I2C_EV_IRQHandler+0x194>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb53 	bl	8004048 <I2C_MasterReceive_RXNE>
 80039a2:	e011      	b.n	80039c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 809a 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	0a5b      	lsrs	r3, r3, #9
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8093 	beq.w	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fbf2 	bl	80041aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c6:	e08e      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039c8:	e08d      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e007      	b.n	80039ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x20e>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0a5b      	lsrs	r3, r3, #9
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00c      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a14:	69b9      	ldr	r1, [r7, #24]
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 ffb0 	bl	800497c <I2C_Slave_ADDR>
 8003a1c:	e066      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_I2C_EV_IRQHandler+0x22e>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	0a5b      	lsrs	r3, r3, #9
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 ffea 	bl	8004a10 <I2C_Slave_STOPF>
 8003a3c:	e056      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a3e:	7bbb      	ldrb	r3, [r7, #14]
 8003a40:	2b21      	cmp	r3, #33	@ 0x21
 8003a42:	d002      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x23a>
 8003a44:	7bbb      	ldrb	r3, [r7, #14]
 8003a46:	2b29      	cmp	r3, #41	@ 0x29
 8003a48:	d125      	bne.n	8003a96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00f      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x266>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a9b      	lsrs	r3, r3, #10
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x266>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fec6 	bl	8004800 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a74:	e039      	b.n	8003aea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d033      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x2da>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	0a5b      	lsrs	r3, r3, #9
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02d      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fef3 	bl	800487a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a94:	e029      	b.n	8003aea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00f      	beq.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	0a9b      	lsrs	r3, r3, #10
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fefe 	bl	80048bc <I2C_SlaveReceive_RXNE>
 8003ac0:	e014      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	0a5b      	lsrs	r3, r3, #9
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 ff2c 	bl	8004938 <I2C_SlaveReceive_BTF>
 8003ae0:	e004      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08a      	sub	sp, #40	@ 0x28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <HAL_I2C_ER_IRQHandler+0x4e>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	0a5b      	lsrs	r3, r3, #9
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00e      	beq.n	8003b6a <HAL_I2C_ER_IRQHandler+0x78>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003b68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	0a9b      	lsrs	r3, r3, #10
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03f      	beq.n	8003bf6 <HAL_I2C_ER_IRQHandler+0x104>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d039      	beq.n	8003bf6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003b82:	7efb      	ldrb	r3, [r7, #27]
 8003b84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b9c:	7ebb      	ldrb	r3, [r7, #26]
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d112      	bne.n	8003bc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b21      	cmp	r3, #33	@ 0x21
 8003bac:	d008      	beq.n	8003bc0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	2b29      	cmp	r3, #41	@ 0x29
 8003bb2:	d005      	beq.n	8003bc0 <HAL_I2C_ER_IRQHandler+0xce>
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b28      	cmp	r3, #40	@ 0x28
 8003bb8:	d106      	bne.n	8003bc8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b21      	cmp	r3, #33	@ 0x21
 8003bbe:	d103      	bne.n	8003bc8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f001 f855 	bl	8004c70 <I2C_Slave_AF>
 8003bc6:	e016      	b.n	8003bf6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bd0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bda:	7efb      	ldrb	r3, [r7, #27]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d002      	beq.n	8003be6 <HAL_I2C_ER_IRQHandler+0xf4>
 8003be0:	7efb      	ldrb	r3, [r7, #27]
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d107      	bne.n	8003bf6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	0adb      	lsrs	r3, r3, #11
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <HAL_I2C_ER_IRQHandler+0x12e>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 f88c 	bl	8004d50 <I2C_ITError>
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3728      	adds	r7, #40	@ 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d150      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0xc8>
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b21      	cmp	r3, #33	@ 0x21
 8003d26:	d14d      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d01d      	beq.n	8003d6a <I2C_MasterTransmit_TXE+0x6e>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d01a      	beq.n	8003d6a <I2C_MasterTransmit_TXE+0x6e>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d3a:	d016      	beq.n	8003d6a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d4a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2211      	movs	r2, #17
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff6c 	bl	8003c40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d68:	e060      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d78:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d88:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b40      	cmp	r3, #64	@ 0x40
 8003da2:	d107      	bne.n	8003db4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff87 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db2:	e03b      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff3f 	bl	8003c40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc2:	e033      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b21      	cmp	r3, #33	@ 0x21
 8003dc8:	d005      	beq.n	8003dd6 <I2C_MasterTransmit_TXE+0xda>
 8003dca:	7bbb      	ldrb	r3, [r7, #14]
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d12d      	bne.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b22      	cmp	r3, #34	@ 0x22
 8003dd4:	d12a      	bne.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d108      	bne.n	8003df2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003df0:	e01c      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d103      	bne.n	8003e06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f88e 	bl	8003f20 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e04:	e012      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e2a:	e7ff      	b.n	8003e2c <I2C_MasterTransmit_TXE+0x130>
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b21      	cmp	r3, #33	@ 0x21
 8003e4c:	d164      	bne.n	8003f18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e7c:	e04c      	b.n	8003f18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d01d      	beq.n	8003ec0 <I2C_MasterTransmit_BTF+0x8c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d01a      	beq.n	8003ec0 <I2C_MasterTransmit_BTF+0x8c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e90:	d016      	beq.n	8003ec0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2211      	movs	r2, #17
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fec1 	bl	8003c40 <HAL_I2C_MasterTxCpltCallback>
}
 8003ebe:	e02b      	b.n	8003f18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ece:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ede:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d107      	bne.n	8003f0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fedc 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
}
 8003f08:	e006      	b.n	8003f18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe94 	bl	8003c40 <HAL_I2C_MasterTxCpltCallback>
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10b      	bne.n	8003f58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f56:	e073      	b.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	121b      	asrs	r3, r3, #8
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f72:	e065      	b.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10b      	bne.n	8003f94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f92:	e055      	b.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d151      	bne.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b22      	cmp	r3, #34	@ 0x22
 8003fa0:	d10d      	bne.n	8003fbe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fbc:	e040      	b.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b21      	cmp	r3, #33	@ 0x21
 8003fcc:	d112      	bne.n	8003ff4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ff2:	e025      	b.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d120      	bne.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b21      	cmp	r3, #33	@ 0x21
 8004002:	d11d      	bne.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004012:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004022:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fe40 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b22      	cmp	r3, #34	@ 0x22
 800405a:	f040 80a2 	bne.w	80041a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d921      	bls.n	80040b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b03      	cmp	r3, #3
 800409a:	f040 8082 	bne.w	80041a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80040ae:	e078      	b.n	80041a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d074      	beq.n	80041a2 <I2C_MasterReceive_RXNE+0x15a>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d002      	beq.n	80040c4 <I2C_MasterReceive_RXNE+0x7c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d16e      	bne.n	80041a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 fb2f 	bl	8005728 <I2C_WaitOnSTOPRequestThroughIT>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d142      	bne.n	8004156 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d10a      	bne.n	8004140 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fc fe73 	bl	8000e24 <HAL_I2C_MemRxCpltCallback>
}
 800413e:	e030      	b.n	80041a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2212      	movs	r2, #18
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fd80 	bl	8003c54 <HAL_I2C_MasterRxCpltCallback>
}
 8004154:	e025      	b.n	80041a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004164:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fd99 	bl	8003cd4 <HAL_I2C_ErrorCallback>
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d11b      	bne.n	80041fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041f8:	e0bd      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d129      	bne.n	8004258 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004212:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00a      	beq.n	8004230 <I2C_MasterReceive_BTF+0x86>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d007      	beq.n	8004230 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004256:	e08e      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d176      	bne.n	8004350 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d002      	beq.n	800426e <I2C_MasterReceive_BTF+0xc4>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d108      	bne.n	8004280 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e019      	b.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d002      	beq.n	800428c <I2C_MasterReceive_BTF+0xe2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d108      	bne.n	800429e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e00a      	b.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d007      	beq.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800430e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d10a      	bne.n	800433a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fd76 	bl	8000e24 <HAL_I2C_MemRxCpltCallback>
}
 8004338:	e01d      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2212      	movs	r2, #18
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fc83 	bl	8003c54 <HAL_I2C_MasterRxCpltCallback>
}
 800434e:	e012      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d117      	bne.n	80043c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043ac:	e067      	b.n	800447e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	611a      	str	r2, [r3, #16]
}
 80043c0:	e05d      	b.n	800447e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043ca:	d133      	bne.n	8004434 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b21      	cmp	r3, #33	@ 0x21
 80043d6:	d109      	bne.n	80043ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043e8:	611a      	str	r2, [r3, #16]
 80043ea:	e008      	b.n	80043fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <I2C_Master_SB+0x92>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d032      	beq.n	800447e <I2C_Master_SB+0x100>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02d      	beq.n	800447e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004430:	605a      	str	r2, [r3, #4]
}
 8004432:	e024      	b.n	800447e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10e      	bne.n	800445a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	b29b      	uxth	r3, r3
 8004442:	11db      	asrs	r3, r3, #7
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0306 	and.w	r3, r3, #6
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f063 030f 	orn	r3, r3, #15
 8004450:	b2da      	uxtb	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]
}
 8004458:	e011      	b.n	800447e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	b29b      	uxth	r3, r3
 8004468:	11db      	asrs	r3, r3, #7
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0306 	and.w	r3, r3, #6
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f063 030e 	orn	r3, r3, #14
 8004476:	b2da      	uxtb	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	611a      	str	r2, [r3, #16]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <I2C_Master_ADD10+0x26>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d0:	605a      	str	r2, [r3, #4]
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b091      	sub	sp, #68	@ 0x44
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b22      	cmp	r3, #34	@ 0x22
 8004506:	f040 8169 	bne.w	80047dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <I2C_Master_ADDR+0x54>
 8004512:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004516:	2b40      	cmp	r3, #64	@ 0x40
 8004518:	d10b      	bne.n	8004532 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	633b      	str	r3, [r7, #48]	@ 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	e160      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11d      	bne.n	8004576 <I2C_Master_ADDR+0x98>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004542:	d118      	bne.n	8004576 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004568:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	651a      	str	r2, [r3, #80]	@ 0x50
 8004574:	e13e      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d113      	bne.n	80045a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e115      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f040 808a 	bne.w	80046c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ba:	d137      	bne.n	800462c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045da:	d113      	bne.n	8004604 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	e0e7      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e0d3      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	2b08      	cmp	r3, #8
 8004630:	d02e      	beq.n	8004690 <I2C_Master_ADDR+0x1b2>
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	2b20      	cmp	r3, #32
 8004636:	d02b      	beq.n	8004690 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463a:	2b12      	cmp	r3, #18
 800463c:	d102      	bne.n	8004644 <I2C_Master_ADDR+0x166>
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	2b01      	cmp	r3, #1
 8004642:	d125      	bne.n	8004690 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00e      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	2b02      	cmp	r3, #2
 800464e:	d00b      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
 8004650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004652:	2b10      	cmp	r3, #16
 8004654:	d008      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004676:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	e0a1      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e085      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d14d      	bne.n	800476e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d016      	beq.n	8004706 <I2C_Master_ADDR+0x228>
 80046d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d013      	beq.n	8004706 <I2C_Master_ADDR+0x228>
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d010      	beq.n	8004706 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e007      	b.n	8004716 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004714:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d117      	bne.n	8004756 <I2C_Master_ADDR+0x278>
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472c:	d00b      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d008      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b10      	cmp	r3, #16
 800473e:	d002      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	2b20      	cmp	r3, #32
 8004744:	d107      	bne.n	8004756 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004754:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	e032      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800477c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478c:	d117      	bne.n	80047be <I2C_Master_ADDR+0x2e0>
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004794:	d00b      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	2b01      	cmp	r3, #1
 800479a:	d008      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d005      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d002      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d107      	bne.n	80047be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047da:	e00b      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	e7ff      	b.n	80047f4 <I2C_Master_ADDR+0x316>
 80047f4:	bf00      	nop
 80047f6:	3744      	adds	r7, #68	@ 0x44
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02b      	beq.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d114      	bne.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b29      	cmp	r3, #41	@ 0x29
 800484c:	d111      	bne.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2221      	movs	r2, #33	@ 0x21
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2228      	movs	r2, #40	@ 0x28
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff f9fb 	bl	8003c68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d011      	beq.n	80048b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02c      	beq.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d114      	bne.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b2a      	cmp	r3, #42	@ 0x2a
 800490a:	d111      	bne.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2222      	movs	r2, #34	@ 0x22
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2228      	movs	r2, #40	@ 0x28
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff f9a6 	bl	8003c7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004996:	2b28      	cmp	r3, #40	@ 0x28
 8004998:	d127      	bne.n	80049ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	09db      	lsrs	r3, r3, #7
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	81bb      	strh	r3, [r7, #12]
 80049cc:	e002      	b.n	80049d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049dc:	89ba      	ldrh	r2, [r7, #12]
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff f954 	bl	8003c90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049e8:	e00e      	b.n	8004a08 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6c:	d172      	bne.n	8004b54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b22      	cmp	r3, #34	@ 0x22
 8004a72:	d002      	beq.n	8004a7a <I2C_Slave_STOPF+0x6a>
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a78:	d135      	bne.n	8004ae6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f92c 	bl	8002d10 <HAL_DMA_GetState>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d049      	beq.n	8004b52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	4a69      	ldr	r2, [pc, #420]	@ (8004c68 <I2C_Slave_STOPF+0x258>)
 8004ac4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fd ff74 	bl	80029b8 <HAL_DMA_Abort_IT>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03d      	beq.n	8004b52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae4:	e035      	b.n	8004b52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f8f6 	bl	8002d10 <HAL_DMA_GetState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d014      	beq.n	8004b54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <I2C_Slave_STOPF+0x258>)
 8004b30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd ff3e 	bl	80029b8 <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
 8004b50:	e000      	b.n	8004b54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d03e      	beq.n	8004bdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d112      	bne.n	8004b92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d112      	bne.n	8004bc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	f043 0204 	orr.w	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8b3 	bl	8004d50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bea:	e039      	b.n	8004c60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf0:	d109      	bne.n	8004c06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2228      	movs	r2, #40	@ 0x28
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff f83b 	bl	8003c7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b28      	cmp	r3, #40	@ 0x28
 8004c10:	d111      	bne.n	8004c36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <I2C_Slave_STOPF+0x25c>)
 8004c16:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff f83c 	bl	8003cac <HAL_I2C_ListenCpltCallback>
}
 8004c34:	e014      	b.n	8004c60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b22      	cmp	r3, #34	@ 0x22
 8004c3c:	d002      	beq.n	8004c44 <I2C_Slave_STOPF+0x234>
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b22      	cmp	r3, #34	@ 0x22
 8004c42:	d10d      	bne.n	8004c60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff f80e 	bl	8003c7c <HAL_I2C_SlaveRxCpltCallback>
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	080053a9 	.word	0x080053a9
 8004c6c:	ffff0000 	.word	0xffff0000

08004c70 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d002      	beq.n	8004c92 <I2C_Slave_AF+0x22>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d129      	bne.n	8004ce6 <I2C_Slave_AF+0x76>
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b28      	cmp	r3, #40	@ 0x28
 8004c96:	d126      	bne.n	8004ce6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <I2C_Slave_AF+0xdc>)
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cb6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cc6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe ffe4 	bl	8003cac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ce4:	e02e      	b.n	8004d44 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b21      	cmp	r3, #33	@ 0x21
 8004cea:	d126      	bne.n	8004d3a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <I2C_Slave_AF+0xdc>)
 8004cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2221      	movs	r2, #33	@ 0x21
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d20:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe ff98 	bl	8003c68 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d38:	e004      	b.n	8004d44 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d42:	615a      	str	r2, [r3, #20]
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	ffff0000 	.word	0xffff0000

08004d50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d002      	beq.n	8004d74 <I2C_ITError+0x24>
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d10a      	bne.n	8004d8a <I2C_ITError+0x3a>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b22      	cmp	r3, #34	@ 0x22
 8004d78:	d107      	bne.n	8004d8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d90:	2b28      	cmp	r3, #40	@ 0x28
 8004d92:	d107      	bne.n	8004da4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2228      	movs	r2, #40	@ 0x28
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004da2:	e015      	b.n	8004dd0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db2:	d00a      	beq.n	8004dca <I2C_ITError+0x7a>
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b60      	cmp	r3, #96	@ 0x60
 8004db8:	d007      	beq.n	8004dca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dde:	d162      	bne.n	8004ea6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d020      	beq.n	8004e40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e02:	4a6a      	ldr	r2, [pc, #424]	@ (8004fac <I2C_ITError+0x25c>)
 8004e04:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd fdd4 	bl	80029b8 <HAL_DMA_Abort_IT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8089 	beq.w	8004f2a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
 8004e3e:	e074      	b.n	8004f2a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	4a59      	ldr	r2, [pc, #356]	@ (8004fac <I2C_ITError+0x25c>)
 8004e46:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fdb3 	bl	80029b8 <HAL_DMA_Abort_IT>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d068      	beq.n	8004f2a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d10b      	bne.n	8004e7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
 8004ea4:	e041      	b.n	8004f2a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b60      	cmp	r3, #96	@ 0x60
 8004eb0:	d125      	bne.n	8004efe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eca:	2b40      	cmp	r3, #64	@ 0x40
 8004ecc:	d10b      	bne.n	8004ee6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fef6 	bl	8003ce8 <HAL_I2C_AbortCpltCallback>
 8004efc:	e015      	b.n	8004f2a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d10b      	bne.n	8004f24 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fe fed5 	bl	8003cd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d113      	bne.n	8004fa4 <I2C_ITError+0x254>
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b28      	cmp	r3, #40	@ 0x28
 8004f80:	d110      	bne.n	8004fa4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb0 <I2C_ITError+0x260>)
 8004f86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fe fe84 	bl	8003cac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	080053a9 	.word	0x080053a9
 8004fb0:	ffff0000 	.word	0xffff0000

08004fb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	817b      	strh	r3, [r7, #10]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	813b      	strh	r3, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fa7c 	bl	80054f8 <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005014:	d103      	bne.n	800501e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800501c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0aa      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	4952      	ldr	r1, [pc, #328]	@ (8005180 <I2C_RequestMemoryRead+0x1cc>)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fab4 	bl	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e097      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fb1e 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b04      	cmp	r3, #4
 8005074:	d107      	bne.n	8005086 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e076      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	e021      	b.n	80050e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ac:	6a39      	ldr	r1, [r7, #32]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 faf8 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d107      	bne.n	80050d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e050      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d6:	893b      	ldrh	r3, [r7, #8]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	6a39      	ldr	r1, [r7, #32]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fadd 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d107      	bne.n	8005108 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005106:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e035      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2200      	movs	r2, #0
 8005124:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f9e5 	bl	80054f8 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005142:	d103      	bne.n	800514c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e013      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	4906      	ldr	r1, [pc, #24]	@ (8005180 <I2C_RequestMemoryRead+0x1cc>)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa1d 	bl	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051a0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051b6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	2200      	movs	r2, #0
 80051c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	2200      	movs	r2, #0
 80051d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80051de:	2b21      	cmp	r3, #33	@ 0x21
 80051e0:	d007      	beq.n	80051f2 <I2C_DMAXferCplt+0x6e>
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80051e8:	2b22      	cmp	r3, #34	@ 0x22
 80051ea:	d131      	bne.n	8005250 <I2C_DMAXferCplt+0xcc>
 80051ec:	7cbb      	ldrb	r3, [r7, #18]
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d12e      	bne.n	8005250 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005200:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	2b29      	cmp	r3, #41	@ 0x29
 800520c:	d10a      	bne.n	8005224 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2221      	movs	r2, #33	@ 0x21
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2228      	movs	r2, #40	@ 0x28
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800521c:	6978      	ldr	r0, [r7, #20]
 800521e:	f7fe fd23 	bl	8003c68 <HAL_I2C_SlaveTxCpltCallback>
 8005222:	e00c      	b.n	800523e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b2a      	cmp	r3, #42	@ 0x2a
 8005228:	d109      	bne.n	800523e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2222      	movs	r2, #34	@ 0x22
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2228      	movs	r2, #40	@ 0x28
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7fe fd1f 	bl	8003c7c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800524c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800524e:	e06a      	b.n	8005326 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d064      	beq.n	8005326 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005274:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005284:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800528c:	d009      	beq.n	80052a2 <I2C_DMAXferCplt+0x11e>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d006      	beq.n	80052a2 <I2C_DMAXferCplt+0x11e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800529a:	d002      	beq.n	80052a2 <I2C_DMAXferCplt+0x11e>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d107      	bne.n	80052b2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7fe fcf7 	bl	8003cd4 <HAL_I2C_ErrorCallback>
}
 80052e6:	e01e      	b.n	8005326 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d10a      	bne.n	8005312 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7fb fd8a 	bl	8000e24 <HAL_I2C_MemRxCpltCallback>
}
 8005310:	e009      	b.n	8005326 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2212      	movs	r2, #18
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f7fe fc97 	bl	8003c54 <HAL_I2C_MasterRxCpltCallback>
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	2200      	movs	r2, #0
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	2200      	movs	r2, #0
 800535a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fd fce5 	bl	8002d2c <HAL_DMA_GetError>
 8005362:	4603      	mov	r3, r0
 8005364:	2b02      	cmp	r3, #2
 8005366:	d01b      	beq.n	80053a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005376:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7fe fc9a 	bl	8003cd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053c2:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <I2C_DMAAbort+0x148>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	08db      	lsrs	r3, r3, #3
 80053c8:	4a4a      	ldr	r2, [pc, #296]	@ (80054f4 <I2C_DMAAbort+0x14c>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	0a1a      	lsrs	r2, r3, #8
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	00da      	lsls	r2, r3, #3
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80053ee:	e00a      	b.n	8005406 <I2C_DMAAbort+0x5e>
    }
    count--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005404:	d0ea      	beq.n	80053dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	2200      	movs	r2, #0
 8005414:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	2200      	movs	r2, #0
 8005424:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005434:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005448:	2200      	movs	r2, #0
 800544a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b60      	cmp	r3, #96	@ 0x60
 8005476:	d10e      	bne.n	8005496 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7fe fc2a 	bl	8003ce8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005494:	e027      	b.n	80054e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800549c:	2b28      	cmp	r3, #40	@ 0x28
 800549e:	d117      	bne.n	80054d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2228      	movs	r2, #40	@ 0x28
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80054ce:	e007      	b.n	80054e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f7fe fbf7 	bl	8003cd4 <HAL_I2C_ErrorCallback>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000000 	.word	0x20000000
 80054f4:	14f8b589 	.word	0x14f8b589

080054f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005508:	e025      	b.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d021      	beq.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fc fa17 	bl	8001944 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e023      	b.n	800559e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10d      	bne.n	800557c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf0c      	ite	eq
 8005572:	2301      	moveq	r3, #1
 8005574:	2300      	movne	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	e00c      	b.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	43da      	mvns	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d0b6      	beq.n	800550a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055b4:	e051      	b.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c4:	d123      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e046      	b.n	800569c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d021      	beq.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fc f995 	bl	8001944 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e020      	b.n	800569c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10c      	bne.n	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e00b      	b.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	43da      	mvns	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d18d      	bne.n	80055b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b0:	e02d      	b.n	800570e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f86a 	bl	800578c <I2C_IsAcknowledgeFailed>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02d      	b.n	800571e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d021      	beq.n	800570e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fc f93b 	bl	8001944 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d116      	bne.n	800570e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e007      	b.n	800571e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005718:	2b80      	cmp	r3, #128	@ 0x80
 800571a:	d1ca      	bne.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005734:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	4a13      	ldr	r2, [pc, #76]	@ (8005788 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	0a1a      	lsrs	r2, r3, #8
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b01      	subs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e008      	b.n	8005778 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005774:	d0e9      	beq.n	800574a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20000000 	.word	0x20000000
 8005788:	14f8b589 	.word	0x14f8b589

0800578c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a2:	d11b      	bne.n	80057dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80057fa:	d103      	bne.n	8005804 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005802:	e007      	b.n	8005814 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800580c:	d102      	bne.n	8005814 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2208      	movs	r2, #8
 8005812:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0cc      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005834:	4b68      	ldr	r3, [pc, #416]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d90c      	bls.n	800585c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005842:	4b65      	ldr	r3, [pc, #404]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d001      	beq.n	800585c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0b8      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d020      	beq.n	80058aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005874:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4a58      	ldr	r2, [pc, #352]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800587e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a52      	ldr	r2, [pc, #328]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b50      	ldr	r3, [pc, #320]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	494d      	ldr	r1, [pc, #308]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d044      	beq.n	8005940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b47      	ldr	r3, [pc, #284]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d119      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d003      	beq.n	80058de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b3f      	ldr	r3, [pc, #252]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b3b      	ldr	r3, [pc, #236]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e067      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b37      	ldr	r3, [pc, #220]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4934      	ldr	r1, [pc, #208]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005910:	f7fc f818 	bl	8001944 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fc f814 	bl	8001944 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e04f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b2b      	ldr	r3, [pc, #172]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 020c 	and.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1eb      	bne.n	8005918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d20c      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e032      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4916      	ldr	r1, [pc, #88]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005992:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	490e      	ldr	r1, [pc, #56]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059a6:	f000 f821 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	490a      	ldr	r1, [pc, #40]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059c2:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_ClockConfig+0x1c8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fb ff78 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023c00 	.word	0x40023c00
 80059dc:	40023800 	.word	0x40023800
 80059e0:	0800b004 	.word	0x0800b004
 80059e4:	20000000 	.word	0x20000000
 80059e8:	20000004 	.word	0x20000004

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f0:	b090      	sub	sp, #64	@ 0x40
 80059f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059fc:	2300      	movs	r3, #0
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a04:	4b59      	ldr	r3, [pc, #356]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0x40>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	f200 80a1 	bhi.w	8005b58 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x34>
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a1e:	e09b      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a20:	4b53      	ldr	r3, [pc, #332]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a22:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005a24:	e09b      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a26:	4b53      	ldr	r3, [pc, #332]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a2a:	e098      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a36:	4b4d      	ldr	r3, [pc, #308]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d028      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a42:	4b4a      	ldr	r3, [pc, #296]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	2200      	movs	r2, #0
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a54:	2100      	movs	r1, #0
 8005a56:	4b47      	ldr	r3, [pc, #284]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a58:	fb03 f201 	mul.w	r2, r3, r1
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	fb00 f303 	mul.w	r3, r0, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	4a43      	ldr	r2, [pc, #268]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a66:	fba0 1202 	umull	r1, r2, r0, r2
 8005a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a72:	4413      	add	r3, r2
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a78:	2200      	movs	r2, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a86:	f7fa fbcb 	bl	8000220 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4613      	mov	r3, r2
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a92:	e053      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a94:	4b35      	ldr	r3, [pc, #212]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	617a      	str	r2, [r7, #20]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005aa6:	f04f 0b00 	mov.w	fp, #0
 8005aaa:	4652      	mov	r2, sl
 8005aac:	465b      	mov	r3, fp
 8005aae:	f04f 0000 	mov.w	r0, #0
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	0159      	lsls	r1, r3, #5
 8005ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005abc:	0150      	lsls	r0, r2, #5
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ac6:	eb63 090b 	sbc.w	r9, r3, fp
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ad6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ada:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ade:	ebb2 0408 	subs.w	r4, r2, r8
 8005ae2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	00eb      	lsls	r3, r5, #3
 8005af0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af4:	00e2      	lsls	r2, r4, #3
 8005af6:	4614      	mov	r4, r2
 8005af8:	461d      	mov	r5, r3
 8005afa:	eb14 030a 	adds.w	r3, r4, sl
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	eb45 030b 	adc.w	r3, r5, fp
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b12:	4629      	mov	r1, r5
 8005b14:	028b      	lsls	r3, r1, #10
 8005b16:	4621      	mov	r1, r4
 8005b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	028a      	lsls	r2, r1, #10
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	2200      	movs	r2, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	60fa      	str	r2, [r7, #12]
 8005b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b30:	f7fa fb76 	bl	8000220 <__aeabi_uldivmod>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4613      	mov	r3, r2
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	3301      	adds	r3, #1
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005b4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3740      	adds	r7, #64	@ 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	00f42400 	.word	0x00f42400
 8005b74:	017d7840 	.word	0x017d7840

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	@ (8005b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000000 	.word	0x20000000

08005b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b94:	f7ff fff0 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba6:	5ccb      	ldrb	r3, [r1, r3]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800b014 	.word	0x0800b014

08005bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bbc:	f7ff ffdc 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	0b5b      	lsrs	r3, r3, #13
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4903      	ldr	r1, [pc, #12]	@ (8005bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	0800b014 	.word	0x0800b014

08005be0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e273      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d075      	beq.n	8005cea <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bfe:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d00c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0a:	4b85      	ldr	r3, [pc, #532]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d112      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c22:	d10b      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	4b7e      	ldr	r3, [pc, #504]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05b      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x108>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d157      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e24e      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d106      	bne.n	8005c54 <HAL_RCC_OscConfig+0x74>
 8005c46:	4b76      	ldr	r3, [pc, #472]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a75      	ldr	r2, [pc, #468]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e01d      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCC_OscConfig+0x98>
 8005c5e:	4b70      	ldr	r3, [pc, #448]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6f      	ldr	r2, [pc, #444]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00b      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c78:	4b69      	ldr	r3, [pc, #420]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a68      	ldr	r2, [pc, #416]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b66      	ldr	r3, [pc, #408]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a65      	ldr	r2, [pc, #404]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fb fe54 	bl	8001944 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fb fe50 	bl	8001944 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e213      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xc0>
 8005cbe:	e014      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fb fe40 	bl	8001944 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc8:	f7fb fe3c 	bl	8001944 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b64      	cmp	r3, #100	@ 0x64
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e1ff      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0xe8>
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d063      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d02:	4b47      	ldr	r3, [pc, #284]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0e:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	4b41      	ldr	r3, [pc, #260]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1d3      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d32:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4937      	ldr	r1, [pc, #220]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	e03a      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d020      	beq.n	8005d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d50:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fb fdf5 	bl	8001944 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5e:	f7fb fdf1 	bl	8001944 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e1b4      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d70:	4b2b      	ldr	r3, [pc, #172]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4925      	ldr	r1, [pc, #148]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	e015      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d92:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fb fdd4 	bl	8001944 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da0:	f7fb fdd0 	bl	8001944 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e193      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d036      	beq.n	8005e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd2:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fb fdb4 	bl	8001944 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005de0:	f7fb fdb0 	bl	8001944 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e173      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x200>
 8005dfe:	e01b      	b.n	8005e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e00:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e06:	f7fb fd9d 	bl	8001944 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e0c:	e00e      	b.n	8005e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7fb fd99 	bl	8001944 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d907      	bls.n	8005e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e15c      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	42470000 	.word	0x42470000
 8005e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ea      	bne.n	8005e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8097 	beq.w	8005f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e4a:	4b83      	ldr	r3, [pc, #524]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e66:	4b7c      	ldr	r3, [pc, #496]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e76:	4b79      	ldr	r3, [pc, #484]	@ (800605c <HAL_RCC_OscConfig+0x47c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d118      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e82:	4b76      	ldr	r3, [pc, #472]	@ (800605c <HAL_RCC_OscConfig+0x47c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a75      	ldr	r2, [pc, #468]	@ (800605c <HAL_RCC_OscConfig+0x47c>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8e:	f7fb fd59 	bl	8001944 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fb fd55 	bl	8001944 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e118      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800605c <HAL_RCC_OscConfig+0x47c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <HAL_RCC_OscConfig+0x2ea>
 8005ebc:	4b66      	ldr	r3, [pc, #408]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	4a65      	ldr	r2, [pc, #404]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec8:	e01c      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0x30c>
 8005ed2:	4b61      	ldr	r3, [pc, #388]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	4a60      	ldr	r2, [pc, #384]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ede:	4b5e      	ldr	r3, [pc, #376]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eec:	4b5a      	ldr	r3, [pc, #360]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef0:	4a59      	ldr	r2, [pc, #356]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef8:	4b57      	ldr	r3, [pc, #348]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efc:	4a56      	ldr	r2, [pc, #344]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005efe:	f023 0304 	bic.w	r3, r3, #4
 8005f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fb fd1a 	bl	8001944 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f14:	f7fb fd16 	bl	8001944 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0d7      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ee      	beq.n	8005f14 <HAL_RCC_OscConfig+0x334>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fb fd04 	bl	8001944 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fb fd00 	bl	8001944 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0c1      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f56:	4b40      	ldr	r3, [pc, #256]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ee      	bne.n	8005f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b3b      	ldr	r3, [pc, #236]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80ad 	beq.w	80060d8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f7e:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d060      	beq.n	800604c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d145      	bne.n	800601e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f92:	4b33      	ldr	r3, [pc, #204]	@ (8006060 <HAL_RCC_OscConfig+0x480>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fb fcd4 	bl	8001944 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fb fcd0 	bl	8001944 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e093      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb2:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	071b      	lsls	r3, r3, #28
 8005fea:	491b      	ldr	r1, [pc, #108]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <HAL_RCC_OscConfig+0x480>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fb fca5 	bl	8001944 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ffe:	f7fb fca1 	bl	8001944 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e064      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006010:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x41e>
 800601c:	e05c      	b.n	80060d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601e:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <HAL_RCC_OscConfig+0x480>)
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fb fc8e 	bl	8001944 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602c:	f7fb fc8a 	bl	8001944 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e04d      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x44c>
 800604a:	e045      	b.n	80060d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d107      	bne.n	8006064 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e040      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
 8006058:	40023800 	.word	0x40023800
 800605c:	40007000 	.word	0x40007000
 8006060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006064:	4b1f      	ldr	r3, [pc, #124]	@ (80060e4 <HAL_RCC_OscConfig+0x504>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d030      	beq.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800607c:	429a      	cmp	r2, r3
 800607e:	d129      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608a:	429a      	cmp	r2, r3
 800608c:	d122      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800609a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800609c:	4293      	cmp	r3, r2
 800609e:	d119      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	3b01      	subs	r3, #1
 80060ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d10f      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d107      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800

080060e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e07b      	b.n	80061f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800610a:	d009      	beq.n	8006120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	61da      	str	r2, [r3, #28]
 8006112:	e005      	b.n	8006120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb f8be 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a4:	ea42 0103 	orr.w	r1, r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f003 0104 	and.w	r1, r3, #4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	f003 0210 	and.w	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_SPI_Transmit+0x22>
 8006218:	2302      	movs	r3, #2
 800621a:	e126      	b.n	800646a <HAL_SPI_Transmit+0x270>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006224:	f7fb fb8e 	bl	8001944 <HAL_GetTick>
 8006228:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d002      	beq.n	8006240 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800623a:	2302      	movs	r3, #2
 800623c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800623e:	e10b      	b.n	8006458 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_Transmit+0x52>
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006250:	e102      	b.n	8006458 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2203      	movs	r2, #3
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006298:	d10f      	bne.n	80062ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b40      	cmp	r3, #64	@ 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e0:	d14b      	bne.n	800637a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0xf6>
 80062ea:	8afb      	ldrh	r3, [r7, #22]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d13e      	bne.n	800636e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f4:	881a      	ldrh	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006314:	e02b      	b.n	800636e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d112      	bne.n	800634a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006348:	e011      	b.n	800636e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634a:	f7fb fafb 	bl	8001944 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d803      	bhi.n	8006362 <HAL_SPI_Transmit+0x168>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d102      	bne.n	8006368 <HAL_SPI_Transmit+0x16e>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800636c:	e074      	b.n	8006458 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ce      	bne.n	8006316 <HAL_SPI_Transmit+0x11c>
 8006378:	e04c      	b.n	8006414 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_Transmit+0x18e>
 8006382:	8afb      	ldrh	r3, [r7, #22]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d140      	bne.n	800640a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063ae:	e02c      	b.n	800640a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d113      	bne.n	80063e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063e4:	e011      	b.n	800640a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e6:	f7fb faad 	bl	8001944 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d803      	bhi.n	80063fe <HAL_SPI_Transmit+0x204>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d102      	bne.n	8006404 <HAL_SPI_Transmit+0x20a>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006408:	e026      	b.n	8006458 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1cd      	bne.n	80063b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fb13 	bl	8006a44 <SPI_EndRxTxTransaction>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e000      	b.n	8006458 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006468:	7ffb      	ldrb	r3, [r7, #31]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_SPI_Transmit_DMA+0x20>
 8006490:	2302      	movs	r3, #2
 8006492:	e09b      	b.n	80065cc <HAL_SPI_Transmit_DMA+0x158>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
 80064aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064ac:	e089      	b.n	80065c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_SPI_Transmit_DMA+0x46>
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064be:	e080      	b.n	80065c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2203      	movs	r2, #3
 80064c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006506:	d10f      	bne.n	8006528 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006526:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652c:	4a29      	ldr	r2, [pc, #164]	@ (80065d4 <HAL_SPI_Transmit_DMA+0x160>)
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006534:	4a28      	ldr	r2, [pc, #160]	@ (80065d8 <HAL_SPI_Transmit_DMA+0x164>)
 8006536:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653c:	4a27      	ldr	r2, [pc, #156]	@ (80065dc <HAL_SPI_Transmit_DMA+0x168>)
 800653e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006544:	2200      	movs	r2, #0
 8006546:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	4619      	mov	r1, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006560:	f7fc f962 	bl	8002828 <HAL_DMA_Start_IT>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656e:	f043 0210 	orr.w	r2, r3, #16
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8006582:	e01e      	b.n	80065c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d007      	beq.n	80065a2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0220 	orr.w	r2, r2, #32
 80065b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0202 	orr.w	r2, r2, #2
 80065c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	080068b1 	.word	0x080068b1
 80065d8:	08006809 	.word	0x08006809
 80065dc:	080068cd 	.word	0x080068cd

080065e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10f      	bne.n	8006624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
    return;
 8006622:	e0d7      	b.n	80067d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_SPI_IRQHandler+0x66>
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	09db      	lsrs	r3, r3, #7
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
    return;
 8006644:	e0c6      	b.n	80067d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_SPI_IRQHandler+0x8c>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80b4 	beq.w	80067d4 <HAL_SPI_IRQHandler+0x1f4>
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80ad 	beq.w	80067d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	099b      	lsrs	r3, r3, #6
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d023      	beq.n	80066ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d011      	beq.n	80066b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006696:	f043 0204 	orr.w	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	e00b      	b.n	80066ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693b      	ldr	r3, [r7, #16]
        return;
 80066cc:	e082      	b.n	80067d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d014      	beq.n	8006704 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00c      	beq.n	800672a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006714:	f043 0208 	orr.w	r2, r3, #8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800671c:	2300      	movs	r3, #0
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04f      	beq.n	80067d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006740:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_SPI_IRQHandler+0x17e>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d034      	beq.n	80067c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0203 	bic.w	r2, r2, #3
 800676c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d011      	beq.n	800679a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677a:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_SPI_IRQHandler+0x1fc>)
 800677c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006782:	4618      	mov	r0, r3
 8006784:	f7fc f918 	bl	80029b8 <HAL_DMA_Abort_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a6:	4a0d      	ldr	r2, [pc, #52]	@ (80067dc <HAL_SPI_IRQHandler+0x1fc>)
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fc f902 	bl	80029b8 <HAL_DMA_Abort_IT>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80067c6:	e003      	b.n	80067d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f813 	bl	80067f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067ce:	e000      	b.n	80067d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067d0:	bf00      	nop
    return;
 80067d2:	bf00      	nop
  }
}
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	0800690d 	.word	0x0800690d

080067e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006816:	f7fb f895 	bl	8001944 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682a:	d03b      	beq.n	80068a4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0220 	bic.w	r2, r2, #32
 800683a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0202 	bic.w	r2, r2, #2
 800684a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	2164      	movs	r1, #100	@ 0x64
 8006850:	6978      	ldr	r0, [r7, #20]
 8006852:	f000 f8f7 	bl	8006a44 <SPI_EndRxTxTransaction>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2200      	movs	r2, #0
 800688a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800689c:	6978      	ldr	r0, [r7, #20]
 800689e:	f7ff ffa9 	bl	80067f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068a2:	e002      	b.n	80068aa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068a4:	6978      	ldr	r0, [r7, #20]
 80068a6:	f7f9 fe51 	bl	800054c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff8e 	bl	80067e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0203 	bic.w	r2, r2, #3
 80068e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	f043 0210 	orr.w	r2, r3, #16
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff ff78 	bl	80067f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff64 	bl	80067f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006944:	f7fa fffe 	bl	8001944 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006954:	f7fa fff6 	bl	8001944 <HAL_GetTick>
 8006958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800695a:	4b39      	ldr	r3, [pc, #228]	@ (8006a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	015b      	lsls	r3, r3, #5
 8006960:	0d1b      	lsrs	r3, r3, #20
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	e054      	b.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d050      	beq.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006974:	f7fa ffe6 	bl	8001944 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	429a      	cmp	r2, r3
 8006982:	d902      	bls.n	800698a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d13d      	bne.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a2:	d111      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d004      	beq.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b6:	d107      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d10f      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e017      	b.n	8006a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d19b      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000000 	.word	0x20000000

08006a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <SPI_EndRxTxTransaction+0x7c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac4 <SPI_EndRxTxTransaction+0x80>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	0d5b      	lsrs	r3, r3, #21
 8006a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a60:	fb02 f303 	mul.w	r3, r2, r3
 8006a64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a6e:	d112      	bne.n	8006a96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	2180      	movs	r1, #128	@ 0x80
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff ff5a 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	f043 0220 	orr.w	r2, r3, #32
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e00f      	b.n	8006ab6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aac:	2b80      	cmp	r3, #128	@ 0x80
 8006aae:	d0f2      	beq.n	8006a96 <SPI_EndRxTxTransaction+0x52>
 8006ab0:	e000      	b.n	8006ab4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ab2:	bf00      	nop
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000000 	.word	0x20000000
 8006ac4:	165e9f81 	.word	0x165e9f81

08006ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e03f      	b.n	8006b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa fd5e 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	@ 0x24
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc7b 	bl	8007408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b0ba      	sub	sp, #232	@ 0xe8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <HAL_UART_IRQHandler+0x66>
 8006bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb65 	bl	8007292 <UART_Receive_IT>
      return;
 8006bc8:	e256      	b.n	8007078 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80de 	beq.w	8006d90 <HAL_UART_IRQHandler+0x22c>
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80d1 	beq.w	8006d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_UART_IRQHandler+0xae>
 8006bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	f043 0201 	orr.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <HAL_UART_IRQHandler+0xd2>
 8006c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <HAL_UART_IRQHandler+0xf6>
 8006c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	f043 0204 	orr.w	r2, r3, #4
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <HAL_UART_IRQHandler+0x126>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d105      	bne.n	8006c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f043 0208 	orr.w	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 81ed 	beq.w	800706e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x14e>
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 faf0 	bl	8007292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	bf0c      	ite	eq
 8006cc0:	2301      	moveq	r3, #1
 8006cc2:	2300      	movne	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <HAL_UART_IRQHandler+0x17a>
 8006cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d04f      	beq.n	8006d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9f8 	bl	80070d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cee:	2b40      	cmp	r3, #64	@ 0x40
 8006cf0:	d141      	bne.n	8006d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1d9      	bne.n	8006cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8006f40 <HAL_UART_IRQHandler+0x3dc>)
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fb fe30 	bl	80029b8 <HAL_DMA_Abort_IT>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	e00e      	b.n	8006d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f99a 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	e00a      	b.n	8006d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f996 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	e006      	b.n	8006d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f992 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006d8a:	e170      	b.n	800706e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	bf00      	nop
    return;
 8006d8e:	e16e      	b.n	800706e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 814a 	bne.w	800702e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8143 	beq.w	800702e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 813c 	beq.w	800702e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd6:	2b40      	cmp	r3, #64	@ 0x40
 8006dd8:	f040 80b4 	bne.w	8006f44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8140 	beq.w	8007072 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f080 8139 	bcs.w	8007072 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e12:	f000 8088 	beq.w	8006f26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	330c      	adds	r3, #12
 8006e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1d9      	bne.n	8006e16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e1      	bne.n	8006e62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3314      	adds	r3, #20
 8006ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3314      	adds	r3, #20
 8006ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e3      	bne.n	8006e9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	330c      	adds	r3, #12
 8006f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e3      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fb fcd9 	bl	80028d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8c0 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f3c:	e099      	b.n	8007072 <HAL_UART_IRQHandler+0x50e>
 8006f3e:	bf00      	nop
 8006f40:	0800719b 	.word	0x0800719b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808b 	beq.w	8007076 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8086 	beq.w	8007076 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3314      	adds	r3, #20
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e3      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0310 	bic.w	r3, r3, #16
 8006ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	69b9      	ldr	r1, [r7, #24]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	617b      	str	r3, [r7, #20]
   return(result);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e3      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f848 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800702c:	e023      	b.n	8007076 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <HAL_UART_IRQHandler+0x4ea>
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8bb 	bl	80071c2 <UART_Transmit_IT>
    return;
 800704c:	e014      	b.n	8007078 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <HAL_UART_IRQHandler+0x514>
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8fb 	bl	8007262 <UART_EndTransmit_IT>
    return;
 800706c:	e004      	b.n	8007078 <HAL_UART_IRQHandler+0x514>
    return;
 800706e:	bf00      	nop
 8007070:	e002      	b.n	8007078 <HAL_UART_IRQHandler+0x514>
      return;
 8007072:	bf00      	nop
 8007074:	e000      	b.n	8007078 <HAL_UART_IRQHandler+0x514>
      return;
 8007076:	bf00      	nop
  }
}
 8007078:	37e8      	adds	r7, #232	@ 0xe8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop

08007080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b095      	sub	sp, #84	@ 0x54
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e5      	bne.n	80070dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007148:	2b01      	cmp	r3, #1
 800714a:	d119      	bne.n	8007180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	60bb      	str	r3, [r7, #8]
   return(result);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f023 0310 	bic.w	r3, r3, #16
 8007162:	647b      	str	r3, [r7, #68]	@ 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800716c:	61ba      	str	r2, [r7, #24]
 800716e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6979      	ldr	r1, [r7, #20]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	613b      	str	r3, [r7, #16]
   return(result);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800718e:	bf00      	nop
 8007190:	3754      	adds	r7, #84	@ 0x54
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff ff77 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b21      	cmp	r3, #33	@ 0x21
 80071d4:	d13e      	bne.n	8007254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071de:	d114      	bne.n	800720a <UART_Transmit_IT+0x48>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d110      	bne.n	800720a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	621a      	str	r2, [r3, #32]
 8007208:	e008      	b.n	800721c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	1c59      	adds	r1, r3, #1
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6211      	str	r1, [r2, #32]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4619      	mov	r1, r3
 800722a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10f      	bne.n	8007250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800723e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800724e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	e000      	b.n	8007256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fefc 	bl	8007080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b08c      	sub	sp, #48	@ 0x30
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b22      	cmp	r3, #34	@ 0x22
 80072a4:	f040 80ab 	bne.w	80073fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b0:	d117      	bne.n	80072e2 <UART_Receive_IT+0x50>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d113      	bne.n	80072e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072da:	1c9a      	adds	r2, r3, #2
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	629a      	str	r2, [r3, #40]	@ 0x28
 80072e0:	e026      	b.n	8007330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f4:	d007      	beq.n	8007306 <UART_Receive_IT+0x74>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <UART_Receive_IT+0x82>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e008      	b.n	8007326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007320:	b2da      	uxtb	r2, r3
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29b      	uxth	r3, r3
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4619      	mov	r1, r3
 800733e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007340:	2b00      	cmp	r3, #0
 8007342:	d15a      	bne.n	80073fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0220 	bic.w	r2, r2, #32
 8007352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695a      	ldr	r2, [r3, #20]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007380:	2b01      	cmp	r3, #1
 8007382:	d135      	bne.n	80073f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073aa:	623a      	str	r2, [r7, #32]
 80073ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	d10a      	bne.n	80073e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fe67 	bl	80070bc <HAL_UARTEx_RxEventCallback>
 80073ee:	e002      	b.n	80073f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fe4f 	bl	8007094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e002      	b.n	8007400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3730      	adds	r7, #48	@ 0x30
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800740c:	b0c0      	sub	sp, #256	@ 0x100
 800740e:	af00      	add	r7, sp, #0
 8007410:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	68d9      	ldr	r1, [r3, #12]
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	ea40 0301 	orr.w	r3, r0, r1
 8007430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	431a      	orrs	r2, r3
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007460:	f021 010c 	bic.w	r1, r1, #12
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800746e:	430b      	orrs	r3, r1
 8007470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007482:	6999      	ldr	r1, [r3, #24]
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	ea40 0301 	orr.w	r3, r0, r1
 800748e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b95      	ldr	r3, [pc, #596]	@ (80076ec <UART_SetConfig+0x2e4>)
 8007498:	429a      	cmp	r2, r3
 800749a:	d011      	beq.n	80074c0 <UART_SetConfig+0xb8>
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b93      	ldr	r3, [pc, #588]	@ (80076f0 <UART_SetConfig+0x2e8>)
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d00b      	beq.n	80074c0 <UART_SetConfig+0xb8>
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b91      	ldr	r3, [pc, #580]	@ (80076f4 <UART_SetConfig+0x2ec>)
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d005      	beq.n	80074c0 <UART_SetConfig+0xb8>
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b8f      	ldr	r3, [pc, #572]	@ (80076f8 <UART_SetConfig+0x2f0>)
 80074bc:	429a      	cmp	r2, r3
 80074be:	d104      	bne.n	80074ca <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074c0:	f7fe fb7a 	bl	8005bb8 <HAL_RCC_GetPCLK2Freq>
 80074c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074c8:	e003      	b.n	80074d2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ca:	f7fe fb61 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 80074ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074dc:	f040 8110 	bne.w	8007700 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	1891      	adds	r1, r2, r2
 80074f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074fa:	415b      	adcs	r3, r3
 80074fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007502:	4621      	mov	r1, r4
 8007504:	eb12 0801 	adds.w	r8, r2, r1
 8007508:	4629      	mov	r1, r5
 800750a:	eb43 0901 	adc.w	r9, r3, r1
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800751a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800751e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007522:	4690      	mov	r8, r2
 8007524:	4699      	mov	r9, r3
 8007526:	4623      	mov	r3, r4
 8007528:	eb18 0303 	adds.w	r3, r8, r3
 800752c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007530:	462b      	mov	r3, r5
 8007532:	eb49 0303 	adc.w	r3, r9, r3
 8007536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007546:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800754a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800754e:	460b      	mov	r3, r1
 8007550:	18db      	adds	r3, r3, r3
 8007552:	653b      	str	r3, [r7, #80]	@ 0x50
 8007554:	4613      	mov	r3, r2
 8007556:	eb42 0303 	adc.w	r3, r2, r3
 800755a:	657b      	str	r3, [r7, #84]	@ 0x54
 800755c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007560:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007564:	f7f8 fe5c 	bl	8000220 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4b63      	ldr	r3, [pc, #396]	@ (80076fc <UART_SetConfig+0x2f4>)
 800756e:	fba3 2302 	umull	r2, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	011c      	lsls	r4, r3, #4
 8007576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757a:	2200      	movs	r2, #0
 800757c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007580:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007584:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	1891      	adds	r1, r2, r2
 800758e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007590:	415b      	adcs	r3, r3
 8007592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007598:	4641      	mov	r1, r8
 800759a:	eb12 0a01 	adds.w	sl, r2, r1
 800759e:	4649      	mov	r1, r9
 80075a0:	eb43 0b01 	adc.w	fp, r3, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b8:	4692      	mov	sl, r2
 80075ba:	469b      	mov	fp, r3
 80075bc:	4643      	mov	r3, r8
 80075be:	eb1a 0303 	adds.w	r3, sl, r3
 80075c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075c6:	464b      	mov	r3, r9
 80075c8:	eb4b 0303 	adc.w	r3, fp, r3
 80075cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075e4:	460b      	mov	r3, r1
 80075e6:	18db      	adds	r3, r3, r3
 80075e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ea:	4613      	mov	r3, r2
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075fa:	f7f8 fe11 	bl	8000220 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4611      	mov	r1, r2
 8007604:	4b3d      	ldr	r3, [pc, #244]	@ (80076fc <UART_SetConfig+0x2f4>)
 8007606:	fba3 2301 	umull	r2, r3, r3, r1
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2264      	movs	r2, #100	@ 0x64
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	1acb      	subs	r3, r1, r3
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800761a:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <UART_SetConfig+0x2f4>)
 800761c:	fba3 2302 	umull	r2, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007628:	441c      	add	r4, r3
 800762a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762e:	2200      	movs	r2, #0
 8007630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007634:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007638:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	1891      	adds	r1, r2, r2
 8007642:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007644:	415b      	adcs	r3, r3
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800764c:	4641      	mov	r1, r8
 800764e:	1851      	adds	r1, r2, r1
 8007650:	6339      	str	r1, [r7, #48]	@ 0x30
 8007652:	4649      	mov	r1, r9
 8007654:	414b      	adcs	r3, r1
 8007656:	637b      	str	r3, [r7, #52]	@ 0x34
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007664:	4659      	mov	r1, fp
 8007666:	00cb      	lsls	r3, r1, #3
 8007668:	4651      	mov	r1, sl
 800766a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800766e:	4651      	mov	r1, sl
 8007670:	00ca      	lsls	r2, r1, #3
 8007672:	4610      	mov	r0, r2
 8007674:	4619      	mov	r1, r3
 8007676:	4603      	mov	r3, r0
 8007678:	4642      	mov	r2, r8
 800767a:	189b      	adds	r3, r3, r2
 800767c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007680:	464b      	mov	r3, r9
 8007682:	460a      	mov	r2, r1
 8007684:	eb42 0303 	adc.w	r3, r2, r3
 8007688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007698:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800769c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076a0:	460b      	mov	r3, r1
 80076a2:	18db      	adds	r3, r3, r3
 80076a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076a6:	4613      	mov	r3, r2
 80076a8:	eb42 0303 	adc.w	r3, r2, r3
 80076ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076b6:	f7f8 fdb3 	bl	8000220 <__aeabi_uldivmod>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <UART_SetConfig+0x2f4>)
 80076c0:	fba3 1302 	umull	r1, r3, r3, r2
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	2164      	movs	r1, #100	@ 0x64
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	3332      	adds	r3, #50	@ 0x32
 80076d2:	4a0a      	ldr	r2, [pc, #40]	@ (80076fc <UART_SetConfig+0x2f4>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	f003 0207 	and.w	r2, r3, #7
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4422      	add	r2, r4
 80076e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076e8:	e10a      	b.n	8007900 <UART_SetConfig+0x4f8>
 80076ea:	bf00      	nop
 80076ec:	40011000 	.word	0x40011000
 80076f0:	40011400 	.word	0x40011400
 80076f4:	40011800 	.word	0x40011800
 80076f8:	40011c00 	.word	0x40011c00
 80076fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007704:	2200      	movs	r2, #0
 8007706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800770a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800770e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007712:	4642      	mov	r2, r8
 8007714:	464b      	mov	r3, r9
 8007716:	1891      	adds	r1, r2, r2
 8007718:	6239      	str	r1, [r7, #32]
 800771a:	415b      	adcs	r3, r3
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
 800771e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007722:	4641      	mov	r1, r8
 8007724:	1854      	adds	r4, r2, r1
 8007726:	4649      	mov	r1, r9
 8007728:	eb43 0501 	adc.w	r5, r3, r1
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	00eb      	lsls	r3, r5, #3
 8007736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800773a:	00e2      	lsls	r2, r4, #3
 800773c:	4614      	mov	r4, r2
 800773e:	461d      	mov	r5, r3
 8007740:	4643      	mov	r3, r8
 8007742:	18e3      	adds	r3, r4, r3
 8007744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007748:	464b      	mov	r3, r9
 800774a:	eb45 0303 	adc.w	r3, r5, r3
 800774e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800775e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800776e:	4629      	mov	r1, r5
 8007770:	008b      	lsls	r3, r1, #2
 8007772:	4621      	mov	r1, r4
 8007774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007778:	4621      	mov	r1, r4
 800777a:	008a      	lsls	r2, r1, #2
 800777c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007780:	f7f8 fd4e 	bl	8000220 <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b60      	ldr	r3, [pc, #384]	@ (800790c <UART_SetConfig+0x504>)
 800778a:	fba3 2302 	umull	r2, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	011c      	lsls	r4, r3, #4
 8007792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007796:	2200      	movs	r2, #0
 8007798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800779c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	1891      	adds	r1, r2, r2
 80077aa:	61b9      	str	r1, [r7, #24]
 80077ac:	415b      	adcs	r3, r3
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077b4:	4641      	mov	r1, r8
 80077b6:	1851      	adds	r1, r2, r1
 80077b8:	6139      	str	r1, [r7, #16]
 80077ba:	4649      	mov	r1, r9
 80077bc:	414b      	adcs	r3, r1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077cc:	4659      	mov	r1, fp
 80077ce:	00cb      	lsls	r3, r1, #3
 80077d0:	4651      	mov	r1, sl
 80077d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077d6:	4651      	mov	r1, sl
 80077d8:	00ca      	lsls	r2, r1, #3
 80077da:	4610      	mov	r0, r2
 80077dc:	4619      	mov	r1, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	4642      	mov	r2, r8
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077e8:	464b      	mov	r3, r9
 80077ea:	460a      	mov	r2, r1
 80077ec:	eb42 0303 	adc.w	r3, r2, r3
 80077f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800780c:	4649      	mov	r1, r9
 800780e:	008b      	lsls	r3, r1, #2
 8007810:	4641      	mov	r1, r8
 8007812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007816:	4641      	mov	r1, r8
 8007818:	008a      	lsls	r2, r1, #2
 800781a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800781e:	f7f8 fcff 	bl	8000220 <__aeabi_uldivmod>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4611      	mov	r1, r2
 8007828:	4b38      	ldr	r3, [pc, #224]	@ (800790c <UART_SetConfig+0x504>)
 800782a:	fba3 2301 	umull	r2, r3, r3, r1
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	2264      	movs	r2, #100	@ 0x64
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	1acb      	subs	r3, r1, r3
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	3332      	adds	r3, #50	@ 0x32
 800783c:	4a33      	ldr	r2, [pc, #204]	@ (800790c <UART_SetConfig+0x504>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007848:	441c      	add	r4, r3
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	673b      	str	r3, [r7, #112]	@ 0x70
 8007852:	677a      	str	r2, [r7, #116]	@ 0x74
 8007854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	1891      	adds	r1, r2, r2
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	415b      	adcs	r3, r3
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007868:	4641      	mov	r1, r8
 800786a:	1851      	adds	r1, r2, r1
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	4649      	mov	r1, r9
 8007870:	414b      	adcs	r3, r1
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007880:	4659      	mov	r1, fp
 8007882:	00cb      	lsls	r3, r1, #3
 8007884:	4651      	mov	r1, sl
 8007886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800788a:	4651      	mov	r1, sl
 800788c:	00ca      	lsls	r2, r1, #3
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	4603      	mov	r3, r0
 8007894:	4642      	mov	r2, r8
 8007896:	189b      	adds	r3, r3, r2
 8007898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800789a:	464b      	mov	r3, r9
 800789c:	460a      	mov	r2, r1
 800789e:	eb42 0303 	adc.w	r3, r2, r3
 80078a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80078ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078bc:	4649      	mov	r1, r9
 80078be:	008b      	lsls	r3, r1, #2
 80078c0:	4641      	mov	r1, r8
 80078c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c6:	4641      	mov	r1, r8
 80078c8:	008a      	lsls	r2, r1, #2
 80078ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078ce:	f7f8 fca7 	bl	8000220 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <UART_SetConfig+0x504>)
 80078d8:	fba3 1302 	umull	r1, r3, r3, r2
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	2164      	movs	r1, #100	@ 0x64
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	3332      	adds	r3, #50	@ 0x32
 80078ea:	4a08      	ldr	r2, [pc, #32]	@ (800790c <UART_SetConfig+0x504>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4422      	add	r2, r4
 80078fe:	609a      	str	r2, [r3, #8]
}
 8007900:	bf00      	nop
 8007902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007906:	46bd      	mov	sp, r7
 8007908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790c:	51eb851f 	.word	0x51eb851f

08007910 <__NVIC_SetPriority>:
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800791c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007920:	2b00      	cmp	r3, #0
 8007922:	db0a      	blt.n	800793a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	490c      	ldr	r1, [pc, #48]	@ (800795c <__NVIC_SetPriority+0x4c>)
 800792a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792e:	0112      	lsls	r2, r2, #4
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	440b      	add	r3, r1
 8007934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007938:	e00a      	b.n	8007950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4908      	ldr	r1, [pc, #32]	@ (8007960 <__NVIC_SetPriority+0x50>)
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	3b04      	subs	r3, #4
 8007948:	0112      	lsls	r2, r2, #4
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	440b      	add	r3, r1
 800794e:	761a      	strb	r2, [r3, #24]
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	e000e100 	.word	0xe000e100
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007968:	2100      	movs	r1, #0
 800796a:	f06f 0004 	mvn.w	r0, #4
 800796e:	f7ff ffcf 	bl	8007910 <__NVIC_SetPriority>
#endif
}
 8007972:	bf00      	nop
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800797e:	f3ef 8305 	mrs	r3, IPSR
 8007982:	603b      	str	r3, [r7, #0]
  return(result);
 8007984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800798a:	f06f 0305 	mvn.w	r3, #5
 800798e:	607b      	str	r3, [r7, #4]
 8007990:	e00c      	b.n	80079ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007992:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <osKernelInitialize+0x44>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800799a:	4b08      	ldr	r3, [pc, #32]	@ (80079bc <osKernelInitialize+0x44>)
 800799c:	2201      	movs	r2, #1
 800799e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	607b      	str	r3, [r7, #4]
 80079a4:	e002      	b.n	80079ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079ac:	687b      	ldr	r3, [r7, #4]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	200005a0 	.word	0x200005a0

080079c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c6:	f3ef 8305 	mrs	r3, IPSR
 80079ca:	603b      	str	r3, [r7, #0]
  return(result);
 80079cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <osKernelStart+0x1a>
    stat = osErrorISR;
 80079d2:	f06f 0305 	mvn.w	r3, #5
 80079d6:	607b      	str	r3, [r7, #4]
 80079d8:	e010      	b.n	80079fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079da:	4b0b      	ldr	r3, [pc, #44]	@ (8007a08 <osKernelStart+0x48>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d109      	bne.n	80079f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079e2:	f7ff ffbf 	bl	8007964 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079e6:	4b08      	ldr	r3, [pc, #32]	@ (8007a08 <osKernelStart+0x48>)
 80079e8:	2202      	movs	r2, #2
 80079ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079ec:	f001 fc16 	bl	800921c <vTaskStartScheduler>
      stat = osOK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e002      	b.n	80079fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295
 80079fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079fc:	687b      	ldr	r3, [r7, #4]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200005a0 	.word	0x200005a0

08007a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08e      	sub	sp, #56	@ 0x38
 8007a10:	af04      	add	r7, sp, #16
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1c:	f3ef 8305 	mrs	r3, IPSR
 8007a20:	617b      	str	r3, [r7, #20]
  return(result);
 8007a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d17e      	bne.n	8007b26 <osThreadNew+0x11a>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d07b      	beq.n	8007b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a32:	2318      	movs	r3, #24
 8007a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d045      	beq.n	8007ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <osThreadNew+0x48>
        name = attr->name;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <osThreadNew+0x6e>
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b38      	cmp	r3, #56	@ 0x38
 8007a6c:	d805      	bhi.n	8007a7a <osThreadNew+0x6e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <osThreadNew+0x72>
        return (NULL);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e054      	b.n	8007b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <osThreadNew+0xa8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a9c:	d90a      	bls.n	8007ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d006      	beq.n	8007ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <osThreadNew+0xa8>
        mem = 1;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e010      	b.n	8007ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <osThreadNew+0xca>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <osThreadNew+0xca>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <osThreadNew+0xca>
          mem = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	e001      	b.n	8007ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d110      	bne.n	8007afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ae4:	9202      	str	r2, [sp, #8]
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6a3a      	ldr	r2, [r7, #32]
 8007af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f001 f9b6 	bl	8008e64 <xTaskCreateStatic>
 8007af8:	4603      	mov	r3, r0
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	e013      	b.n	8007b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d110      	bne.n	8007b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f107 0310 	add.w	r3, r7, #16
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f001 fa04 	bl	8008f24 <xTaskCreate>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <osThreadNew+0x11a>
            hTask = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b26:	693b      	ldr	r3, [r7, #16]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	@ 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b38:	f3ef 8305 	mrs	r3, IPSR
 8007b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <osDelay+0x1c>
    stat = osErrorISR;
 8007b44:	f06f 0305 	mvn.w	r3, #5
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e007      	b.n	8007b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fb2a 	bl	80091b0 <vTaskDelay>
    }
  }

  return (stat);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b088      	sub	sp, #32
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b72:	f3ef 8305 	mrs	r3, IPSR
 8007b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d174      	bne.n	8007c68 <osMutexNew+0x102>
    if (attr != NULL) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	e001      	b.n	8007b90 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <osMutexNew+0x3a>
      rmtx = 1U;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e001      	b.n	8007ba4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d15c      	bne.n	8007c68 <osMutexNew+0x102>
      mem = -1;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d015      	beq.n	8007be6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <osMutexNew+0x6a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b4f      	cmp	r3, #79	@ 0x4f
 8007bc8:	d902      	bls.n	8007bd0 <osMutexNew+0x6a>
          mem = 1;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e00c      	b.n	8007bea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d108      	bne.n	8007bea <osMutexNew+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <osMutexNew+0x84>
            mem = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	e001      	b.n	8007bea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d112      	bne.n	8007c16 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	f000 fb92 	bl	8008326 <xQueueCreateMutexStatic>
 8007c02:	61f8      	str	r0, [r7, #28]
 8007c04:	e016      	b.n	8007c34 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	f000 fb8a 	bl	8008326 <xQueueCreateMutexStatic>
 8007c12:	61f8      	str	r0, [r7, #28]
 8007c14:	e00e      	b.n	8007c34 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c22:	2004      	movs	r0, #4
 8007c24:	f000 fb67 	bl	80082f6 <xQueueCreateMutex>
 8007c28:	61f8      	str	r0, [r7, #28]
 8007c2a:	e003      	b.n	8007c34 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f000 fb62 	bl	80082f6 <xQueueCreateMutex>
 8007c32:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00c      	beq.n	8007c54 <osMutexNew+0xee>
        if (attr != NULL) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <osMutexNew+0xe2>
          name = attr->name;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e001      	b.n	8007c4c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	69f8      	ldr	r0, [r7, #28]
 8007c50:	f001 f8aa 	bl	8008da8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d006      	beq.n	8007c68 <osMutexNew+0x102>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007c68:	69fb      	ldr	r3, [r7, #28]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f023 0301 	bic.w	r3, r3, #1
 8007c82:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c90:	f3ef 8305 	mrs	r3, IPSR
 8007c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c96:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007c9c:	f06f 0305 	mvn.w	r3, #5
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e02c      	b.n	8007cfe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007caa:	f06f 0303 	mvn.w	r3, #3
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e025      	b.n	8007cfe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d011      	beq.n	8007cdc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	f000 fb83 	bl	80083c6 <xQueueTakeMutexRecursive>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d01b      	beq.n	8007cfe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007ccc:	f06f 0301 	mvn.w	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	e014      	b.n	8007cfe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007cd4:	f06f 0302 	mvn.w	r3, #2
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	e010      	b.n	8007cfe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6938      	ldr	r0, [r7, #16]
 8007ce0:	f000 fe2a 	bl	8008938 <xQueueSemaphoreTake>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d009      	beq.n	8007cfe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007cf0:	f06f 0301 	mvn.w	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e002      	b.n	8007cfe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007cf8:	f06f 0302 	mvn.w	r3, #2
 8007cfc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007cfe:	697b      	ldr	r3, [r7, #20]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d24:	f3ef 8305 	mrs	r3, IPSR
 8007d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007d30:	f06f 0305 	mvn.w	r3, #5
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e01f      	b.n	8007d78 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007d3e:	f06f 0303 	mvn.w	r3, #3
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e018      	b.n	8007d78 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d009      	beq.n	8007d60 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007d4c:	6938      	ldr	r0, [r7, #16]
 8007d4e:	f000 fb05 	bl	800835c <xQueueGiveMutexRecursive>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d00f      	beq.n	8007d78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d58:	f06f 0302 	mvn.w	r3, #2
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	e00b      	b.n	8007d78 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6938      	ldr	r0, [r7, #16]
 8007d68:	f000 fb64 	bl	8008434 <xQueueGenericSend>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d002      	beq.n	8007d78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d72:	f06f 0302 	mvn.w	r3, #2
 8007d76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007d78:	697b      	ldr	r3, [r7, #20]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b08a      	sub	sp, #40	@ 0x28
 8007d86:	af02      	add	r7, sp, #8
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d92:	f3ef 8305 	mrs	r3, IPSR
 8007d96:	613b      	str	r3, [r7, #16]
  return(result);
 8007d98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d15f      	bne.n	8007e5e <osMessageQueueNew+0xdc>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d05c      	beq.n	8007e5e <osMessageQueueNew+0xdc>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d059      	beq.n	8007e5e <osMessageQueueNew+0xdc>
    mem = -1;
 8007daa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d029      	beq.n	8007e0a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <osMessageQueueNew+0x62>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	2b4f      	cmp	r3, #79	@ 0x4f
 8007dc4:	d90e      	bls.n	8007de4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <osMessageQueueNew+0x62>
        mem = 1;
 8007dde:	2301      	movs	r3, #1
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e014      	b.n	8007e0e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <osMessageQueueNew+0x8c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d104      	bne.n	8007e0e <osMessageQueueNew+0x8c>
          mem = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	e001      	b.n	8007e0e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d10b      	bne.n	8007e2c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f972 	bl	800810c <xQueueGenericCreateStatic>
 8007e28:	61f8      	str	r0, [r7, #28]
 8007e2a:	e008      	b.n	8007e3e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007e32:	2200      	movs	r2, #0
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f9e5 	bl	8008206 <xQueueGenericCreate>
 8007e3c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e001      	b.n	8007e56 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e56:	6979      	ldr	r1, [r7, #20]
 8007e58:	69f8      	ldr	r0, [r7, #28]
 8007e5a:	f000 ffa5 	bl	8008da8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e5e:	69fb      	ldr	r3, [r7, #28]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a07      	ldr	r2, [pc, #28]	@ (8007e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4a06      	ldr	r2, [pc, #24]	@ (8007e98 <vApplicationGetIdleTaskMemory+0x30>)
 8007e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2280      	movs	r2, #128	@ 0x80
 8007e84:	601a      	str	r2, [r3, #0]
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	200005a4 	.word	0x200005a4
 8007e98:	20000600 	.word	0x20000600

08007e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a07      	ldr	r2, [pc, #28]	@ (8007ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4a06      	ldr	r2, [pc, #24]	@ (8007ecc <vApplicationGetTimerTaskMemory+0x30>)
 8007eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eba:	601a      	str	r2, [r3, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	20000800 	.word	0x20000800
 8007ecc:	2000085c 	.word	0x2000085c

08007ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f103 0208 	add.w	r2, r3, #8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f103 0208 	add.w	r2, r3, #8
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f103 0208 	add.w	r2, r3, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f88:	d103      	bne.n	8007f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e00c      	b.n	8007fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3308      	adds	r3, #8
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e002      	b.n	8007fa0 <vListInsert+0x2e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d2f6      	bcs.n	8007f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6892      	ldr	r2, [r2, #8]
 8007ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6852      	ldr	r2, [r2, #4]
 8008004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d103      	bne.n	8008018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1e5a      	subs	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008064:	f002 fba8 	bl	800a7b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	441a      	add	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008094:	3b01      	subs	r3, #1
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	441a      	add	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	22ff      	movs	r2, #255	@ 0xff
 80080a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	22ff      	movs	r2, #255	@ 0xff
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d114      	bne.n	80080e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01a      	beq.n	80080f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3310      	adds	r3, #16
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fb36 	bl	8009738 <xTaskRemoveFromEventList>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d012      	beq.n	80080f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <xQueueGenericReset+0xd0>)
 80080d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	e009      	b.n	80080f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3310      	adds	r3, #16
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fef1 	bl	8007ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3324      	adds	r3, #36	@ 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff feec 	bl	8007ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080f8:	f002 fb90 	bl	800a81c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080fc:	2301      	movs	r3, #1
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	@ 0x38
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10b      	bne.n	8008138 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10b      	bne.n	8008156 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <xQueueGenericCreateStatic+0x56>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <xQueueGenericCreateStatic+0x5a>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericCreateStatic+0x5c>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	623b      	str	r3, [r7, #32]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <xQueueGenericCreateStatic+0x84>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <xQueueGenericCreateStatic+0x88>
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <xQueueGenericCreateStatic+0x8a>
 8008194:	2300      	movs	r3, #0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10b      	bne.n	80081b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	61fb      	str	r3, [r7, #28]
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	e7fd      	b.n	80081ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081b2:	2350      	movs	r3, #80	@ 0x50
 80081b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b50      	cmp	r3, #80	@ 0x50
 80081ba:	d00b      	beq.n	80081d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	61bb      	str	r3, [r7, #24]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80081da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00d      	beq.n	80081fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 f840 	bl	800827c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3730      	adds	r7, #48	@ 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008206:	b580      	push	{r7, lr}
 8008208:	b08a      	sub	sp, #40	@ 0x28
 800820a:	af02      	add	r7, sp, #8
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	4613      	mov	r3, r2
 8008212:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <xQueueGenericCreate+0x2c>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	613b      	str	r3, [r7, #16]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	fb02 f303 	mul.w	r3, r2, r3
 800823a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	3350      	adds	r3, #80	@ 0x50
 8008240:	4618      	mov	r0, r3
 8008242:	f002 fbdb 	bl	800a9fc <pvPortMalloc>
 8008246:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d011      	beq.n	8008272 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	3350      	adds	r3, #80	@ 0x50
 8008256:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008260:	79fa      	ldrb	r2, [r7, #7]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f805 	bl	800827c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008272:	69bb      	ldr	r3, [r7, #24]
	}
 8008274:	4618      	mov	r0, r3
 8008276:	3720      	adds	r7, #32
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	e002      	b.n	800829e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082aa:	2101      	movs	r1, #1
 80082ac:	69b8      	ldr	r0, [r7, #24]
 80082ae:	f7ff fec3 	bl	8008038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082e2:	2300      	movs	r3, #0
 80082e4:	2200      	movs	r2, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8a3 	bl	8008434 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	4603      	mov	r3, r0
 80082fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	461a      	mov	r2, r3
 800830c:	6939      	ldr	r1, [r7, #16]
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f7ff ff79 	bl	8008206 <xQueueGenericCreate>
 8008314:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff ffd3 	bl	80082c2 <prvInitialiseMutex>

		return xNewQueue;
 800831c:	68fb      	ldr	r3, [r7, #12]
	}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af02      	add	r7, sp, #8
 800832c:	4603      	mov	r3, r0
 800832e:	6039      	str	r1, [r7, #0]
 8008330:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008332:	2301      	movs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2200      	movs	r2, #0
 8008342:	6939      	ldr	r1, [r7, #16]
 8008344:	6978      	ldr	r0, [r7, #20]
 8008346:	f7ff fee1 	bl	800810c <xQueueGenericCreateStatic>
 800834a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff ffb8 	bl	80082c2 <prvInitialiseMutex>

		return xNewQueue;
 8008352:	68fb      	ldr	r3, [r7, #12]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	689c      	ldr	r4, [r3, #8]
 800838a:	f001 fb95 	bl	8009ab8 <xTaskGetCurrentTaskHandle>
 800838e:	4603      	mov	r3, r0
 8008390:	429c      	cmp	r4, r3
 8008392:	d111      	bne.n	80083b8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d105      	bne.n	80083b2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80083a6:	2300      	movs	r3, #0
 80083a8:	2200      	movs	r2, #0
 80083aa:	2100      	movs	r1, #0
 80083ac:	6938      	ldr	r0, [r7, #16]
 80083ae:	f000 f841 	bl	8008434 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80083b2:	2301      	movs	r3, #1
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e001      	b.n	80083bc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80083bc:	697b      	ldr	r3, [r7, #20]
	}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}

080083c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80083c6:	b590      	push	{r4, r7, lr}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60fb      	str	r3, [r7, #12]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	689c      	ldr	r4, [r3, #8]
 80083f6:	f001 fb5f 	bl	8009ab8 <xTaskGetCurrentTaskHandle>
 80083fa:	4603      	mov	r3, r0
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d107      	bne.n	8008410 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800840a:	2301      	movs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e00c      	b.n	800842a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6938      	ldr	r0, [r7, #16]
 8008414:	f000 fa90 	bl	8008938 <xQueueSemaphoreTake>
 8008418:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800842a:	697b      	ldr	r3, [r7, #20]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	bd90      	pop	{r4, r7, pc}

08008434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	@ 0x38
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008442:	2300      	movs	r3, #0
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <xQueueGenericSend+0x34>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <xQueueGenericSend+0x42>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <xQueueGenericSend+0x46>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <xQueueGenericSend+0x48>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <xQueueGenericSend+0x64>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d103      	bne.n	80084a6 <xQueueGenericSend+0x72>
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <xQueueGenericSend+0x76>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueGenericSend+0x78>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10b      	bne.n	80084c8 <xQueueGenericSend+0x94>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	623b      	str	r3, [r7, #32]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084c8:	f001 fb06 	bl	8009ad8 <xTaskGetSchedulerState>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d102      	bne.n	80084d8 <xQueueGenericSend+0xa4>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <xQueueGenericSend+0xa8>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <xQueueGenericSend+0xaa>
 80084dc:	2300      	movs	r3, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10b      	bne.n	80084fa <xQueueGenericSend+0xc6>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61fb      	str	r3, [r7, #28]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084fa:	f002 f95d 	bl	800a7b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <xQueueGenericSend+0xdc>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d129      	bne.n	8008564 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008516:	f000 fb37 	bl	8008b88 <prvCopyDataToQueue>
 800851a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	3324      	adds	r3, #36	@ 0x24
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f905 	bl	8009738 <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d013      	beq.n	800855c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008534:	4b3f      	ldr	r3, [pc, #252]	@ (8008634 <xQueueGenericSend+0x200>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e00a      	b.n	800855c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800854c:	4b39      	ldr	r3, [pc, #228]	@ (8008634 <xQueueGenericSend+0x200>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800855c:	f002 f95e 	bl	800a81c <vPortExitCritical>
				return pdPASS;
 8008560:	2301      	movs	r3, #1
 8008562:	e063      	b.n	800862c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800856a:	f002 f957 	bl	800a81c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800856e:	2300      	movs	r3, #0
 8008570:	e05c      	b.n	800862c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f93f 	bl	8009800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008582:	2301      	movs	r3, #1
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008586:	f002 f949 	bl	800a81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800858a:	f000 feaf 	bl	80092ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858e:	f002 f913 	bl	800a7b8 <vPortEnterCritical>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008598:	b25b      	sxtb	r3, r3
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d103      	bne.n	80085a8 <xQueueGenericSend+0x174>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d103      	bne.n	80085be <xQueueGenericSend+0x18a>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085be:	f002 f92d 	bl	800a81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c2:	1d3a      	adds	r2, r7, #4
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 f92e 	bl	800982c <xTaskCheckForTimeOut>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d124      	bne.n	8008620 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085d8:	f000 fbce 	bl	8008d78 <prvIsQueueFull>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d018      	beq.n	8008614 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	3310      	adds	r3, #16
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f852 	bl	8009694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085f2:	f000 fb59 	bl	8008ca8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085f6:	f000 fe87 	bl	8009308 <xTaskResumeAll>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af7c 	bne.w	80084fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008602:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <xQueueGenericSend+0x200>)
 8008604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	e772      	b.n	80084fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008616:	f000 fb47 	bl	8008ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800861a:	f000 fe75 	bl	8009308 <xTaskResumeAll>
 800861e:	e76c      	b.n	80084fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008622:	f000 fb41 	bl	8008ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008626:	f000 fe6f 	bl	8009308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800862a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800862c:	4618      	mov	r0, r3
 800862e:	3738      	adds	r7, #56	@ 0x38
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b090      	sub	sp, #64	@ 0x40
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800864a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <xQueueGenericSendFromISR+0x3e>
 800866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <xQueueGenericSendFromISR+0x42>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <xQueueGenericSendFromISR+0x44>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d103      	bne.n	80086a6 <xQueueGenericSendFromISR+0x6e>
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <xQueueGenericSendFromISR+0x72>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <xQueueGenericSendFromISR+0x74>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	623b      	str	r3, [r7, #32]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086c8:	f002 f956 	bl	800a978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086cc:	f3ef 8211 	mrs	r2, BASEPRI
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61fa      	str	r2, [r7, #28]
 80086e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <xQueueGenericSendFromISR+0xc2>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d12f      	bne.n	800875a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008700:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008710:	f000 fa3a 	bl	8008b88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008714:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871c:	d112      	bne.n	8008744 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d016      	beq.n	8008754 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	3324      	adds	r3, #36	@ 0x24
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f804 	bl	8009738 <xTaskRemoveFromEventList>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	e007      	b.n	8008754 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008748:	3301      	adds	r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	b25a      	sxtb	r2, r3
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008758:	e001      	b.n	800875e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800875a:	2300      	movs	r3, #0
 800875c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800875e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008760:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800876a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800876c:	4618      	mov	r0, r3
 800876e:	3740      	adds	r7, #64	@ 0x40
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	@ 0x30
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10b      	bne.n	80087a6 <xQueueReceive+0x32>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	623b      	str	r3, [r7, #32]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueReceive+0x40>
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <xQueueReceive+0x44>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <xQueueReceive+0x46>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10b      	bne.n	80087d6 <xQueueReceive+0x62>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61fb      	str	r3, [r7, #28]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087d6:	f001 f97f 	bl	8009ad8 <xTaskGetSchedulerState>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <xQueueReceive+0x72>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <xQueueReceive+0x76>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <xQueueReceive+0x78>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <xQueueReceive+0x94>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	61bb      	str	r3, [r7, #24]
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	e7fd      	b.n	8008804 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008808:	f001 ffd6 	bl	800a7b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01f      	beq.n	8008858 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881c:	f000 fa1e 	bl	8008c5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	1e5a      	subs	r2, r3, #1
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00f      	beq.n	8008850 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	3310      	adds	r3, #16
 8008834:	4618      	mov	r0, r3
 8008836:	f000 ff7f 	bl	8009738 <xTaskRemoveFromEventList>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008840:	4b3c      	ldr	r3, [pc, #240]	@ (8008934 <xQueueReceive+0x1c0>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008850:	f001 ffe4 	bl	800a81c <vPortExitCritical>
				return pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	e069      	b.n	800892c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800885e:	f001 ffdd 	bl	800a81c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008862:	2300      	movs	r3, #0
 8008864:	e062      	b.n	800892c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886c:	f107 0310 	add.w	r3, r7, #16
 8008870:	4618      	mov	r0, r3
 8008872:	f000 ffc5 	bl	8009800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887a:	f001 ffcf 	bl	800a81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800887e:	f000 fd35 	bl	80092ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008882:	f001 ff99 	bl	800a7b8 <vPortEnterCritical>
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d103      	bne.n	800889c <xQueueReceive+0x128>
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d103      	bne.n	80088b2 <xQueueReceive+0x13e>
 80088aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b2:	f001 ffb3 	bl	800a81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b6:	1d3a      	adds	r2, r7, #4
 80088b8:	f107 0310 	add.w	r3, r7, #16
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 ffb4 	bl	800982c <xTaskCheckForTimeOut>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d123      	bne.n	8008912 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088cc:	f000 fa3e 	bl	8008d4c <prvIsQueueEmpty>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d017      	beq.n	8008906 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	3324      	adds	r3, #36	@ 0x24
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fed8 	bl	8009694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e6:	f000 f9df 	bl	8008ca8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088ea:	f000 fd0d 	bl	8009308 <xTaskResumeAll>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d189      	bne.n	8008808 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80088f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008934 <xQueueReceive+0x1c0>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	e780      	b.n	8008808 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008908:	f000 f9ce 	bl	8008ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800890c:	f000 fcfc 	bl	8009308 <xTaskResumeAll>
 8008910:	e77a      	b.n	8008808 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008914:	f000 f9c8 	bl	8008ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008918:	f000 fcf6 	bl	8009308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800891c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800891e:	f000 fa15 	bl	8008d4c <prvIsQueueEmpty>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	f43f af6f 	beq.w	8008808 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800892a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800892c:	4618      	mov	r0, r3
 800892e:	3730      	adds	r7, #48	@ 0x30
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	e000ed04 	.word	0xe000ed04

08008938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08e      	sub	sp, #56	@ 0x38
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800894a:	2300      	movs	r3, #0
 800894c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800894e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	623b      	str	r3, [r7, #32]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	61fb      	str	r3, [r7, #28]
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800898c:	f001 f8a4 	bl	8009ad8 <xTaskGetSchedulerState>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <xQueueSemaphoreTake+0x64>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <xQueueSemaphoreTake+0x68>
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <xQueueSemaphoreTake+0x6a>
 80089a0:	2300      	movs	r3, #0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10b      	bne.n	80089be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	61bb      	str	r3, [r7, #24]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089be:	f001 fefb 	bl	800a7b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d024      	beq.n	8008a18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089de:	f001 f9f5 	bl	8009dcc <pvTaskIncrementMutexHeldCount>
 80089e2:	4602      	mov	r2, r0
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00f      	beq.n	8008a10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	3310      	adds	r3, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fe9f 	bl	8009738 <xTaskRemoveFromEventList>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a00:	4b54      	ldr	r3, [pc, #336]	@ (8008b54 <xQueueSemaphoreTake+0x21c>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a10:	f001 ff04 	bl	800a81c <vPortExitCritical>
				return pdPASS;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e098      	b.n	8008b4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d112      	bne.n	8008a44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	617b      	str	r3, [r7, #20]
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a3c:	f001 feee 	bl	800a81c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a40:	2300      	movs	r3, #0
 8008a42:	e082      	b.n	8008b4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a4a:	f107 030c 	add.w	r3, r7, #12
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fed6 	bl	8009800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a58:	f001 fee0 	bl	800a81c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a5c:	f000 fc46 	bl	80092ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a60:	f001 feaa 	bl	800a7b8 <vPortEnterCritical>
 8008a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a6a:	b25b      	sxtb	r3, r3
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d103      	bne.n	8008a7a <xQueueSemaphoreTake+0x142>
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d103      	bne.n	8008a90 <xQueueSemaphoreTake+0x158>
 8008a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a90:	f001 fec4 	bl	800a81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a94:	463a      	mov	r2, r7
 8008a96:	f107 030c 	add.w	r3, r7, #12
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fec5 	bl	800982c <xTaskCheckForTimeOut>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d132      	bne.n	8008b0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008aaa:	f000 f94f 	bl	8008d4c <prvIsQueueEmpty>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d026      	beq.n	8008b02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d109      	bne.n	8008ad0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008abc:	f001 fe7c 	bl	800a7b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f825 	bl	8009b14 <xTaskPriorityInherit>
 8008aca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008acc:	f001 fea6 	bl	800a81c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad2:	3324      	adds	r3, #36	@ 0x24
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fddb 	bl	8009694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ae0:	f000 f8e2 	bl	8008ca8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ae4:	f000 fc10 	bl	8009308 <xTaskResumeAll>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f47f af67 	bne.w	80089be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008af0:	4b18      	ldr	r3, [pc, #96]	@ (8008b54 <xQueueSemaphoreTake+0x21c>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	e75d      	b.n	80089be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b04:	f000 f8d0 	bl	8008ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b08:	f000 fbfe 	bl	8009308 <xTaskResumeAll>
 8008b0c:	e757      	b.n	80089be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b10:	f000 f8ca 	bl	8008ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b14:	f000 fbf8 	bl	8009308 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b1a:	f000 f917 	bl	8008d4c <prvIsQueueEmpty>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f43f af4c 	beq.w	80089be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00d      	beq.n	8008b48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b2c:	f001 fe44 	bl	800a7b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b32:	f000 f811 	bl	8008b58 <prvGetDisinheritPriorityAfterTimeout>
 8008b36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f8c0 	bl	8009cc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b44:	f001 fe6a 	bl	800a81c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3738      	adds	r7, #56	@ 0x38
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	e000ed04 	.word	0xe000ed04

08008b58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d006      	beq.n	8008b76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e001      	b.n	8008b7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10d      	bne.n	8008bc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d14d      	bne.n	8008c4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 f816 	bl	8009be4 <xTaskPriorityDisinherit>
 8008bb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	e043      	b.n	8008c4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d119      	bne.n	8008bfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6858      	ldr	r0, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	f002 f940 	bl	800ae58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be0:	441a      	add	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d32b      	bcc.n	8008c4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	e026      	b.n	8008c4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68d8      	ldr	r0, [r3, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c04:	461a      	mov	r2, r3
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	f002 f926 	bl	800ae58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c14:	425b      	negs	r3, r3
 8008c16:	441a      	add	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d207      	bcs.n	8008c38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c30:	425b      	negs	r3, r3
 8008c32:	441a      	add	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d105      	bne.n	8008c4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c52:	697b      	ldr	r3, [r7, #20]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d018      	beq.n	8008ca0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	441a      	add	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d303      	bcc.n	8008c90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68d9      	ldr	r1, [r3, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6838      	ldr	r0, [r7, #0]
 8008c9c:	f002 f8dc 	bl	800ae58 <memcpy>
	}
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cb0:	f001 fd82 	bl	800a7b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cbc:	e011      	b.n	8008ce2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d012      	beq.n	8008cec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3324      	adds	r3, #36	@ 0x24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fd34 	bl	8009738 <xTaskRemoveFromEventList>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cd6:	f000 fe0d 	bl	80098f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dce9      	bgt.n	8008cbe <prvUnlockQueue+0x16>
 8008cea:	e000      	b.n	8008cee <prvUnlockQueue+0x46>
					break;
 8008cec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	22ff      	movs	r2, #255	@ 0xff
 8008cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008cf6:	f001 fd91 	bl	800a81c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cfa:	f001 fd5d 	bl	800a7b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d06:	e011      	b.n	8008d2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d012      	beq.n	8008d36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3310      	adds	r3, #16
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fd0f 	bl	8009738 <xTaskRemoveFromEventList>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d20:	f000 fde8 	bl	80098f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dce9      	bgt.n	8008d08 <prvUnlockQueue+0x60>
 8008d34:	e000      	b.n	8008d38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	22ff      	movs	r2, #255	@ 0xff
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d40:	f001 fd6c 	bl	800a81c <vPortExitCritical>
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d54:	f001 fd30 	bl	800a7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e001      	b.n	8008d6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d6a:	f001 fd57 	bl	800a81c <vPortExitCritical>

	return xReturn;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d80:	f001 fd1a 	bl	800a7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d102      	bne.n	8008d96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e001      	b.n	8008d9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d9a:	f001 fd3f 	bl	800a81c <vPortExitCritical>

	return xReturn;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e014      	b.n	8008de2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008db8:	4a0f      	ldr	r2, [pc, #60]	@ (8008df8 <vQueueAddToRegistry+0x50>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10b      	bne.n	8008ddc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dc4:	490c      	ldr	r1, [pc, #48]	@ (8008df8 <vQueueAddToRegistry+0x50>)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dce:	4a0a      	ldr	r2, [pc, #40]	@ (8008df8 <vQueueAddToRegistry+0x50>)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	4413      	add	r3, r2
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008dda:	e006      	b.n	8008dea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b07      	cmp	r3, #7
 8008de6:	d9e7      	bls.n	8008db8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000c5c 	.word	0x20000c5c

08008dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e0c:	f001 fcd4 	bl	800a7b8 <vPortEnterCritical>
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d103      	bne.n	8008e26 <vQueueWaitForMessageRestricted+0x2a>
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e32:	d103      	bne.n	8008e3c <vQueueWaitForMessageRestricted+0x40>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e3c:	f001 fcee 	bl	800a81c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	3324      	adds	r3, #36	@ 0x24
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fc45 	bl	80096e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e56:	6978      	ldr	r0, [r7, #20]
 8008e58:	f7ff ff26 	bl	8008ca8 <prvUnlockQueue>
	}
 8008e5c:	bf00      	nop
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08e      	sub	sp, #56	@ 0x38
 8008e68:	af04      	add	r7, sp, #16
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10b      	bne.n	8008e90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	623b      	str	r3, [r7, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10b      	bne.n	8008eae <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	61fb      	str	r3, [r7, #28]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eae:	235c      	movs	r3, #92	@ 0x5c
 8008eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008eb6:	d00b      	beq.n	8008ed0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	61bb      	str	r3, [r7, #24]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ed0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01e      	beq.n	8008f16 <xTaskCreateStatic+0xb2>
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01b      	beq.n	8008f16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ee6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f850 	bl	8008fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f10:	f000 f8de 	bl	80090d0 <prvAddNewTaskToReadyList>
 8008f14:	e001      	b.n	8008f1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f1a:	697b      	ldr	r3, [r7, #20]
	}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3728      	adds	r7, #40	@ 0x28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	@ 0x30
 8008f28:	af04      	add	r7, sp, #16
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fd5f 	bl	800a9fc <pvPortMalloc>
 8008f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00e      	beq.n	8008f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f46:	205c      	movs	r0, #92	@ 0x5c
 8008f48:	f001 fd58 	bl	800a9fc <pvPortMalloc>
 8008f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f5a:	e005      	b.n	8008f68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f5c:	6978      	ldr	r0, [r7, #20]
 8008f5e:	f001 fe1b 	bl	800ab98 <vPortFree>
 8008f62:	e001      	b.n	8008f68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d017      	beq.n	8008f9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f76:	88fa      	ldrh	r2, [r7, #6]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	9302      	str	r3, [sp, #8]
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	9301      	str	r3, [sp, #4]
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f80e 	bl	8008fae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f92:	69f8      	ldr	r0, [r7, #28]
 8008f94:	f000 f89c 	bl	80090d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	e002      	b.n	8008fa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3720      	adds	r7, #32
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b088      	sub	sp, #32
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	21a5      	movs	r1, #165	@ 0xa5
 8008fc8:	f001 ff06 	bl	800add8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	f023 0307 	bic.w	r3, r3, #7
 8008fe4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	617b      	str	r3, [r7, #20]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d01f      	beq.n	800904e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	e012      	b.n	800903a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	7819      	ldrb	r1, [r3, #0]
 800901c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	4413      	add	r3, r2
 8009022:	3334      	adds	r3, #52	@ 0x34
 8009024:	460a      	mov	r2, r1
 8009026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	2b0f      	cmp	r3, #15
 800903e:	d9e9      	bls.n	8009014 <prvInitialiseNewTask+0x66>
 8009040:	e000      	b.n	8009044 <prvInitialiseNewTask+0x96>
			{
				break;
 8009042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800904c:	e003      	b.n	8009056 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	2b37      	cmp	r3, #55	@ 0x37
 800905a:	d901      	bls.n	8009060 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800905c:	2337      	movs	r3, #55	@ 0x37
 800905e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009064:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800906a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800906c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906e:	2200      	movs	r2, #0
 8009070:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	3304      	adds	r3, #4
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe ff4a 	bl	8007f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800907c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907e:	3318      	adds	r3, #24
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe ff45 	bl	8007f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	68f9      	ldr	r1, [r7, #12]
 80090ae:	69b8      	ldr	r0, [r7, #24]
 80090b0:	f001 fa4e 	bl	800a550 <pxPortInitialiseStack>
 80090b4:	4602      	mov	r2, r0
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c6:	bf00      	nop
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090d8:	f001 fb6e 	bl	800a7b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090dc:	4b2d      	ldr	r3, [pc, #180]	@ (8009194 <prvAddNewTaskToReadyList+0xc4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3301      	adds	r3, #1
 80090e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009194 <prvAddNewTaskToReadyList+0xc4>)
 80090e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009198 <prvAddNewTaskToReadyList+0xc8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009198 <prvAddNewTaskToReadyList+0xc8>)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090f4:	4b27      	ldr	r3, [pc, #156]	@ (8009194 <prvAddNewTaskToReadyList+0xc4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d110      	bne.n	800911e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090fc:	f000 fc1e 	bl	800993c <prvInitialiseTaskLists>
 8009100:	e00d      	b.n	800911e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009102:	4b26      	ldr	r3, [pc, #152]	@ (800919c <prvAddNewTaskToReadyList+0xcc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800910a:	4b23      	ldr	r3, [pc, #140]	@ (8009198 <prvAddNewTaskToReadyList+0xc8>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	429a      	cmp	r2, r3
 8009116:	d802      	bhi.n	800911e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009118:	4a1f      	ldr	r2, [pc, #124]	@ (8009198 <prvAddNewTaskToReadyList+0xc8>)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800911e:	4b20      	ldr	r3, [pc, #128]	@ (80091a0 <prvAddNewTaskToReadyList+0xd0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	4a1e      	ldr	r2, [pc, #120]	@ (80091a0 <prvAddNewTaskToReadyList+0xd0>)
 8009126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009128:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <prvAddNewTaskToReadyList+0xd0>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009134:	4b1b      	ldr	r3, [pc, #108]	@ (80091a4 <prvAddNewTaskToReadyList+0xd4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d903      	bls.n	8009144 <prvAddNewTaskToReadyList+0x74>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	4a18      	ldr	r2, [pc, #96]	@ (80091a4 <prvAddNewTaskToReadyList+0xd4>)
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a15      	ldr	r2, [pc, #84]	@ (80091a8 <prvAddNewTaskToReadyList+0xd8>)
 8009152:	441a      	add	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe fee5 	bl	8007f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009160:	f001 fb5c 	bl	800a81c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <prvAddNewTaskToReadyList+0xcc>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00e      	beq.n	800918a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800916c:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <prvAddNewTaskToReadyList+0xc8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	429a      	cmp	r2, r3
 8009178:	d207      	bcs.n	800918a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800917a:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <prvAddNewTaskToReadyList+0xdc>)
 800917c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20001170 	.word	0x20001170
 8009198:	20000c9c 	.word	0x20000c9c
 800919c:	2000117c 	.word	0x2000117c
 80091a0:	2000118c 	.word	0x2000118c
 80091a4:	20001178 	.word	0x20001178
 80091a8:	20000ca0 	.word	0x20000ca0
 80091ac:	e000ed04 	.word	0xe000ed04

080091b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d018      	beq.n	80091f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091c2:	4b14      	ldr	r3, [pc, #80]	@ (8009214 <vTaskDelay+0x64>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <vTaskDelay+0x32>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	60bb      	str	r3, [r7, #8]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091e2:	f000 f883 	bl	80092ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091e6:	2100      	movs	r1, #0
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fe03 	bl	8009df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091ee:	f000 f88b 	bl	8009308 <xTaskResumeAll>
 80091f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d107      	bne.n	800920a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80091fa:	4b07      	ldr	r3, [pc, #28]	@ (8009218 <vTaskDelay+0x68>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20001198 	.word	0x20001198
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	@ 0x28
 8009220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800922a:	463a      	mov	r2, r7
 800922c:	1d39      	adds	r1, r7, #4
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fe18 	bl	8007e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	9202      	str	r2, [sp, #8]
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	460a      	mov	r2, r1
 800924a:	4922      	ldr	r1, [pc, #136]	@ (80092d4 <vTaskStartScheduler+0xb8>)
 800924c:	4822      	ldr	r0, [pc, #136]	@ (80092d8 <vTaskStartScheduler+0xbc>)
 800924e:	f7ff fe09 	bl	8008e64 <xTaskCreateStatic>
 8009252:	4603      	mov	r3, r0
 8009254:	4a21      	ldr	r2, [pc, #132]	@ (80092dc <vTaskStartScheduler+0xc0>)
 8009256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009258:	4b20      	ldr	r3, [pc, #128]	@ (80092dc <vTaskStartScheduler+0xc0>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009260:	2301      	movs	r3, #1
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	e001      	b.n	800926a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d102      	bne.n	8009276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009270:	f000 fe14 	bl	8009e9c <xTimerCreateTimerTask>
 8009274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d116      	bne.n	80092aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	613b      	str	r3, [r7, #16]
}
 800928e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009290:	4b13      	ldr	r3, [pc, #76]	@ (80092e0 <vTaskStartScheduler+0xc4>)
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009298:	4b12      	ldr	r3, [pc, #72]	@ (80092e4 <vTaskStartScheduler+0xc8>)
 800929a:	2201      	movs	r2, #1
 800929c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800929e:	4b12      	ldr	r3, [pc, #72]	@ (80092e8 <vTaskStartScheduler+0xcc>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092a4:	f001 f9e4 	bl	800a670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092a8:	e00f      	b.n	80092ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d10b      	bne.n	80092ca <vTaskStartScheduler+0xae>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60fb      	str	r3, [r7, #12]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <vTaskStartScheduler+0xaa>
}
 80092ca:	bf00      	nop
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0800af10 	.word	0x0800af10
 80092d8:	0800990d 	.word	0x0800990d
 80092dc:	20001194 	.word	0x20001194
 80092e0:	20001190 	.word	0x20001190
 80092e4:	2000117c 	.word	0x2000117c
 80092e8:	20001174 	.word	0x20001174

080092ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092f0:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <vTaskSuspendAll+0x18>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a03      	ldr	r2, [pc, #12]	@ (8009304 <vTaskSuspendAll+0x18>)
 80092f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092fa:	bf00      	nop
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20001198 	.word	0x20001198

08009308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009312:	2300      	movs	r3, #0
 8009314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009316:	4b42      	ldr	r3, [pc, #264]	@ (8009420 <xTaskResumeAll+0x118>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <xTaskResumeAll+0x2e>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	603b      	str	r3, [r7, #0]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009336:	f001 fa3f 	bl	800a7b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800933a:	4b39      	ldr	r3, [pc, #228]	@ (8009420 <xTaskResumeAll+0x118>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3b01      	subs	r3, #1
 8009340:	4a37      	ldr	r2, [pc, #220]	@ (8009420 <xTaskResumeAll+0x118>)
 8009342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009344:	4b36      	ldr	r3, [pc, #216]	@ (8009420 <xTaskResumeAll+0x118>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d162      	bne.n	8009412 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800934c:	4b35      	ldr	r3, [pc, #212]	@ (8009424 <xTaskResumeAll+0x11c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05e      	beq.n	8009412 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009354:	e02f      	b.n	80093b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009356:	4b34      	ldr	r3, [pc, #208]	@ (8009428 <xTaskResumeAll+0x120>)
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3318      	adds	r3, #24
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fe3e 	bl	8007fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3304      	adds	r3, #4
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fe39 	bl	8007fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009376:	4b2d      	ldr	r3, [pc, #180]	@ (800942c <xTaskResumeAll+0x124>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d903      	bls.n	8009386 <xTaskResumeAll+0x7e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	4a2a      	ldr	r2, [pc, #168]	@ (800942c <xTaskResumeAll+0x124>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a27      	ldr	r2, [pc, #156]	@ (8009430 <xTaskResumeAll+0x128>)
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe fdc4 	bl	8007f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	4b23      	ldr	r3, [pc, #140]	@ (8009434 <xTaskResumeAll+0x12c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80093b0:	4b21      	ldr	r3, [pc, #132]	@ (8009438 <xTaskResumeAll+0x130>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009428 <xTaskResumeAll+0x120>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1cb      	bne.n	8009356 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093c4:	f000 fb58 	bl	8009a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093c8:	4b1c      	ldr	r3, [pc, #112]	@ (800943c <xTaskResumeAll+0x134>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d010      	beq.n	80093f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093d4:	f000 f846 	bl	8009464 <xTaskIncrementTick>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80093de:	4b16      	ldr	r3, [pc, #88]	@ (8009438 <xTaskResumeAll+0x130>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f1      	bne.n	80093d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80093f0:	4b12      	ldr	r3, [pc, #72]	@ (800943c <xTaskResumeAll+0x134>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093f6:	4b10      	ldr	r3, [pc, #64]	@ (8009438 <xTaskResumeAll+0x130>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093fe:	2301      	movs	r3, #1
 8009400:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009402:	4b0f      	ldr	r3, [pc, #60]	@ (8009440 <xTaskResumeAll+0x138>)
 8009404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009412:	f001 fa03 	bl	800a81c <vPortExitCritical>

	return xAlreadyYielded;
 8009416:	68bb      	ldr	r3, [r7, #8]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20001198 	.word	0x20001198
 8009424:	20001170 	.word	0x20001170
 8009428:	20001130 	.word	0x20001130
 800942c:	20001178 	.word	0x20001178
 8009430:	20000ca0 	.word	0x20000ca0
 8009434:	20000c9c 	.word	0x20000c9c
 8009438:	20001184 	.word	0x20001184
 800943c:	20001180 	.word	0x20001180
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800944a:	4b05      	ldr	r3, [pc, #20]	@ (8009460 <xTaskGetTickCount+0x1c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009450:	687b      	ldr	r3, [r7, #4]
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20001174 	.word	0x20001174

08009464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800946e:	4b4f      	ldr	r3, [pc, #316]	@ (80095ac <xTaskIncrementTick+0x148>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 8090 	bne.w	8009598 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009478:	4b4d      	ldr	r3, [pc, #308]	@ (80095b0 <xTaskIncrementTick+0x14c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3301      	adds	r3, #1
 800947e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009480:	4a4b      	ldr	r2, [pc, #300]	@ (80095b0 <xTaskIncrementTick+0x14c>)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d121      	bne.n	80094d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800948c:	4b49      	ldr	r3, [pc, #292]	@ (80095b4 <xTaskIncrementTick+0x150>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	603b      	str	r3, [r7, #0]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <xTaskIncrementTick+0x46>
 80094ae:	4b41      	ldr	r3, [pc, #260]	@ (80095b4 <xTaskIncrementTick+0x150>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	4b40      	ldr	r3, [pc, #256]	@ (80095b8 <xTaskIncrementTick+0x154>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a3e      	ldr	r2, [pc, #248]	@ (80095b4 <xTaskIncrementTick+0x150>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	4a3e      	ldr	r2, [pc, #248]	@ (80095b8 <xTaskIncrementTick+0x154>)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	4b3e      	ldr	r3, [pc, #248]	@ (80095bc <xTaskIncrementTick+0x158>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a3c      	ldr	r2, [pc, #240]	@ (80095bc <xTaskIncrementTick+0x158>)
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	f000 fad4 	bl	8009a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094d0:	4b3b      	ldr	r3, [pc, #236]	@ (80095c0 <xTaskIncrementTick+0x15c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d349      	bcc.n	800956e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094da:	4b36      	ldr	r3, [pc, #216]	@ (80095b4 <xTaskIncrementTick+0x150>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d104      	bne.n	80094ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e4:	4b36      	ldr	r3, [pc, #216]	@ (80095c0 <xTaskIncrementTick+0x15c>)
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ea:	601a      	str	r2, [r3, #0]
					break;
 80094ec:	e03f      	b.n	800956e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ee:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <xTaskIncrementTick+0x150>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d203      	bcs.n	800950e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009506:	4a2e      	ldr	r2, [pc, #184]	@ (80095c0 <xTaskIncrementTick+0x15c>)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800950c:	e02f      	b.n	800956e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd66 	bl	8007fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3318      	adds	r3, #24
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fd5d 	bl	8007fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4b25      	ldr	r3, [pc, #148]	@ (80095c4 <xTaskIncrementTick+0x160>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d903      	bls.n	800953e <xTaskIncrementTick+0xda>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	4a22      	ldr	r2, [pc, #136]	@ (80095c4 <xTaskIncrementTick+0x160>)
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4a1f      	ldr	r2, [pc, #124]	@ (80095c8 <xTaskIncrementTick+0x164>)
 800954c:	441a      	add	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fe fce8 	bl	8007f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955e:	4b1b      	ldr	r3, [pc, #108]	@ (80095cc <xTaskIncrementTick+0x168>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	429a      	cmp	r2, r3
 8009566:	d3b8      	bcc.n	80094da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009568:	2301      	movs	r3, #1
 800956a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800956c:	e7b5      	b.n	80094da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800956e:	4b17      	ldr	r3, [pc, #92]	@ (80095cc <xTaskIncrementTick+0x168>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009574:	4914      	ldr	r1, [pc, #80]	@ (80095c8 <xTaskIncrementTick+0x164>)
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d901      	bls.n	800958a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009586:	2301      	movs	r3, #1
 8009588:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800958a:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <xTaskIncrementTick+0x16c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e004      	b.n	80095a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009598:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <xTaskIncrementTick+0x170>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	4a0d      	ldr	r2, [pc, #52]	@ (80095d4 <xTaskIncrementTick+0x170>)
 80095a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095a2:	697b      	ldr	r3, [r7, #20]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20001198 	.word	0x20001198
 80095b0:	20001174 	.word	0x20001174
 80095b4:	20001128 	.word	0x20001128
 80095b8:	2000112c 	.word	0x2000112c
 80095bc:	20001188 	.word	0x20001188
 80095c0:	20001190 	.word	0x20001190
 80095c4:	20001178 	.word	0x20001178
 80095c8:	20000ca0 	.word	0x20000ca0
 80095cc:	20000c9c 	.word	0x20000c9c
 80095d0:	20001184 	.word	0x20001184
 80095d4:	20001180 	.word	0x20001180

080095d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095de:	4b28      	ldr	r3, [pc, #160]	@ (8009680 <vTaskSwitchContext+0xa8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095e6:	4b27      	ldr	r3, [pc, #156]	@ (8009684 <vTaskSwitchContext+0xac>)
 80095e8:	2201      	movs	r2, #1
 80095ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095ec:	e042      	b.n	8009674 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80095ee:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <vTaskSwitchContext+0xac>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f4:	4b24      	ldr	r3, [pc, #144]	@ (8009688 <vTaskSwitchContext+0xb0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	e011      	b.n	8009620 <vTaskSwitchContext+0x48>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10b      	bne.n	800961a <vTaskSwitchContext+0x42>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	607b      	str	r3, [r7, #4]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <vTaskSwitchContext+0x3e>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3b01      	subs	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	491a      	ldr	r1, [pc, #104]	@ (800968c <vTaskSwitchContext+0xb4>)
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0e3      	beq.n	80095fc <vTaskSwitchContext+0x24>
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4a13      	ldr	r2, [pc, #76]	@ (800968c <vTaskSwitchContext+0xb4>)
 8009640:	4413      	add	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	3308      	adds	r3, #8
 8009656:	429a      	cmp	r2, r3
 8009658:	d104      	bne.n	8009664 <vTaskSwitchContext+0x8c>
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	605a      	str	r2, [r3, #4]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	4a09      	ldr	r2, [pc, #36]	@ (8009690 <vTaskSwitchContext+0xb8>)
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	4a06      	ldr	r2, [pc, #24]	@ (8009688 <vTaskSwitchContext+0xb0>)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6013      	str	r3, [r2, #0]
}
 8009674:	bf00      	nop
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20001198 	.word	0x20001198
 8009684:	20001184 	.word	0x20001184
 8009688:	20001178 	.word	0x20001178
 800968c:	20000ca0 	.word	0x20000ca0
 8009690:	20000c9c 	.word	0x20000c9c

08009694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	60fb      	str	r3, [r7, #12]
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	e7fd      	b.n	80096b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096bc:	4b07      	ldr	r3, [pc, #28]	@ (80096dc <vTaskPlaceOnEventList+0x48>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3318      	adds	r3, #24
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fe fc54 	bl	8007f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096ca:	2101      	movs	r1, #1
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	f000 fb91 	bl	8009df4 <prvAddCurrentTaskToDelayedList>
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000c9c 	.word	0x20000c9c

080096e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	617b      	str	r3, [r7, #20]
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800970a:	4b0a      	ldr	r3, [pc, #40]	@ (8009734 <vTaskPlaceOnEventListRestricted+0x54>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3318      	adds	r3, #24
 8009710:	4619      	mov	r1, r3
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fe fc09 	bl	8007f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295
 8009722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	68b8      	ldr	r0, [r7, #8]
 8009728:	f000 fb64 	bl	8009df4 <prvAddCurrentTaskToDelayedList>
	}
 800972c:	bf00      	nop
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000c9c 	.word	0x20000c9c

08009738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10b      	bne.n	8009766 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
}
 8009760:	bf00      	nop
 8009762:	bf00      	nop
 8009764:	e7fd      	b.n	8009762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3318      	adds	r3, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fc3a 	bl	8007fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009770:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <xTaskRemoveFromEventList+0xb0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11d      	bne.n	80097b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fc31 	bl	8007fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009786:	4b19      	ldr	r3, [pc, #100]	@ (80097ec <xTaskRemoveFromEventList+0xb4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d903      	bls.n	8009796 <xTaskRemoveFromEventList+0x5e>
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	4a16      	ldr	r2, [pc, #88]	@ (80097ec <xTaskRemoveFromEventList+0xb4>)
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4a13      	ldr	r2, [pc, #76]	@ (80097f0 <xTaskRemoveFromEventList+0xb8>)
 80097a4:	441a      	add	r2, r3
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3304      	adds	r3, #4
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f7fe fbbc 	bl	8007f2a <vListInsertEnd>
 80097b2:	e005      	b.n	80097c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	3318      	adds	r3, #24
 80097b8:	4619      	mov	r1, r3
 80097ba:	480e      	ldr	r0, [pc, #56]	@ (80097f4 <xTaskRemoveFromEventList+0xbc>)
 80097bc:	f7fe fbb5 	bl	8007f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c4:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <xTaskRemoveFromEventList+0xc0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d905      	bls.n	80097da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097ce:	2301      	movs	r3, #1
 80097d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097d2:	4b0a      	ldr	r3, [pc, #40]	@ (80097fc <xTaskRemoveFromEventList+0xc4>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e001      	b.n	80097de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097de:	697b      	ldr	r3, [r7, #20]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20001198 	.word	0x20001198
 80097ec:	20001178 	.word	0x20001178
 80097f0:	20000ca0 	.word	0x20000ca0
 80097f4:	20001130 	.word	0x20001130
 80097f8:	20000c9c 	.word	0x20000c9c
 80097fc:	20001184 	.word	0x20001184

08009800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009808:	4b06      	ldr	r3, [pc, #24]	@ (8009824 <vTaskInternalSetTimeOutState+0x24>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <vTaskInternalSetTimeOutState+0x28>)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	605a      	str	r2, [r3, #4]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20001188 	.word	0x20001188
 8009828:	20001174 	.word	0x20001174

0800982c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10b      	bne.n	8009854 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	613b      	str	r3, [r7, #16]
}
 800984e:	bf00      	nop
 8009850:	bf00      	nop
 8009852:	e7fd      	b.n	8009850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10b      	bne.n	8009872 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	60fb      	str	r3, [r7, #12]
}
 800986c:	bf00      	nop
 800986e:	bf00      	nop
 8009870:	e7fd      	b.n	800986e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009872:	f000 ffa1 	bl	800a7b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009876:	4b1d      	ldr	r3, [pc, #116]	@ (80098ec <xTaskCheckForTimeOut+0xc0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988e:	d102      	bne.n	8009896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	e023      	b.n	80098de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	4b15      	ldr	r3, [pc, #84]	@ (80098f0 <xTaskCheckForTimeOut+0xc4>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d007      	beq.n	80098b2 <xTaskCheckForTimeOut+0x86>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e015      	b.n	80098de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d20b      	bcs.n	80098d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	1ad2      	subs	r2, r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ff99 	bl	8009800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61fb      	str	r3, [r7, #28]
 80098d2:	e004      	b.n	80098de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098de:	f000 ff9d 	bl	800a81c <vPortExitCritical>

	return xReturn;
 80098e2:	69fb      	ldr	r3, [r7, #28]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20001174 	.word	0x20001174
 80098f0:	20001188 	.word	0x20001188

080098f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098f8:	4b03      	ldr	r3, [pc, #12]	@ (8009908 <vTaskMissedYield+0x14>)
 80098fa:	2201      	movs	r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	20001184 	.word	0x20001184

0800990c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009914:	f000 f852 	bl	80099bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009918:	4b06      	ldr	r3, [pc, #24]	@ (8009934 <prvIdleTask+0x28>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d9f9      	bls.n	8009914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009920:	4b05      	ldr	r3, [pc, #20]	@ (8009938 <prvIdleTask+0x2c>)
 8009922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009930:	e7f0      	b.n	8009914 <prvIdleTask+0x8>
 8009932:	bf00      	nop
 8009934:	20000ca0 	.word	0x20000ca0
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009942:	2300      	movs	r3, #0
 8009944:	607b      	str	r3, [r7, #4]
 8009946:	e00c      	b.n	8009962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4a12      	ldr	r2, [pc, #72]	@ (800999c <prvInitialiseTaskLists+0x60>)
 8009954:	4413      	add	r3, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe faba 	bl	8007ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3301      	adds	r3, #1
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b37      	cmp	r3, #55	@ 0x37
 8009966:	d9ef      	bls.n	8009948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009968:	480d      	ldr	r0, [pc, #52]	@ (80099a0 <prvInitialiseTaskLists+0x64>)
 800996a:	f7fe fab1 	bl	8007ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800996e:	480d      	ldr	r0, [pc, #52]	@ (80099a4 <prvInitialiseTaskLists+0x68>)
 8009970:	f7fe faae 	bl	8007ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009974:	480c      	ldr	r0, [pc, #48]	@ (80099a8 <prvInitialiseTaskLists+0x6c>)
 8009976:	f7fe faab 	bl	8007ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800997a:	480c      	ldr	r0, [pc, #48]	@ (80099ac <prvInitialiseTaskLists+0x70>)
 800997c:	f7fe faa8 	bl	8007ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009980:	480b      	ldr	r0, [pc, #44]	@ (80099b0 <prvInitialiseTaskLists+0x74>)
 8009982:	f7fe faa5 	bl	8007ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009986:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <prvInitialiseTaskLists+0x78>)
 8009988:	4a05      	ldr	r2, [pc, #20]	@ (80099a0 <prvInitialiseTaskLists+0x64>)
 800998a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800998c:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <prvInitialiseTaskLists+0x7c>)
 800998e:	4a05      	ldr	r2, [pc, #20]	@ (80099a4 <prvInitialiseTaskLists+0x68>)
 8009990:	601a      	str	r2, [r3, #0]
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000ca0 	.word	0x20000ca0
 80099a0:	20001100 	.word	0x20001100
 80099a4:	20001114 	.word	0x20001114
 80099a8:	20001130 	.word	0x20001130
 80099ac:	20001144 	.word	0x20001144
 80099b0:	2000115c 	.word	0x2000115c
 80099b4:	20001128 	.word	0x20001128
 80099b8:	2000112c 	.word	0x2000112c

080099bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099c2:	e019      	b.n	80099f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099c4:	f000 fef8 	bl	800a7b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c8:	4b10      	ldr	r3, [pc, #64]	@ (8009a0c <prvCheckTasksWaitingTermination+0x50>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fb05 	bl	8007fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <prvCheckTasksWaitingTermination+0x54>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3b01      	subs	r3, #1
 80099e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009a10 <prvCheckTasksWaitingTermination+0x54>)
 80099e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <prvCheckTasksWaitingTermination+0x58>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009a14 <prvCheckTasksWaitingTermination+0x58>)
 80099ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099ee:	f000 ff15 	bl	800a81c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f810 	bl	8009a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099f8:	4b06      	ldr	r3, [pc, #24]	@ (8009a14 <prvCheckTasksWaitingTermination+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e1      	bne.n	80099c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20001144 	.word	0x20001144
 8009a10:	20001170 	.word	0x20001170
 8009a14:	20001158 	.word	0x20001158

08009a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d108      	bne.n	8009a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 f8b2 	bl	800ab98 <vPortFree>
				vPortFree( pxTCB );
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f8af 	bl	800ab98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a3a:	e019      	b.n	8009a70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d103      	bne.n	8009a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 f8a6 	bl	800ab98 <vPortFree>
	}
 8009a4c:	e010      	b.n	8009a70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d00b      	beq.n	8009a70 <prvDeleteTCB+0x58>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	60fb      	str	r3, [r7, #12]
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <prvDeleteTCB+0x54>
	}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab0 <prvResetNextTaskUnblockTime+0x38>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a90:	e008      	b.n	8009aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a92:	4b07      	ldr	r3, [pc, #28]	@ (8009ab0 <prvResetNextTaskUnblockTime+0x38>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a04      	ldr	r2, [pc, #16]	@ (8009ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8009aa2:	6013      	str	r3, [r2, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20001128 	.word	0x20001128
 8009ab4:	20001190 	.word	0x20001190

08009ab8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009abe:	4b05      	ldr	r3, [pc, #20]	@ (8009ad4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009ac4:	687b      	ldr	r3, [r7, #4]
	}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000c9c 	.word	0x20000c9c

08009ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ade:	4b0b      	ldr	r3, [pc, #44]	@ (8009b0c <xTaskGetSchedulerState+0x34>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	e008      	b.n	8009afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aec:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <xTaskGetSchedulerState+0x38>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af4:	2302      	movs	r3, #2
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e001      	b.n	8009afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009afe:	687b      	ldr	r3, [r7, #4]
	}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	2000117c 	.word	0x2000117c
 8009b10:	20001198 	.word	0x20001198

08009b14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d051      	beq.n	8009bce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d241      	bcs.n	8009bbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	db06      	blt.n	8009b4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	4b25      	ldr	r3, [pc, #148]	@ (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6959      	ldr	r1, [r3, #20]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <xTaskPriorityInherit+0xc8>)
 8009b60:	4413      	add	r3, r2
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d122      	bne.n	8009bac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fa3a 	bl	8007fe4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b70:	4b19      	ldr	r3, [pc, #100]	@ (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7e:	4b18      	ldr	r3, [pc, #96]	@ (8009be0 <xTaskPriorityInherit+0xcc>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d903      	bls.n	8009b8e <xTaskPriorityInherit+0x7a>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	4a15      	ldr	r2, [pc, #84]	@ (8009be0 <xTaskPriorityInherit+0xcc>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4a10      	ldr	r2, [pc, #64]	@ (8009bdc <xTaskPriorityInherit+0xc8>)
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f7fe f9c0 	bl	8007f2a <vListInsertEnd>
 8009baa:	e004      	b.n	8009bb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bac:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	e008      	b.n	8009bce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d201      	bcs.n	8009bce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bce:	68fb      	ldr	r3, [r7, #12]
	}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000c9c 	.word	0x20000c9c
 8009bdc:	20000ca0 	.word	0x20000ca0
 8009be0:	20001178 	.word	0x20001178

08009be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d058      	beq.n	8009cac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb8 <xTaskPriorityDisinherit+0xd4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d00b      	beq.n	8009c1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60fb      	str	r3, [r7, #12]
}
 8009c16:	bf00      	nop
 8009c18:	bf00      	nop
 8009c1a:	e7fd      	b.n	8009c18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10b      	bne.n	8009c3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60bb      	str	r3, [r7, #8]
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c40:	1e5a      	subs	r2, r3, #1
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d02c      	beq.n	8009cac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d128      	bne.n	8009cac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe f9c0 	bl	8007fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <xTaskPriorityDisinherit+0xd8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d903      	bls.n	8009c8c <xTaskPriorityDisinherit+0xa8>
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c88:	4a0c      	ldr	r2, [pc, #48]	@ (8009cbc <xTaskPriorityDisinherit+0xd8>)
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4a09      	ldr	r2, [pc, #36]	@ (8009cc0 <xTaskPriorityDisinherit+0xdc>)
 8009c9a:	441a      	add	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7fe f941 	bl	8007f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cac:	697b      	ldr	r3, [r7, #20]
	}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000c9c 	.word	0x20000c9c
 8009cbc:	20001178 	.word	0x20001178
 8009cc0:	20000ca0 	.word	0x20000ca0

08009cc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d06c      	beq.n	8009db6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60fb      	str	r3, [r7, #12]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d902      	bls.n	8009d0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	e002      	b.n	8009d12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d04c      	beq.n	8009db6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d147      	bne.n	8009db6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d26:	4b26      	ldr	r3, [pc, #152]	@ (8009dc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d10b      	bne.n	8009d48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60bb      	str	r3, [r7, #8]
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	db04      	blt.n	8009d66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	6959      	ldr	r1, [r3, #20]
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4a13      	ldr	r2, [pc, #76]	@ (8009dc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d76:	4413      	add	r3, r2
 8009d78:	4299      	cmp	r1, r3
 8009d7a:	d11c      	bne.n	8009db6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe f92f 	bl	8007fe4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d903      	bls.n	8009d9a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d96:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4a07      	ldr	r2, [pc, #28]	@ (8009dc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009da8:	441a      	add	r2, r3
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	3304      	adds	r3, #4
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f7fe f8ba 	bl	8007f2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009db6:	bf00      	nop
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000c9c 	.word	0x20000c9c
 8009dc4:	20000ca0 	.word	0x20000ca0
 8009dc8:	20001178 	.word	0x20001178

08009dcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dde:	3201      	adds	r2, #1
 8009de0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009de2:	4b03      	ldr	r3, [pc, #12]	@ (8009df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009de4:	681b      	ldr	r3, [r3, #0]
	}
 8009de6:	4618      	mov	r0, r3
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000c9c 	.word	0x20000c9c

08009df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dfe:	4b21      	ldr	r3, [pc, #132]	@ (8009e84 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e04:	4b20      	ldr	r3, [pc, #128]	@ (8009e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe f8ea 	bl	8007fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d10a      	bne.n	8009e2e <prvAddCurrentTaskToDelayedList+0x3a>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3304      	adds	r3, #4
 8009e24:	4619      	mov	r1, r3
 8009e26:	4819      	ldr	r0, [pc, #100]	@ (8009e8c <prvAddCurrentTaskToDelayedList+0x98>)
 8009e28:	f7fe f87f 	bl	8007f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e2c:	e026      	b.n	8009e7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e36:	4b14      	ldr	r3, [pc, #80]	@ (8009e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d209      	bcs.n	8009e5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e46:	4b12      	ldr	r3, [pc, #72]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fe f88d 	bl	8007f72 <vListInsert>
}
 8009e58:	e010      	b.n	8009e7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe f883 	bl	8007f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d202      	bcs.n	8009e7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e76:	4a08      	ldr	r2, [pc, #32]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6013      	str	r3, [r2, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20001174 	.word	0x20001174
 8009e88:	20000c9c 	.word	0x20000c9c
 8009e8c:	2000115c 	.word	0x2000115c
 8009e90:	2000112c 	.word	0x2000112c
 8009e94:	20001128 	.word	0x20001128
 8009e98:	20001190 	.word	0x20001190

08009e9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	@ 0x28
 8009ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ea6:	f000 fb13 	bl	800a4d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8009f20 <xTimerCreateTimerTask+0x84>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d021      	beq.n	8009ef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eba:	1d3a      	adds	r2, r7, #4
 8009ebc:	f107 0108 	add.w	r1, r7, #8
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd ffe9 	bl	8007e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	9202      	str	r2, [sp, #8]
 8009ed2:	9301      	str	r3, [sp, #4]
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	460a      	mov	r2, r1
 8009edc:	4911      	ldr	r1, [pc, #68]	@ (8009f24 <xTimerCreateTimerTask+0x88>)
 8009ede:	4812      	ldr	r0, [pc, #72]	@ (8009f28 <xTimerCreateTimerTask+0x8c>)
 8009ee0:	f7fe ffc0 	bl	8008e64 <xTaskCreateStatic>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	4a11      	ldr	r2, [pc, #68]	@ (8009f2c <xTimerCreateTimerTask+0x90>)
 8009ee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009eea:	4b10      	ldr	r3, [pc, #64]	@ (8009f2c <xTimerCreateTimerTask+0x90>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10b      	bne.n	8009f14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	613b      	str	r3, [r7, #16]
}
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	e7fd      	b.n	8009f10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f14:	697b      	ldr	r3, [r7, #20]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	200011cc 	.word	0x200011cc
 8009f24:	0800af18 	.word	0x0800af18
 8009f28:	0800a069 	.word	0x0800a069
 8009f2c:	200011d0 	.word	0x200011d0

08009f30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	@ 0x28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <xTimerGenericCommand+0x30>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	623b      	str	r3, [r7, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f60:	4b19      	ldr	r3, [pc, #100]	@ (8009fc8 <xTimerGenericCommand+0x98>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d02a      	beq.n	8009fbe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	dc18      	bgt.n	8009fac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f7a:	f7ff fdad 	bl	8009ad8 <xTaskGetSchedulerState>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d109      	bne.n	8009f98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f84:	4b10      	ldr	r3, [pc, #64]	@ (8009fc8 <xTimerGenericCommand+0x98>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	f107 0110 	add.w	r1, r7, #16
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f90:	f7fe fa50 	bl	8008434 <xQueueGenericSend>
 8009f94:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f96:	e012      	b.n	8009fbe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f98:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc8 <xTimerGenericCommand+0x98>)
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	f107 0110 	add.w	r1, r7, #16
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f7fe fa46 	bl	8008434 <xQueueGenericSend>
 8009fa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009faa:	e008      	b.n	8009fbe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fac:	4b06      	ldr	r3, [pc, #24]	@ (8009fc8 <xTimerGenericCommand+0x98>)
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	f107 0110 	add.w	r1, r7, #16
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	f7fe fb3e 	bl	8008638 <xQueueGenericSendFromISR>
 8009fbc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3728      	adds	r7, #40	@ 0x28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200011cc 	.word	0x200011cc

08009fcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd6:	4b23      	ldr	r3, [pc, #140]	@ (800a064 <prvProcessExpiredTimer+0x98>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fd fffd 	bl	8007fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d023      	beq.n	800a040 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	699a      	ldr	r2, [r3, #24]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	18d1      	adds	r1, r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	6978      	ldr	r0, [r7, #20]
 800a006:	f000 f8d5 	bl	800a1b4 <prvInsertTimerInActiveList>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d020      	beq.n	800a052 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a010:	2300      	movs	r3, #0
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	2100      	movs	r1, #0
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f7ff ff88 	bl	8009f30 <xTimerGenericCommand>
 800a020:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d114      	bne.n	800a052 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a046:	f023 0301 	bic.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	6978      	ldr	r0, [r7, #20]
 800a058:	4798      	blx	r3
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200011c4 	.word	0x200011c4

0800a068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	4618      	mov	r0, r3
 800a076:	f000 f859 	bl	800a12c <prvGetNextExpireTime>
 800a07a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f805 	bl	800a090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a086:	f000 f8d7 	bl	800a238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a08a:	bf00      	nop
 800a08c:	e7f0      	b.n	800a070 <prvTimerTask+0x8>
	...

0800a090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a09a:	f7ff f927 	bl	80092ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f866 	bl	800a174 <prvSampleTimeNow>
 800a0a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d130      	bne.n	800a112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <prvProcessTimerOrBlockTask+0x3c>
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d806      	bhi.n	800a0cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0be:	f7ff f923 	bl	8009308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff ff81 	bl	8009fcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0ca:	e024      	b.n	800a116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0d2:	4b13      	ldr	r3, [pc, #76]	@ (800a120 <prvProcessTimerOrBlockTask+0x90>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <prvProcessTimerOrBlockTask+0x50>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e000      	b.n	800a0e2 <prvProcessTimerOrBlockTask+0x52>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a124 <prvProcessTimerOrBlockTask+0x94>)
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7fe fe83 	bl	8008dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0f6:	f7ff f907 	bl	8009308 <xTaskResumeAll>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a100:	4b09      	ldr	r3, [pc, #36]	@ (800a128 <prvProcessTimerOrBlockTask+0x98>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
}
 800a110:	e001      	b.n	800a116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a112:	f7ff f8f9 	bl	8009308 <xTaskResumeAll>
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200011c8 	.word	0x200011c8
 800a124:	200011cc 	.word	0x200011cc
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a134:	4b0e      	ldr	r3, [pc, #56]	@ (800a170 <prvGetNextExpireTime+0x44>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <prvGetNextExpireTime+0x16>
 800a13e:	2201      	movs	r2, #1
 800a140:	e000      	b.n	800a144 <prvGetNextExpireTime+0x18>
 800a142:	2200      	movs	r2, #0
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a150:	4b07      	ldr	r3, [pc, #28]	@ (800a170 <prvGetNextExpireTime+0x44>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	e001      	b.n	800a160 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	200011c4 	.word	0x200011c4

0800a174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a17c:	f7ff f962 	bl	8009444 <xTaskGetTickCount>
 800a180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a182:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b0 <prvSampleTimeNow+0x3c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d205      	bcs.n	800a198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a18c:	f000 f93a 	bl	800a404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	e002      	b.n	800a19e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a19e:	4a04      	ldr	r2, [pc, #16]	@ (800a1b0 <prvSampleTimeNow+0x3c>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200011d4 	.word	0x200011d4

0800a1b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d812      	bhi.n	800a200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	1ad2      	subs	r2, r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d302      	bcc.n	800a1ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e01b      	b.n	800a226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1ee:	4b10      	ldr	r3, [pc, #64]	@ (800a230 <prvInsertTimerInActiveList+0x7c>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	f7fd feba 	bl	8007f72 <vListInsert>
 800a1fe:	e012      	b.n	800a226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d206      	bcs.n	800a216 <prvInsertTimerInActiveList+0x62>
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d302      	bcc.n	800a216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e007      	b.n	800a226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a216:	4b07      	ldr	r3, [pc, #28]	@ (800a234 <prvInsertTimerInActiveList+0x80>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fd fea6 	bl	8007f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a226:	697b      	ldr	r3, [r7, #20]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	200011c8 	.word	0x200011c8
 800a234:	200011c4 	.word	0x200011c4

0800a238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	@ 0x38
 800a23c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a23e:	e0ce      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	da19      	bge.n	800a27a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a246:	1d3b      	adds	r3, r7, #4
 800a248:	3304      	adds	r3, #4
 800a24a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61fb      	str	r3, [r7, #28]
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	e7fd      	b.n	800a266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a270:	6850      	ldr	r0, [r2, #4]
 800a272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a274:	6892      	ldr	r2, [r2, #8]
 800a276:	4611      	mov	r1, r2
 800a278:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f2c0 80ae 	blt.w	800a3de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d004      	beq.n	800a298 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	3304      	adds	r3, #4
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fea6 	bl	8007fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a298:	463b      	mov	r3, r7
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ff6a 	bl	800a174 <prvSampleTimeNow>
 800a2a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b09      	cmp	r3, #9
 800a2a6:	f200 8097 	bhi.w	800a3d8 <prvProcessReceivedCommands+0x1a0>
 800a2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <prvProcessReceivedCommands+0x78>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2d9 	.word	0x0800a2d9
 800a2bc:	0800a34f 	.word	0x0800a34f
 800a2c0:	0800a363 	.word	0x0800a363
 800a2c4:	0800a3af 	.word	0x0800a3af
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2d9 	.word	0x0800a2d9
 800a2d0:	0800a34f 	.word	0x0800a34f
 800a2d4:	0800a363 	.word	0x0800a363
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	18d1      	adds	r1, r2, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2f8:	f7ff ff5c 	bl	800a1b4 <prvInsertTimerInActiveList>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d06c      	beq.n	800a3dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a310:	f003 0304 	and.w	r3, r3, #4
 800a314:	2b00      	cmp	r3, #0
 800a316:	d061      	beq.n	800a3dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	441a      	add	r2, r3
 800a320:	2300      	movs	r3, #0
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2300      	movs	r3, #0
 800a326:	2100      	movs	r1, #0
 800a328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a32a:	f7ff fe01 	bl	8009f30 <xTimerGenericCommand>
 800a32e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d152      	bne.n	800a3dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	61bb      	str	r3, [r7, #24]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a354:	f023 0301 	bic.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a360:	e03d      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a370:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10b      	bne.n	800a39a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	617b      	str	r3, [r7, #20]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	699a      	ldr	r2, [r3, #24]
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	18d1      	adds	r1, r2, r3
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3a8:	f7ff ff04 	bl	800a1b4 <prvInsertTimerInActiveList>
					break;
 800a3ac:	e017      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3b4:	f003 0302 	and.w	r3, r3, #2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3be:	f000 fbeb 	bl	800ab98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3c2:	e00c      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3ca:	f023 0301 	bic.w	r3, r3, #1
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3d6:	e002      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3d8:	bf00      	nop
 800a3da:	e000      	b.n	800a3de <prvProcessReceivedCommands+0x1a6>
					break;
 800a3dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3de:	4b08      	ldr	r3, [pc, #32]	@ (800a400 <prvProcessReceivedCommands+0x1c8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1d39      	adds	r1, r7, #4
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe f9c4 	bl	8008774 <xQueueReceive>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f47f af26 	bne.w	800a240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	3730      	adds	r7, #48	@ 0x30
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200011cc 	.word	0x200011cc

0800a404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a40a:	e049      	b.n	800a4a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a40c:	4b2e      	ldr	r3, [pc, #184]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a416:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3304      	adds	r3, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fd fddd 	bl	8007fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d02f      	beq.n	800a4a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4413      	add	r3, r2
 800a448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d90e      	bls.n	800a470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a45e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3304      	adds	r3, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7fd fd82 	bl	8007f72 <vListInsert>
 800a46e:	e017      	b.n	800a4a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a470:	2300      	movs	r3, #0
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	2100      	movs	r1, #0
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fd58 	bl	8009f30 <xTimerGenericCommand>
 800a480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	603b      	str	r3, [r7, #0]
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4a0:	4b09      	ldr	r3, [pc, #36]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1b0      	bne.n	800a40c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4aa:	4b07      	ldr	r3, [pc, #28]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4b0:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <prvSwitchTimerLists+0xc8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a04      	ldr	r2, [pc, #16]	@ (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a4b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4b8:	4a04      	ldr	r2, [pc, #16]	@ (800a4cc <prvSwitchTimerLists+0xc8>)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	6013      	str	r3, [r2, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200011c4 	.word	0x200011c4
 800a4cc:	200011c8 	.word	0x200011c8

0800a4d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4d6:	f000 f96f 	bl	800a7b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4da:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <prvCheckForValidListAndQueue+0x60>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d120      	bne.n	800a524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4e2:	4814      	ldr	r0, [pc, #80]	@ (800a534 <prvCheckForValidListAndQueue+0x64>)
 800a4e4:	f7fd fcf4 	bl	8007ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4e8:	4813      	ldr	r0, [pc, #76]	@ (800a538 <prvCheckForValidListAndQueue+0x68>)
 800a4ea:	f7fd fcf1 	bl	8007ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4ee:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <prvCheckForValidListAndQueue+0x6c>)
 800a4f0:	4a10      	ldr	r2, [pc, #64]	@ (800a534 <prvCheckForValidListAndQueue+0x64>)
 800a4f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4f4:	4b12      	ldr	r3, [pc, #72]	@ (800a540 <prvCheckForValidListAndQueue+0x70>)
 800a4f6:	4a10      	ldr	r2, [pc, #64]	@ (800a538 <prvCheckForValidListAndQueue+0x68>)
 800a4f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	4b11      	ldr	r3, [pc, #68]	@ (800a544 <prvCheckForValidListAndQueue+0x74>)
 800a500:	4a11      	ldr	r2, [pc, #68]	@ (800a548 <prvCheckForValidListAndQueue+0x78>)
 800a502:	2110      	movs	r1, #16
 800a504:	200a      	movs	r0, #10
 800a506:	f7fd fe01 	bl	800810c <xQueueGenericCreateStatic>
 800a50a:	4603      	mov	r3, r0
 800a50c:	4a08      	ldr	r2, [pc, #32]	@ (800a530 <prvCheckForValidListAndQueue+0x60>)
 800a50e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a510:	4b07      	ldr	r3, [pc, #28]	@ (800a530 <prvCheckForValidListAndQueue+0x60>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a518:	4b05      	ldr	r3, [pc, #20]	@ (800a530 <prvCheckForValidListAndQueue+0x60>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	490b      	ldr	r1, [pc, #44]	@ (800a54c <prvCheckForValidListAndQueue+0x7c>)
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe fc42 	bl	8008da8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a524:	f000 f97a 	bl	800a81c <vPortExitCritical>
}
 800a528:	bf00      	nop
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200011cc 	.word	0x200011cc
 800a534:	2000119c 	.word	0x2000119c
 800a538:	200011b0 	.word	0x200011b0
 800a53c:	200011c4 	.word	0x200011c4
 800a540:	200011c8 	.word	0x200011c8
 800a544:	20001278 	.word	0x20001278
 800a548:	200011d8 	.word	0x200011d8
 800a54c:	0800af20 	.word	0x0800af20

0800a550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3b04      	subs	r3, #4
 800a560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f023 0201 	bic.w	r2, r3, #1
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3b04      	subs	r3, #4
 800a57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a580:	4a0c      	ldr	r2, [pc, #48]	@ (800a5b4 <pxPortInitialiseStack+0x64>)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3b14      	subs	r3, #20
 800a58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3b04      	subs	r3, #4
 800a596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f06f 0202 	mvn.w	r2, #2
 800a59e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3b20      	subs	r3, #32
 800a5a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	0800a5b9 	.word	0x0800a5b9

0800a5b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5c2:	4b13      	ldr	r3, [pc, #76]	@ (800a610 <prvTaskExitError+0x58>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d00b      	beq.n	800a5e4 <prvTaskExitError+0x2c>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60fb      	str	r3, [r7, #12]
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	e7fd      	b.n	800a5e0 <prvTaskExitError+0x28>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	60bb      	str	r3, [r7, #8]
}
 800a5f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5f8:	bf00      	nop
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0fc      	beq.n	800a5fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	2000000c 	.word	0x2000000c
	...

0800a620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a620:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <pxCurrentTCBConst2>)
 800a622:	6819      	ldr	r1, [r3, #0]
 800a624:	6808      	ldr	r0, [r1, #0]
 800a626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62a:	f380 8809 	msr	PSP, r0
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8811 	msr	BASEPRI, r0
 800a63a:	4770      	bx	lr
 800a63c:	f3af 8000 	nop.w

0800a640 <pxCurrentTCBConst2>:
 800a640:	20000c9c 	.word	0x20000c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop

0800a648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a648:	4808      	ldr	r0, [pc, #32]	@ (800a66c <prvPortStartFirstTask+0x24>)
 800a64a:	6800      	ldr	r0, [r0, #0]
 800a64c:	6800      	ldr	r0, [r0, #0]
 800a64e:	f380 8808 	msr	MSP, r0
 800a652:	f04f 0000 	mov.w	r0, #0
 800a656:	f380 8814 	msr	CONTROL, r0
 800a65a:	b662      	cpsie	i
 800a65c:	b661      	cpsie	f
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	df00      	svc	0
 800a668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a66a:	bf00      	nop
 800a66c:	e000ed08 	.word	0xe000ed08

0800a670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a676:	4b47      	ldr	r3, [pc, #284]	@ (800a794 <xPortStartScheduler+0x124>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a47      	ldr	r2, [pc, #284]	@ (800a798 <xPortStartScheduler+0x128>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d10b      	bne.n	800a698 <xPortStartScheduler+0x28>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	60fb      	str	r3, [r7, #12]
}
 800a692:	bf00      	nop
 800a694:	bf00      	nop
 800a696:	e7fd      	b.n	800a694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a698:	4b3e      	ldr	r3, [pc, #248]	@ (800a794 <xPortStartScheduler+0x124>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a3f      	ldr	r2, [pc, #252]	@ (800a79c <xPortStartScheduler+0x12c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d10b      	bne.n	800a6ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	613b      	str	r3, [r7, #16]
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	e7fd      	b.n	800a6b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ba:	4b39      	ldr	r3, [pc, #228]	@ (800a7a0 <xPortStartScheduler+0x130>)
 800a6bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	22ff      	movs	r2, #255	@ 0xff
 800a6ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	4b31      	ldr	r3, [pc, #196]	@ (800a7a4 <xPortStartScheduler+0x134>)
 800a6e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6e2:	4b31      	ldr	r3, [pc, #196]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6e4:	2207      	movs	r2, #7
 800a6e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6e8:	e009      	b.n	800a6fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a6f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a706:	2b80      	cmp	r3, #128	@ 0x80
 800a708:	d0ef      	beq.n	800a6ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a70a:	4b27      	ldr	r3, [pc, #156]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1c3 0307 	rsb	r3, r3, #7
 800a712:	2b04      	cmp	r3, #4
 800a714:	d00b      	beq.n	800a72e <xPortStartScheduler+0xbe>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60bb      	str	r3, [r7, #8]
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	e7fd      	b.n	800a72a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a72e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a738:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a740:	4a19      	ldr	r2, [pc, #100]	@ (800a7a8 <xPortStartScheduler+0x138>)
 800a742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	b2da      	uxtb	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a74c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a16      	ldr	r2, [pc, #88]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a758:	4b14      	ldr	r3, [pc, #80]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a13      	ldr	r2, [pc, #76]	@ (800a7ac <xPortStartScheduler+0x13c>)
 800a75e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a764:	f000 f8da 	bl	800a91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a768:	4b11      	ldr	r3, [pc, #68]	@ (800a7b0 <xPortStartScheduler+0x140>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a76e:	f000 f8f9 	bl	800a964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a772:	4b10      	ldr	r3, [pc, #64]	@ (800a7b4 <xPortStartScheduler+0x144>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a0f      	ldr	r2, [pc, #60]	@ (800a7b4 <xPortStartScheduler+0x144>)
 800a778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a77c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a77e:	f7ff ff63 	bl	800a648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a782:	f7fe ff29 	bl	80095d8 <vTaskSwitchContext>
	prvTaskExitError();
 800a786:	f7ff ff17 	bl	800a5b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	410fc271 	.word	0x410fc271
 800a79c:	410fc270 	.word	0x410fc270
 800a7a0:	e000e400 	.word	0xe000e400
 800a7a4:	200012c8 	.word	0x200012c8
 800a7a8:	200012cc 	.word	0x200012cc
 800a7ac:	e000ed20 	.word	0xe000ed20
 800a7b0:	2000000c 	.word	0x2000000c
 800a7b4:	e000ef34 	.word	0xe000ef34

0800a7b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
}
 800a7d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7d2:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <vPortEnterCritical+0x5c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d110      	bne.n	800a806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a818 <vPortEnterCritical+0x60>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	603b      	str	r3, [r7, #0]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <vPortEnterCritical+0x4a>
	}
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	2000000c 	.word	0x2000000c
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a822:	4b12      	ldr	r3, [pc, #72]	@ (800a86c <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <vPortExitCritical+0x26>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	607b      	str	r3, [r7, #4]
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a842:	4b0a      	ldr	r3, [pc, #40]	@ (800a86c <vPortExitCritical+0x50>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3b01      	subs	r3, #1
 800a848:	4a08      	ldr	r2, [pc, #32]	@ (800a86c <vPortExitCritical+0x50>)
 800a84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <vPortExitCritical+0x50>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <vPortExitCritical+0x44>
 800a854:	2300      	movs	r3, #0
 800a856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	f383 8811 	msr	BASEPRI, r3
}
 800a85e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	2000000c 	.word	0x2000000c

0800a870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a870:	f3ef 8009 	mrs	r0, PSP
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	4b15      	ldr	r3, [pc, #84]	@ (800a8d0 <pxCurrentTCBConst>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	f01e 0f10 	tst.w	lr, #16
 800a880:	bf08      	it	eq
 800a882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88a:	6010      	str	r0, [r2, #0]
 800a88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a894:	f380 8811 	msr	BASEPRI, r0
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f7fe fe9a 	bl	80095d8 <vTaskSwitchContext>
 800a8a4:	f04f 0000 	mov.w	r0, #0
 800a8a8:	f380 8811 	msr	BASEPRI, r0
 800a8ac:	bc09      	pop	{r0, r3}
 800a8ae:	6819      	ldr	r1, [r3, #0]
 800a8b0:	6808      	ldr	r0, [r1, #0]
 800a8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b6:	f01e 0f10 	tst.w	lr, #16
 800a8ba:	bf08      	it	eq
 800a8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8c0:	f380 8809 	msr	PSP, r0
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w

0800a8d0 <pxCurrentTCBConst>:
 800a8d0:	20000c9c 	.word	0x20000c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop

0800a8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8f2:	f7fe fdb7 	bl	8009464 <xTaskIncrementTick>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8fc:	4b06      	ldr	r3, [pc, #24]	@ (800a918 <xPortSysTickHandler+0x40>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	2300      	movs	r3, #0
 800a906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	f383 8811 	msr	BASEPRI, r3
}
 800a90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a920:	4b0b      	ldr	r3, [pc, #44]	@ (800a950 <vPortSetupTimerInterrupt+0x34>)
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a926:	4b0b      	ldr	r3, [pc, #44]	@ (800a954 <vPortSetupTimerInterrupt+0x38>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a92c:	4b0a      	ldr	r3, [pc, #40]	@ (800a958 <vPortSetupTimerInterrupt+0x3c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a0a      	ldr	r2, [pc, #40]	@ (800a95c <vPortSetupTimerInterrupt+0x40>)
 800a932:	fba2 2303 	umull	r2, r3, r2, r3
 800a936:	099b      	lsrs	r3, r3, #6
 800a938:	4a09      	ldr	r2, [pc, #36]	@ (800a960 <vPortSetupTimerInterrupt+0x44>)
 800a93a:	3b01      	subs	r3, #1
 800a93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <vPortSetupTimerInterrupt+0x34>)
 800a940:	2207      	movs	r2, #7
 800a942:	601a      	str	r2, [r3, #0]
}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	e000e010 	.word	0xe000e010
 800a954:	e000e018 	.word	0xe000e018
 800a958:	20000000 	.word	0x20000000
 800a95c:	10624dd3 	.word	0x10624dd3
 800a960:	e000e014 	.word	0xe000e014

0800a964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a974 <vPortEnableVFP+0x10>
 800a968:	6801      	ldr	r1, [r0, #0]
 800a96a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a96e:	6001      	str	r1, [r0, #0]
 800a970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a972:	bf00      	nop
 800a974:	e000ed88 	.word	0xe000ed88

0800a978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a97e:	f3ef 8305 	mrs	r3, IPSR
 800a982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b0f      	cmp	r3, #15
 800a988:	d915      	bls.n	800a9b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a98a:	4a18      	ldr	r2, [pc, #96]	@ (800a9ec <vPortValidateInterruptPriority+0x74>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a994:	4b16      	ldr	r3, [pc, #88]	@ (800a9f0 <vPortValidateInterruptPriority+0x78>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	7afa      	ldrb	r2, [r7, #11]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d20b      	bcs.n	800a9b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	607b      	str	r3, [r7, #4]
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	e7fd      	b.n	800a9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <vPortValidateInterruptPriority+0x7c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a9be:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f8 <vPortValidateInterruptPriority+0x80>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d90b      	bls.n	800a9de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	603b      	str	r3, [r7, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <vPortValidateInterruptPriority+0x62>
	}
 800a9de:	bf00      	nop
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	e000e3f0 	.word	0xe000e3f0
 800a9f0:	200012c8 	.word	0x200012c8
 800a9f4:	e000ed0c 	.word	0xe000ed0c
 800a9f8:	200012cc 	.word	0x200012cc

0800a9fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08a      	sub	sp, #40	@ 0x28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa08:	f7fe fc70 	bl	80092ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab80 <pvPortMalloc+0x184>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa14:	f000 f924 	bl	800ac60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa18:	4b5a      	ldr	r3, [pc, #360]	@ (800ab84 <pvPortMalloc+0x188>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8095 	bne.w	800ab50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01e      	beq.n	800aa6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d015      	beq.n	800aa6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f023 0307 	bic.w	r3, r3, #7
 800aa44:	3308      	adds	r3, #8
 800aa46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f003 0307 	and.w	r3, r3, #7
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <pvPortMalloc+0x6e>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	617b      	str	r3, [r7, #20]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d06f      	beq.n	800ab50 <pvPortMalloc+0x154>
 800aa70:	4b45      	ldr	r3, [pc, #276]	@ (800ab88 <pvPortMalloc+0x18c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d86a      	bhi.n	800ab50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa7a:	4b44      	ldr	r3, [pc, #272]	@ (800ab8c <pvPortMalloc+0x190>)
 800aa7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa7e:	4b43      	ldr	r3, [pc, #268]	@ (800ab8c <pvPortMalloc+0x190>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa84:	e004      	b.n	800aa90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d903      	bls.n	800aaa2 <pvPortMalloc+0xa6>
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f1      	bne.n	800aa86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aaa2:	4b37      	ldr	r3, [pc, #220]	@ (800ab80 <pvPortMalloc+0x184>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d051      	beq.n	800ab50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2208      	movs	r2, #8
 800aab2:	4413      	add	r3, r2
 800aab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	1ad2      	subs	r2, r2, r3
 800aac6:	2308      	movs	r3, #8
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d920      	bls.n	800ab10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	f003 0307 	and.w	r3, r3, #7
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <pvPortMalloc+0xfc>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	613b      	str	r3, [r7, #16]
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	1ad2      	subs	r2, r2, r3
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab0a:	69b8      	ldr	r0, [r7, #24]
 800ab0c:	f000 f90a 	bl	800ad24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab10:	4b1d      	ldr	r3, [pc, #116]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b1b      	ldr	r3, [pc, #108]	@ (800ab90 <pvPortMalloc+0x194>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d203      	bcs.n	800ab32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab2a:	4b17      	ldr	r3, [pc, #92]	@ (800ab88 <pvPortMalloc+0x18c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a18      	ldr	r2, [pc, #96]	@ (800ab90 <pvPortMalloc+0x194>)
 800ab30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <pvPortMalloc+0x188>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab46:	4b13      	ldr	r3, [pc, #76]	@ (800ab94 <pvPortMalloc+0x198>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	4a11      	ldr	r2, [pc, #68]	@ (800ab94 <pvPortMalloc+0x198>)
 800ab4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab50:	f7fe fbda 	bl	8009308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00b      	beq.n	800ab76 <pvPortMalloc+0x17a>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60fb      	str	r3, [r7, #12]
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <pvPortMalloc+0x176>
	return pvReturn;
 800ab76:	69fb      	ldr	r3, [r7, #28]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3728      	adds	r7, #40	@ 0x28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20004ed8 	.word	0x20004ed8
 800ab84:	20004eec 	.word	0x20004eec
 800ab88:	20004edc 	.word	0x20004edc
 800ab8c:	20004ed0 	.word	0x20004ed0
 800ab90:	20004ee0 	.word	0x20004ee0
 800ab94:	20004ee4 	.word	0x20004ee4

0800ab98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d04f      	beq.n	800ac4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abaa:	2308      	movs	r3, #8
 800abac:	425b      	negs	r3, r3
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4413      	add	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	4b25      	ldr	r3, [pc, #148]	@ (800ac54 <vPortFree+0xbc>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4013      	ands	r3, r2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <vPortFree+0x46>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60fb      	str	r3, [r7, #12]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <vPortFree+0x66>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60bb      	str	r3, [r7, #8]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4b14      	ldr	r3, [pc, #80]	@ (800ac54 <vPortFree+0xbc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4013      	ands	r3, r2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01e      	beq.n	800ac4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11a      	bne.n	800ac4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <vPortFree+0xbc>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	401a      	ands	r2, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac24:	f7fe fb62 	bl	80092ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <vPortFree+0xc0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4413      	add	r3, r2
 800ac32:	4a09      	ldr	r2, [pc, #36]	@ (800ac58 <vPortFree+0xc0>)
 800ac34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac36:	6938      	ldr	r0, [r7, #16]
 800ac38:	f000 f874 	bl	800ad24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac3c:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <vPortFree+0xc4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	4a06      	ldr	r2, [pc, #24]	@ (800ac5c <vPortFree+0xc4>)
 800ac44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac46:	f7fe fb5f 	bl	8009308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20004eec 	.word	0x20004eec
 800ac58:	20004edc 	.word	0x20004edc
 800ac5c:	20004ee8 	.word	0x20004ee8

0800ac60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac6c:	4b27      	ldr	r3, [pc, #156]	@ (800ad0c <prvHeapInit+0xac>)
 800ac6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00c      	beq.n	800ac94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0307 	bic.w	r3, r3, #7
 800ac86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ad0c <prvHeapInit+0xac>)
 800ac90:	4413      	add	r3, r2
 800ac92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac98:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <prvHeapInit+0xb0>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <prvHeapInit+0xb0>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4413      	add	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acac:	2208      	movs	r2, #8
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1a9b      	subs	r3, r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a15      	ldr	r2, [pc, #84]	@ (800ad14 <prvHeapInit+0xb4>)
 800acc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acc2:	4b14      	ldr	r3, [pc, #80]	@ (800ad14 <prvHeapInit+0xb4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2200      	movs	r2, #0
 800acc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acca:	4b12      	ldr	r3, [pc, #72]	@ (800ad14 <prvHeapInit+0xb4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	1ad2      	subs	r2, r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ace0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <prvHeapInit+0xb4>)
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	4a0a      	ldr	r2, [pc, #40]	@ (800ad18 <prvHeapInit+0xb8>)
 800acee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	4a09      	ldr	r2, [pc, #36]	@ (800ad1c <prvHeapInit+0xbc>)
 800acf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <prvHeapInit+0xc0>)
 800acfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800acfe:	601a      	str	r2, [r3, #0]
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	200012d0 	.word	0x200012d0
 800ad10:	20004ed0 	.word	0x20004ed0
 800ad14:	20004ed8 	.word	0x20004ed8
 800ad18:	20004ee0 	.word	0x20004ee0
 800ad1c:	20004edc 	.word	0x20004edc
 800ad20:	20004eec 	.word	0x20004eec

0800ad24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad2c:	4b28      	ldr	r3, [pc, #160]	@ (800add0 <prvInsertBlockIntoFreeList+0xac>)
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e002      	b.n	800ad38 <prvInsertBlockIntoFreeList+0x14>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d8f7      	bhi.n	800ad32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d108      	bne.n	800ad66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	441a      	add	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	441a      	add	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d118      	bne.n	800adac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b15      	ldr	r3, [pc, #84]	@ (800add4 <prvInsertBlockIntoFreeList+0xb0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d00d      	beq.n	800ada2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	441a      	add	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	e008      	b.n	800adb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ada2:	4b0c      	ldr	r3, [pc, #48]	@ (800add4 <prvInsertBlockIntoFreeList+0xb0>)
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	e003      	b.n	800adb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d002      	beq.n	800adc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc2:	bf00      	nop
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	20004ed0 	.word	0x20004ed0
 800add4:	20004ed8 	.word	0x20004ed8

0800add8 <memset>:
 800add8:	4402      	add	r2, r0
 800adda:	4603      	mov	r3, r0
 800addc:	4293      	cmp	r3, r2
 800adde:	d100      	bne.n	800ade2 <memset+0xa>
 800ade0:	4770      	bx	lr
 800ade2:	f803 1b01 	strb.w	r1, [r3], #1
 800ade6:	e7f9      	b.n	800addc <memset+0x4>

0800ade8 <strncpy>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	3901      	subs	r1, #1
 800adec:	4603      	mov	r3, r0
 800adee:	b132      	cbz	r2, 800adfe <strncpy+0x16>
 800adf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800adf4:	f803 4b01 	strb.w	r4, [r3], #1
 800adf8:	3a01      	subs	r2, #1
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d1f7      	bne.n	800adee <strncpy+0x6>
 800adfe:	441a      	add	r2, r3
 800ae00:	2100      	movs	r1, #0
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d100      	bne.n	800ae08 <strncpy+0x20>
 800ae06:	bd10      	pop	{r4, pc}
 800ae08:	f803 1b01 	strb.w	r1, [r3], #1
 800ae0c:	e7f9      	b.n	800ae02 <strncpy+0x1a>
	...

0800ae10 <__libc_init_array>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	4d0d      	ldr	r5, [pc, #52]	@ (800ae48 <__libc_init_array+0x38>)
 800ae14:	4c0d      	ldr	r4, [pc, #52]	@ (800ae4c <__libc_init_array+0x3c>)
 800ae16:	1b64      	subs	r4, r4, r5
 800ae18:	10a4      	asrs	r4, r4, #2
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	42a6      	cmp	r6, r4
 800ae1e:	d109      	bne.n	800ae34 <__libc_init_array+0x24>
 800ae20:	4d0b      	ldr	r5, [pc, #44]	@ (800ae50 <__libc_init_array+0x40>)
 800ae22:	4c0c      	ldr	r4, [pc, #48]	@ (800ae54 <__libc_init_array+0x44>)
 800ae24:	f000 f826 	bl	800ae74 <_init>
 800ae28:	1b64      	subs	r4, r4, r5
 800ae2a:	10a4      	asrs	r4, r4, #2
 800ae2c:	2600      	movs	r6, #0
 800ae2e:	42a6      	cmp	r6, r4
 800ae30:	d105      	bne.n	800ae3e <__libc_init_array+0x2e>
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae38:	4798      	blx	r3
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	e7ee      	b.n	800ae1c <__libc_init_array+0xc>
 800ae3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae42:	4798      	blx	r3
 800ae44:	3601      	adds	r6, #1
 800ae46:	e7f2      	b.n	800ae2e <__libc_init_array+0x1e>
 800ae48:	0800b02c 	.word	0x0800b02c
 800ae4c:	0800b02c 	.word	0x0800b02c
 800ae50:	0800b02c 	.word	0x0800b02c
 800ae54:	0800b030 	.word	0x0800b030

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <_init>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	bf00      	nop
 800ae78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7a:	bc08      	pop	{r3}
 800ae7c:	469e      	mov	lr, r3
 800ae7e:	4770      	bx	lr

0800ae80 <_fini>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	bf00      	nop
 800ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae86:	bc08      	pop	{r3}
 800ae88:	469e      	mov	lr, r3
 800ae8a:	4770      	bx	lr
